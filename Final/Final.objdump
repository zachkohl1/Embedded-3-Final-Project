
Final.elf:     file format elf32-littlenios2
Final.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000185fc memsz 0x000185fc flags r-x
    LOAD off    0x0001961c vaddr 0x0001861c paddr 0x0001a250 align 2**12
         filesz 0x00001c34 memsz 0x00001c34 flags rw-
    LOAD off    0x0001be84 vaddr 0x0001be84 paddr 0x0001be84 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017fc0  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000042c  000181f0  000181f0  000191f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c34  0001861c  0001a250  0001961c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  0001be84  0001be84  0001be84  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0001c174  0001c174  0001b250  2**0
                  CONTENTS
  7 .Onchip_SRAM  00000000  08000000  08000000  0001b250  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001b250  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011b8  00000000  00000000  0001b278  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002cd5d  00000000  00000000  0001c430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b299  00000000  00000000  0004918d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ee2e  00000000  00000000  00054426  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003420  00000000  00000000  00063254  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005044  00000000  00000000  00066674  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001cdee  00000000  00000000  0006b6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000884a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b58  00000000  00000000  000884e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008e8ae  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0008e8b1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008e8b6  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008e8b7  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008e8b8  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008e8bc  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008e8c0  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008e8c4  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008e8cd  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008e8d6  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0008e8df  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005f  00000000  00000000  0008e8ee  2**0
                  CONTENTS, READONLY
 30 .jdi          00007beb  00000000  00000000  0008e94d  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000cd470  00000000  00000000  00096538  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
000181f0 l    d  .rodata	00000000 .rodata
0001861c l    d  .rwdata	00000000 .rwdata
0001be84 l    d  .bss	00000000 .bss
0001c174 l    d  .SDRAM	00000000 .SDRAM
08000000 l    d  .Onchip_SRAM	00000000 .Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 game.c
0001be8c l     O .bss	00000004 level_count
0001a1ec l     O .rwdata	00000004 num_enemies
0001a1f0 l     O .rwdata	00000004 end_position
000181f0 l     O .rodata	0000000a enemy_colors
0001861c l     O .rwdata	00000014 level_names
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 hex_display.c
00000000 l    df *ABS*	00000000 joystick.c
00000000 l    df *ABS*	00000000 lcd.c
0001beac l     O .bss	00000004 x
0001beb0 l     O .bss	00000004 y
0001beb4 l     O .bss	00000002 xtouch
0001beb6 l     O .bss	00000002 ytouch
0001bebc l     O .bss	00000004 color_index.3456
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000182ae l     O .rodata	00000010 zeroes.4389
000182be l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
000182ce l     O .rodata	00000010 zeroes.4404
000066f0 l     F .text	000000bc __sbprintf
000182de l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00006900 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008458 l     F .text	00000008 __fp_unlock
0000846c l     F .text	0000019c __sinit.part.1
00008608 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
00018a48 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00018e8c l     O .rwdata	00000020 lc_ctype_charset
00018e6c l     O .rwdata	00000020 lc_message_charset
00018eac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00018310 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00018434 l     O .rodata	00000010 zeroes.4333
00018444 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0000bcc0 l     F .text	000000fc __sprint_r.part.0
00018454 l     O .rodata	00000010 zeroes.4349
0000d2fc l     F .text	000000bc __sbprintf
00018464 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00011dfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00011f10 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00011f3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00012224 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001230c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000123f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000125d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001a230 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00012a1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012b58 l     F .text	00000034 alt_dev_reg
0001908c l     O .rwdata	00000038 i2c_0
000190c4 l     O .rwdata	00000038 i2c_1
000190fc l     O .rwdata	00001060 JTAG_UART
0001a15c l     O .rwdata	0000003c modular_adc_0
0001a198 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00012e34 l     F .text	00000110 optional_irq_callback
00012f94 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014c70 l     F .text	0000020c altera_avalon_jtag_uart_irq
00014e7c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000156b0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_modular_adc.c
000157a4 l     F .text	000000a8 alt_adc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00016f2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001741c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001757c l     F .text	0000003c alt_get_errno
000175b8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001bf08 g     O .bss	00000004 alt_instruction_exception_handler
0000a34c g     F .text	00000074 _mprec_log10
00015a44 g     F .text	00000050 adc_stop
0000a438 g     F .text	0000008c __any_on
0000dd78 g     F .text	00000054 _isatty_r
0001831c g     O .rodata	00000028 __mprec_tinytens
00012510 g     F .text	0000007c alt_main
00001fc4 g     F .text	00000090 strcpy
0001664c g     F .text	0000026c alt_up_pixel_buffer_dma_draw_vline
0001c074 g     O .bss	00000100 alt_irq
0000ddcc g     F .text	00000060 _lseek_r
0001a250 g       *ABS*	00000000 __flash_rwdata_start
00018630 g     O .rwdata	0000000e colors
000107d4 g     F .text	00000088 .hidden __eqdf2
00008dc4 g     F .text	0000005c _gettimeofday_r
0001c174 g       *ABS*	00000000 __alt_heap_start
00001df4 g     F .text	0000003c printf
00000aac g     F .text	000001bc hex_message
0000e6a4 g     F .text	0000009c _wcrtomb_r
0000a610 g     F .text	0000005c __sseek
000087b8 g     F .text	00000010 __sinit
0000e54c g     F .text	00000140 __swbuf_r
00008e20 g     F .text	0000007c _setlocale_r
00008610 g     F .text	00000078 __sfmoreglue
0001368c g     F .text	000000a8 alt_avalon_i2c_rx_read
000125b0 g     F .text	00000024 __malloc_unlock
00000474 g     F .text	0000013c generate_next_level
000148a4 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
000008fc g     F .text	00000040 get_end_dist
00013410 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
0001bea0 g     O .bss	00000004 joystick_y
0000de2c g     F .text	0000015c memmove
000087a0 g     F .text	00000018 _cleanup
000140f4 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
0000940c g     F .text	000000a8 _Balloc
00015d4c g     F .text	000001a8 alt_up_pixel_buffer_dma_draw
0001085c g     F .text	000000dc .hidden __gtdf2
00017a68 g     F .text	00000024 altera_nios2_gen2_irq_init
0001a1f4 g     O .rwdata	00000004 hex5_4
00015d10 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000000c __reset
00015c08 g     F .text	00000048 adc_interrupt_disable
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000d854 g     F .text	0000005c _fstat_r
0001bed0 g     O .bss	00000004 errno
0000a58c g     F .text	00000008 __seofread
0000a920 g     F .text	000013a0 ___svfiprintf_internal_r
000158f8 g     F .text	00000074 altera_modular_adc_init
0001bef4 g     O .bss	00000004 alt_argv
000221ec g       *ABS*	00000000 _gp
000129ec g     F .text	00000030 usleep
000148e8 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00015ef4 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
000135a0 g     F .text	00000044 alt_avalon_i2c_is_busy
00018f0c g     O .rwdata	00000180 alt_fd_list
00013344 g     F .text	000000cc alt_avalon_i2c_master_config_set
000170cc g     F .text	00000090 alt_find_dev
0000919c g     F .text	00000148 memcpy
00008460 g     F .text	0000000c _cleanup_r
00011c14 g     F .text	000000dc .hidden __floatsidf
00015b0c g     F .text	0000003c adc_set_mode_run_continuously
00017500 g     F .text	0000007c alt_io_redirect
00010938 g     F .text	000000f4 .hidden __ltdf2
000181f0 g       *ABS*	00000000 __DTOR_END__
00001128 g     F .text	00000040 isTouching
00013f34 g     F .text	000001c0 alt_avalon_i2c_master_transmit
00017c58 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00000720 g     F .text	00000054 end_of_level
0000a4c4 g     F .text	00000074 __fpclassifyd
0000a2a8 g     F .text	000000a4 __ratio
0000d2e0 g     F .text	0000001c __vfiprintf_internal
00015fb0 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00015074 g     F .text	0000021c altera_avalon_jtag_uart_read
00001590 g     F .text	00000014 malloc
00001dc4 g     F .text	00000030 _printf_r
000014ac g     F .text	00000064 .hidden __udivsi3
00012260 g     F .text	000000ac isatty
00000cf4 g     F .text	00000020 joystick_get_y
0001836c g     O .rodata	000000c8 __mprec_tens
00000844 g     F .text	00000044 reset_game
0000093c g     F .text	00000080 reset_enemy_cords
0001641c g     F .text	00000230 alt_up_pixel_buffer_dma_draw_hline
00008e9c g     F .text	0000000c __locale_charset
0001bee0 g     O .bss	00000008 alt_timezone
000131b0 g     F .text	00000098 alt_avalon_i2c_enable
0001becc g     O .bss	00000004 __malloc_top_pad
000147d8 g     F .text	00000068 alt_avalon_i2c_int_disable
0001a210 g     O .rwdata	00000004 __mb_cur_max
00008ecc g     F .text	0000000c _localeconv_r
0000d8b0 g     F .text	000004c8 __sfvwrite_r
00009840 g     F .text	0000003c __i2b
00000700 g     F .text	00000020 get_level
00001eac g     F .text	00000054 _sbrk_r
00016980 g     F .text	000000c0 helper_plot_pixel
0000df88 g     F .text	00000060 _read_r
0001a244 g     O .rwdata	00000008 altera_modular_adc_list
0001a228 g     O .rwdata	00000004 alt_max_fd
0000d548 g     F .text	000000f0 _fclose_r
00008428 g     F .text	00000030 fflush
0001bec8 g     O .bss	00000004 __malloc_max_sbrked_mem
00014300 g     F .text	00000210 alt_avalon_i2c_master_receive
0000f558 g     F .text	000008ac .hidden __adddf3
0000a050 g     F .text	0000010c __b2d
00015fe4 g     F .text	0000013c alt_up_pixel_buffer_dma_clear_screen
0000ef94 g     F .text	000005c4 .hidden __umoddi3
00012434 g     F .text	000000dc lseek
0001a1f8 g     O .rwdata	00000004 hex3_0
00014840 g     F .text	00000064 alt_avalon_i2c_int_enable
0001a208 g     O .rwdata	00000004 _global_impure_ptr
0000dfe8 g     F .text	00000564 _realloc_r
0001c174 g       *ABS*	00000000 __bss_end
0001732c g     F .text	000000f0 alt_iic_isr_register
00016120 g     F .text	000002fc alt_up_pixel_buffer_dma_draw_box
000128e4 g     F .text	00000108 alt_tick
0000e998 g     F .text	000005fc .hidden __udivdi3
00014700 g     F .text	00000058 alt_avalon_i2c_int_status_get
0000d7b0 g     F .text	00000024 _fputwc_r
00015cd4 g     F .text	0000003c adc_wait_for_interrupt
00018344 g     O .rodata	00000028 __mprec_bigtens
00009624 g     F .text	00000104 __s2b
00011cf0 g     F .text	000000a8 .hidden __floatunsidf
00009d90 g     F .text	00000060 __mcmp
000087d8 g     F .text	00000018 __fp_lock_all
000172e0 g     F .text	0000004c alt_ic_irq_enabled
00012848 g     F .text	0000009c alt_alarm_stop
00013030 g     F .text	00000054 alt_avalon_i2c_register_callback
0001bf04 g     O .bss	00000004 alt_irq_active
00013084 g     F .text	000000ec alt_avalon_i2c_init
000000fc g     F .exceptions	000000d4 alt_irq_handler
00018ee4 g     O .rwdata	00000028 alt_dev_null
00015acc g     F .text	00000040 adc_set_mode_run_once
00016f0c g     F .text	00000020 alt_dcache_flush_all
00009728 g     F .text	00000068 __hi0bits
000168b8 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
00011b94 g     F .text	00000080 .hidden __fixdfsi
000002ac g     F .text	00000090 adc_read
0001a250 g       *ABS*	00000000 __ram_rwdata_end
0001a220 g     O .rwdata	00000008 alt_dev_list
00012a58 g     F .text	00000100 write
00017dbc g     F .text	000000a0 _putc_r
000139c0 g     F .text	0000004c alt_avalon_i2c_check_arblost
0001a1fc g     O .rwdata	00000004 num_colors
00016a40 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
0001479c g     F .text	0000003c alt_avalon_i2c_int_clear
0001861c g       *ABS*	00000000 __ram_rodata_end
00011f78 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00010938 g     F .text	000000f4 .hidden __ledf2
00000d34 g     F .text	00000020 joystick_get_offset_y
0001a23c g     O .rwdata	00000008 alt_avalon_i2c_list
00009b08 g     F .text	00000140 __pow5mult
00015a94 g     F .text	00000038 adc_start
0000bdd4 g     F .text	0000150c ___vfiprintf_internal_r
0001bedc g     O .bss	00000004 __nlocale_changed
00001510 g     F .text	00000058 .hidden __umodsi3
0001c174 g       *ABS*	00000000 end
0000138c g     F .text	00000028 reset_player_cords
0001bec0 g     O .bss	00000004 lt24
00014bb0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00013170 g     F .text	00000040 alt_avalon_i2c_open
0001bea4 g     O .bss	00000004 joystick_x
000181f0 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00013b48 g     F .text	000000e8 alt_avalon_i2c_master_tx
00015728 g     F .text	0000007c alt_avalon_timer_sc_init
00011d98 g     F .text	00000064 .hidden __clzsi2
00015290 g     F .text	00000224 altera_avalon_jtag_uart_write
000087c8 g     F .text	00000004 __sfp_lock_acquire
000090b8 g     F .text	000000e4 memchr
000043f8 g     F .text	000022dc ___vfprintf_internal_r
00001f00 g     F .text	00000058 _sprintf_r
0000892c g     F .text	00000310 _free_r
00017800 g     F .text	0000022c alt_printf
00008ea8 g     F .text	00000010 __locale_mb_cur_max
0001803c g     F .text	00000180 __call_exitprocs
0001bed8 g     O .bss	00000004 __mlocale_changed
00012f44 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0001a200 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
0001bf34 g     O .bss	00000078 xcord
0001befc g     O .bss	00000004 _alt_tick_rate
00000888 g     F .text	00000074 countdown
00014510 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
00001e48 g     F .text	00000064 rand
00014934 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00009c48 g     F .text	00000148 __lshift
000154b4 g     F .text	000001fc alt_avalon_spi_command
0001bf00 g     O .bss	00000004 _alt_nticks
00012610 g     F .text	00000104 read
00012bc4 g     F .text	00000270 alt_sys_init
0000a750 g     F .text	000001d0 __ssprint_r
00017f24 g     F .text	00000118 __register_exitproc
00000e10 g     F .text	000000b8 draw_box_and_follow
00000f9c g     F .text	0000018c follow_touch
00013d6c g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0000987c g     F .text	0000028c __multiply
00014f1c g     F .text	00000068 altera_avalon_jtag_uart_close
000005b0 g     F .text	00000150 player_touching_enemy
00001568 g     F .text	00000028 .hidden __mulsi3
0001861c g       *ABS*	00000000 __ram_rwdata_start
000181f0 g       *ABS*	00000000 __ram_rodata_start
0001bf0c g     O .bss	00000028 __malloc_current_mallinfo
0000a15c g     F .text	0000014c __d2b
00000c68 g     F .text	0000006c joystick_read
00000ec8 g     F .text	000000d4 follow_joystick
00014a4c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00017b94 g     F .text	000000c4 alt_get_fd
00016db4 g     F .text	00000158 alt_busy_sleep
0000d418 g     F .text	00000054 _close_r
00000774 g     F .text	000000d0 draw_en
00017d40 g     F .text	0000007c memcmp
000135e4 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00014b0c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001c174 g       *ABS*	00000000 __alt_stack_base
00014b5c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000012a0 g     F .text	00000074 draw_box
000067ac g     F .text	00000154 __swsetup_r
00015bc4 g     F .text	00000044 adc_interrupt_enable
0000fe04 g     F .text	000009d0 .hidden __divdf3
00008688 g     F .text	00000118 __sfp
0000a3c0 g     F .text	00000078 __copybits
00018640 g     O .rwdata	00000408 __malloc_av_
000087d4 g     F .text	00000004 __sinit_lock_release
00010a2c g     F .text	0000086c .hidden __muldf3
0001be98 g     O .bss	00000004 offset_x
0000a538 g     F .text	00000054 __sread
00017a8c g     F .text	00000108 alt_find_file
00016f68 g     F .text	000000a4 alt_dev_llist_insert
0001258c g     F .text	00000024 __malloc_lock
00012798 g     F .text	000000b0 sbrk
000020ec g     F .text	000022bc ___svfprintf_internal_r
00013a0c g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00013974 g     F .text	0000004c alt_avalon_i2c_check_nack
000083cc g     F .text	0000005c _fflush_r
0000d46c g     F .text	000000dc _calloc_r
00012030 g     F .text	000001f4 gettimeofday
0000136c g     F .text	00000020 get_player_y
0001be84 g       *ABS*	00000000 __bss_start
000092e4 g     F .text	00000128 memset
00000d54 g     F .text	000000bc lcd_init
000009bc g     F .text	000000f0 main
00013940 g     F .text	00000034 alt_avalon_i2c_master_target_set
0001bef8 g     O .bss	00000004 alt_envp
0001bec4 g     O .bss	00000004 __malloc_max_total_mem
00015f50 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
0001bea8 g     O .bss	00000004 adc_data
00014aac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e68c g     F .text	00000018 __swbuf
00001e30 g     F .text	00000018 srand
00014758 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0001584c g     F .text	000000ac alt_adc_word_read
0000a66c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000d638 g     F .text	00000014 fclose
00006b28 g     F .text	00001688 _dtoa_r
000015b8 g     F .text	0000080c _malloc_r
0000e800 g     F .text	00000030 __ascii_wctomb
000043a8 g     F .text	00000050 time
0001a22c g     O .rwdata	00000004 alt_errno
00008c3c g     F .text	000000c4 _fwalk
0001beb8 g     O .bss	00000004 screen_drawn
00017e5c g     F .text	000000c8 putc
000013b4 g     F .text	00000084 .hidden __divsi3
00008808 g     F .text	00000124 _malloc_trim_r
000181f0 g       *ABS*	00000000 __CTOR_END__
0001be84 g     O .bss	00000008 readings
0000a674 g     F .text	000000dc strcmp
000181f0 g       *ABS*	00000000 __flash_rodata_start
000181f0 g       *ABS*	00000000 __DTOR_LIST__
000107d4 g     F .text	00000088 .hidden __nedf2
00012b8c g     F .text	00000038 alt_irq_init
00012714 g     F .text	00000084 alt_release_fd
00001f58 g     F .text	0000006c sprintf
00018474 g     O .rodata	00000100 .hidden __clz_tab
0001bed4 g     O .bss	00000004 _PathLocale
00017cf4 g     F .text	00000014 atexit
0000d3b8 g     F .text	00000060 _write_r
00008ed8 g     F .text	00000018 setlocale
0001a20c g     O .rwdata	00000004 _impure_ptr
0001bef0 g     O .bss	00000004 alt_argc
0000026c g     F .text	00000040 adc_init
000081b0 g     F .text	0000021c __sflush_r
0001706c g     F .text	00000060 _do_dtors
00008ec4 g     F .text	00000008 __locale_cjk_lang
00013908 g     F .text	00000038 alt_avalon_i2c_master_target_get
00013818 g     F .text	000000f0 alt_avalon_i2c_send_address
00000020 g       .exceptions	00000000 alt_irq_entry
00009fec g     F .text	00000064 __ulp
000087f0 g     F .text	00000018 __fp_unlock_all
0001a218 g     O .rwdata	00000008 alt_fs_list
0000033c g     F .text	00000138 tetris_init
0001bee8 g     O .bss	00000008 alt_resettime
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008ef0 g     F .text	0000000c localeconv
000149e4 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0001717c g     F .text	00000050 alt_ic_isr_register
00013248 g     F .text	0000004c alt_avalon_i2c_disable
0001a250 g       *ABS*	00000000 _edata
0001c174 g       *ABS*	00000000 _end
00015c94 g     F .text	00000040 adc_interrupt_asserted
0000d64c g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
00014f84 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001be90 g     O .bss	00000006 str
08000000 g       *ABS*	00000000 __alt_mem_Onchip_SRAM
00013294 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00017254 g     F .text	0000008c alt_ic_irq_disable
0000a594 g     F .text	0000007c __swrite
00000cd4 g     F .text	00000020 joystick_get_x
0001a204 g     O .rwdata	00000004 __malloc_trim_threshold
00015c50 g     F .text	00000044 adc_clear_interrupt_status
00008eb8 g     F .text	0000000c __locale_msgcharset
00017d08 g     F .text	00000038 exit
00008d00 g     F .text	000000c4 _fwalk_reent
00009df0 g     F .text	000001fc __mdiff
00001438 g     F .text	00000074 .hidden __modsi3
0001bfac g     O .bss	00000078 ycord
00000d14 g     F .text	00000020 joystick_get_offset_x
0001c024 g     O .bss	00000050 level_info
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000087cc g     F .text	00000004 __sfp_lock_release
000134a4 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00013734 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00015a04 g     F .text	00000040 altera_modular_adc_open
000181bc g     F .text	00000034 _exit
00016c88 g     F .text	0000012c alt_alarm_start
0000e88c g     F .text	0000010c .hidden __muldi3
00008efc g     F .text	000001bc __smakebuf_r
00002054 g     F .text	00000098 strlen
000176a4 g     F .text	0000015c open
0001085c g     F .text	000000dc .hidden __gedf2
00017a2c g     F .text	0000003c alt_putchar
00015b48 g     F .text	0000007c adc_recalibrate
0001a214 g     O .rwdata	00000004 __wctomb
0000bdbc g     F .text	00000018 __sprint_r
0001715c g     F .text	00000020 alt_icache_flush_all
0001a24c g     O .rwdata	00000004 alt_priority_mask
000171cc g     F .text	00000088 alt_ic_irq_enable
000066d4 g     F .text	0000001c __vfprintf_internal
0000e830 g     F .text	0000005c _wctomb_r
00001168 g     F .text	00000138 draw_touch
00001314 g     F .text	00000038 clear_screen
00011298 g     F .text	000008fc .hidden __subdf3
0000134c g     F .text	00000020 get_player_x
00009790 g     F .text	000000b0 __lo0bits
0001a234 g     O .rwdata	00000008 alt_alarm_list
0001700c g     F .text	00000060 _do_ctors
0000e740 g     F .text	000000c0 wcrtomb
00011e38 g     F .text	000000d8 close
0001be9c g     O .bss	00000004 offset_y
00014998 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00012374 g     F .text	00000084 alt_load
00013c30 g     F .text	0000013c alt_avalon_i2c_master_rx
0000d7d4 g     F .text	00000080 fputwc
0001596c g     F .text	00000098 alt_adc_register_callback
000015a4 g     F .text	00000014 free
000087d0 g     F .text	00000004 __sinit_lock_acquire
000094dc g     F .text	00000148 __multadd
000094b4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10b01d04 	addi	r2,r2,-16268
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10b01d04 	addi	r2,r2,-16268
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_Onchip_SRAM+0xf800012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_Onchip_SRAM+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a74717 	ldw	r2,-25316(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a74717 	ldw	r2,-25316(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     23c:	d6887b14 	ori	gp,gp,8684
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10afa114 	ori	r2,r2,48772

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18f05d14 	ori	r3,r3,49524

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_mem_Onchip_SRAM+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00123740 	call	12374 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00125100 	call	12510 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_mem_Onchip_SRAM+0xf8000268>

0000026c <adc_init>:
#include "adc.h"

//Sequencer data
int readings[2];

void adc_init(void){
     26c:	defffe04 	addi	sp,sp,-8
     270:	dfc00115 	stw	ra,4(sp)
     274:	df000015 	stw	fp,0(sp)
     278:	d839883a 	mov	fp,sp
	adc_set_mode_run_continuously(MODULAR_ADC_0_SEQUENCER_CSR_BASE);
     27c:	013fc834 	movhi	r4,65312
     280:	21104004 	addi	r4,r4,16640
     284:	0015b0c0 	call	15b0c <adc_set_mode_run_continuously>
	adc_start(MODULAR_ADC_0_SEQUENCER_CSR_BASE);
     288:	013fc834 	movhi	r4,65312
     28c:	21104004 	addi	r4,r4,16640
     290:	0015a940 	call	15a94 <adc_start>
}
     294:	0001883a 	nop
     298:	e037883a 	mov	sp,fp
     29c:	dfc00117 	ldw	ra,4(sp)
     2a0:	df000017 	ldw	fp,0(sp)
     2a4:	dec00204 	addi	sp,sp,8
     2a8:	f800283a 	ret

000002ac <adc_read>:

////Returns the last 2 conversions
int* adc_read(void){
     2ac:	defffd04 	addi	sp,sp,-12
     2b0:	dfc00215 	stw	ra,8(sp)
     2b4:	df000115 	stw	fp,4(sp)
     2b8:	df000104 	addi	fp,sp,4
	alt_adc_word_read(MODULAR_ADC_0_SAMPLE_STORE_CSR_BASE,readings,2);
     2bc:	01800084 	movi	r6,2
     2c0:	d1672604 	addi	r5,gp,-25448
     2c4:	013fc834 	movhi	r4,65312
     2c8:	21108004 	addi	r4,r4,16896
     2cc:	001584c0 	call	1584c <alt_adc_word_read>

	//Make 8-bit data
	for(int i = 0; i <= 1; i++){
     2d0:	e03fff15 	stw	zero,-4(fp)
     2d4:	00001006 	br	318 <adc_read+0x6c>
		readings[i] = readings[i] >> 4;
     2d8:	e0bfff17 	ldw	r2,-4(fp)
     2dc:	1085883a 	add	r2,r2,r2
     2e0:	1087883a 	add	r3,r2,r2
     2e4:	d0a72604 	addi	r2,gp,-25448
     2e8:	1885883a 	add	r2,r3,r2
     2ec:	10800017 	ldw	r2,0(r2)
     2f0:	1007d13a 	srai	r3,r2,4
     2f4:	e0bfff17 	ldw	r2,-4(fp)
     2f8:	1085883a 	add	r2,r2,r2
     2fc:	1089883a 	add	r4,r2,r2
     300:	d0a72604 	addi	r2,gp,-25448
     304:	2085883a 	add	r2,r4,r2
     308:	10c00015 	stw	r3,0(r2)
////Returns the last 2 conversions
int* adc_read(void){
	alt_adc_word_read(MODULAR_ADC_0_SAMPLE_STORE_CSR_BASE,readings,2);

	//Make 8-bit data
	for(int i = 0; i <= 1; i++){
     30c:	e0bfff17 	ldw	r2,-4(fp)
     310:	10800044 	addi	r2,r2,1
     314:	e0bfff15 	stw	r2,-4(fp)
     318:	e0bfff17 	ldw	r2,-4(fp)
     31c:	10800090 	cmplti	r2,r2,2
     320:	103fed1e 	bne	r2,zero,2d8 <__alt_mem_Onchip_SRAM+0xf80002d8>
		readings[i] = readings[i] >> 4;
	}
	return readings;
     324:	d0a72604 	addi	r2,gp,-25448
}
     328:	e037883a 	mov	sp,fp
     32c:	dfc00117 	ldw	ra,4(sp)
     330:	df000017 	ldw	fp,0(sp)
     334:	dec00204 	addi	sp,sp,8
     338:	f800283a 	ret

0000033c <tetris_init>:
};

/**
 * Populates the struct with values and sets constants
 */
int tetris_init(void){
     33c:	defffd04 	addi	sp,sp,-12
     340:	dfc00215 	stw	ra,8(sp)
     344:	df000115 	stw	fp,4(sp)
     348:	df000104 	addi	fp,sp,4
	level_count = 0;
     34c:	d0272815 	stw	zero,-25440(gp)
	srand(time(NULL));   // Initialization for rand. num
     350:	0009883a 	mov	r4,zero
     354:	00043a80 	call	43a8 <time>
     358:	1009883a 	mov	r4,r2
     35c:	0001e300 	call	1e30 <srand>

	for (int i = 0; i < NUM_LEVELS; i++) {
     360:	e03fff15 	stw	zero,-4(fp)
     364:	00003906 	br	44c <tetris_init+0x110>

		strcpy(level_info.level_hex[i], level_names[i]);
     368:	01400184 	movi	r5,6
     36c:	e13fff17 	ldw	r4,-4(fp)
     370:	00015680 	call	1568 <__mulsi3>
     374:	1007883a 	mov	r3,r2
     378:	008000b4 	movhi	r2,2
     37c:	10b00904 	addi	r2,r2,-16348
     380:	1889883a 	add	r4,r3,r2
     384:	008000b4 	movhi	r2,2
     388:	10a18704 	addi	r2,r2,-31204
     38c:	e0ffff17 	ldw	r3,-4(fp)
     390:	18c7883a 	add	r3,r3,r3
     394:	18c7883a 	add	r3,r3,r3
     398:	10c5883a 	add	r2,r2,r3
     39c:	10800017 	ldw	r2,0(r2)
     3a0:	100b883a 	mov	r5,r2
     3a4:	0001fc40 	call	1fc4 <strcpy>

		// Add enemy color. Cycles through array
		level_info.enemy_color[i] = enemy_colors[i];
     3a8:	008000b4 	movhi	r2,2
     3ac:	10a07c04 	addi	r2,r2,-32272
     3b0:	e0ffff17 	ldw	r3,-4(fp)
     3b4:	18c7883a 	add	r3,r3,r3
     3b8:	10c5883a 	add	r2,r2,r3
     3bc:	1100000b 	ldhu	r4,0(r2)
     3c0:	008000b4 	movhi	r2,2
     3c4:	10b00904 	addi	r2,r2,-16348
     3c8:	e0ffff17 	ldw	r3,-4(fp)
     3cc:	18c00384 	addi	r3,r3,14
     3d0:	18c7883a 	add	r3,r3,r3
     3d4:	10c5883a 	add	r2,r2,r3
     3d8:	10800084 	addi	r2,r2,2
     3dc:	1100000d 	sth	r4,0(r2)

		// Add number of enemies. Increase by 5
		level_info.num_enemies[i] = num_enemies+=5;
     3e0:	d0a00017 	ldw	r2,-32768(gp)
     3e4:	10800144 	addi	r2,r2,5
     3e8:	d0a00015 	stw	r2,-32768(gp)
     3ec:	d1200017 	ldw	r4,-32768(gp)
     3f0:	008000b4 	movhi	r2,2
     3f4:	10b00904 	addi	r2,r2,-16348
     3f8:	e0ffff17 	ldw	r3,-4(fp)
     3fc:	18c00284 	addi	r3,r3,10
     400:	18c7883a 	add	r3,r3,r3
     404:	18c7883a 	add	r3,r3,r3
     408:	10c5883a 	add	r2,r2,r3
     40c:	11000015 	stw	r4,0(r2)

		// Add ending location. Decrease by 10 (lower to bottom)
		level_info.end_location[i] = end_position += 20;
     410:	d0a00117 	ldw	r2,-32764(gp)
     414:	10800504 	addi	r2,r2,20
     418:	d0a00115 	stw	r2,-32764(gp)
     41c:	d1200117 	ldw	r4,-32764(gp)
     420:	008000b4 	movhi	r2,2
     424:	10b00904 	addi	r2,r2,-16348
     428:	e0ffff17 	ldw	r3,-4(fp)
     42c:	18c003c4 	addi	r3,r3,15
     430:	18c7883a 	add	r3,r3,r3
     434:	18c7883a 	add	r3,r3,r3
     438:	10c5883a 	add	r2,r2,r3
     43c:	11000015 	stw	r4,0(r2)
 */
int tetris_init(void){
	level_count = 0;
	srand(time(NULL));   // Initialization for rand. num

	for (int i = 0; i < NUM_LEVELS; i++) {
     440:	e0bfff17 	ldw	r2,-4(fp)
     444:	10800044 	addi	r2,r2,1
     448:	e0bfff15 	stw	r2,-4(fp)
     44c:	e0bfff17 	ldw	r2,-4(fp)
     450:	10800150 	cmplti	r2,r2,5
     454:	103fc41e 	bne	r2,zero,368 <__alt_mem_Onchip_SRAM+0xf8000368>
		// Add ending location. Decrease by 10 (lower to bottom)
		level_info.end_location[i] = end_position += 20;
	}

	//Fill enemy X and Y coordinates with sentinel values
	reset_enemy_cords();
     458:	000093c0 	call	93c <reset_enemy_cords>

	return 0;
     45c:	0005883a 	mov	r2,zero
}
     460:	e037883a 	mov	sp,fp
     464:	dfc00117 	ldw	ra,4(sp)
     468:	df000017 	ldw	fp,0(sp)
     46c:	dec00204 	addi	sp,sp,8
     470:	f800283a 	ret

00000474 <generate_next_level>:

/**
 * Generates a new level. 5 is the max, and each time, the horizontal line gets closer to the top
 * and the "enemy" blocks are faster
 */
int generate_next_level(void){
     474:	defffb04 	addi	sp,sp,-20
     478:	dfc00415 	stw	ra,16(sp)
     47c:	df000315 	stw	fp,12(sp)
     480:	df000304 	addi	fp,sp,12
	clear_screen();
     484:	00013140 	call	1314 <clear_screen>
	//Increase Level counter.
	level_count++;
     488:	d0a72817 	ldw	r2,-25440(gp)
     48c:	10800044 	addi	r2,r2,1
     490:	d0a72815 	stw	r2,-25440(gp)

	//Display level on Hex displays, decrement level_count to index at 0
	hex_message(level_info.level_hex[level_count-1]);
     494:	d0a72817 	ldw	r2,-25440(gp)
     498:	10bfffc4 	addi	r2,r2,-1
     49c:	01400184 	movi	r5,6
     4a0:	1009883a 	mov	r4,r2
     4a4:	00015680 	call	1568 <__mulsi3>
     4a8:	1007883a 	mov	r3,r2
     4ac:	008000b4 	movhi	r2,2
     4b0:	10b00904 	addi	r2,r2,-16348
     4b4:	1885883a 	add	r2,r3,r2
     4b8:	1009883a 	mov	r4,r2
     4bc:	0000aac0 	call	aac <hex_message>

	//Draw enemies at random x and y locations. Are stationary
	for(int i = 0; i < level_info.num_enemies[level_count-1]; i++){
     4c0:	e03ffd15 	stw	zero,-12(fp)
     4c4:	00002906 	br	56c <generate_next_level+0xf8>
		//Only draw if not a sentinel value

		//Enemies are 10 x 10 boxes with random positive coordinates on screen
		int x = rand()%(width-10)+1;
     4c8:	0001e480 	call	1e48 <rand>
     4cc:	01404d84 	movi	r5,310
     4d0:	1009883a 	mov	r4,r2
     4d4:	00014380 	call	1438 <__modsi3>
     4d8:	10800044 	addi	r2,r2,1
     4dc:	e0bffe15 	stw	r2,-8(fp)
		int y = rand()%(level_info.end_location[level_count-1]-10)+1;
     4e0:	0001e480 	call	1e48 <rand>
     4e4:	1009883a 	mov	r4,r2
     4e8:	d0a72817 	ldw	r2,-25440(gp)
     4ec:	10ffffc4 	addi	r3,r2,-1
     4f0:	008000b4 	movhi	r2,2
     4f4:	10b00904 	addi	r2,r2,-16348
     4f8:	18c003c4 	addi	r3,r3,15
     4fc:	18c7883a 	add	r3,r3,r3
     500:	18c7883a 	add	r3,r3,r3
     504:	10c5883a 	add	r2,r2,r3
     508:	10800017 	ldw	r2,0(r2)
     50c:	10bffd84 	addi	r2,r2,-10
     510:	100b883a 	mov	r5,r2
     514:	00014380 	call	1438 <__modsi3>
     518:	10800044 	addi	r2,r2,1
     51c:	e0bfff15 	stw	r2,-4(fp)

		//Update Arrays
		xcord[i] = x;
     520:	008000b4 	movhi	r2,2
     524:	10afcd04 	addi	r2,r2,-16588
     528:	e0fffd17 	ldw	r3,-12(fp)
     52c:	18c7883a 	add	r3,r3,r3
     530:	18c7883a 	add	r3,r3,r3
     534:	10c5883a 	add	r2,r2,r3
     538:	e0fffe17 	ldw	r3,-8(fp)
     53c:	10c00015 	stw	r3,0(r2)
		ycord[i] = y;
     540:	008000b4 	movhi	r2,2
     544:	10afeb04 	addi	r2,r2,-16468
     548:	e0fffd17 	ldw	r3,-12(fp)
     54c:	18c7883a 	add	r3,r3,r3
     550:	18c7883a 	add	r3,r3,r3
     554:	10c5883a 	add	r2,r2,r3
     558:	e0ffff17 	ldw	r3,-4(fp)
     55c:	10c00015 	stw	r3,0(r2)

	//Display level on Hex displays, decrement level_count to index at 0
	hex_message(level_info.level_hex[level_count-1]);

	//Draw enemies at random x and y locations. Are stationary
	for(int i = 0; i < level_info.num_enemies[level_count-1]; i++){
     560:	e0bffd17 	ldw	r2,-12(fp)
     564:	10800044 	addi	r2,r2,1
     568:	e0bffd15 	stw	r2,-12(fp)
     56c:	d0a72817 	ldw	r2,-25440(gp)
     570:	10ffffc4 	addi	r3,r2,-1
     574:	008000b4 	movhi	r2,2
     578:	10b00904 	addi	r2,r2,-16348
     57c:	18c00284 	addi	r3,r3,10
     580:	18c7883a 	add	r3,r3,r3
     584:	18c7883a 	add	r3,r3,r3
     588:	10c5883a 	add	r2,r2,r3
     58c:	10800017 	ldw	r2,0(r2)
     590:	e0fffd17 	ldw	r3,-12(fp)
     594:	18bfcc16 	blt	r3,r2,4c8 <__alt_mem_Onchip_SRAM+0xf80004c8>
		//Update Arrays
		xcord[i] = x;
		ycord[i] = y;

	}
	return 0;
     598:	0005883a 	mov	r2,zero
}
     59c:	e037883a 	mov	sp,fp
     5a0:	dfc00117 	ldw	ra,4(sp)
     5a4:	df000017 	ldw	fp,0(sp)
     5a8:	dec00204 	addi	sp,sp,8
     5ac:	f800283a 	ret

000005b0 <player_touching_enemy>:

/**
 * Returns -1 if touching enemy
 */
int player_touching_enemy(int x, int y){
     5b0:	defff804 	addi	sp,sp,-32
     5b4:	df000715 	stw	fp,28(sp)
     5b8:	df000704 	addi	fp,sp,28
     5bc:	e13ffe15 	stw	r4,-8(fp)
     5c0:	e17fff15 	stw	r5,-4(fp)
	int player_box_right = x + 10; // Rightmost x-coordinate of player's box
     5c4:	e0bffe17 	ldw	r2,-8(fp)
     5c8:	10800284 	addi	r2,r2,10
     5cc:	e0bffa15 	stw	r2,-24(fp)
	int player_box_bottom = y + 10; // Bottommost y-coordinate of player's box
     5d0:	e0bfff17 	ldw	r2,-4(fp)
     5d4:	10800284 	addi	r2,r2,10
     5d8:	e0bffb15 	stw	r2,-20(fp)

	for(int i = 0; i < MAX_ENEMIES; i++){
     5dc:	e03ff915 	stw	zero,-28(fp)
     5e0:	00003f06 	br	6e0 <player_touching_enemy+0x130>
		// Determine if the current value is not a sentinel value
		if(xcord[i] < 0 || ycord[i] < 0){
     5e4:	008000b4 	movhi	r2,2
     5e8:	10afcd04 	addi	r2,r2,-16588
     5ec:	e0fff917 	ldw	r3,-28(fp)
     5f0:	18c7883a 	add	r3,r3,r3
     5f4:	18c7883a 	add	r3,r3,r3
     5f8:	10c5883a 	add	r2,r2,r3
     5fc:	10800017 	ldw	r2,0(r2)
     600:	10003a16 	blt	r2,zero,6ec <player_touching_enemy+0x13c>
     604:	008000b4 	movhi	r2,2
     608:	10afeb04 	addi	r2,r2,-16468
     60c:	e0fff917 	ldw	r3,-28(fp)
     610:	18c7883a 	add	r3,r3,r3
     614:	18c7883a 	add	r3,r3,r3
     618:	10c5883a 	add	r2,r2,r3
     61c:	10800017 	ldw	r2,0(r2)
     620:	10003216 	blt	r2,zero,6ec <player_touching_enemy+0x13c>
			break;                // Stop
		}

		// Check if player's box touches the current enemy block
		int enemy_box_right = xcord[i] + 10; // Rightmost x-coordinate of enemy's box
     624:	008000b4 	movhi	r2,2
     628:	10afcd04 	addi	r2,r2,-16588
     62c:	e0fff917 	ldw	r3,-28(fp)
     630:	18c7883a 	add	r3,r3,r3
     634:	18c7883a 	add	r3,r3,r3
     638:	10c5883a 	add	r2,r2,r3
     63c:	10800017 	ldw	r2,0(r2)
     640:	10800284 	addi	r2,r2,10
     644:	e0bffc15 	stw	r2,-16(fp)
		int enemy_box_bottom = ycord[i] + 10; // Bottommost y-coordinate of enemy's box
     648:	008000b4 	movhi	r2,2
     64c:	10afeb04 	addi	r2,r2,-16468
     650:	e0fff917 	ldw	r3,-28(fp)
     654:	18c7883a 	add	r3,r3,r3
     658:	18c7883a 	add	r3,r3,r3
     65c:	10c5883a 	add	r2,r2,r3
     660:	10800017 	ldw	r2,0(r2)
     664:	10800284 	addi	r2,r2,10
     668:	e0bffd15 	stw	r2,-12(fp)

		// Check for overlap or touching
		if (player_box_right >= xcord[i] && x <= enemy_box_right &&
     66c:	008000b4 	movhi	r2,2
     670:	10afcd04 	addi	r2,r2,-16588
     674:	e0fff917 	ldw	r3,-28(fp)
     678:	18c7883a 	add	r3,r3,r3
     67c:	18c7883a 	add	r3,r3,r3
     680:	10c5883a 	add	r2,r2,r3
     684:	10800017 	ldw	r2,0(r2)
     688:	e0fffa17 	ldw	r3,-24(fp)
     68c:	18801116 	blt	r3,r2,6d4 <player_touching_enemy+0x124>
     690:	e0bffe17 	ldw	r2,-8(fp)
     694:	e0fffc17 	ldw	r3,-16(fp)
     698:	18800e16 	blt	r3,r2,6d4 <player_touching_enemy+0x124>
				player_box_bottom >= ycord[i] && y <= enemy_box_bottom) {
     69c:	008000b4 	movhi	r2,2
     6a0:	10afeb04 	addi	r2,r2,-16468
     6a4:	e0fff917 	ldw	r3,-28(fp)
     6a8:	18c7883a 	add	r3,r3,r3
     6ac:	18c7883a 	add	r3,r3,r3
     6b0:	10c5883a 	add	r2,r2,r3
     6b4:	10800017 	ldw	r2,0(r2)
		// Check if player's box touches the current enemy block
		int enemy_box_right = xcord[i] + 10; // Rightmost x-coordinate of enemy's box
		int enemy_box_bottom = ycord[i] + 10; // Bottommost y-coordinate of enemy's box

		// Check for overlap or touching
		if (player_box_right >= xcord[i] && x <= enemy_box_right &&
     6b8:	e0fffb17 	ldw	r3,-20(fp)
     6bc:	18800516 	blt	r3,r2,6d4 <player_touching_enemy+0x124>
				player_box_bottom >= ycord[i] && y <= enemy_box_bottom) {
     6c0:	e0bfff17 	ldw	r2,-4(fp)
     6c4:	e0fffd17 	ldw	r3,-12(fp)
     6c8:	18800216 	blt	r3,r2,6d4 <player_touching_enemy+0x124>
			return -1; // Player's box touches an enemy block
     6cc:	00bfffc4 	movi	r2,-1
     6d0:	00000706 	br	6f0 <player_touching_enemy+0x140>
 */
int player_touching_enemy(int x, int y){
	int player_box_right = x + 10; // Rightmost x-coordinate of player's box
	int player_box_bottom = y + 10; // Bottommost y-coordinate of player's box

	for(int i = 0; i < MAX_ENEMIES; i++){
     6d4:	e0bff917 	ldw	r2,-28(fp)
     6d8:	10800044 	addi	r2,r2,1
     6dc:	e0bff915 	stw	r2,-28(fp)
     6e0:	e0bff917 	ldw	r2,-28(fp)
     6e4:	10800790 	cmplti	r2,r2,30
     6e8:	103fbe1e 	bne	r2,zero,5e4 <__alt_mem_Onchip_SRAM+0xf80005e4>
				player_box_bottom >= ycord[i] && y <= enemy_box_bottom) {
			return -1; // Player's box touches an enemy block
		}
	}

	return 0; // Player's box does not touch any enemy block
     6ec:	0005883a 	mov	r2,zero
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	df000017 	ldw	fp,0(sp)
     6f8:	dec00104 	addi	sp,sp,4
     6fc:	f800283a 	ret

00000700 <get_level>:

/**
 * Returns level count, starts at 1 and ends at 6
 */
int get_level(void){
     700:	deffff04 	addi	sp,sp,-4
     704:	df000015 	stw	fp,0(sp)
     708:	d839883a 	mov	fp,sp
	return level_count;
     70c:	d0a72817 	ldw	r2,-25440(gp)
}
     710:	e037883a 	mov	sp,fp
     714:	df000017 	ldw	fp,0(sp)
     718:	dec00104 	addi	sp,sp,4
     71c:	f800283a 	ret

00000720 <end_of_level>:

/**
 * Returns true if the box is on the h.line
 *
 */
int end_of_level(int x, int y){
     720:	defffd04 	addi	sp,sp,-12
     724:	df000215 	stw	fp,8(sp)
     728:	df000204 	addi	fp,sp,8
     72c:	e13ffe15 	stw	r4,-8(fp)
     730:	e17fff15 	stw	r5,-4(fp)
	return (y >= level_info.end_location[level_count-1]);
     734:	d0a72817 	ldw	r2,-25440(gp)
     738:	10ffffc4 	addi	r3,r2,-1
     73c:	008000b4 	movhi	r2,2
     740:	10b00904 	addi	r2,r2,-16348
     744:	18c003c4 	addi	r3,r3,15
     748:	18c7883a 	add	r3,r3,r3
     74c:	18c7883a 	add	r3,r3,r3
     750:	10c5883a 	add	r2,r2,r3
     754:	10800017 	ldw	r2,0(r2)
     758:	e0ffff17 	ldw	r3,-4(fp)
     75c:	1884403a 	cmpge	r2,r3,r2
     760:	10803fcc 	andi	r2,r2,255
}
     764:	e037883a 	mov	sp,fp
     768:	df000017 	ldw	fp,0(sp)
     76c:	dec00104 	addi	sp,sp,4
     770:	f800283a 	ret

00000774 <draw_en>:

/**
 * Draws the enemies. 10-30
 */
void draw_en(void){
     774:	defffd04 	addi	sp,sp,-12
     778:	dfc00215 	stw	ra,8(sp)
     77c:	df000115 	stw	fp,4(sp)
     780:	df000104 	addi	fp,sp,4
	for(int i = 0; i < level_info.num_enemies[level_count -1]; i++){
     784:	e03fff15 	stw	zero,-4(fp)
     788:	00001d06 	br	800 <draw_en+0x8c>
		draw_box(xcord[i],ycord[i], level_info.enemy_color[level_count -1]);
     78c:	008000b4 	movhi	r2,2
     790:	10afcd04 	addi	r2,r2,-16588
     794:	e0ffff17 	ldw	r3,-4(fp)
     798:	18c7883a 	add	r3,r3,r3
     79c:	18c7883a 	add	r3,r3,r3
     7a0:	10c5883a 	add	r2,r2,r3
     7a4:	11000017 	ldw	r4,0(r2)
     7a8:	008000b4 	movhi	r2,2
     7ac:	10afeb04 	addi	r2,r2,-16468
     7b0:	e0ffff17 	ldw	r3,-4(fp)
     7b4:	18c7883a 	add	r3,r3,r3
     7b8:	18c7883a 	add	r3,r3,r3
     7bc:	10c5883a 	add	r2,r2,r3
     7c0:	11400017 	ldw	r5,0(r2)
     7c4:	d0a72817 	ldw	r2,-25440(gp)
     7c8:	10ffffc4 	addi	r3,r2,-1
     7cc:	008000b4 	movhi	r2,2
     7d0:	10b00904 	addi	r2,r2,-16348
     7d4:	18c00384 	addi	r3,r3,14
     7d8:	18c7883a 	add	r3,r3,r3
     7dc:	10c5883a 	add	r2,r2,r3
     7e0:	10800084 	addi	r2,r2,2
     7e4:	1080000b 	ldhu	r2,0(r2)
     7e8:	10bfffcc 	andi	r2,r2,65535
     7ec:	100d883a 	mov	r6,r2
     7f0:	00012a00 	call	12a0 <draw_box>

/**
 * Draws the enemies. 10-30
 */
void draw_en(void){
	for(int i = 0; i < level_info.num_enemies[level_count -1]; i++){
     7f4:	e0bfff17 	ldw	r2,-4(fp)
     7f8:	10800044 	addi	r2,r2,1
     7fc:	e0bfff15 	stw	r2,-4(fp)
     800:	d0a72817 	ldw	r2,-25440(gp)
     804:	10ffffc4 	addi	r3,r2,-1
     808:	008000b4 	movhi	r2,2
     80c:	10b00904 	addi	r2,r2,-16348
     810:	18c00284 	addi	r3,r3,10
     814:	18c7883a 	add	r3,r3,r3
     818:	18c7883a 	add	r3,r3,r3
     81c:	10c5883a 	add	r2,r2,r3
     820:	10800017 	ldw	r2,0(r2)
     824:	e0ffff17 	ldw	r3,-4(fp)
     828:	18bfd816 	blt	r3,r2,78c <__alt_mem_Onchip_SRAM+0xf800078c>
		draw_box(xcord[i],ycord[i], level_info.enemy_color[level_count -1]);
	}
}
     82c:	0001883a 	nop
     830:	e037883a 	mov	sp,fp
     834:	dfc00117 	ldw	ra,4(sp)
     838:	df000017 	ldw	fp,0(sp)
     83c:	dec00204 	addi	sp,sp,8
     840:	f800283a 	ret

00000844 <reset_game>:

/**
 * Resets the state of the game to beginning
 */
void reset_game(void){
     844:	defffe04 	addi	sp,sp,-8
     848:	dfc00115 	stw	ra,4(sp)
     84c:	df000015 	stw	fp,0(sp)
     850:	d839883a 	mov	fp,sp
	level_count = 0;
     854:	d0272815 	stw	zero,-25440(gp)
	num_enemies = 5;
     858:	00800144 	movi	r2,5
     85c:	d0a00015 	stw	r2,-32768(gp)
	end_position = 100;
     860:	00801904 	movi	r2,100
     864:	d0a00115 	stw	r2,-32764(gp)
	reset_player_cords();
     868:	000138c0 	call	138c <reset_player_cords>
	reset_enemy_cords();
     86c:	000093c0 	call	93c <reset_enemy_cords>

}
     870:	0001883a 	nop
     874:	e037883a 	mov	sp,fp
     878:	dfc00117 	ldw	ra,4(sp)
     87c:	df000017 	ldw	fp,0(sp)
     880:	dec00204 	addi	sp,sp,8
     884:	f800283a 	ret

00000888 <countdown>:

/**
 * Counts from 1 to num seconds
 */
void countdown(int num){
     888:	defffc04 	addi	sp,sp,-16
     88c:	dfc00315 	stw	ra,12(sp)
     890:	df000215 	stw	fp,8(sp)
     894:	df000204 	addi	fp,sp,8
     898:	e13fff15 	stw	r4,-4(fp)
	for(int i = num; i >= 1; i-- ){
     89c:	e0bfff17 	ldw	r2,-4(fp)
     8a0:	e0bffe15 	stw	r2,-8(fp)
     8a4:	00000d06 	br	8dc <countdown+0x54>
		//Convert number to a string
		sprintf(str, "%d",i);
     8a8:	e1bffe17 	ldw	r6,-8(fp)
     8ac:	014000b4 	movhi	r5,2
     8b0:	29608904 	addi	r5,r5,-32220
     8b4:	d1272904 	addi	r4,gp,-25436
     8b8:	0001f580 	call	1f58 <sprintf>
		hex_message(str);
     8bc:	d1272904 	addi	r4,gp,-25436
     8c0:	0000aac0 	call	aac <hex_message>
		//Wait for 1/2 a second
		usleep(250000);
     8c4:	01000134 	movhi	r4,4
     8c8:	21342404 	addi	r4,r4,-12144
     8cc:	00129ec0 	call	129ec <usleep>

/**
 * Counts from 1 to num seconds
 */
void countdown(int num){
	for(int i = num; i >= 1; i-- ){
     8d0:	e0bffe17 	ldw	r2,-8(fp)
     8d4:	10bfffc4 	addi	r2,r2,-1
     8d8:	e0bffe15 	stw	r2,-8(fp)
     8dc:	e0bffe17 	ldw	r2,-8(fp)
     8e0:	00bff116 	blt	zero,r2,8a8 <__alt_mem_Onchip_SRAM+0xf80008a8>
		sprintf(str, "%d",i);
		hex_message(str);
		//Wait for 1/2 a second
		usleep(250000);
	}
}
     8e4:	0001883a 	nop
     8e8:	e037883a 	mov	sp,fp
     8ec:	dfc00117 	ldw	ra,4(sp)
     8f0:	df000017 	ldw	fp,0(sp)
     8f4:	dec00204 	addi	sp,sp,8
     8f8:	f800283a 	ret

000008fc <get_end_dist>:

int get_end_dist(void){
     8fc:	deffff04 	addi	sp,sp,-4
     900:	df000015 	stw	fp,0(sp)
     904:	d839883a 	mov	fp,sp
	return level_info.end_location[level_count-1];
     908:	d0a72817 	ldw	r2,-25440(gp)
     90c:	10ffffc4 	addi	r3,r2,-1
     910:	008000b4 	movhi	r2,2
     914:	10b00904 	addi	r2,r2,-16348
     918:	18c003c4 	addi	r3,r3,15
     91c:	18c7883a 	add	r3,r3,r3
     920:	18c7883a 	add	r3,r3,r3
     924:	10c5883a 	add	r2,r2,r3
     928:	10800017 	ldw	r2,0(r2)
}
     92c:	e037883a 	mov	sp,fp
     930:	df000017 	ldw	fp,0(sp)
     934:	dec00104 	addi	sp,sp,4
     938:	f800283a 	ret

0000093c <reset_enemy_cords>:

/**
 * Resets the xcord and ycord arrays with -1 as sentinel values
 */
void reset_enemy_cords(void){
     93c:	defffe04 	addi	sp,sp,-8
     940:	df000115 	stw	fp,4(sp)
     944:	df000104 	addi	fp,sp,4
	//Reset enemy coordinates
	for(int i = 0; i < MAX_ENEMIES; i++){
     948:	e03fff15 	stw	zero,-4(fp)
     94c:	00001306 	br	99c <reset_enemy_cords+0x60>
		xcord[i] = -1;
     950:	008000b4 	movhi	r2,2
     954:	10afcd04 	addi	r2,r2,-16588
     958:	e0ffff17 	ldw	r3,-4(fp)
     95c:	18c7883a 	add	r3,r3,r3
     960:	18c7883a 	add	r3,r3,r3
     964:	10c5883a 	add	r2,r2,r3
     968:	00ffffc4 	movi	r3,-1
     96c:	10c00015 	stw	r3,0(r2)
		ycord[i] = -1;
     970:	008000b4 	movhi	r2,2
     974:	10afeb04 	addi	r2,r2,-16468
     978:	e0ffff17 	ldw	r3,-4(fp)
     97c:	18c7883a 	add	r3,r3,r3
     980:	18c7883a 	add	r3,r3,r3
     984:	10c5883a 	add	r2,r2,r3
     988:	00ffffc4 	movi	r3,-1
     98c:	10c00015 	stw	r3,0(r2)
/**
 * Resets the xcord and ycord arrays with -1 as sentinel values
 */
void reset_enemy_cords(void){
	//Reset enemy coordinates
	for(int i = 0; i < MAX_ENEMIES; i++){
     990:	e0bfff17 	ldw	r2,-4(fp)
     994:	10800044 	addi	r2,r2,1
     998:	e0bfff15 	stw	r2,-4(fp)
     99c:	e0bfff17 	ldw	r2,-4(fp)
     9a0:	10800790 	cmplti	r2,r2,30
     9a4:	103fea1e 	bne	r2,zero,950 <__alt_mem_Onchip_SRAM+0xf8000950>
		xcord[i] = -1;
		ycord[i] = -1;
	}
}
     9a8:	0001883a 	nop
     9ac:	e037883a 	mov	sp,fp
     9b0:	df000017 	ldw	fp,0(sp)
     9b4:	dec00104 	addi	sp,sp,4
     9b8:	f800283a 	ret

000009bc <main>:
#include "joystick.h"
#include "game.h"
#include "hex_display.h"

int main()
{
     9bc:	defffb04 	addi	sp,sp,-20
     9c0:	dfc00415 	stw	ra,16(sp)
     9c4:	df000315 	stw	fp,12(sp)
     9c8:	dc000215 	stw	r16,8(sp)
     9cc:	df000304 	addi	fp,sp,12
	//Inits
	adc_init();
     9d0:	000026c0 	call	26c <adc_init>
	lcd_init();
     9d4:	0000d540 	call	d54 <lcd_init>
	tetris_init();
     9d8:	000033c0 	call	33c <tetris_init>

	while(1){
		int playing = 0;
     9dc:	e03ffd15 	stw	zero,-12(fp)
		int win = -1;
     9e0:	00bfffc4 	movi	r2,-1
     9e4:	e0bffe15 	stw	r2,-8(fp)

		//Generate first level
		generate_next_level();
     9e8:	00004740 	call	474 <generate_next_level>

		while(!playing){
     9ec:	00001d06 	br	a64 <main+0xa8>
			//Follow user
			draw_box_and_follow();
     9f0:	0000e100 	call	e10 <draw_box_and_follow>

			//Determine if current position hits an enemy or is at last level
			if(player_touching_enemy(get_player_x(), get_player_y()) == -1){
     9f4:	000134c0 	call	134c <get_player_x>
     9f8:	1021883a 	mov	r16,r2
     9fc:	000136c0 	call	136c <get_player_y>
     a00:	100b883a 	mov	r5,r2
     a04:	8009883a 	mov	r4,r16
     a08:	00005b00 	call	5b0 <player_touching_enemy>
     a0c:	10bfffd8 	cmpnei	r2,r2,-1
     a10:	1000021e 	bne	r2,zero,a1c <main+0x60>
				playing=-1;
     a14:	00bfffc4 	movi	r2,-1
     a18:	e0bffd15 	stw	r2,-12(fp)
			}

			if(end_of_level(get_player_x(), get_player_y())){
     a1c:	000134c0 	call	134c <get_player_x>
     a20:	1021883a 	mov	r16,r2
     a24:	000136c0 	call	136c <get_player_y>
     a28:	100b883a 	mov	r5,r2
     a2c:	8009883a 	mov	r4,r16
     a30:	00007200 	call	720 <end_of_level>
     a34:	10000b26 	beq	r2,zero,a64 <main+0xa8>
				if(get_level() >= 5){
     a38:	00007000 	call	700 <get_level>
     a3c:	10800150 	cmplti	r2,r2,5
     a40:	1000041e 	bne	r2,zero,a54 <main+0x98>
					win = 0;
     a44:	e03ffe15 	stw	zero,-8(fp)
					playing=-1;
     a48:	00bfffc4 	movi	r2,-1
     a4c:	e0bffd15 	stw	r2,-12(fp)
					break;
     a50:	00000606 	br	a6c <main+0xb0>
				}
				reset_player_cords();
     a54:	000138c0 	call	138c <reset_player_cords>

				//add 3 second delay between levels
				countdown(3);
     a58:	010000c4 	movi	r4,3
     a5c:	00008880 	call	888 <countdown>

				//Next level
				generate_next_level();
     a60:	00004740 	call	474 <generate_next_level>
		int win = -1;

		//Generate first level
		generate_next_level();

		while(!playing){
     a64:	e0bffd17 	ldw	r2,-12(fp)
     a68:	103fe126 	beq	r2,zero,9f0 <__alt_mem_Onchip_SRAM+0xf80009f0>
				generate_next_level();
			}
		}

		//Display status
		if(!win){
     a6c:	e0bffe17 	ldw	r2,-8(fp)
     a70:	1000041e 	bne	r2,zero,a84 <main+0xc8>
			hex_message("winner");
     a74:	010000b4 	movhi	r4,2
     a78:	21208a04 	addi	r4,r4,-32216
     a7c:	0000aac0 	call	aac <hex_message>
     a80:	00000306 	br	a90 <main+0xd4>
		} else {
			hex_message("loser");
     a84:	010000b4 	movhi	r4,2
     a88:	21208c04 	addi	r4,r4,-32208
     a8c:	0000aac0 	call	aac <hex_message>
		}

		//Add small delay before starting again
		usleep(1000000);
     a90:	010003f4 	movhi	r4,15
     a94:	21109004 	addi	r4,r4,16960
     a98:	00129ec0 	call	129ec <usleep>

		//Reset game status
		reset_game();
     a9c:	00008440 	call	844 <reset_game>

		//Wait 5 seconds
		countdown(5);
     aa0:	01000144 	movi	r4,5
     aa4:	00008880 	call	888 <countdown>


	}
     aa8:	003fcc06 	br	9dc <__alt_mem_Onchip_SRAM+0xf80009dc>

00000aac <hex_message>:
 * hex address pointer.
 * Arguments: None
 * Returns: None
 */

void hex_message(const char* string){
     aac:	defff504 	addi	sp,sp,-44
     ab0:	dfc00a15 	stw	ra,40(sp)
     ab4:	df000915 	stw	fp,36(sp)
     ab8:	dc800815 	stw	r18,32(sp)
     abc:	dc400715 	stw	r17,28(sp)
     ac0:	dc000615 	stw	r16,24(sp)
     ac4:	df000904 	addi	fp,sp,36
     ac8:	e13ffc15 	stw	r4,-16(fp)
	//Max shifts for either side of the HEX display
	const int hex5_4_shift_max = 8;
     acc:	00800204 	movi	r2,8
     ad0:	e0bff915 	stw	r2,-28(fp)
	const int hex3_0_shift_max = 24;
     ad4:	00800604 	movi	r2,24
     ad8:	e0bffa15 	stw	r2,-24(fp)
	const int word = 8;
     adc:	00800204 	movi	r2,8
     ae0:	e0bffb15 	stw	r2,-20(fp)

	//Temporary variable to help iterate through the second set of HEXs
	int temp = 0;
     ae4:	e03ff715 	stw	zero,-36(fp)

	//Clear all digits
	*hex5_4 = 0;
     ae8:	00bfc834 	movhi	r2,65312
     aec:	10800c04 	addi	r2,r2,48
     af0:	10000015 	stw	zero,0(r2)
	*hex3_0 = 0;
     af4:	00bfc834 	movhi	r2,65312
     af8:	10800804 	addi	r2,r2,32
     afc:	10000015 	stw	zero,0(r2)

	//If string is greater than 6 characters, print ERR
	if(strlen(string)> 6){
     b00:	e13ffc17 	ldw	r4,-16(fp)
     b04:	00020540 	call	2054 <strlen>
     b08:	108001f0 	cmpltui	r2,r2,7
     b0c:	1000121e 	bne	r2,zero,b58 <hex_message+0xac>
		*hex3_0 |= ('e' << (word*2)) | ('r' << word) | ('r');
     b10:	00bfc834 	movhi	r2,65312
     b14:	10800804 	addi	r2,r2,32
     b18:	00ffc834 	movhi	r3,65312
     b1c:	18c00804 	addi	r3,r3,32
     b20:	19000017 	ldw	r4,0(r3)
     b24:	e0fffb17 	ldw	r3,-20(fp)
     b28:	18c7883a 	add	r3,r3,r3
     b2c:	180b883a 	mov	r5,r3
     b30:	00c01944 	movi	r3,101
     b34:	194a983a 	sll	r5,r3,r5
     b38:	01801c84 	movi	r6,114
     b3c:	e0fffb17 	ldw	r3,-20(fp)
     b40:	30c6983a 	sll	r3,r6,r3
     b44:	28c6b03a 	or	r3,r5,r3
     b48:	20c6b03a 	or	r3,r4,r3
     b4c:	18c01c94 	ori	r3,r3,114
     b50:	10c00015 	stw	r3,0(r2)
				*hex3_0 |= string[i] << (hex3_0_shift_max-(temp*word));
				temp++;
			}
		}
	}
}
     b54:	00003b06 	br	c44 <hex_message+0x198>
	if(strlen(string)> 6){
		*hex3_0 |= ('e' << (word*2)) | ('r' << word) | ('r');
	}else{
		//Not less than iterate through each of the characters
		//and print them on the HEX's left to right
		for(int i = 0; i < strlen(string); i++){
     b58:	e03ff815 	stw	zero,-32(fp)
     b5c:	00003406 	br	c30 <hex_message+0x184>
			if(i < 2){
     b60:	e0bff817 	ldw	r2,-32(fp)
     b64:	10800088 	cmpgei	r2,r2,2
     b68:	1000161e 	bne	r2,zero,bc4 <hex_message+0x118>
				*hex5_4 |= string[i] << (hex5_4_shift_max - (hex5_4_shift_max*i));
     b6c:	043fc834 	movhi	r16,65312
     b70:	84000c04 	addi	r16,r16,48
     b74:	00bfc834 	movhi	r2,65312
     b78:	10800c04 	addi	r2,r2,48
     b7c:	14400017 	ldw	r17,0(r2)
     b80:	e0bff817 	ldw	r2,-32(fp)
     b84:	e0fffc17 	ldw	r3,-16(fp)
     b88:	1885883a 	add	r2,r3,r2
     b8c:	10800003 	ldbu	r2,0(r2)
     b90:	14803fcc 	andi	r18,r2,255
     b94:	9480201c 	xori	r18,r18,128
     b98:	94bfe004 	addi	r18,r18,-128
     b9c:	00c00044 	movi	r3,1
     ba0:	e0bff817 	ldw	r2,-32(fp)
     ba4:	1885c83a 	sub	r2,r3,r2
     ba8:	e17ff917 	ldw	r5,-28(fp)
     bac:	1009883a 	mov	r4,r2
     bb0:	00015680 	call	1568 <__mulsi3>
     bb4:	9084983a 	sll	r2,r18,r2
     bb8:	8884b03a 	or	r2,r17,r2
     bbc:	80800015 	stw	r2,0(r16)
     bc0:	00001806 	br	c24 <hex_message+0x178>
			} else {
				*hex3_0 |= string[i] << (hex3_0_shift_max-(temp*word));
     bc4:	043fc834 	movhi	r16,65312
     bc8:	84000804 	addi	r16,r16,32
     bcc:	00bfc834 	movhi	r2,65312
     bd0:	10800804 	addi	r2,r2,32
     bd4:	14400017 	ldw	r17,0(r2)
     bd8:	e0bff817 	ldw	r2,-32(fp)
     bdc:	e0fffc17 	ldw	r3,-16(fp)
     be0:	1885883a 	add	r2,r3,r2
     be4:	10800003 	ldbu	r2,0(r2)
     be8:	14803fcc 	andi	r18,r2,255
     bec:	9480201c 	xori	r18,r18,128
     bf0:	94bfe004 	addi	r18,r18,-128
     bf4:	e17ffb17 	ldw	r5,-20(fp)
     bf8:	e13ff717 	ldw	r4,-36(fp)
     bfc:	00015680 	call	1568 <__mulsi3>
     c00:	1007883a 	mov	r3,r2
     c04:	e0bffa17 	ldw	r2,-24(fp)
     c08:	10c5c83a 	sub	r2,r2,r3
     c0c:	9084983a 	sll	r2,r18,r2
     c10:	8884b03a 	or	r2,r17,r2
     c14:	80800015 	stw	r2,0(r16)
				temp++;
     c18:	e0bff717 	ldw	r2,-36(fp)
     c1c:	10800044 	addi	r2,r2,1
     c20:	e0bff715 	stw	r2,-36(fp)
	if(strlen(string)> 6){
		*hex3_0 |= ('e' << (word*2)) | ('r' << word) | ('r');
	}else{
		//Not less than iterate through each of the characters
		//and print them on the HEX's left to right
		for(int i = 0; i < strlen(string); i++){
     c24:	e0bff817 	ldw	r2,-32(fp)
     c28:	10800044 	addi	r2,r2,1
     c2c:	e0bff815 	stw	r2,-32(fp)
     c30:	e13ffc17 	ldw	r4,-16(fp)
     c34:	00020540 	call	2054 <strlen>
     c38:	1007883a 	mov	r3,r2
     c3c:	e0bff817 	ldw	r2,-32(fp)
     c40:	10ffc736 	bltu	r2,r3,b60 <__alt_mem_Onchip_SRAM+0xf8000b60>
				*hex3_0 |= string[i] << (hex3_0_shift_max-(temp*word));
				temp++;
			}
		}
	}
}
     c44:	0001883a 	nop
     c48:	e6fffd04 	addi	sp,fp,-12
     c4c:	dfc00417 	ldw	ra,16(sp)
     c50:	df000317 	ldw	fp,12(sp)
     c54:	dc800217 	ldw	r18,8(sp)
     c58:	dc400117 	ldw	r17,4(sp)
     c5c:	dc000017 	ldw	r16,0(sp)
     c60:	dec00504 	addi	sp,sp,20
     c64:	f800283a 	ret

00000c68 <joystick_read>:
int offset_x = 0;
int offset_y = 0;


//Sets the joy stick x and y position from ADC channels
void joystick_read(void){
     c68:	defffe04 	addi	sp,sp,-8
     c6c:	dfc00115 	stw	ra,4(sp)
     c70:	df000015 	stw	fp,0(sp)
     c74:	d839883a 	mov	fp,sp
	adc_data = adc_read();
     c78:	00002ac0 	call	2ac <adc_read>
     c7c:	d0a72f15 	stw	r2,-25412(gp)

	//Calculate the offset (position from center)
	offset_x = adc_data[0] - center_x;
     c80:	d0a72f17 	ldw	r2,-25412(gp)
     c84:	10800017 	ldw	r2,0(r2)
     c88:	10bfe244 	addi	r2,r2,-119
     c8c:	d0a72b15 	stw	r2,-25428(gp)
	offset_y = adc_data[1] - center_y;
     c90:	d0a72f17 	ldw	r2,-25412(gp)
     c94:	10800104 	addi	r2,r2,4
     c98:	10800017 	ldw	r2,0(r2)
     c9c:	10bfe204 	addi	r2,r2,-120
     ca0:	d0a72c15 	stw	r2,-25424(gp)

	//Calibrate the joystick
	joystick_x = adc_data[0];
     ca4:	d0a72f17 	ldw	r2,-25412(gp)
     ca8:	10800017 	ldw	r2,0(r2)
     cac:	d0a72e15 	stw	r2,-25416(gp)
	joystick_y = adc_data[1];
     cb0:	d0a72f17 	ldw	r2,-25412(gp)
     cb4:	10800117 	ldw	r2,4(r2)
     cb8:	d0a72d15 	stw	r2,-25420(gp)
}
     cbc:	0001883a 	nop
     cc0:	e037883a 	mov	sp,fp
     cc4:	dfc00117 	ldw	ra,4(sp)
     cc8:	df000017 	ldw	fp,0(sp)
     ccc:	dec00204 	addi	sp,sp,8
     cd0:	f800283a 	ret

00000cd4 <joystick_get_x>:

//Returns the ADC readings from channel one
int joystick_get_x(void){
     cd4:	deffff04 	addi	sp,sp,-4
     cd8:	df000015 	stw	fp,0(sp)
     cdc:	d839883a 	mov	fp,sp
	return joystick_x;
     ce0:	d0a72e17 	ldw	r2,-25416(gp)
}
     ce4:	e037883a 	mov	sp,fp
     ce8:	df000017 	ldw	fp,0(sp)
     cec:	dec00104 	addi	sp,sp,4
     cf0:	f800283a 	ret

00000cf4 <joystick_get_y>:

//Returns the ADC readings from channel 2
int joystick_get_y(void){
     cf4:	deffff04 	addi	sp,sp,-4
     cf8:	df000015 	stw	fp,0(sp)
     cfc:	d839883a 	mov	fp,sp
	return joystick_y;
     d00:	d0a72d17 	ldw	r2,-25420(gp)
}
     d04:	e037883a 	mov	sp,fp
     d08:	df000017 	ldw	fp,0(sp)
     d0c:	dec00104 	addi	sp,sp,4
     d10:	f800283a 	ret

00000d14 <joystick_get_offset_x>:

int joystick_get_offset_x(void){
     d14:	deffff04 	addi	sp,sp,-4
     d18:	df000015 	stw	fp,0(sp)
     d1c:	d839883a 	mov	fp,sp
	return offset_x;
     d20:	d0a72b17 	ldw	r2,-25428(gp)
}
     d24:	e037883a 	mov	sp,fp
     d28:	df000017 	ldw	fp,0(sp)
     d2c:	dec00104 	addi	sp,sp,4
     d30:	f800283a 	ret

00000d34 <joystick_get_offset_y>:

int joystick_get_offset_y(void){
     d34:	deffff04 	addi	sp,sp,-4
     d38:	df000015 	stw	fp,0(sp)
     d3c:	d839883a 	mov	fp,sp
	return offset_y;
     d40:	d0a72c17 	ldw	r2,-25424(gp)
}
     d44:	e037883a 	mov	sp,fp
     d48:	df000017 	ldw	fp,0(sp)
     d4c:	dec00104 	addi	sp,sp,4
     d50:	f800283a 	ret

00000d54 <lcd_init>:
		0x07FF,  // Cyan
		0xFFFF   // White
};
int num_colors = sizeof(colors)/sizeof(colors[0]);

void lcd_init(void) {
     d54:	defffd04 	addi	sp,sp,-12
     d58:	dfc00215 	stw	ra,8(sp)
     d5c:	df000115 	stw	fp,4(sp)
     d60:	dc000015 	stw	r16,0(sp)
     d64:	df000104 	addi	fp,sp,4
	adc_init();
     d68:	000026c0 	call	26c <adc_init>
	usleep(100);
     d6c:	01001904 	movi	r4,100
     d70:	00129ec0 	call	129ec <usleep>
	// open the device, note the "Linux" driver format
	lt24 = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
     d74:	010000b4 	movhi	r4,2
     d78:	21208e04 	addi	r4,r4,-32200
     d7c:	0015d100 	call	15d10 <alt_up_pixel_buffer_dma_open_dev>
     d80:	d0a73515 	stw	r2,-25388(gp)

	alt_up_pixel_buffer_dma_change_back_buffer_address(lt24,(unsigned int)malloc(320*240*2));
     d84:	d4273517 	ldw	r16,-25388(gp)
     d88:	010000b4 	movhi	r4,2
     d8c:	21160004 	addi	r4,r4,22528
     d90:	00015900 	call	1590 <malloc>
     d94:	100b883a 	mov	r5,r2
     d98:	8009883a 	mov	r4,r16
     d9c:	0015ef40 	call	15ef4 <alt_up_pixel_buffer_dma_change_back_buffer_address>
	alt_up_pixel_buffer_dma_swap_buffers(lt24);
     da0:	d0a73517 	ldw	r2,-25388(gp)
     da4:	1009883a 	mov	r4,r2
     da8:	0015f500 	call	15f50 <alt_up_pixel_buffer_dma_swap_buffers>

	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(lt24))
     dac:	0001883a 	nop
     db0:	d0a73517 	ldw	r2,-25388(gp)
     db4:	1009883a 	mov	r4,r2
     db8:	0015fb00 	call	15fb0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     dbc:	103ffc1e 	bne	r2,zero,db0 <__alt_mem_Onchip_SRAM+0xf8000db0>
	{ /* make sure swap is done */ }
	alt_up_pixel_buffer_dma_change_back_buffer_address(lt24,(unsigned int)malloc(320*240*2));
     dc0:	d4273517 	ldw	r16,-25388(gp)
     dc4:	010000b4 	movhi	r4,2
     dc8:	21160004 	addi	r4,r4,22528
     dcc:	00015900 	call	1590 <malloc>
     dd0:	100b883a 	mov	r5,r2
     dd4:	8009883a 	mov	r4,r16
     dd8:	0015ef40 	call	15ef4 <alt_up_pixel_buffer_dma_change_back_buffer_address>

	// clear front buffers
	alt_up_pixel_buffer_dma_clear_screen(lt24,FRONT);
     ddc:	d0a73517 	ldw	r2,-25388(gp)
     de0:	000b883a 	mov	r5,zero
     de4:	1009883a 	mov	r4,r2
     de8:	0015fe40 	call	15fe4 <alt_up_pixel_buffer_dma_clear_screen>

	//Set initial box position to to left (0,0)
	x = 0;
     dec:	d0273015 	stw	zero,-25408(gp)
	y = 0;
     df0:	d0273115 	stw	zero,-25404(gp)
}
     df4:	0001883a 	nop
     df8:	e6ffff04 	addi	sp,fp,-4
     dfc:	dfc00217 	ldw	ra,8(sp)
     e00:	df000117 	ldw	fp,4(sp)
     e04:	dc000017 	ldw	r16,0(sp)
     e08:	dec00304 	addi	sp,sp,12
     e0c:	f800283a 	ret

00000e10 <draw_box_and_follow>:

void draw_box_and_follow(void){
     e10:	defffa04 	addi	sp,sp,-24
     e14:	dfc00515 	stw	ra,20(sp)
     e18:	df000415 	stw	fp,16(sp)
     e1c:	dc000315 	stw	r16,12(sp)
     e20:	df000404 	addi	fp,sp,16

    // Clear screen
    alt_up_pixel_buffer_dma_clear_screen(lt24, BACK);
     e24:	d0a73517 	ldw	r2,-25388(gp)
     e28:	01400044 	movi	r5,1
     e2c:	1009883a 	mov	r4,r2
     e30:	0015fe40 	call	15fe4 <alt_up_pixel_buffer_dma_clear_screen>

    //Genereate enemies
    draw_en();
     e34:	00007740 	call	774 <draw_en>

    //Draw horizontal line	//Draw the goal line at location
	alt_up_pixel_buffer_dma_draw_hline(lt24,0,width, get_end_dist(), RED, BACK);
     e38:	d4273517 	ldw	r16,-25388(gp)
     e3c:	00008fc0 	call	8fc <get_end_dist>
     e40:	1007883a 	mov	r3,r2
     e44:	00800044 	movi	r2,1
     e48:	d8800115 	stw	r2,4(sp)
     e4c:	00be0014 	movui	r2,63488
     e50:	d8800015 	stw	r2,0(sp)
     e54:	180f883a 	mov	r7,r3
     e58:	01805004 	movi	r6,320
     e5c:	000b883a 	mov	r5,zero
     e60:	8009883a 	mov	r4,r16
     e64:	001641c0 	call	1641c <alt_up_pixel_buffer_dma_draw_hline>

    // Draw a green 10x10 box at the updated player position
    alt_up_pixel_buffer_dma_draw_box(lt24, 0 + x, 0 + y, 10 + x, 10 + y, GREEN, BACK);
     e68:	d1273517 	ldw	r4,-25388(gp)
     e6c:	d1673017 	ldw	r5,-25408(gp)
     e70:	d1a73117 	ldw	r6,-25404(gp)
     e74:	d0a73017 	ldw	r2,-25408(gp)
     e78:	11c00284 	addi	r7,r2,10
     e7c:	d0a73117 	ldw	r2,-25404(gp)
     e80:	10800284 	addi	r2,r2,10
     e84:	00c00044 	movi	r3,1
     e88:	d8c00215 	stw	r3,8(sp)
     e8c:	00c1f804 	movi	r3,2016
     e90:	d8c00115 	stw	r3,4(sp)
     e94:	d8800015 	stw	r2,0(sp)
     e98:	00161200 	call	16120 <alt_up_pixel_buffer_dma_draw_box>

    // Update player position based on joystick input
    follow_joystick();
     e9c:	0000ec80 	call	ec8 <follow_joystick>

    // Swap buffers
    alt_up_pixel_buffer_dma_swap_buffers(lt24);
     ea0:	d0a73517 	ldw	r2,-25388(gp)
     ea4:	1009883a 	mov	r4,r2
     ea8:	0015f500 	call	15f50 <alt_up_pixel_buffer_dma_swap_buffers>
}
     eac:	0001883a 	nop
     eb0:	e6ffff04 	addi	sp,fp,-4
     eb4:	dfc00217 	ldw	ra,8(sp)
     eb8:	df000117 	ldw	fp,4(sp)
     ebc:	dc000017 	ldw	r16,0(sp)
     ec0:	dec00304 	addi	sp,sp,12
     ec4:	f800283a 	ret

00000ec8 <follow_joystick>:


void follow_joystick(void){
     ec8:	defffe04 	addi	sp,sp,-8
     ecc:	dfc00115 	stw	ra,4(sp)
     ed0:	df000015 	stw	fp,0(sp)
     ed4:	d839883a 	mov	fp,sp
	joystick_read();
     ed8:	0000c680 	call	c68 <joystick_read>
	 * Right: (-119, 0)
	 *
	 */

	//Check if moved down by checking against its variability (M.O.E)
	if(joystick_get_offset_y() < margin_of_error_low){
     edc:	0000d340 	call	d34 <joystick_get_offset_y>
     ee0:	10bffec8 	cmpgei	r2,r2,-5
     ee4:	1000041e 	bne	r2,zero,ef8 <follow_joystick+0x30>
		//Y-Center < -5
		//Down
		y-=5;
     ee8:	d0a73117 	ldw	r2,-25404(gp)
     eec:	10bffec4 	addi	r2,r2,-5
     ef0:	d0a73115 	stw	r2,-25404(gp)
     ef4:	00000606 	br	f10 <follow_joystick+0x48>
	} else if(joystick_get_offset_y() > margin_of_error_high){
     ef8:	0000d340 	call	d34 <joystick_get_offset_y>
     efc:	10800190 	cmplti	r2,r2,6
     f00:	1000031e 	bne	r2,zero,f10 <follow_joystick+0x48>
		//Y-Center > 5
		//Up
		y+=5;
     f04:	d0a73117 	ldw	r2,-25404(gp)
     f08:	10800144 	addi	r2,r2,5
     f0c:	d0a73115 	stw	r2,-25404(gp)
	}

	if(joystick_get_offset_x() < margin_of_error_low){
     f10:	0000d140 	call	d14 <joystick_get_offset_x>
     f14:	10bffec8 	cmpgei	r2,r2,-5
     f18:	1000041e 	bne	r2,zero,f2c <follow_joystick+0x64>
		//X-Center < -5
		//right
		x+=5;
     f1c:	d0a73017 	ldw	r2,-25408(gp)
     f20:	10800144 	addi	r2,r2,5
     f24:	d0a73015 	stw	r2,-25408(gp)
     f28:	00000606 	br	f44 <follow_joystick+0x7c>
	} else if(joystick_get_offset_x() > margin_of_error_high){
     f2c:	0000d140 	call	d14 <joystick_get_offset_x>
     f30:	10800190 	cmplti	r2,r2,6
     f34:	1000031e 	bne	r2,zero,f44 <follow_joystick+0x7c>
		//X-Center > 5
		//left
		x-=5;
     f38:	d0a73017 	ldw	r2,-25408(gp)
     f3c:	10bffec4 	addi	r2,r2,-5
     f40:	d0a73015 	stw	r2,-25408(gp)
	}

	//Check boundaries
	if(x < 0) x = 0;
     f44:	d0a73017 	ldw	r2,-25408(gp)
     f48:	1000010e 	bge	r2,zero,f50 <follow_joystick+0x88>
     f4c:	d0273015 	stw	zero,-25408(gp)
	if(y  < 0) y = 0;
     f50:	d0a73117 	ldw	r2,-25404(gp)
     f54:	1000010e 	bge	r2,zero,f5c <follow_joystick+0x94>
     f58:	d0273115 	stw	zero,-25404(gp)
	if(x > width-10) x = width-10;
     f5c:	d0a73017 	ldw	r2,-25408(gp)
     f60:	10804dd0 	cmplti	r2,r2,311
     f64:	1000021e 	bne	r2,zero,f70 <follow_joystick+0xa8>
     f68:	00804d84 	movi	r2,310
     f6c:	d0a73015 	stw	r2,-25408(gp)
	if(y > height-10) y = height-10;
     f70:	d0a73117 	ldw	r2,-25404(gp)
     f74:	108039d0 	cmplti	r2,r2,231
     f78:	1000021e 	bne	r2,zero,f84 <follow_joystick+0xbc>
     f7c:	00803984 	movi	r2,230
     f80:	d0a73115 	stw	r2,-25404(gp)
}
     f84:	0001883a 	nop
     f88:	e037883a 	mov	sp,fp
     f8c:	dfc00117 	ldw	ra,4(sp)
     f90:	df000017 	ldw	fp,0(sp)
     f94:	dec00204 	addi	sp,sp,8
     f98:	f800283a 	ret

00000f9c <follow_touch>:

void follow_touch(void){
     f9c:	defff904 	addi	sp,sp,-28
     fa0:	dfc00615 	stw	ra,24(sp)
     fa4:	df000515 	stw	fp,20(sp)
     fa8:	df000504 	addi	fp,sp,20
	//Return code. Not used
	int return_code = 0;
     fac:	e03ffe15 	stw	zero,-8(fp)

	//Mode
	const uint8_t getx = 0x92;
     fb0:	00bfe484 	movi	r2,-110
     fb4:	e0bfff05 	stb	r2,-4(fp)
	const uint8_t gety =  0xD2;
     fb8:	00bff484 	movi	r2,-46
     fbc:	e0bfff45 	stb	r2,-3(fp)

	uint8_t recieve[2];

	return_code = alt_avalon_spi_command(SPI_0_BASE,0,1,&getx,2,recieve,0);
     fc0:	e0ffff04 	addi	r3,fp,-4
     fc4:	d8000215 	stw	zero,8(sp)
     fc8:	e0bfff84 	addi	r2,fp,-2
     fcc:	d8800115 	stw	r2,4(sp)
     fd0:	00800084 	movi	r2,2
     fd4:	d8800015 	stw	r2,0(sp)
     fd8:	180f883a 	mov	r7,r3
     fdc:	01800044 	movi	r6,1
     fe0:	000b883a 	mov	r5,zero
     fe4:	013fc834 	movhi	r4,65312
     fe8:	21004004 	addi	r4,r4,256
     fec:	00154b40 	call	154b4 <alt_avalon_spi_command>
     ff0:	e0bffe15 	stw	r2,-8(fp)
	xtouch = (recieve[0] << 5 | recieve[1] >> 3);
     ff4:	e0bfff83 	ldbu	r2,-2(fp)
     ff8:	10803fcc 	andi	r2,r2,255
     ffc:	1004917a 	slli	r2,r2,5
    1000:	1007883a 	mov	r3,r2
    1004:	e0bfffc3 	ldbu	r2,-1(fp)
    1008:	10803fcc 	andi	r2,r2,255
    100c:	1004d0fa 	srli	r2,r2,3
    1010:	10803fcc 	andi	r2,r2,255
    1014:	1884b03a 	or	r2,r3,r2
    1018:	d0a7320d 	sth	r2,-25400(gp)
	return_code = alt_avalon_spi_command(SPI_0_BASE,0,1,&gety,2,recieve,0);
    101c:	e0ffff44 	addi	r3,fp,-3
    1020:	d8000215 	stw	zero,8(sp)
    1024:	e0bfff84 	addi	r2,fp,-2
    1028:	d8800115 	stw	r2,4(sp)
    102c:	00800084 	movi	r2,2
    1030:	d8800015 	stw	r2,0(sp)
    1034:	180f883a 	mov	r7,r3
    1038:	01800044 	movi	r6,1
    103c:	000b883a 	mov	r5,zero
    1040:	013fc834 	movhi	r4,65312
    1044:	21004004 	addi	r4,r4,256
    1048:	00154b40 	call	154b4 <alt_avalon_spi_command>
    104c:	e0bffe15 	stw	r2,-8(fp)
	ytouch = recieve[0] << 5 | recieve[1]>>3;
    1050:	e0bfff83 	ldbu	r2,-2(fp)
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1004917a 	slli	r2,r2,5
    105c:	1007883a 	mov	r3,r2
    1060:	e0bfffc3 	ldbu	r2,-1(fp)
    1064:	10803fcc 	andi	r2,r2,255
    1068:	1004d0fa 	srli	r2,r2,3
    106c:	10803fcc 	andi	r2,r2,255
    1070:	1884b03a 	or	r2,r3,r2
    1074:	d0a7328d 	sth	r2,-25398(gp)
	printf("X: %10d, Y: %10d\n", xtouch,ytouch);
    1078:	d0a7320b 	ldhu	r2,-25400(gp)
    107c:	10bfffcc 	andi	r2,r2,65535
    1080:	10a0001c 	xori	r2,r2,32768
    1084:	10a00004 	addi	r2,r2,-32768
    1088:	d0e7328b 	ldhu	r3,-25398(gp)
    108c:	18ffffcc 	andi	r3,r3,65535
    1090:	18e0001c 	xori	r3,r3,32768
    1094:	18e00004 	addi	r3,r3,-32768
    1098:	180d883a 	mov	r6,r3
    109c:	100b883a 	mov	r5,r2
    10a0:	010000b4 	movhi	r4,2
    10a4:	21209604 	addi	r4,r4,-32168
    10a8:	0001df40 	call	1df4 <printf>

	//Adjust to be in terms of height and width and not pixels
	xtouch = (xtouch * width) / max_x;
    10ac:	d0a7320b 	ldhu	r2,-25400(gp)
    10b0:	10bfffcc 	andi	r2,r2,65535
    10b4:	10a0001c 	xori	r2,r2,32768
    10b8:	10a00004 	addi	r2,r2,-32768
    10bc:	01405004 	movi	r5,320
    10c0:	1009883a 	mov	r4,r2
    10c4:	00015680 	call	1568 <__mulsi3>
    10c8:	01432004 	movi	r5,3200
    10cc:	1009883a 	mov	r4,r2
    10d0:	00013b40 	call	13b4 <__divsi3>
    10d4:	d0a7320d 	sth	r2,-25400(gp)
	ytouch = abs(((ytouch * height) / max_y)-height);
    10d8:	d0a7328b 	ldhu	r2,-25398(gp)
    10dc:	10bfffcc 	andi	r2,r2,65535
    10e0:	10a0001c 	xori	r2,r2,32768
    10e4:	10a00004 	addi	r2,r2,-32768
    10e8:	01403c04 	movi	r5,240
    10ec:	1009883a 	mov	r4,r2
    10f0:	00015680 	call	1568 <__mulsi3>
    10f4:	01434584 	movi	r5,3350
    10f8:	1009883a 	mov	r4,r2
    10fc:	00013b40 	call	13b4 <__divsi3>
    1100:	10bfc404 	addi	r2,r2,-240
    1104:	1000010e 	bge	r2,zero,110c <follow_touch+0x170>
    1108:	0085c83a 	sub	r2,zero,r2
    110c:	d0a7328d 	sth	r2,-25398(gp)


}
    1110:	0001883a 	nop
    1114:	e037883a 	mov	sp,fp
    1118:	dfc00117 	ldw	ra,4(sp)
    111c:	df000017 	ldw	fp,0(sp)
    1120:	dec00204 	addi	sp,sp,8
    1124:	f800283a 	ret

00001128 <isTouching>:


int isTouching(void){
    1128:	defffe04 	addi	sp,sp,-8
    112c:	dfc00115 	stw	ra,4(sp)
    1130:	df000015 	stw	fp,0(sp)
    1134:	d839883a 	mov	fp,sp
	//Set x
	follow_touch();
    1138:	0000f9c0 	call	f9c <follow_touch>
	//Return 1 if larger than max
	return(xtouch < notouch_x);
    113c:	d0a7320b 	ldhu	r2,-25400(gp)
    1140:	10bfffcc 	andi	r2,r2,65535
    1144:	10a0001c 	xori	r2,r2,32768
    1148:	10a00004 	addi	r2,r2,-32768
    114c:	10805510 	cmplti	r2,r2,340
    1150:	10803fcc 	andi	r2,r2,255
}
    1154:	e037883a 	mov	sp,fp
    1158:	dfc00117 	ldw	ra,4(sp)
    115c:	df000017 	ldw	fp,0(sp)
    1160:	dec00204 	addi	sp,sp,8
    1164:	f800283a 	ret

00001168 <draw_touch>:



void draw_touch(void) {
    1168:	defffa04 	addi	sp,sp,-24
    116c:	dfc00515 	stw	ra,20(sp)
    1170:	df000415 	stw	fp,16(sp)
    1174:	df000404 	addi	fp,sp,16
	if (isTouching()) {
    1178:	00011280 	call	1128 <isTouching>
    117c:	10003526 	beq	r2,zero,1254 <draw_touch+0xec>
		while(alt_up_pixel_buffer_dma_check_swap_buffers_status(lt24)) {
    1180:	0001883a 	nop
    1184:	d0a73517 	ldw	r2,-25388(gp)
    1188:	1009883a 	mov	r4,r2
    118c:	0015fb00 	call	15fb0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
    1190:	103ffc1e 	bne	r2,zero,1184 <__alt_mem_Onchip_SRAM+0xf8001184>
			/* make sure swap is done */
		}

		// Cycle through the colors in the array
		static int color_index = 0;
		unsigned short color = colors[color_index];
    1194:	d0e73417 	ldw	r3,-25392(gp)
    1198:	008000b4 	movhi	r2,2
    119c:	10a18c04 	addi	r2,r2,-31184
    11a0:	18c7883a 	add	r3,r3,r3
    11a4:	10c5883a 	add	r2,r2,r3
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	e0bfff0d 	sth	r2,-4(fp)
		color_index = (color_index + 1) % num_colors;
    11b0:	d0a73417 	ldw	r2,-25392(gp)
    11b4:	10800044 	addi	r2,r2,1
    11b8:	d0e00417 	ldw	r3,-32752(gp)
    11bc:	180b883a 	mov	r5,r3
    11c0:	1009883a 	mov	r4,r2
    11c4:	00014380 	call	1438 <__modsi3>
    11c8:	d0a73415 	stw	r2,-25392(gp)

		// Draw a box with the current color
		alt_up_pixel_buffer_dma_draw_box(lt24, xtouch, ytouch, xtouch+7, ytouch+7, color, BACK);
    11cc:	d2273517 	ldw	r8,-25388(gp)
    11d0:	d0a7320b 	ldhu	r2,-25400(gp)
    11d4:	117fffcc 	andi	r5,r2,65535
    11d8:	2960001c 	xori	r5,r5,32768
    11dc:	29600004 	addi	r5,r5,-32768
    11e0:	d0a7328b 	ldhu	r2,-25398(gp)
    11e4:	11bfffcc 	andi	r6,r2,65535
    11e8:	31a0001c 	xori	r6,r6,32768
    11ec:	31a00004 	addi	r6,r6,-32768
    11f0:	d0a7320b 	ldhu	r2,-25400(gp)
    11f4:	10bfffcc 	andi	r2,r2,65535
    11f8:	10a0001c 	xori	r2,r2,32768
    11fc:	10a00004 	addi	r2,r2,-32768
    1200:	11c001c4 	addi	r7,r2,7
    1204:	d0a7328b 	ldhu	r2,-25398(gp)
    1208:	10bfffcc 	andi	r2,r2,65535
    120c:	10a0001c 	xori	r2,r2,32768
    1210:	10a00004 	addi	r2,r2,-32768
    1214:	108001c4 	addi	r2,r2,7
    1218:	e0ffff0b 	ldhu	r3,-4(fp)
    121c:	01000044 	movi	r4,1
    1220:	d9000215 	stw	r4,8(sp)
    1224:	d8c00115 	stw	r3,4(sp)
    1228:	d8800015 	stw	r2,0(sp)
    122c:	4009883a 	mov	r4,r8
    1230:	00161200 	call	16120 <alt_up_pixel_buffer_dma_draw_box>

		// Swap buffers
		alt_up_pixel_buffer_dma_swap_buffers(lt24);
    1234:	d0a73517 	ldw	r2,-25388(gp)
    1238:	1009883a 	mov	r4,r2
    123c:	0015f500 	call	15f50 <alt_up_pixel_buffer_dma_swap_buffers>

		// Set the screen_drawn variable to 1, indicating that the screen has been drawn on
		screen_drawn = 1;
    1240:	00800044 	movi	r2,1
    1244:	d0a73315 	stw	r2,-25396(gp)
		//Add short delay
		usleep(6200);
    1248:	01060e04 	movi	r4,6200
    124c:	00129ec0 	call	129ec <usleep>
			// No longer touching and the screen has not been drawn on yet, so clear
			alt_up_pixel_buffer_dma_clear_screen(lt24,BACK);
			alt_up_pixel_buffer_dma_swap_buffers(lt24);
		}
	}
}
    1250:	00000d06 	br	1288 <draw_touch+0x120>
		screen_drawn = 1;
		//Add short delay
		usleep(6200);
	}
	else {
		if (screen_drawn) {
    1254:	d0a73317 	ldw	r2,-25396(gp)
    1258:	10000426 	beq	r2,zero,126c <draw_touch+0x104>
			// No longer touching, but the screen has been drawn on before, so don't clear
			alt_up_pixel_buffer_dma_swap_buffers(lt24);
    125c:	d0a73517 	ldw	r2,-25388(gp)
    1260:	1009883a 	mov	r4,r2
    1264:	0015f500 	call	15f50 <alt_up_pixel_buffer_dma_swap_buffers>
			// No longer touching and the screen has not been drawn on yet, so clear
			alt_up_pixel_buffer_dma_clear_screen(lt24,BACK);
			alt_up_pixel_buffer_dma_swap_buffers(lt24);
		}
	}
}
    1268:	00000706 	br	1288 <draw_touch+0x120>
		if (screen_drawn) {
			// No longer touching, but the screen has been drawn on before, so don't clear
			alt_up_pixel_buffer_dma_swap_buffers(lt24);
		} else {
			// No longer touching and the screen has not been drawn on yet, so clear
			alt_up_pixel_buffer_dma_clear_screen(lt24,BACK);
    126c:	d0a73517 	ldw	r2,-25388(gp)
    1270:	01400044 	movi	r5,1
    1274:	1009883a 	mov	r4,r2
    1278:	0015fe40 	call	15fe4 <alt_up_pixel_buffer_dma_clear_screen>
			alt_up_pixel_buffer_dma_swap_buffers(lt24);
    127c:	d0a73517 	ldw	r2,-25388(gp)
    1280:	1009883a 	mov	r4,r2
    1284:	0015f500 	call	15f50 <alt_up_pixel_buffer_dma_swap_buffers>
		}
	}
}
    1288:	0001883a 	nop
    128c:	e037883a 	mov	sp,fp
    1290:	dfc00117 	ldw	ra,4(sp)
    1294:	df000017 	ldw	fp,0(sp)
    1298:	dec00204 	addi	sp,sp,8
    129c:	f800283a 	ret

000012a0 <draw_box>:


/**
 * Draws enemy boxes at location x and y
 */
void draw_box(int x, int y, uint16_t color){
    12a0:	defff804 	addi	sp,sp,-32
    12a4:	dfc00715 	stw	ra,28(sp)
    12a8:	df000615 	stw	fp,24(sp)
    12ac:	df000604 	addi	fp,sp,24
    12b0:	e13ffd15 	stw	r4,-12(fp)
    12b4:	e17ffe15 	stw	r5,-8(fp)
    12b8:	3005883a 	mov	r2,r6
    12bc:	e0bfff0d 	sth	r2,-4(fp)
	alt_up_pixel_buffer_dma_draw_box(lt24, 0+x, 0+y, 10+x, 10+y, color, BACK);
    12c0:	d2273517 	ldw	r8,-25388(gp)
    12c4:	e0bffd17 	ldw	r2,-12(fp)
    12c8:	11400284 	addi	r5,r2,10
    12cc:	e0bffe17 	ldw	r2,-8(fp)
    12d0:	10800284 	addi	r2,r2,10
    12d4:	e0ffff0b 	ldhu	r3,-4(fp)
    12d8:	01000044 	movi	r4,1
    12dc:	d9000215 	stw	r4,8(sp)
    12e0:	d8c00115 	stw	r3,4(sp)
    12e4:	d8800015 	stw	r2,0(sp)
    12e8:	280f883a 	mov	r7,r5
    12ec:	e1bffe17 	ldw	r6,-8(fp)
    12f0:	e17ffd17 	ldw	r5,-12(fp)
    12f4:	4009883a 	mov	r4,r8
    12f8:	00161200 	call	16120 <alt_up_pixel_buffer_dma_draw_box>

}
    12fc:	0001883a 	nop
    1300:	e037883a 	mov	sp,fp
    1304:	dfc00117 	ldw	ra,4(sp)
    1308:	df000017 	ldw	fp,0(sp)
    130c:	dec00204 	addi	sp,sp,8
    1310:	f800283a 	ret

00001314 <clear_screen>:

void clear_screen(void){
    1314:	defffe04 	addi	sp,sp,-8
    1318:	dfc00115 	stw	ra,4(sp)
    131c:	df000015 	stw	fp,0(sp)
    1320:	d839883a 	mov	fp,sp
	alt_up_pixel_buffer_dma_clear_screen(lt24,FRONT);
    1324:	d0a73517 	ldw	r2,-25388(gp)
    1328:	000b883a 	mov	r5,zero
    132c:	1009883a 	mov	r4,r2
    1330:	0015fe40 	call	15fe4 <alt_up_pixel_buffer_dma_clear_screen>

}
    1334:	0001883a 	nop
    1338:	e037883a 	mov	sp,fp
    133c:	dfc00117 	ldw	ra,4(sp)
    1340:	df000017 	ldw	fp,0(sp)
    1344:	dec00204 	addi	sp,sp,8
    1348:	f800283a 	ret

0000134c <get_player_x>:

int get_player_x(void){
    134c:	deffff04 	addi	sp,sp,-4
    1350:	df000015 	stw	fp,0(sp)
    1354:	d839883a 	mov	fp,sp
	return x;
    1358:	d0a73017 	ldw	r2,-25408(gp)
}
    135c:	e037883a 	mov	sp,fp
    1360:	df000017 	ldw	fp,0(sp)
    1364:	dec00104 	addi	sp,sp,4
    1368:	f800283a 	ret

0000136c <get_player_y>:

int get_player_y(void){
    136c:	deffff04 	addi	sp,sp,-4
    1370:	df000015 	stw	fp,0(sp)
    1374:	d839883a 	mov	fp,sp
	return y;
    1378:	d0a73117 	ldw	r2,-25404(gp)
}
    137c:	e037883a 	mov	sp,fp
    1380:	df000017 	ldw	fp,0(sp)
    1384:	dec00104 	addi	sp,sp,4
    1388:	f800283a 	ret

0000138c <reset_player_cords>:

void reset_player_cords(void){
    138c:	deffff04 	addi	sp,sp,-4
    1390:	df000015 	stw	fp,0(sp)
    1394:	d839883a 	mov	fp,sp
	//Sets the cords to 0,0
	x = 0;
    1398:	d0273015 	stw	zero,-25408(gp)
	y = 0;
    139c:	d0273115 	stw	zero,-25404(gp)
}
    13a0:	0001883a 	nop
    13a4:	e037883a 	mov	sp,fp
    13a8:	df000017 	ldw	fp,0(sp)
    13ac:	dec00104 	addi	sp,sp,4
    13b0:	f800283a 	ret

000013b4 <__divsi3>:
    13b4:	20001b16 	blt	r4,zero,1424 <__divsi3+0x70>
    13b8:	000f883a 	mov	r7,zero
    13bc:	28001616 	blt	r5,zero,1418 <__divsi3+0x64>
    13c0:	200d883a 	mov	r6,r4
    13c4:	29001a2e 	bgeu	r5,r4,1430 <__divsi3+0x7c>
    13c8:	00800804 	movi	r2,32
    13cc:	00c00044 	movi	r3,1
    13d0:	00000106 	br	13d8 <__divsi3+0x24>
    13d4:	10000d26 	beq	r2,zero,140c <__divsi3+0x58>
    13d8:	294b883a 	add	r5,r5,r5
    13dc:	10bfffc4 	addi	r2,r2,-1
    13e0:	18c7883a 	add	r3,r3,r3
    13e4:	293ffb36 	bltu	r5,r4,13d4 <__alt_mem_Onchip_SRAM+0xf80013d4>
    13e8:	0005883a 	mov	r2,zero
    13ec:	18000726 	beq	r3,zero,140c <__divsi3+0x58>
    13f0:	0005883a 	mov	r2,zero
    13f4:	31400236 	bltu	r6,r5,1400 <__divsi3+0x4c>
    13f8:	314dc83a 	sub	r6,r6,r5
    13fc:	10c4b03a 	or	r2,r2,r3
    1400:	1806d07a 	srli	r3,r3,1
    1404:	280ad07a 	srli	r5,r5,1
    1408:	183ffa1e 	bne	r3,zero,13f4 <__alt_mem_Onchip_SRAM+0xf80013f4>
    140c:	38000126 	beq	r7,zero,1414 <__divsi3+0x60>
    1410:	0085c83a 	sub	r2,zero,r2
    1414:	f800283a 	ret
    1418:	014bc83a 	sub	r5,zero,r5
    141c:	39c0005c 	xori	r7,r7,1
    1420:	003fe706 	br	13c0 <__alt_mem_Onchip_SRAM+0xf80013c0>
    1424:	0109c83a 	sub	r4,zero,r4
    1428:	01c00044 	movi	r7,1
    142c:	003fe306 	br	13bc <__alt_mem_Onchip_SRAM+0xf80013bc>
    1430:	00c00044 	movi	r3,1
    1434:	003fee06 	br	13f0 <__alt_mem_Onchip_SRAM+0xf80013f0>

00001438 <__modsi3>:
    1438:	20001716 	blt	r4,zero,1498 <__modsi3+0x60>
    143c:	000f883a 	mov	r7,zero
    1440:	2005883a 	mov	r2,r4
    1444:	28001216 	blt	r5,zero,1490 <__modsi3+0x58>
    1448:	2900162e 	bgeu	r5,r4,14a4 <__modsi3+0x6c>
    144c:	01800804 	movi	r6,32
    1450:	00c00044 	movi	r3,1
    1454:	00000106 	br	145c <__modsi3+0x24>
    1458:	30000a26 	beq	r6,zero,1484 <__modsi3+0x4c>
    145c:	294b883a 	add	r5,r5,r5
    1460:	31bfffc4 	addi	r6,r6,-1
    1464:	18c7883a 	add	r3,r3,r3
    1468:	293ffb36 	bltu	r5,r4,1458 <__alt_mem_Onchip_SRAM+0xf8001458>
    146c:	18000526 	beq	r3,zero,1484 <__modsi3+0x4c>
    1470:	1806d07a 	srli	r3,r3,1
    1474:	11400136 	bltu	r2,r5,147c <__modsi3+0x44>
    1478:	1145c83a 	sub	r2,r2,r5
    147c:	280ad07a 	srli	r5,r5,1
    1480:	183ffb1e 	bne	r3,zero,1470 <__alt_mem_Onchip_SRAM+0xf8001470>
    1484:	38000126 	beq	r7,zero,148c <__modsi3+0x54>
    1488:	0085c83a 	sub	r2,zero,r2
    148c:	f800283a 	ret
    1490:	014bc83a 	sub	r5,zero,r5
    1494:	003fec06 	br	1448 <__alt_mem_Onchip_SRAM+0xf8001448>
    1498:	0109c83a 	sub	r4,zero,r4
    149c:	01c00044 	movi	r7,1
    14a0:	003fe706 	br	1440 <__alt_mem_Onchip_SRAM+0xf8001440>
    14a4:	00c00044 	movi	r3,1
    14a8:	003ff106 	br	1470 <__alt_mem_Onchip_SRAM+0xf8001470>

000014ac <__udivsi3>:
    14ac:	200d883a 	mov	r6,r4
    14b0:	2900152e 	bgeu	r5,r4,1508 <__udivsi3+0x5c>
    14b4:	28001416 	blt	r5,zero,1508 <__udivsi3+0x5c>
    14b8:	00800804 	movi	r2,32
    14bc:	00c00044 	movi	r3,1
    14c0:	00000206 	br	14cc <__udivsi3+0x20>
    14c4:	10000e26 	beq	r2,zero,1500 <__udivsi3+0x54>
    14c8:	28000516 	blt	r5,zero,14e0 <__udivsi3+0x34>
    14cc:	294b883a 	add	r5,r5,r5
    14d0:	10bfffc4 	addi	r2,r2,-1
    14d4:	18c7883a 	add	r3,r3,r3
    14d8:	293ffa36 	bltu	r5,r4,14c4 <__alt_mem_Onchip_SRAM+0xf80014c4>
    14dc:	18000826 	beq	r3,zero,1500 <__udivsi3+0x54>
    14e0:	0005883a 	mov	r2,zero
    14e4:	31400236 	bltu	r6,r5,14f0 <__udivsi3+0x44>
    14e8:	314dc83a 	sub	r6,r6,r5
    14ec:	10c4b03a 	or	r2,r2,r3
    14f0:	1806d07a 	srli	r3,r3,1
    14f4:	280ad07a 	srli	r5,r5,1
    14f8:	183ffa1e 	bne	r3,zero,14e4 <__alt_mem_Onchip_SRAM+0xf80014e4>
    14fc:	f800283a 	ret
    1500:	0005883a 	mov	r2,zero
    1504:	f800283a 	ret
    1508:	00c00044 	movi	r3,1
    150c:	003ff406 	br	14e0 <__alt_mem_Onchip_SRAM+0xf80014e0>

00001510 <__umodsi3>:
    1510:	2005883a 	mov	r2,r4
    1514:	2900122e 	bgeu	r5,r4,1560 <__umodsi3+0x50>
    1518:	28001116 	blt	r5,zero,1560 <__umodsi3+0x50>
    151c:	01800804 	movi	r6,32
    1520:	00c00044 	movi	r3,1
    1524:	00000206 	br	1530 <__umodsi3+0x20>
    1528:	30000c26 	beq	r6,zero,155c <__umodsi3+0x4c>
    152c:	28000516 	blt	r5,zero,1544 <__umodsi3+0x34>
    1530:	294b883a 	add	r5,r5,r5
    1534:	31bfffc4 	addi	r6,r6,-1
    1538:	18c7883a 	add	r3,r3,r3
    153c:	293ffa36 	bltu	r5,r4,1528 <__alt_mem_Onchip_SRAM+0xf8001528>
    1540:	18000626 	beq	r3,zero,155c <__umodsi3+0x4c>
    1544:	1806d07a 	srli	r3,r3,1
    1548:	11400136 	bltu	r2,r5,1550 <__umodsi3+0x40>
    154c:	1145c83a 	sub	r2,r2,r5
    1550:	280ad07a 	srli	r5,r5,1
    1554:	183ffb1e 	bne	r3,zero,1544 <__alt_mem_Onchip_SRAM+0xf8001544>
    1558:	f800283a 	ret
    155c:	f800283a 	ret
    1560:	00c00044 	movi	r3,1
    1564:	003ff706 	br	1544 <__alt_mem_Onchip_SRAM+0xf8001544>

00001568 <__mulsi3>:
    1568:	0005883a 	mov	r2,zero
    156c:	20000726 	beq	r4,zero,158c <__mulsi3+0x24>
    1570:	20c0004c 	andi	r3,r4,1
    1574:	2008d07a 	srli	r4,r4,1
    1578:	18000126 	beq	r3,zero,1580 <__mulsi3+0x18>
    157c:	1145883a 	add	r2,r2,r5
    1580:	294b883a 	add	r5,r5,r5
    1584:	203ffa1e 	bne	r4,zero,1570 <__alt_mem_Onchip_SRAM+0xf8001570>
    1588:	f800283a 	ret
    158c:	f800283a 	ret

00001590 <malloc>:
    1590:	008000b4 	movhi	r2,2
    1594:	10a88304 	addi	r2,r2,-24052
    1598:	200b883a 	mov	r5,r4
    159c:	11000017 	ldw	r4,0(r2)
    15a0:	00015b81 	jmpi	15b8 <_malloc_r>

000015a4 <free>:
    15a4:	008000b4 	movhi	r2,2
    15a8:	10a88304 	addi	r2,r2,-24052
    15ac:	200b883a 	mov	r5,r4
    15b0:	11000017 	ldw	r4,0(r2)
    15b4:	000892c1 	jmpi	892c <_free_r>

000015b8 <_malloc_r>:
    15b8:	defff504 	addi	sp,sp,-44
    15bc:	dc800315 	stw	r18,12(sp)
    15c0:	dfc00a15 	stw	ra,40(sp)
    15c4:	df000915 	stw	fp,36(sp)
    15c8:	ddc00815 	stw	r23,32(sp)
    15cc:	dd800715 	stw	r22,28(sp)
    15d0:	dd400615 	stw	r21,24(sp)
    15d4:	dd000515 	stw	r20,20(sp)
    15d8:	dcc00415 	stw	r19,16(sp)
    15dc:	dc400215 	stw	r17,8(sp)
    15e0:	dc000115 	stw	r16,4(sp)
    15e4:	288002c4 	addi	r2,r5,11
    15e8:	00c00584 	movi	r3,22
    15ec:	2025883a 	mov	r18,r4
    15f0:	18807f2e 	bgeu	r3,r2,17f0 <_malloc_r+0x238>
    15f4:	047ffe04 	movi	r17,-8
    15f8:	1462703a 	and	r17,r2,r17
    15fc:	8800a316 	blt	r17,zero,188c <_malloc_r+0x2d4>
    1600:	8940a236 	bltu	r17,r5,188c <_malloc_r+0x2d4>
    1604:	001258c0 	call	1258c <__malloc_lock>
    1608:	00807dc4 	movi	r2,503
    160c:	1441e92e 	bgeu	r2,r17,1db4 <_malloc_r+0x7fc>
    1610:	8804d27a 	srli	r2,r17,9
    1614:	1000a126 	beq	r2,zero,189c <_malloc_r+0x2e4>
    1618:	00c00104 	movi	r3,4
    161c:	18811e36 	bltu	r3,r2,1a98 <_malloc_r+0x4e0>
    1620:	8804d1ba 	srli	r2,r17,6
    1624:	12000e44 	addi	r8,r2,57
    1628:	11c00e04 	addi	r7,r2,56
    162c:	4209883a 	add	r4,r8,r8
    1630:	04c000b4 	movhi	r19,2
    1634:	2109883a 	add	r4,r4,r4
    1638:	9ce19004 	addi	r19,r19,-31168
    163c:	2109883a 	add	r4,r4,r4
    1640:	9909883a 	add	r4,r19,r4
    1644:	24000117 	ldw	r16,4(r4)
    1648:	213ffe04 	addi	r4,r4,-8
    164c:	24009726 	beq	r4,r16,18ac <_malloc_r+0x2f4>
    1650:	80800117 	ldw	r2,4(r16)
    1654:	01bfff04 	movi	r6,-4
    1658:	014003c4 	movi	r5,15
    165c:	1184703a 	and	r2,r2,r6
    1660:	1447c83a 	sub	r3,r2,r17
    1664:	28c00716 	blt	r5,r3,1684 <_malloc_r+0xcc>
    1668:	1800920e 	bge	r3,zero,18b4 <_malloc_r+0x2fc>
    166c:	84000317 	ldw	r16,12(r16)
    1670:	24008e26 	beq	r4,r16,18ac <_malloc_r+0x2f4>
    1674:	80800117 	ldw	r2,4(r16)
    1678:	1184703a 	and	r2,r2,r6
    167c:	1447c83a 	sub	r3,r2,r17
    1680:	28fff90e 	bge	r5,r3,1668 <__alt_mem_Onchip_SRAM+0xf8001668>
    1684:	3809883a 	mov	r4,r7
    1688:	018000b4 	movhi	r6,2
    168c:	9c000417 	ldw	r16,16(r19)
    1690:	31a19004 	addi	r6,r6,-31168
    1694:	32000204 	addi	r8,r6,8
    1698:	82013426 	beq	r16,r8,1b6c <_malloc_r+0x5b4>
    169c:	80c00117 	ldw	r3,4(r16)
    16a0:	00bfff04 	movi	r2,-4
    16a4:	188e703a 	and	r7,r3,r2
    16a8:	3c45c83a 	sub	r2,r7,r17
    16ac:	00c003c4 	movi	r3,15
    16b0:	18811f16 	blt	r3,r2,1b30 <_malloc_r+0x578>
    16b4:	32000515 	stw	r8,20(r6)
    16b8:	32000415 	stw	r8,16(r6)
    16bc:	10007f0e 	bge	r2,zero,18bc <_malloc_r+0x304>
    16c0:	00807fc4 	movi	r2,511
    16c4:	11c0fd36 	bltu	r2,r7,1abc <_malloc_r+0x504>
    16c8:	3806d0fa 	srli	r3,r7,3
    16cc:	01c00044 	movi	r7,1
    16d0:	30800117 	ldw	r2,4(r6)
    16d4:	19400044 	addi	r5,r3,1
    16d8:	294b883a 	add	r5,r5,r5
    16dc:	1807d0ba 	srai	r3,r3,2
    16e0:	294b883a 	add	r5,r5,r5
    16e4:	294b883a 	add	r5,r5,r5
    16e8:	298b883a 	add	r5,r5,r6
    16ec:	38c6983a 	sll	r3,r7,r3
    16f0:	29c00017 	ldw	r7,0(r5)
    16f4:	2a7ffe04 	addi	r9,r5,-8
    16f8:	1886b03a 	or	r3,r3,r2
    16fc:	82400315 	stw	r9,12(r16)
    1700:	81c00215 	stw	r7,8(r16)
    1704:	30c00115 	stw	r3,4(r6)
    1708:	2c000015 	stw	r16,0(r5)
    170c:	3c000315 	stw	r16,12(r7)
    1710:	2005d0ba 	srai	r2,r4,2
    1714:	01400044 	movi	r5,1
    1718:	288a983a 	sll	r5,r5,r2
    171c:	19406f36 	bltu	r3,r5,18dc <_malloc_r+0x324>
    1720:	28c4703a 	and	r2,r5,r3
    1724:	10000a1e 	bne	r2,zero,1750 <_malloc_r+0x198>
    1728:	00bfff04 	movi	r2,-4
    172c:	294b883a 	add	r5,r5,r5
    1730:	2088703a 	and	r4,r4,r2
    1734:	28c4703a 	and	r2,r5,r3
    1738:	21000104 	addi	r4,r4,4
    173c:	1000041e 	bne	r2,zero,1750 <_malloc_r+0x198>
    1740:	294b883a 	add	r5,r5,r5
    1744:	28c4703a 	and	r2,r5,r3
    1748:	21000104 	addi	r4,r4,4
    174c:	103ffc26 	beq	r2,zero,1740 <__alt_mem_Onchip_SRAM+0xf8001740>
    1750:	02bfff04 	movi	r10,-4
    1754:	024003c4 	movi	r9,15
    1758:	21800044 	addi	r6,r4,1
    175c:	318d883a 	add	r6,r6,r6
    1760:	318d883a 	add	r6,r6,r6
    1764:	318d883a 	add	r6,r6,r6
    1768:	998d883a 	add	r6,r19,r6
    176c:	333ffe04 	addi	r12,r6,-8
    1770:	2017883a 	mov	r11,r4
    1774:	31800104 	addi	r6,r6,4
    1778:	34000017 	ldw	r16,0(r6)
    177c:	31fffd04 	addi	r7,r6,-12
    1780:	81c0041e 	bne	r16,r7,1794 <_malloc_r+0x1dc>
    1784:	0000fb06 	br	1b74 <_malloc_r+0x5bc>
    1788:	1801030e 	bge	r3,zero,1b98 <_malloc_r+0x5e0>
    178c:	84000317 	ldw	r16,12(r16)
    1790:	81c0f826 	beq	r16,r7,1b74 <_malloc_r+0x5bc>
    1794:	80800117 	ldw	r2,4(r16)
    1798:	1284703a 	and	r2,r2,r10
    179c:	1447c83a 	sub	r3,r2,r17
    17a0:	48fff90e 	bge	r9,r3,1788 <__alt_mem_Onchip_SRAM+0xf8001788>
    17a4:	80800317 	ldw	r2,12(r16)
    17a8:	81000217 	ldw	r4,8(r16)
    17ac:	89400054 	ori	r5,r17,1
    17b0:	81400115 	stw	r5,4(r16)
    17b4:	20800315 	stw	r2,12(r4)
    17b8:	11000215 	stw	r4,8(r2)
    17bc:	8463883a 	add	r17,r16,r17
    17c0:	9c400515 	stw	r17,20(r19)
    17c4:	9c400415 	stw	r17,16(r19)
    17c8:	18800054 	ori	r2,r3,1
    17cc:	88800115 	stw	r2,4(r17)
    17d0:	8a000315 	stw	r8,12(r17)
    17d4:	8a000215 	stw	r8,8(r17)
    17d8:	88e3883a 	add	r17,r17,r3
    17dc:	88c00015 	stw	r3,0(r17)
    17e0:	9009883a 	mov	r4,r18
    17e4:	00125b00 	call	125b0 <__malloc_unlock>
    17e8:	80800204 	addi	r2,r16,8
    17ec:	00001b06 	br	185c <_malloc_r+0x2a4>
    17f0:	04400404 	movi	r17,16
    17f4:	89402536 	bltu	r17,r5,188c <_malloc_r+0x2d4>
    17f8:	001258c0 	call	1258c <__malloc_lock>
    17fc:	00800184 	movi	r2,6
    1800:	01000084 	movi	r4,2
    1804:	04c000b4 	movhi	r19,2
    1808:	1085883a 	add	r2,r2,r2
    180c:	9ce19004 	addi	r19,r19,-31168
    1810:	1085883a 	add	r2,r2,r2
    1814:	9885883a 	add	r2,r19,r2
    1818:	14000117 	ldw	r16,4(r2)
    181c:	10fffe04 	addi	r3,r2,-8
    1820:	80c0d926 	beq	r16,r3,1b88 <_malloc_r+0x5d0>
    1824:	80c00117 	ldw	r3,4(r16)
    1828:	81000317 	ldw	r4,12(r16)
    182c:	00bfff04 	movi	r2,-4
    1830:	1884703a 	and	r2,r3,r2
    1834:	81400217 	ldw	r5,8(r16)
    1838:	8085883a 	add	r2,r16,r2
    183c:	10c00117 	ldw	r3,4(r2)
    1840:	29000315 	stw	r4,12(r5)
    1844:	21400215 	stw	r5,8(r4)
    1848:	18c00054 	ori	r3,r3,1
    184c:	10c00115 	stw	r3,4(r2)
    1850:	9009883a 	mov	r4,r18
    1854:	00125b00 	call	125b0 <__malloc_unlock>
    1858:	80800204 	addi	r2,r16,8
    185c:	dfc00a17 	ldw	ra,40(sp)
    1860:	df000917 	ldw	fp,36(sp)
    1864:	ddc00817 	ldw	r23,32(sp)
    1868:	dd800717 	ldw	r22,28(sp)
    186c:	dd400617 	ldw	r21,24(sp)
    1870:	dd000517 	ldw	r20,20(sp)
    1874:	dcc00417 	ldw	r19,16(sp)
    1878:	dc800317 	ldw	r18,12(sp)
    187c:	dc400217 	ldw	r17,8(sp)
    1880:	dc000117 	ldw	r16,4(sp)
    1884:	dec00b04 	addi	sp,sp,44
    1888:	f800283a 	ret
    188c:	00800304 	movi	r2,12
    1890:	90800015 	stw	r2,0(r18)
    1894:	0005883a 	mov	r2,zero
    1898:	003ff006 	br	185c <__alt_mem_Onchip_SRAM+0xf800185c>
    189c:	01002004 	movi	r4,128
    18a0:	02001004 	movi	r8,64
    18a4:	01c00fc4 	movi	r7,63
    18a8:	003f6106 	br	1630 <__alt_mem_Onchip_SRAM+0xf8001630>
    18ac:	4009883a 	mov	r4,r8
    18b0:	003f7506 	br	1688 <__alt_mem_Onchip_SRAM+0xf8001688>
    18b4:	81000317 	ldw	r4,12(r16)
    18b8:	003fde06 	br	1834 <__alt_mem_Onchip_SRAM+0xf8001834>
    18bc:	81c5883a 	add	r2,r16,r7
    18c0:	11400117 	ldw	r5,4(r2)
    18c4:	9009883a 	mov	r4,r18
    18c8:	29400054 	ori	r5,r5,1
    18cc:	11400115 	stw	r5,4(r2)
    18d0:	00125b00 	call	125b0 <__malloc_unlock>
    18d4:	80800204 	addi	r2,r16,8
    18d8:	003fe006 	br	185c <__alt_mem_Onchip_SRAM+0xf800185c>
    18dc:	9c000217 	ldw	r16,8(r19)
    18e0:	00bfff04 	movi	r2,-4
    18e4:	85800117 	ldw	r22,4(r16)
    18e8:	b0ac703a 	and	r22,r22,r2
    18ec:	b4400336 	bltu	r22,r17,18fc <_malloc_r+0x344>
    18f0:	b445c83a 	sub	r2,r22,r17
    18f4:	00c003c4 	movi	r3,15
    18f8:	18805d16 	blt	r3,r2,1a70 <_malloc_r+0x4b8>
    18fc:	05c000b4 	movhi	r23,2
    1900:	008000b4 	movhi	r2,2
    1904:	10afb304 	addi	r2,r2,-16692
    1908:	bde88004 	addi	r23,r23,-24064
    190c:	15400017 	ldw	r21,0(r2)
    1910:	b8c00017 	ldw	r3,0(r23)
    1914:	00bfffc4 	movi	r2,-1
    1918:	858d883a 	add	r6,r16,r22
    191c:	8d6b883a 	add	r21,r17,r21
    1920:	1880ea26 	beq	r3,r2,1ccc <_malloc_r+0x714>
    1924:	ad4403c4 	addi	r21,r21,4111
    1928:	00bc0004 	movi	r2,-4096
    192c:	a8aa703a 	and	r21,r21,r2
    1930:	a80b883a 	mov	r5,r21
    1934:	9009883a 	mov	r4,r18
    1938:	d9800015 	stw	r6,0(sp)
    193c:	0001eac0 	call	1eac <_sbrk_r>
    1940:	1029883a 	mov	r20,r2
    1944:	00bfffc4 	movi	r2,-1
    1948:	d9800017 	ldw	r6,0(sp)
    194c:	a080e826 	beq	r20,r2,1cf0 <_malloc_r+0x738>
    1950:	a180a636 	bltu	r20,r6,1bec <_malloc_r+0x634>
    1954:	070000b4 	movhi	fp,2
    1958:	e72fc304 	addi	fp,fp,-16628
    195c:	e0800017 	ldw	r2,0(fp)
    1960:	a887883a 	add	r3,r21,r2
    1964:	e0c00015 	stw	r3,0(fp)
    1968:	3500e626 	beq	r6,r20,1d04 <_malloc_r+0x74c>
    196c:	b9000017 	ldw	r4,0(r23)
    1970:	00bfffc4 	movi	r2,-1
    1974:	2080ee26 	beq	r4,r2,1d30 <_malloc_r+0x778>
    1978:	a185c83a 	sub	r2,r20,r6
    197c:	10c5883a 	add	r2,r2,r3
    1980:	e0800015 	stw	r2,0(fp)
    1984:	a0c001cc 	andi	r3,r20,7
    1988:	1800bc26 	beq	r3,zero,1c7c <_malloc_r+0x6c4>
    198c:	a0e9c83a 	sub	r20,r20,r3
    1990:	00840204 	movi	r2,4104
    1994:	a5000204 	addi	r20,r20,8
    1998:	10c7c83a 	sub	r3,r2,r3
    199c:	a545883a 	add	r2,r20,r21
    19a0:	1083ffcc 	andi	r2,r2,4095
    19a4:	18abc83a 	sub	r21,r3,r2
    19a8:	a80b883a 	mov	r5,r21
    19ac:	9009883a 	mov	r4,r18
    19b0:	0001eac0 	call	1eac <_sbrk_r>
    19b4:	00ffffc4 	movi	r3,-1
    19b8:	10c0e126 	beq	r2,r3,1d40 <_malloc_r+0x788>
    19bc:	1505c83a 	sub	r2,r2,r20
    19c0:	1545883a 	add	r2,r2,r21
    19c4:	10800054 	ori	r2,r2,1
    19c8:	e0c00017 	ldw	r3,0(fp)
    19cc:	9d000215 	stw	r20,8(r19)
    19d0:	a0800115 	stw	r2,4(r20)
    19d4:	a8c7883a 	add	r3,r21,r3
    19d8:	e0c00015 	stw	r3,0(fp)
    19dc:	84c00e26 	beq	r16,r19,1a18 <_malloc_r+0x460>
    19e0:	018003c4 	movi	r6,15
    19e4:	3580a72e 	bgeu	r6,r22,1c84 <_malloc_r+0x6cc>
    19e8:	81400117 	ldw	r5,4(r16)
    19ec:	013ffe04 	movi	r4,-8
    19f0:	b0bffd04 	addi	r2,r22,-12
    19f4:	1104703a 	and	r2,r2,r4
    19f8:	2900004c 	andi	r4,r5,1
    19fc:	2088b03a 	or	r4,r4,r2
    1a00:	81000115 	stw	r4,4(r16)
    1a04:	01400144 	movi	r5,5
    1a08:	8089883a 	add	r4,r16,r2
    1a0c:	21400115 	stw	r5,4(r4)
    1a10:	21400215 	stw	r5,8(r4)
    1a14:	3080cd36 	bltu	r6,r2,1d4c <_malloc_r+0x794>
    1a18:	008000b4 	movhi	r2,2
    1a1c:	10afb204 	addi	r2,r2,-16696
    1a20:	11000017 	ldw	r4,0(r2)
    1a24:	20c0012e 	bgeu	r4,r3,1a2c <_malloc_r+0x474>
    1a28:	10c00015 	stw	r3,0(r2)
    1a2c:	008000b4 	movhi	r2,2
    1a30:	10afb104 	addi	r2,r2,-16700
    1a34:	11000017 	ldw	r4,0(r2)
    1a38:	9c000217 	ldw	r16,8(r19)
    1a3c:	20c0012e 	bgeu	r4,r3,1a44 <_malloc_r+0x48c>
    1a40:	10c00015 	stw	r3,0(r2)
    1a44:	80c00117 	ldw	r3,4(r16)
    1a48:	00bfff04 	movi	r2,-4
    1a4c:	1886703a 	and	r3,r3,r2
    1a50:	1c45c83a 	sub	r2,r3,r17
    1a54:	1c400236 	bltu	r3,r17,1a60 <_malloc_r+0x4a8>
    1a58:	00c003c4 	movi	r3,15
    1a5c:	18800416 	blt	r3,r2,1a70 <_malloc_r+0x4b8>
    1a60:	9009883a 	mov	r4,r18
    1a64:	00125b00 	call	125b0 <__malloc_unlock>
    1a68:	0005883a 	mov	r2,zero
    1a6c:	003f7b06 	br	185c <__alt_mem_Onchip_SRAM+0xf800185c>
    1a70:	88c00054 	ori	r3,r17,1
    1a74:	80c00115 	stw	r3,4(r16)
    1a78:	8463883a 	add	r17,r16,r17
    1a7c:	10800054 	ori	r2,r2,1
    1a80:	9c400215 	stw	r17,8(r19)
    1a84:	88800115 	stw	r2,4(r17)
    1a88:	9009883a 	mov	r4,r18
    1a8c:	00125b00 	call	125b0 <__malloc_unlock>
    1a90:	80800204 	addi	r2,r16,8
    1a94:	003f7106 	br	185c <__alt_mem_Onchip_SRAM+0xf800185c>
    1a98:	00c00504 	movi	r3,20
    1a9c:	18804a2e 	bgeu	r3,r2,1bc8 <_malloc_r+0x610>
    1aa0:	00c01504 	movi	r3,84
    1aa4:	18806e36 	bltu	r3,r2,1c60 <_malloc_r+0x6a8>
    1aa8:	8804d33a 	srli	r2,r17,12
    1aac:	12001bc4 	addi	r8,r2,111
    1ab0:	11c01b84 	addi	r7,r2,110
    1ab4:	4209883a 	add	r4,r8,r8
    1ab8:	003edd06 	br	1630 <__alt_mem_Onchip_SRAM+0xf8001630>
    1abc:	3804d27a 	srli	r2,r7,9
    1ac0:	00c00104 	movi	r3,4
    1ac4:	1880442e 	bgeu	r3,r2,1bd8 <_malloc_r+0x620>
    1ac8:	00c00504 	movi	r3,20
    1acc:	18808136 	bltu	r3,r2,1cd4 <_malloc_r+0x71c>
    1ad0:	11401704 	addi	r5,r2,92
    1ad4:	10c016c4 	addi	r3,r2,91
    1ad8:	294b883a 	add	r5,r5,r5
    1adc:	294b883a 	add	r5,r5,r5
    1ae0:	294b883a 	add	r5,r5,r5
    1ae4:	994b883a 	add	r5,r19,r5
    1ae8:	28800017 	ldw	r2,0(r5)
    1aec:	018000b4 	movhi	r6,2
    1af0:	297ffe04 	addi	r5,r5,-8
    1af4:	31a19004 	addi	r6,r6,-31168
    1af8:	28806526 	beq	r5,r2,1c90 <_malloc_r+0x6d8>
    1afc:	01bfff04 	movi	r6,-4
    1b00:	10c00117 	ldw	r3,4(r2)
    1b04:	1986703a 	and	r3,r3,r6
    1b08:	38c0022e 	bgeu	r7,r3,1b14 <_malloc_r+0x55c>
    1b0c:	10800217 	ldw	r2,8(r2)
    1b10:	28bffb1e 	bne	r5,r2,1b00 <__alt_mem_Onchip_SRAM+0xf8001b00>
    1b14:	11400317 	ldw	r5,12(r2)
    1b18:	98c00117 	ldw	r3,4(r19)
    1b1c:	81400315 	stw	r5,12(r16)
    1b20:	80800215 	stw	r2,8(r16)
    1b24:	2c000215 	stw	r16,8(r5)
    1b28:	14000315 	stw	r16,12(r2)
    1b2c:	003ef806 	br	1710 <__alt_mem_Onchip_SRAM+0xf8001710>
    1b30:	88c00054 	ori	r3,r17,1
    1b34:	80c00115 	stw	r3,4(r16)
    1b38:	8463883a 	add	r17,r16,r17
    1b3c:	34400515 	stw	r17,20(r6)
    1b40:	34400415 	stw	r17,16(r6)
    1b44:	10c00054 	ori	r3,r2,1
    1b48:	8a000315 	stw	r8,12(r17)
    1b4c:	8a000215 	stw	r8,8(r17)
    1b50:	88c00115 	stw	r3,4(r17)
    1b54:	88a3883a 	add	r17,r17,r2
    1b58:	88800015 	stw	r2,0(r17)
    1b5c:	9009883a 	mov	r4,r18
    1b60:	00125b00 	call	125b0 <__malloc_unlock>
    1b64:	80800204 	addi	r2,r16,8
    1b68:	003f3c06 	br	185c <__alt_mem_Onchip_SRAM+0xf800185c>
    1b6c:	30c00117 	ldw	r3,4(r6)
    1b70:	003ee706 	br	1710 <__alt_mem_Onchip_SRAM+0xf8001710>
    1b74:	5ac00044 	addi	r11,r11,1
    1b78:	588000cc 	andi	r2,r11,3
    1b7c:	31800204 	addi	r6,r6,8
    1b80:	103efd1e 	bne	r2,zero,1778 <__alt_mem_Onchip_SRAM+0xf8001778>
    1b84:	00002406 	br	1c18 <_malloc_r+0x660>
    1b88:	14000317 	ldw	r16,12(r2)
    1b8c:	143f251e 	bne	r2,r16,1824 <__alt_mem_Onchip_SRAM+0xf8001824>
    1b90:	21000084 	addi	r4,r4,2
    1b94:	003ebc06 	br	1688 <__alt_mem_Onchip_SRAM+0xf8001688>
    1b98:	8085883a 	add	r2,r16,r2
    1b9c:	10c00117 	ldw	r3,4(r2)
    1ba0:	81000317 	ldw	r4,12(r16)
    1ba4:	81400217 	ldw	r5,8(r16)
    1ba8:	18c00054 	ori	r3,r3,1
    1bac:	10c00115 	stw	r3,4(r2)
    1bb0:	29000315 	stw	r4,12(r5)
    1bb4:	21400215 	stw	r5,8(r4)
    1bb8:	9009883a 	mov	r4,r18
    1bbc:	00125b00 	call	125b0 <__malloc_unlock>
    1bc0:	80800204 	addi	r2,r16,8
    1bc4:	003f2506 	br	185c <__alt_mem_Onchip_SRAM+0xf800185c>
    1bc8:	12001704 	addi	r8,r2,92
    1bcc:	11c016c4 	addi	r7,r2,91
    1bd0:	4209883a 	add	r4,r8,r8
    1bd4:	003e9606 	br	1630 <__alt_mem_Onchip_SRAM+0xf8001630>
    1bd8:	3804d1ba 	srli	r2,r7,6
    1bdc:	11400e44 	addi	r5,r2,57
    1be0:	10c00e04 	addi	r3,r2,56
    1be4:	294b883a 	add	r5,r5,r5
    1be8:	003fbc06 	br	1adc <__alt_mem_Onchip_SRAM+0xf8001adc>
    1bec:	84ff5926 	beq	r16,r19,1954 <__alt_mem_Onchip_SRAM+0xf8001954>
    1bf0:	008000b4 	movhi	r2,2
    1bf4:	10a19004 	addi	r2,r2,-31168
    1bf8:	14000217 	ldw	r16,8(r2)
    1bfc:	00bfff04 	movi	r2,-4
    1c00:	80c00117 	ldw	r3,4(r16)
    1c04:	1886703a 	and	r3,r3,r2
    1c08:	003f9106 	br	1a50 <__alt_mem_Onchip_SRAM+0xf8001a50>
    1c0c:	60800217 	ldw	r2,8(r12)
    1c10:	213fffc4 	addi	r4,r4,-1
    1c14:	1300651e 	bne	r2,r12,1dac <_malloc_r+0x7f4>
    1c18:	208000cc 	andi	r2,r4,3
    1c1c:	633ffe04 	addi	r12,r12,-8
    1c20:	103ffa1e 	bne	r2,zero,1c0c <__alt_mem_Onchip_SRAM+0xf8001c0c>
    1c24:	98800117 	ldw	r2,4(r19)
    1c28:	0146303a 	nor	r3,zero,r5
    1c2c:	1884703a 	and	r2,r3,r2
    1c30:	98800115 	stw	r2,4(r19)
    1c34:	294b883a 	add	r5,r5,r5
    1c38:	117f2836 	bltu	r2,r5,18dc <__alt_mem_Onchip_SRAM+0xf80018dc>
    1c3c:	283f2726 	beq	r5,zero,18dc <__alt_mem_Onchip_SRAM+0xf80018dc>
    1c40:	2886703a 	and	r3,r5,r2
    1c44:	5809883a 	mov	r4,r11
    1c48:	183ec31e 	bne	r3,zero,1758 <__alt_mem_Onchip_SRAM+0xf8001758>
    1c4c:	294b883a 	add	r5,r5,r5
    1c50:	2886703a 	and	r3,r5,r2
    1c54:	21000104 	addi	r4,r4,4
    1c58:	183ffc26 	beq	r3,zero,1c4c <__alt_mem_Onchip_SRAM+0xf8001c4c>
    1c5c:	003ebe06 	br	1758 <__alt_mem_Onchip_SRAM+0xf8001758>
    1c60:	00c05504 	movi	r3,340
    1c64:	18801236 	bltu	r3,r2,1cb0 <_malloc_r+0x6f8>
    1c68:	8804d3fa 	srli	r2,r17,15
    1c6c:	12001e04 	addi	r8,r2,120
    1c70:	11c01dc4 	addi	r7,r2,119
    1c74:	4209883a 	add	r4,r8,r8
    1c78:	003e6d06 	br	1630 <__alt_mem_Onchip_SRAM+0xf8001630>
    1c7c:	00c40004 	movi	r3,4096
    1c80:	003f4606 	br	199c <__alt_mem_Onchip_SRAM+0xf800199c>
    1c84:	00800044 	movi	r2,1
    1c88:	a0800115 	stw	r2,4(r20)
    1c8c:	003f7406 	br	1a60 <__alt_mem_Onchip_SRAM+0xf8001a60>
    1c90:	1805d0ba 	srai	r2,r3,2
    1c94:	01c00044 	movi	r7,1
    1c98:	30c00117 	ldw	r3,4(r6)
    1c9c:	388e983a 	sll	r7,r7,r2
    1ca0:	2805883a 	mov	r2,r5
    1ca4:	38c6b03a 	or	r3,r7,r3
    1ca8:	30c00115 	stw	r3,4(r6)
    1cac:	003f9b06 	br	1b1c <__alt_mem_Onchip_SRAM+0xf8001b1c>
    1cb0:	00c15504 	movi	r3,1364
    1cb4:	18801a36 	bltu	r3,r2,1d20 <_malloc_r+0x768>
    1cb8:	8804d4ba 	srli	r2,r17,18
    1cbc:	12001f44 	addi	r8,r2,125
    1cc0:	11c01f04 	addi	r7,r2,124
    1cc4:	4209883a 	add	r4,r8,r8
    1cc8:	003e5906 	br	1630 <__alt_mem_Onchip_SRAM+0xf8001630>
    1ccc:	ad400404 	addi	r21,r21,16
    1cd0:	003f1706 	br	1930 <__alt_mem_Onchip_SRAM+0xf8001930>
    1cd4:	00c01504 	movi	r3,84
    1cd8:	18802336 	bltu	r3,r2,1d68 <_malloc_r+0x7b0>
    1cdc:	3804d33a 	srli	r2,r7,12
    1ce0:	11401bc4 	addi	r5,r2,111
    1ce4:	10c01b84 	addi	r3,r2,110
    1ce8:	294b883a 	add	r5,r5,r5
    1cec:	003f7b06 	br	1adc <__alt_mem_Onchip_SRAM+0xf8001adc>
    1cf0:	9c000217 	ldw	r16,8(r19)
    1cf4:	00bfff04 	movi	r2,-4
    1cf8:	80c00117 	ldw	r3,4(r16)
    1cfc:	1886703a 	and	r3,r3,r2
    1d00:	003f5306 	br	1a50 <__alt_mem_Onchip_SRAM+0xf8001a50>
    1d04:	3083ffcc 	andi	r2,r6,4095
    1d08:	103f181e 	bne	r2,zero,196c <__alt_mem_Onchip_SRAM+0xf800196c>
    1d0c:	99000217 	ldw	r4,8(r19)
    1d10:	b545883a 	add	r2,r22,r21
    1d14:	10800054 	ori	r2,r2,1
    1d18:	20800115 	stw	r2,4(r4)
    1d1c:	003f3e06 	br	1a18 <__alt_mem_Onchip_SRAM+0xf8001a18>
    1d20:	01003f84 	movi	r4,254
    1d24:	02001fc4 	movi	r8,127
    1d28:	01c01f84 	movi	r7,126
    1d2c:	003e4006 	br	1630 <__alt_mem_Onchip_SRAM+0xf8001630>
    1d30:	008000b4 	movhi	r2,2
    1d34:	10a88004 	addi	r2,r2,-24064
    1d38:	15000015 	stw	r20,0(r2)
    1d3c:	003f1106 	br	1984 <__alt_mem_Onchip_SRAM+0xf8001984>
    1d40:	00800044 	movi	r2,1
    1d44:	002b883a 	mov	r21,zero
    1d48:	003f1f06 	br	19c8 <__alt_mem_Onchip_SRAM+0xf80019c8>
    1d4c:	81400204 	addi	r5,r16,8
    1d50:	9009883a 	mov	r4,r18
    1d54:	000892c0 	call	892c <_free_r>
    1d58:	008000b4 	movhi	r2,2
    1d5c:	10afc304 	addi	r2,r2,-16628
    1d60:	10c00017 	ldw	r3,0(r2)
    1d64:	003f2c06 	br	1a18 <__alt_mem_Onchip_SRAM+0xf8001a18>
    1d68:	00c05504 	movi	r3,340
    1d6c:	18800536 	bltu	r3,r2,1d84 <_malloc_r+0x7cc>
    1d70:	3804d3fa 	srli	r2,r7,15
    1d74:	11401e04 	addi	r5,r2,120
    1d78:	10c01dc4 	addi	r3,r2,119
    1d7c:	294b883a 	add	r5,r5,r5
    1d80:	003f5606 	br	1adc <__alt_mem_Onchip_SRAM+0xf8001adc>
    1d84:	00c15504 	movi	r3,1364
    1d88:	18800536 	bltu	r3,r2,1da0 <_malloc_r+0x7e8>
    1d8c:	3804d4ba 	srli	r2,r7,18
    1d90:	11401f44 	addi	r5,r2,125
    1d94:	10c01f04 	addi	r3,r2,124
    1d98:	294b883a 	add	r5,r5,r5
    1d9c:	003f4f06 	br	1adc <__alt_mem_Onchip_SRAM+0xf8001adc>
    1da0:	01403f84 	movi	r5,254
    1da4:	00c01f84 	movi	r3,126
    1da8:	003f4c06 	br	1adc <__alt_mem_Onchip_SRAM+0xf8001adc>
    1dac:	98800117 	ldw	r2,4(r19)
    1db0:	003fa006 	br	1c34 <__alt_mem_Onchip_SRAM+0xf8001c34>
    1db4:	8808d0fa 	srli	r4,r17,3
    1db8:	20800044 	addi	r2,r4,1
    1dbc:	1085883a 	add	r2,r2,r2
    1dc0:	003e9006 	br	1804 <__alt_mem_Onchip_SRAM+0xf8001804>

00001dc4 <_printf_r>:
    1dc4:	defffd04 	addi	sp,sp,-12
    1dc8:	2805883a 	mov	r2,r5
    1dcc:	dfc00015 	stw	ra,0(sp)
    1dd0:	d9800115 	stw	r6,4(sp)
    1dd4:	d9c00215 	stw	r7,8(sp)
    1dd8:	21400217 	ldw	r5,8(r4)
    1ddc:	d9c00104 	addi	r7,sp,4
    1de0:	100d883a 	mov	r6,r2
    1de4:	00043f80 	call	43f8 <___vfprintf_internal_r>
    1de8:	dfc00017 	ldw	ra,0(sp)
    1dec:	dec00304 	addi	sp,sp,12
    1df0:	f800283a 	ret

00001df4 <printf>:
    1df4:	defffc04 	addi	sp,sp,-16
    1df8:	dfc00015 	stw	ra,0(sp)
    1dfc:	d9400115 	stw	r5,4(sp)
    1e00:	d9800215 	stw	r6,8(sp)
    1e04:	d9c00315 	stw	r7,12(sp)
    1e08:	008000b4 	movhi	r2,2
    1e0c:	10a88304 	addi	r2,r2,-24052
    1e10:	10800017 	ldw	r2,0(r2)
    1e14:	200b883a 	mov	r5,r4
    1e18:	d9800104 	addi	r6,sp,4
    1e1c:	11000217 	ldw	r4,8(r2)
    1e20:	00066d40 	call	66d4 <__vfprintf_internal>
    1e24:	dfc00017 	ldw	ra,0(sp)
    1e28:	dec00404 	addi	sp,sp,16
    1e2c:	f800283a 	ret

00001e30 <srand>:
    1e30:	008000b4 	movhi	r2,2
    1e34:	10a88304 	addi	r2,r2,-24052
    1e38:	10800017 	ldw	r2,0(r2)
    1e3c:	11002915 	stw	r4,164(r2)
    1e40:	10002a15 	stw	zero,168(r2)
    1e44:	f800283a 	ret

00001e48 <rand>:
    1e48:	008000b4 	movhi	r2,2
    1e4c:	defffe04 	addi	sp,sp,-8
    1e50:	10a88304 	addi	r2,r2,-24052
    1e54:	dc000015 	stw	r16,0(sp)
    1e58:	14000017 	ldw	r16,0(r2)
    1e5c:	dfc00115 	stw	ra,4(sp)
    1e60:	01932574 	movhi	r6,19605
    1e64:	81002917 	ldw	r4,164(r16)
    1e68:	81402a17 	ldw	r5,168(r16)
    1e6c:	01d614b4 	movhi	r7,22610
    1e70:	319fcb44 	addi	r6,r6,32557
    1e74:	39fd0b44 	addi	r7,r7,-3027
    1e78:	000e88c0 	call	e88c <__muldi3>
    1e7c:	11000044 	addi	r4,r2,1
    1e80:	2085803a 	cmpltu	r2,r4,r2
    1e84:	10c7883a 	add	r3,r2,r3
    1e88:	00a00034 	movhi	r2,32768
    1e8c:	10bfffc4 	addi	r2,r2,-1
    1e90:	1884703a 	and	r2,r3,r2
    1e94:	81002915 	stw	r4,164(r16)
    1e98:	80c02a15 	stw	r3,168(r16)
    1e9c:	dfc00117 	ldw	ra,4(sp)
    1ea0:	dc000017 	ldw	r16,0(sp)
    1ea4:	dec00204 	addi	sp,sp,8
    1ea8:	f800283a 	ret

00001eac <_sbrk_r>:
    1eac:	defffd04 	addi	sp,sp,-12
    1eb0:	dc000015 	stw	r16,0(sp)
    1eb4:	040000b4 	movhi	r16,2
    1eb8:	dc400115 	stw	r17,4(sp)
    1ebc:	842fb404 	addi	r16,r16,-16688
    1ec0:	2023883a 	mov	r17,r4
    1ec4:	2809883a 	mov	r4,r5
    1ec8:	dfc00215 	stw	ra,8(sp)
    1ecc:	80000015 	stw	zero,0(r16)
    1ed0:	00127980 	call	12798 <sbrk>
    1ed4:	00ffffc4 	movi	r3,-1
    1ed8:	10c00526 	beq	r2,r3,1ef0 <_sbrk_r+0x44>
    1edc:	dfc00217 	ldw	ra,8(sp)
    1ee0:	dc400117 	ldw	r17,4(sp)
    1ee4:	dc000017 	ldw	r16,0(sp)
    1ee8:	dec00304 	addi	sp,sp,12
    1eec:	f800283a 	ret
    1ef0:	80c00017 	ldw	r3,0(r16)
    1ef4:	183ff926 	beq	r3,zero,1edc <__alt_mem_Onchip_SRAM+0xf8001edc>
    1ef8:	88c00015 	stw	r3,0(r17)
    1efc:	003ff706 	br	1edc <__alt_mem_Onchip_SRAM+0xf8001edc>

00001f00 <_sprintf_r>:
    1f00:	deffe404 	addi	sp,sp,-112
    1f04:	2807883a 	mov	r3,r5
    1f08:	dfc01a15 	stw	ra,104(sp)
    1f0c:	d9c01b15 	stw	r7,108(sp)
    1f10:	00a00034 	movhi	r2,32768
    1f14:	10bfffc4 	addi	r2,r2,-1
    1f18:	02008204 	movi	r8,520
    1f1c:	d8800215 	stw	r2,8(sp)
    1f20:	d8800515 	stw	r2,20(sp)
    1f24:	d9c01b04 	addi	r7,sp,108
    1f28:	d80b883a 	mov	r5,sp
    1f2c:	00bfffc4 	movi	r2,-1
    1f30:	d8c00015 	stw	r3,0(sp)
    1f34:	d8c00415 	stw	r3,16(sp)
    1f38:	da00030d 	sth	r8,12(sp)
    1f3c:	d880038d 	sth	r2,14(sp)
    1f40:	00020ec0 	call	20ec <___svfprintf_internal_r>
    1f44:	d8c00017 	ldw	r3,0(sp)
    1f48:	18000005 	stb	zero,0(r3)
    1f4c:	dfc01a17 	ldw	ra,104(sp)
    1f50:	dec01c04 	addi	sp,sp,112
    1f54:	f800283a 	ret

00001f58 <sprintf>:
    1f58:	deffe304 	addi	sp,sp,-116
    1f5c:	2007883a 	mov	r3,r4
    1f60:	dfc01a15 	stw	ra,104(sp)
    1f64:	d9801b15 	stw	r6,108(sp)
    1f68:	d9c01c15 	stw	r7,112(sp)
    1f6c:	010000b4 	movhi	r4,2
    1f70:	21288304 	addi	r4,r4,-24052
    1f74:	21000017 	ldw	r4,0(r4)
    1f78:	00a00034 	movhi	r2,32768
    1f7c:	10bfffc4 	addi	r2,r2,-1
    1f80:	280d883a 	mov	r6,r5
    1f84:	02008204 	movi	r8,520
    1f88:	d8800215 	stw	r2,8(sp)
    1f8c:	d8800515 	stw	r2,20(sp)
    1f90:	d9c01b04 	addi	r7,sp,108
    1f94:	d80b883a 	mov	r5,sp
    1f98:	00bfffc4 	movi	r2,-1
    1f9c:	d8c00015 	stw	r3,0(sp)
    1fa0:	d8c00415 	stw	r3,16(sp)
    1fa4:	da00030d 	sth	r8,12(sp)
    1fa8:	d880038d 	sth	r2,14(sp)
    1fac:	00020ec0 	call	20ec <___svfprintf_internal_r>
    1fb0:	d8c00017 	ldw	r3,0(sp)
    1fb4:	18000005 	stb	zero,0(r3)
    1fb8:	dfc01a17 	ldw	ra,104(sp)
    1fbc:	dec01d04 	addi	sp,sp,116
    1fc0:	f800283a 	ret

00001fc4 <strcpy>:
    1fc4:	2906b03a 	or	r3,r5,r4
    1fc8:	18c000cc 	andi	r3,r3,3
    1fcc:	2005883a 	mov	r2,r4
    1fd0:	1800161e 	bne	r3,zero,202c <strcpy+0x68>
    1fd4:	29c00017 	ldw	r7,0(r5)
    1fd8:	02ffbff4 	movhi	r11,65279
    1fdc:	5affbfc4 	addi	r11,r11,-257
    1fe0:	02a02074 	movhi	r10,32897
    1fe4:	01c6303a 	nor	r3,zero,r7
    1fe8:	3ac9883a 	add	r4,r7,r11
    1fec:	52a02004 	addi	r10,r10,-32640
    1ff0:	20c6703a 	and	r3,r4,r3
    1ff4:	1a86703a 	and	r3,r3,r10
    1ff8:	18000c1e 	bne	r3,zero,202c <strcpy+0x68>
    1ffc:	1011883a 	mov	r8,r2
    2000:	41c00015 	stw	r7,0(r8)
    2004:	29400104 	addi	r5,r5,4
    2008:	29c00017 	ldw	r7,0(r5)
    200c:	41800104 	addi	r6,r8,4
    2010:	3011883a 	mov	r8,r6
    2014:	3ad3883a 	add	r9,r7,r11
    2018:	01c6303a 	nor	r3,zero,r7
    201c:	48c6703a 	and	r3,r9,r3
    2020:	1a86703a 	and	r3,r3,r10
    2024:	183ff626 	beq	r3,zero,2000 <__alt_mem_Onchip_SRAM+0xf8002000>
    2028:	00000106 	br	2030 <strcpy+0x6c>
    202c:	100d883a 	mov	r6,r2
    2030:	28c00003 	ldbu	r3,0(r5)
    2034:	31800044 	addi	r6,r6,1
    2038:	29400044 	addi	r5,r5,1
    203c:	30ffffc5 	stb	r3,-1(r6)
    2040:	18c03fcc 	andi	r3,r3,255
    2044:	18c0201c 	xori	r3,r3,128
    2048:	18ffe004 	addi	r3,r3,-128
    204c:	183ff81e 	bne	r3,zero,2030 <__alt_mem_Onchip_SRAM+0xf8002030>
    2050:	f800283a 	ret

00002054 <strlen>:
    2054:	208000cc 	andi	r2,r4,3
    2058:	10002026 	beq	r2,zero,20dc <strlen+0x88>
    205c:	20800007 	ldb	r2,0(r4)
    2060:	10002026 	beq	r2,zero,20e4 <strlen+0x90>
    2064:	2005883a 	mov	r2,r4
    2068:	00000206 	br	2074 <strlen+0x20>
    206c:	10c00007 	ldb	r3,0(r2)
    2070:	18001826 	beq	r3,zero,20d4 <strlen+0x80>
    2074:	10800044 	addi	r2,r2,1
    2078:	10c000cc 	andi	r3,r2,3
    207c:	183ffb1e 	bne	r3,zero,206c <__alt_mem_Onchip_SRAM+0xf800206c>
    2080:	10c00017 	ldw	r3,0(r2)
    2084:	01ffbff4 	movhi	r7,65279
    2088:	39ffbfc4 	addi	r7,r7,-257
    208c:	00ca303a 	nor	r5,zero,r3
    2090:	01a02074 	movhi	r6,32897
    2094:	19c7883a 	add	r3,r3,r7
    2098:	31a02004 	addi	r6,r6,-32640
    209c:	1946703a 	and	r3,r3,r5
    20a0:	1986703a 	and	r3,r3,r6
    20a4:	1800091e 	bne	r3,zero,20cc <strlen+0x78>
    20a8:	10800104 	addi	r2,r2,4
    20ac:	10c00017 	ldw	r3,0(r2)
    20b0:	19cb883a 	add	r5,r3,r7
    20b4:	00c6303a 	nor	r3,zero,r3
    20b8:	28c6703a 	and	r3,r5,r3
    20bc:	1986703a 	and	r3,r3,r6
    20c0:	183ff926 	beq	r3,zero,20a8 <__alt_mem_Onchip_SRAM+0xf80020a8>
    20c4:	00000106 	br	20cc <strlen+0x78>
    20c8:	10800044 	addi	r2,r2,1
    20cc:	10c00007 	ldb	r3,0(r2)
    20d0:	183ffd1e 	bne	r3,zero,20c8 <__alt_mem_Onchip_SRAM+0xf80020c8>
    20d4:	1105c83a 	sub	r2,r2,r4
    20d8:	f800283a 	ret
    20dc:	2005883a 	mov	r2,r4
    20e0:	003fe706 	br	2080 <__alt_mem_Onchip_SRAM+0xf8002080>
    20e4:	0005883a 	mov	r2,zero
    20e8:	f800283a 	ret

000020ec <___svfprintf_internal_r>:
    20ec:	deffb704 	addi	sp,sp,-292
    20f0:	dfc04815 	stw	ra,288(sp)
    20f4:	ddc04615 	stw	r23,280(sp)
    20f8:	d9402d15 	stw	r5,180(sp)
    20fc:	d9003915 	stw	r4,228(sp)
    2100:	302f883a 	mov	r23,r6
    2104:	d9c02e15 	stw	r7,184(sp)
    2108:	df004715 	stw	fp,284(sp)
    210c:	dd804515 	stw	r22,276(sp)
    2110:	dd404415 	stw	r21,272(sp)
    2114:	dd004315 	stw	r20,268(sp)
    2118:	dcc04215 	stw	r19,264(sp)
    211c:	dc804115 	stw	r18,260(sp)
    2120:	dc404015 	stw	r17,256(sp)
    2124:	dc003f15 	stw	r16,252(sp)
    2128:	0008ecc0 	call	8ecc <_localeconv_r>
    212c:	10800017 	ldw	r2,0(r2)
    2130:	1009883a 	mov	r4,r2
    2134:	d8803415 	stw	r2,208(sp)
    2138:	00020540 	call	2054 <strlen>
    213c:	d8c02d17 	ldw	r3,180(sp)
    2140:	d8803815 	stw	r2,224(sp)
    2144:	1880030b 	ldhu	r2,12(r3)
    2148:	1080200c 	andi	r2,r2,128
    214c:	10000226 	beq	r2,zero,2158 <___svfprintf_internal_r+0x6c>
    2150:	18800417 	ldw	r2,16(r3)
    2154:	1006b126 	beq	r2,zero,3c1c <___svfprintf_internal_r+0x1b30>
    2158:	dcc03917 	ldw	r19,228(sp)
    215c:	d8c00404 	addi	r3,sp,16
    2160:	054000b4 	movhi	r21,2
    2164:	d9001e04 	addi	r4,sp,120
    2168:	ad60ab84 	addi	r21,r21,-32082
    216c:	d8c01e15 	stw	r3,120(sp)
    2170:	d8002015 	stw	zero,128(sp)
    2174:	d8001f15 	stw	zero,124(sp)
    2178:	d8003315 	stw	zero,204(sp)
    217c:	d8003615 	stw	zero,216(sp)
    2180:	d8003715 	stw	zero,220(sp)
    2184:	1811883a 	mov	r8,r3
    2188:	d8003a15 	stw	zero,232(sp)
    218c:	d8003b15 	stw	zero,236(sp)
    2190:	d8002f15 	stw	zero,188(sp)
    2194:	d9002815 	stw	r4,160(sp)
    2198:	b8800007 	ldb	r2,0(r23)
    219c:	10027726 	beq	r2,zero,2b7c <___svfprintf_internal_r+0xa90>
    21a0:	00c00944 	movi	r3,37
    21a4:	b823883a 	mov	r17,r23
    21a8:	10c0021e 	bne	r2,r3,21b4 <___svfprintf_internal_r+0xc8>
    21ac:	00001406 	br	2200 <___svfprintf_internal_r+0x114>
    21b0:	10c00326 	beq	r2,r3,21c0 <___svfprintf_internal_r+0xd4>
    21b4:	8c400044 	addi	r17,r17,1
    21b8:	88800007 	ldb	r2,0(r17)
    21bc:	103ffc1e 	bne	r2,zero,21b0 <__alt_mem_Onchip_SRAM+0xf80021b0>
    21c0:	8de1c83a 	sub	r16,r17,r23
    21c4:	80000e26 	beq	r16,zero,2200 <___svfprintf_internal_r+0x114>
    21c8:	d8c02017 	ldw	r3,128(sp)
    21cc:	d8801f17 	ldw	r2,124(sp)
    21d0:	45c00015 	stw	r23,0(r8)
    21d4:	1c07883a 	add	r3,r3,r16
    21d8:	10800044 	addi	r2,r2,1
    21dc:	d8c02015 	stw	r3,128(sp)
    21e0:	44000115 	stw	r16,4(r8)
    21e4:	d8801f15 	stw	r2,124(sp)
    21e8:	00c001c4 	movi	r3,7
    21ec:	18809916 	blt	r3,r2,2454 <___svfprintf_internal_r+0x368>
    21f0:	42000204 	addi	r8,r8,8
    21f4:	d9402f17 	ldw	r5,188(sp)
    21f8:	2c0b883a 	add	r5,r5,r16
    21fc:	d9402f15 	stw	r5,188(sp)
    2200:	88800007 	ldb	r2,0(r17)
    2204:	10009a26 	beq	r2,zero,2470 <___svfprintf_internal_r+0x384>
    2208:	8dc00044 	addi	r23,r17,1
    220c:	8c400047 	ldb	r17,1(r17)
    2210:	0021883a 	mov	r16,zero
    2214:	00bfffc4 	movi	r2,-1
    2218:	0025883a 	mov	r18,zero
    221c:	dc002905 	stb	r16,164(sp)
    2220:	d8002785 	stb	zero,158(sp)
    2224:	d8002b05 	stb	zero,172(sp)
    2228:	d8802a15 	stw	r2,168(sp)
    222c:	d8003115 	stw	zero,196(sp)
    2230:	05001604 	movi	r20,88
    2234:	05800244 	movi	r22,9
    2238:	4039883a 	mov	fp,r8
    223c:	9021883a 	mov	r16,r18
    2240:	bdc00044 	addi	r23,r23,1
    2244:	88bff804 	addi	r2,r17,-32
    2248:	a0831e36 	bltu	r20,r2,2ec4 <___svfprintf_internal_r+0xdd8>
    224c:	100490ba 	slli	r2,r2,2
    2250:	00c00034 	movhi	r3,0
    2254:	18c89904 	addi	r3,r3,8804
    2258:	10c5883a 	add	r2,r2,r3
    225c:	10800017 	ldw	r2,0(r2)
    2260:	1000683a 	jmp	r2
    2264:	00002e0c 	andi	zero,zero,184
    2268:	00002ec4 	movi	zero,187
    226c:	00002ec4 	movi	zero,187
    2270:	00002e00 	call	2e0 <adc_read+0x34>
    2274:	00002ec4 	movi	zero,187
    2278:	00002ec4 	movi	zero,187
    227c:	00002ec4 	movi	zero,187
    2280:	00002ec4 	movi	zero,187
    2284:	00002ec4 	movi	zero,187
    2288:	00002ec4 	movi	zero,187
    228c:	000024cc 	andi	zero,zero,147
    2290:	00002d10 	cmplti	zero,zero,180
    2294:	00002ec4 	movi	zero,187
    2298:	000023d8 	cmpnei	zero,zero,143
    229c:	000024f0 	cmpltui	zero,zero,147
    22a0:	00002ec4 	movi	zero,187
    22a4:	0000257c 	xorhi	zero,zero,149
    22a8:	00002540 	call	254 <_start+0x24>
    22ac:	00002540 	call	254 <_start+0x24>
    22b0:	00002540 	call	254 <_start+0x24>
    22b4:	00002540 	call	254 <_start+0x24>
    22b8:	00002540 	call	254 <_start+0x24>
    22bc:	00002540 	call	254 <_start+0x24>
    22c0:	00002540 	call	254 <_start+0x24>
    22c4:	00002540 	call	254 <_start+0x24>
    22c8:	00002540 	call	254 <_start+0x24>
    22cc:	00002ec4 	movi	zero,187
    22d0:	00002ec4 	movi	zero,187
    22d4:	00002ec4 	movi	zero,187
    22d8:	00002ec4 	movi	zero,187
    22dc:	00002ec4 	movi	zero,187
    22e0:	00002ec4 	movi	zero,187
    22e4:	00002ec4 	movi	zero,187
    22e8:	00002ec4 	movi	zero,187
    22ec:	00002ec4 	movi	zero,187
    22f0:	00002ec4 	movi	zero,187
    22f4:	00002640 	call	264 <_start+0x34>
    22f8:	00002588 	cmpgei	zero,zero,150
    22fc:	00002ec4 	movi	zero,187
    2300:	00002588 	cmpgei	zero,zero,150
    2304:	00002ec4 	movi	zero,187
    2308:	00002ec4 	movi	zero,187
    230c:	00002ec4 	movi	zero,187
    2310:	00002ec4 	movi	zero,187
    2314:	00002634 	movhi	zero,152
    2318:	00002ec4 	movi	zero,187
    231c:	00002ec4 	movi	zero,187
    2320:	00002708 	cmpgei	zero,zero,156
    2324:	00002ec4 	movi	zero,187
    2328:	00002ec4 	movi	zero,187
    232c:	00002ec4 	movi	zero,187
    2330:	00002ec4 	movi	zero,187
    2334:	00002ec4 	movi	zero,187
    2338:	00002b84 	movi	zero,174
    233c:	00002ec4 	movi	zero,187
    2340:	00002ec4 	movi	zero,187
    2344:	00002bf0 	cmpltui	zero,zero,175
    2348:	00002ec4 	movi	zero,187
    234c:	00002ec4 	movi	zero,187
    2350:	00002ec4 	movi	zero,187
    2354:	00002ec4 	movi	zero,187
    2358:	00002ec4 	movi	zero,187
    235c:	00002ec4 	movi	zero,187
    2360:	00002ec4 	movi	zero,187
    2364:	00002ec4 	movi	zero,187
    2368:	00002ec4 	movi	zero,187
    236c:	00002ec4 	movi	zero,187
    2370:	00002cac 	andhi	zero,zero,178
    2374:	00002e2c 	andhi	zero,zero,184
    2378:	00002588 	cmpgei	zero,zero,150
    237c:	00002588 	cmpgei	zero,zero,150
    2380:	00002588 	cmpgei	zero,zero,150
    2384:	00002ea0 	cmpeqi	zero,zero,186
    2388:	00002e2c 	andhi	zero,zero,184
    238c:	00002ec4 	movi	zero,187
    2390:	00002ec4 	movi	zero,187
    2394:	00002e4c 	andi	zero,zero,185
    2398:	00002ec4 	movi	zero,187
    239c:	00002e60 	cmpeqi	zero,zero,185
    23a0:	00002cf0 	cmpltui	zero,zero,179
    23a4:	000023e4 	muli	zero,zero,143
    23a8:	00002d28 	cmpgeui	zero,zero,180
    23ac:	00002ec4 	movi	zero,187
    23b0:	00002d34 	movhi	zero,180
    23b4:	00002ec4 	movi	zero,187
    23b8:	00002d98 	cmpnei	zero,zero,182
    23bc:	00002ec4 	movi	zero,187
    23c0:	00002ec4 	movi	zero,187
    23c4:	00002db8 	rdprs	zero,zero,182
    23c8:	d8c03117 	ldw	r3,196(sp)
    23cc:	d8802e15 	stw	r2,184(sp)
    23d0:	00c7c83a 	sub	r3,zero,r3
    23d4:	d8c03115 	stw	r3,196(sp)
    23d8:	84000114 	ori	r16,r16,4
    23dc:	bc400007 	ldb	r17,0(r23)
    23e0:	003f9706 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    23e4:	00800c04 	movi	r2,48
    23e8:	d8802705 	stb	r2,156(sp)
    23ec:	00801e04 	movi	r2,120
    23f0:	d8802745 	stb	r2,157(sp)
    23f4:	d9002a17 	ldw	r4,168(sp)
    23f8:	d8802e17 	ldw	r2,184(sp)
    23fc:	d8002785 	stb	zero,158(sp)
    2400:	e011883a 	mov	r8,fp
    2404:	10c00104 	addi	r3,r2,4
    2408:	15000017 	ldw	r20,0(r2)
    240c:	002d883a 	mov	r22,zero
    2410:	80800094 	ori	r2,r16,2
    2414:	2002b616 	blt	r4,zero,2ef0 <___svfprintf_internal_r+0xe04>
    2418:	00bfdfc4 	movi	r2,-129
    241c:	80a4703a 	and	r18,r16,r2
    2420:	d8c02e15 	stw	r3,184(sp)
    2424:	94800094 	ori	r18,r18,2
    2428:	a002a01e 	bne	r20,zero,2eac <___svfprintf_internal_r+0xdc0>
    242c:	014000b4 	movhi	r5,2
    2430:	2960a404 	addi	r5,r5,-32112
    2434:	d9403a15 	stw	r5,232(sp)
    2438:	04401e04 	movi	r17,120
    243c:	d8c02a17 	ldw	r3,168(sp)
    2440:	0039883a 	mov	fp,zero
    2444:	1801e626 	beq	r3,zero,2be0 <___svfprintf_internal_r+0xaf4>
    2448:	0029883a 	mov	r20,zero
    244c:	002d883a 	mov	r22,zero
    2450:	00020506 	br	2c68 <___svfprintf_internal_r+0xb7c>
    2454:	d9402d17 	ldw	r5,180(sp)
    2458:	d9801e04 	addi	r6,sp,120
    245c:	9809883a 	mov	r4,r19
    2460:	000a7500 	call	a750 <__ssprint_r>
    2464:	1000081e 	bne	r2,zero,2488 <___svfprintf_internal_r+0x39c>
    2468:	da000404 	addi	r8,sp,16
    246c:	003f6106 	br	21f4 <__alt_mem_Onchip_SRAM+0xf80021f4>
    2470:	d8802017 	ldw	r2,128(sp)
    2474:	10000426 	beq	r2,zero,2488 <___svfprintf_internal_r+0x39c>
    2478:	d9402d17 	ldw	r5,180(sp)
    247c:	d9003917 	ldw	r4,228(sp)
    2480:	d9801e04 	addi	r6,sp,120
    2484:	000a7500 	call	a750 <__ssprint_r>
    2488:	d8802d17 	ldw	r2,180(sp)
    248c:	10c0030b 	ldhu	r3,12(r2)
    2490:	d8802f17 	ldw	r2,188(sp)
    2494:	18c0100c 	andi	r3,r3,64
    2498:	1806251e 	bne	r3,zero,3d30 <___svfprintf_internal_r+0x1c44>
    249c:	dfc04817 	ldw	ra,288(sp)
    24a0:	df004717 	ldw	fp,284(sp)
    24a4:	ddc04617 	ldw	r23,280(sp)
    24a8:	dd804517 	ldw	r22,276(sp)
    24ac:	dd404417 	ldw	r21,272(sp)
    24b0:	dd004317 	ldw	r20,268(sp)
    24b4:	dcc04217 	ldw	r19,264(sp)
    24b8:	dc804117 	ldw	r18,260(sp)
    24bc:	dc404017 	ldw	r17,256(sp)
    24c0:	dc003f17 	ldw	r16,252(sp)
    24c4:	dec04904 	addi	sp,sp,292
    24c8:	f800283a 	ret
    24cc:	d9002e17 	ldw	r4,184(sp)
    24d0:	d9402e17 	ldw	r5,184(sp)
    24d4:	21000017 	ldw	r4,0(r4)
    24d8:	28800104 	addi	r2,r5,4
    24dc:	d9003115 	stw	r4,196(sp)
    24e0:	203fb916 	blt	r4,zero,23c8 <__alt_mem_Onchip_SRAM+0xf80023c8>
    24e4:	d8802e15 	stw	r2,184(sp)
    24e8:	bc400007 	ldb	r17,0(r23)
    24ec:	003f5406 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    24f0:	bc400007 	ldb	r17,0(r23)
    24f4:	01000a84 	movi	r4,42
    24f8:	b8c00044 	addi	r3,r23,1
    24fc:	89076926 	beq	r17,r4,42a4 <___svfprintf_internal_r+0x21b8>
    2500:	8cbff404 	addi	r18,r17,-48
    2504:	b486b936 	bltu	r22,r18,3fec <___svfprintf_internal_r+0x1f00>
    2508:	0009883a 	mov	r4,zero
    250c:	1823883a 	mov	r17,r3
    2510:	01400284 	movi	r5,10
    2514:	00015680 	call	1568 <__mulsi3>
    2518:	88c00007 	ldb	r3,0(r17)
    251c:	1489883a 	add	r4,r2,r18
    2520:	8dc00044 	addi	r23,r17,1
    2524:	1cbff404 	addi	r18,r3,-48
    2528:	b823883a 	mov	r17,r23
    252c:	b4bff82e 	bgeu	r22,r18,2510 <__alt_mem_Onchip_SRAM+0xf8002510>
    2530:	1823883a 	mov	r17,r3
    2534:	20060416 	blt	r4,zero,3d48 <___svfprintf_internal_r+0x1c5c>
    2538:	d9002a15 	stw	r4,168(sp)
    253c:	003f4106 	br	2244 <__alt_mem_Onchip_SRAM+0xf8002244>
    2540:	8cbff404 	addi	r18,r17,-48
    2544:	d8003115 	stw	zero,196(sp)
    2548:	0009883a 	mov	r4,zero
    254c:	b823883a 	mov	r17,r23
    2550:	01400284 	movi	r5,10
    2554:	00015680 	call	1568 <__mulsi3>
    2558:	88c00007 	ldb	r3,0(r17)
    255c:	9089883a 	add	r4,r18,r2
    2560:	bdc00044 	addi	r23,r23,1
    2564:	1cbff404 	addi	r18,r3,-48
    2568:	b823883a 	mov	r17,r23
    256c:	b4bff82e 	bgeu	r22,r18,2550 <__alt_mem_Onchip_SRAM+0xf8002550>
    2570:	1823883a 	mov	r17,r3
    2574:	d9003115 	stw	r4,196(sp)
    2578:	003f3206 	br	2244 <__alt_mem_Onchip_SRAM+0xf8002244>
    257c:	84002014 	ori	r16,r16,128
    2580:	bc400007 	ldb	r17,0(r23)
    2584:	003f2e06 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    2588:	8025883a 	mov	r18,r16
    258c:	dc002903 	ldbu	r16,164(sp)
    2590:	e011883a 	mov	r8,fp
    2594:	84003fcc 	andi	r16,r16,255
    2598:	8007721e 	bne	r16,zero,4364 <___svfprintf_internal_r+0x2278>
    259c:	9080020c 	andi	r2,r18,8
    25a0:	1004a526 	beq	r2,zero,3838 <___svfprintf_internal_r+0x174c>
    25a4:	d9002e17 	ldw	r4,184(sp)
    25a8:	d9402e17 	ldw	r5,184(sp)
    25ac:	d8802e17 	ldw	r2,184(sp)
    25b0:	21000017 	ldw	r4,0(r4)
    25b4:	29400117 	ldw	r5,4(r5)
    25b8:	10800204 	addi	r2,r2,8
    25bc:	d9003615 	stw	r4,216(sp)
    25c0:	d9403715 	stw	r5,220(sp)
    25c4:	d8802e15 	stw	r2,184(sp)
    25c8:	d9003617 	ldw	r4,216(sp)
    25cc:	d9403717 	ldw	r5,220(sp)
    25d0:	da003e15 	stw	r8,248(sp)
    25d4:	04000044 	movi	r16,1
    25d8:	000a4c40 	call	a4c4 <__fpclassifyd>
    25dc:	da003e17 	ldw	r8,248(sp)
    25e0:	1404731e 	bne	r2,r16,37b0 <___svfprintf_internal_r+0x16c4>
    25e4:	d9003617 	ldw	r4,216(sp)
    25e8:	d9403717 	ldw	r5,220(sp)
    25ec:	000d883a 	mov	r6,zero
    25f0:	000f883a 	mov	r7,zero
    25f4:	00109380 	call	10938 <__ledf2>
    25f8:	da003e17 	ldw	r8,248(sp)
    25fc:	10061b16 	blt	r2,zero,3e6c <___svfprintf_internal_r+0x1d80>
    2600:	df002783 	ldbu	fp,158(sp)
    2604:	008011c4 	movi	r2,71
    2608:	1445810e 	bge	r2,r17,3c10 <___svfprintf_internal_r+0x1b24>
    260c:	040000b4 	movhi	r16,2
    2610:	84209c04 	addi	r16,r16,-32144
    2614:	00c000c4 	movi	r3,3
    2618:	00bfdfc4 	movi	r2,-129
    261c:	d8c02915 	stw	r3,164(sp)
    2620:	90a4703a 	and	r18,r18,r2
    2624:	d8c02b15 	stw	r3,172(sp)
    2628:	d8002a15 	stw	zero,168(sp)
    262c:	d8003215 	stw	zero,200(sp)
    2630:	00006c06 	br	27e4 <___svfprintf_internal_r+0x6f8>
    2634:	84000214 	ori	r16,r16,8
    2638:	bc400007 	ldb	r17,0(r23)
    263c:	003f0006 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    2640:	8025883a 	mov	r18,r16
    2644:	dc002903 	ldbu	r16,164(sp)
    2648:	e011883a 	mov	r8,fp
    264c:	84003fcc 	andi	r16,r16,255
    2650:	80073f1e 	bne	r16,zero,4350 <___svfprintf_internal_r+0x2264>
    2654:	94800414 	ori	r18,r18,16
    2658:	9080080c 	andi	r2,r18,32
    265c:	1003bb26 	beq	r2,zero,354c <___svfprintf_internal_r+0x1460>
    2660:	d9002e17 	ldw	r4,184(sp)
    2664:	20800117 	ldw	r2,4(r4)
    2668:	25000017 	ldw	r20,0(r4)
    266c:	21000204 	addi	r4,r4,8
    2670:	d9002e15 	stw	r4,184(sp)
    2674:	102d883a 	mov	r22,r2
    2678:	1003bd16 	blt	r2,zero,3570 <___svfprintf_internal_r+0x1484>
    267c:	d9002a17 	ldw	r4,168(sp)
    2680:	df002783 	ldbu	fp,158(sp)
    2684:	2003d016 	blt	r4,zero,35c8 <___svfprintf_internal_r+0x14dc>
    2688:	00ffdfc4 	movi	r3,-129
    268c:	a584b03a 	or	r2,r20,r22
    2690:	90e4703a 	and	r18,r18,r3
    2694:	10015026 	beq	r2,zero,2bd8 <___svfprintf_internal_r+0xaec>
    2698:	b0037026 	beq	r22,zero,345c <___svfprintf_internal_r+0x1370>
    269c:	dc402915 	stw	r17,164(sp)
    26a0:	dc001e04 	addi	r16,sp,120
    26a4:	b023883a 	mov	r17,r22
    26a8:	402d883a 	mov	r22,r8
    26ac:	a009883a 	mov	r4,r20
    26b0:	880b883a 	mov	r5,r17
    26b4:	01800284 	movi	r6,10
    26b8:	000f883a 	mov	r7,zero
    26bc:	000ef940 	call	ef94 <__umoddi3>
    26c0:	10800c04 	addi	r2,r2,48
    26c4:	843fffc4 	addi	r16,r16,-1
    26c8:	a009883a 	mov	r4,r20
    26cc:	880b883a 	mov	r5,r17
    26d0:	80800005 	stb	r2,0(r16)
    26d4:	01800284 	movi	r6,10
    26d8:	000f883a 	mov	r7,zero
    26dc:	000e9980 	call	e998 <__udivdi3>
    26e0:	1029883a 	mov	r20,r2
    26e4:	10c4b03a 	or	r2,r2,r3
    26e8:	1823883a 	mov	r17,r3
    26ec:	103fef1e 	bne	r2,zero,26ac <__alt_mem_Onchip_SRAM+0xf80026ac>
    26f0:	d8c02817 	ldw	r3,160(sp)
    26f4:	dc402917 	ldw	r17,164(sp)
    26f8:	b011883a 	mov	r8,r22
    26fc:	1c07c83a 	sub	r3,r3,r16
    2700:	d8c02b15 	stw	r3,172(sp)
    2704:	00003106 	br	27cc <___svfprintf_internal_r+0x6e0>
    2708:	8025883a 	mov	r18,r16
    270c:	dc002903 	ldbu	r16,164(sp)
    2710:	e011883a 	mov	r8,fp
    2714:	84003fcc 	andi	r16,r16,255
    2718:	80070a1e 	bne	r16,zero,4344 <___svfprintf_internal_r+0x2258>
    271c:	94800414 	ori	r18,r18,16
    2720:	9080080c 	andi	r2,r18,32
    2724:	1002f626 	beq	r2,zero,3300 <___svfprintf_internal_r+0x1214>
    2728:	d9002e17 	ldw	r4,184(sp)
    272c:	d9402a17 	ldw	r5,168(sp)
    2730:	d8002785 	stb	zero,158(sp)
    2734:	20800204 	addi	r2,r4,8
    2738:	25000017 	ldw	r20,0(r4)
    273c:	25800117 	ldw	r22,4(r4)
    2740:	28043716 	blt	r5,zero,3820 <___svfprintf_internal_r+0x1734>
    2744:	013fdfc4 	movi	r4,-129
    2748:	a586b03a 	or	r3,r20,r22
    274c:	d8802e15 	stw	r2,184(sp)
    2750:	9124703a 	and	r18,r18,r4
    2754:	1802f71e 	bne	r3,zero,3334 <___svfprintf_internal_r+0x1248>
    2758:	d9402a17 	ldw	r5,168(sp)
    275c:	0039883a 	mov	fp,zero
    2760:	2806df26 	beq	r5,zero,42e0 <___svfprintf_internal_r+0x21f4>
    2764:	0029883a 	mov	r20,zero
    2768:	002d883a 	mov	r22,zero
    276c:	dc001e04 	addi	r16,sp,120
    2770:	a006d0fa 	srli	r3,r20,3
    2774:	b008977a 	slli	r4,r22,29
    2778:	b02cd0fa 	srli	r22,r22,3
    277c:	a50001cc 	andi	r20,r20,7
    2780:	a0800c04 	addi	r2,r20,48
    2784:	843fffc4 	addi	r16,r16,-1
    2788:	20e8b03a 	or	r20,r4,r3
    278c:	80800005 	stb	r2,0(r16)
    2790:	a586b03a 	or	r3,r20,r22
    2794:	183ff61e 	bne	r3,zero,2770 <__alt_mem_Onchip_SRAM+0xf8002770>
    2798:	90c0004c 	andi	r3,r18,1
    279c:	18013f26 	beq	r3,zero,2c9c <___svfprintf_internal_r+0xbb0>
    27a0:	10803fcc 	andi	r2,r2,255
    27a4:	1080201c 	xori	r2,r2,128
    27a8:	10bfe004 	addi	r2,r2,-128
    27ac:	00c00c04 	movi	r3,48
    27b0:	10c13a26 	beq	r2,r3,2c9c <___svfprintf_internal_r+0xbb0>
    27b4:	80ffffc5 	stb	r3,-1(r16)
    27b8:	d8c02817 	ldw	r3,160(sp)
    27bc:	80bfffc4 	addi	r2,r16,-1
    27c0:	1021883a 	mov	r16,r2
    27c4:	1887c83a 	sub	r3,r3,r2
    27c8:	d8c02b15 	stw	r3,172(sp)
    27cc:	d8802b17 	ldw	r2,172(sp)
    27d0:	d9002a17 	ldw	r4,168(sp)
    27d4:	1100010e 	bge	r2,r4,27dc <___svfprintf_internal_r+0x6f0>
    27d8:	2005883a 	mov	r2,r4
    27dc:	d8802915 	stw	r2,164(sp)
    27e0:	d8003215 	stw	zero,200(sp)
    27e4:	e7003fcc 	andi	fp,fp,255
    27e8:	e700201c 	xori	fp,fp,128
    27ec:	e73fe004 	addi	fp,fp,-128
    27f0:	e0000326 	beq	fp,zero,2800 <___svfprintf_internal_r+0x714>
    27f4:	d8c02917 	ldw	r3,164(sp)
    27f8:	18c00044 	addi	r3,r3,1
    27fc:	d8c02915 	stw	r3,164(sp)
    2800:	90c0008c 	andi	r3,r18,2
    2804:	d8c02c15 	stw	r3,176(sp)
    2808:	18000326 	beq	r3,zero,2818 <___svfprintf_internal_r+0x72c>
    280c:	d8c02917 	ldw	r3,164(sp)
    2810:	18c00084 	addi	r3,r3,2
    2814:	d8c02915 	stw	r3,164(sp)
    2818:	90c0210c 	andi	r3,r18,132
    281c:	d8c03015 	stw	r3,192(sp)
    2820:	1801c31e 	bne	r3,zero,2f30 <___svfprintf_internal_r+0xe44>
    2824:	d9003117 	ldw	r4,196(sp)
    2828:	d8c02917 	ldw	r3,164(sp)
    282c:	20e9c83a 	sub	r20,r4,r3
    2830:	0501bf0e 	bge	zero,r20,2f30 <___svfprintf_internal_r+0xe44>
    2834:	02400404 	movi	r9,16
    2838:	d8c02017 	ldw	r3,128(sp)
    283c:	d8801f17 	ldw	r2,124(sp)
    2840:	4d053d0e 	bge	r9,r20,3d38 <___svfprintf_internal_r+0x1c4c>
    2844:	014000b4 	movhi	r5,2
    2848:	2960af84 	addi	r5,r5,-32066
    284c:	dc403c15 	stw	r17,240(sp)
    2850:	d9403515 	stw	r5,212(sp)
    2854:	a023883a 	mov	r17,r20
    2858:	482d883a 	mov	r22,r9
    285c:	9029883a 	mov	r20,r18
    2860:	070001c4 	movi	fp,7
    2864:	8025883a 	mov	r18,r16
    2868:	dc002d17 	ldw	r16,180(sp)
    286c:	00000306 	br	287c <___svfprintf_internal_r+0x790>
    2870:	8c7ffc04 	addi	r17,r17,-16
    2874:	42000204 	addi	r8,r8,8
    2878:	b440130e 	bge	r22,r17,28c8 <___svfprintf_internal_r+0x7dc>
    287c:	010000b4 	movhi	r4,2
    2880:	18c00404 	addi	r3,r3,16
    2884:	10800044 	addi	r2,r2,1
    2888:	2120af84 	addi	r4,r4,-32066
    288c:	41000015 	stw	r4,0(r8)
    2890:	45800115 	stw	r22,4(r8)
    2894:	d8c02015 	stw	r3,128(sp)
    2898:	d8801f15 	stw	r2,124(sp)
    289c:	e0bff40e 	bge	fp,r2,2870 <__alt_mem_Onchip_SRAM+0xf8002870>
    28a0:	d9801e04 	addi	r6,sp,120
    28a4:	800b883a 	mov	r5,r16
    28a8:	9809883a 	mov	r4,r19
    28ac:	000a7500 	call	a750 <__ssprint_r>
    28b0:	103ef51e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    28b4:	8c7ffc04 	addi	r17,r17,-16
    28b8:	d8c02017 	ldw	r3,128(sp)
    28bc:	d8801f17 	ldw	r2,124(sp)
    28c0:	da000404 	addi	r8,sp,16
    28c4:	b47fed16 	blt	r22,r17,287c <__alt_mem_Onchip_SRAM+0xf800287c>
    28c8:	9021883a 	mov	r16,r18
    28cc:	a025883a 	mov	r18,r20
    28d0:	8829883a 	mov	r20,r17
    28d4:	dc403c17 	ldw	r17,240(sp)
    28d8:	d9403517 	ldw	r5,212(sp)
    28dc:	a0c7883a 	add	r3,r20,r3
    28e0:	10800044 	addi	r2,r2,1
    28e4:	41400015 	stw	r5,0(r8)
    28e8:	45000115 	stw	r20,4(r8)
    28ec:	d8c02015 	stw	r3,128(sp)
    28f0:	d8801f15 	stw	r2,124(sp)
    28f4:	010001c4 	movi	r4,7
    28f8:	2082c116 	blt	r4,r2,3400 <___svfprintf_internal_r+0x1314>
    28fc:	df002787 	ldb	fp,158(sp)
    2900:	42000204 	addi	r8,r8,8
    2904:	e0000c26 	beq	fp,zero,2938 <___svfprintf_internal_r+0x84c>
    2908:	d8801f17 	ldw	r2,124(sp)
    290c:	d9002784 	addi	r4,sp,158
    2910:	18c00044 	addi	r3,r3,1
    2914:	10800044 	addi	r2,r2,1
    2918:	41000015 	stw	r4,0(r8)
    291c:	01000044 	movi	r4,1
    2920:	41000115 	stw	r4,4(r8)
    2924:	d8c02015 	stw	r3,128(sp)
    2928:	d8801f15 	stw	r2,124(sp)
    292c:	010001c4 	movi	r4,7
    2930:	20825a16 	blt	r4,r2,329c <___svfprintf_internal_r+0x11b0>
    2934:	42000204 	addi	r8,r8,8
    2938:	d8802c17 	ldw	r2,176(sp)
    293c:	10000c26 	beq	r2,zero,2970 <___svfprintf_internal_r+0x884>
    2940:	d8801f17 	ldw	r2,124(sp)
    2944:	d9002704 	addi	r4,sp,156
    2948:	18c00084 	addi	r3,r3,2
    294c:	10800044 	addi	r2,r2,1
    2950:	41000015 	stw	r4,0(r8)
    2954:	01000084 	movi	r4,2
    2958:	41000115 	stw	r4,4(r8)
    295c:	d8c02015 	stw	r3,128(sp)
    2960:	d8801f15 	stw	r2,124(sp)
    2964:	010001c4 	movi	r4,7
    2968:	20825416 	blt	r4,r2,32bc <___svfprintf_internal_r+0x11d0>
    296c:	42000204 	addi	r8,r8,8
    2970:	d9003017 	ldw	r4,192(sp)
    2974:	00802004 	movi	r2,128
    2978:	2081b926 	beq	r4,r2,3060 <___svfprintf_internal_r+0xf74>
    297c:	d9402a17 	ldw	r5,168(sp)
    2980:	d8802b17 	ldw	r2,172(sp)
    2984:	28adc83a 	sub	r22,r5,r2
    2988:	05802f0e 	bge	zero,r22,2a48 <___svfprintf_internal_r+0x95c>
    298c:	07000404 	movi	fp,16
    2990:	d8801f17 	ldw	r2,124(sp)
    2994:	e583e20e 	bge	fp,r22,3920 <___svfprintf_internal_r+0x1834>
    2998:	014000b4 	movhi	r5,2
    299c:	2960ab84 	addi	r5,r5,-32082
    29a0:	dc402a15 	stw	r17,168(sp)
    29a4:	d9402c15 	stw	r5,176(sp)
    29a8:	b023883a 	mov	r17,r22
    29ac:	050001c4 	movi	r20,7
    29b0:	902d883a 	mov	r22,r18
    29b4:	8025883a 	mov	r18,r16
    29b8:	dc002d17 	ldw	r16,180(sp)
    29bc:	00000306 	br	29cc <___svfprintf_internal_r+0x8e0>
    29c0:	8c7ffc04 	addi	r17,r17,-16
    29c4:	42000204 	addi	r8,r8,8
    29c8:	e440110e 	bge	fp,r17,2a10 <___svfprintf_internal_r+0x924>
    29cc:	18c00404 	addi	r3,r3,16
    29d0:	10800044 	addi	r2,r2,1
    29d4:	45400015 	stw	r21,0(r8)
    29d8:	47000115 	stw	fp,4(r8)
    29dc:	d8c02015 	stw	r3,128(sp)
    29e0:	d8801f15 	stw	r2,124(sp)
    29e4:	a0bff60e 	bge	r20,r2,29c0 <__alt_mem_Onchip_SRAM+0xf80029c0>
    29e8:	d9801e04 	addi	r6,sp,120
    29ec:	800b883a 	mov	r5,r16
    29f0:	9809883a 	mov	r4,r19
    29f4:	000a7500 	call	a750 <__ssprint_r>
    29f8:	103ea31e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    29fc:	8c7ffc04 	addi	r17,r17,-16
    2a00:	d8c02017 	ldw	r3,128(sp)
    2a04:	d8801f17 	ldw	r2,124(sp)
    2a08:	da000404 	addi	r8,sp,16
    2a0c:	e47fef16 	blt	fp,r17,29cc <__alt_mem_Onchip_SRAM+0xf80029cc>
    2a10:	9021883a 	mov	r16,r18
    2a14:	b025883a 	mov	r18,r22
    2a18:	882d883a 	mov	r22,r17
    2a1c:	dc402a17 	ldw	r17,168(sp)
    2a20:	d9002c17 	ldw	r4,176(sp)
    2a24:	1d87883a 	add	r3,r3,r22
    2a28:	10800044 	addi	r2,r2,1
    2a2c:	41000015 	stw	r4,0(r8)
    2a30:	45800115 	stw	r22,4(r8)
    2a34:	d8c02015 	stw	r3,128(sp)
    2a38:	d8801f15 	stw	r2,124(sp)
    2a3c:	010001c4 	movi	r4,7
    2a40:	20820e16 	blt	r4,r2,327c <___svfprintf_internal_r+0x1190>
    2a44:	42000204 	addi	r8,r8,8
    2a48:	9080400c 	andi	r2,r18,256
    2a4c:	10013a1e 	bne	r2,zero,2f38 <___svfprintf_internal_r+0xe4c>
    2a50:	d9402b17 	ldw	r5,172(sp)
    2a54:	d8801f17 	ldw	r2,124(sp)
    2a58:	44000015 	stw	r16,0(r8)
    2a5c:	1947883a 	add	r3,r3,r5
    2a60:	10800044 	addi	r2,r2,1
    2a64:	41400115 	stw	r5,4(r8)
    2a68:	d8c02015 	stw	r3,128(sp)
    2a6c:	d8801f15 	stw	r2,124(sp)
    2a70:	010001c4 	movi	r4,7
    2a74:	2081f316 	blt	r4,r2,3244 <___svfprintf_internal_r+0x1158>
    2a78:	42000204 	addi	r8,r8,8
    2a7c:	9480010c 	andi	r18,r18,4
    2a80:	90003226 	beq	r18,zero,2b4c <___svfprintf_internal_r+0xa60>
    2a84:	d9403117 	ldw	r5,196(sp)
    2a88:	d8802917 	ldw	r2,164(sp)
    2a8c:	28a1c83a 	sub	r16,r5,r2
    2a90:	04002e0e 	bge	zero,r16,2b4c <___svfprintf_internal_r+0xa60>
    2a94:	04400404 	movi	r17,16
    2a98:	d8801f17 	ldw	r2,124(sp)
    2a9c:	8c04db0e 	bge	r17,r16,3e0c <___svfprintf_internal_r+0x1d20>
    2aa0:	014000b4 	movhi	r5,2
    2aa4:	2960af84 	addi	r5,r5,-32066
    2aa8:	d9403515 	stw	r5,212(sp)
    2aac:	048001c4 	movi	r18,7
    2ab0:	dd002d17 	ldw	r20,180(sp)
    2ab4:	00000306 	br	2ac4 <___svfprintf_internal_r+0x9d8>
    2ab8:	843ffc04 	addi	r16,r16,-16
    2abc:	42000204 	addi	r8,r8,8
    2ac0:	8c00130e 	bge	r17,r16,2b10 <___svfprintf_internal_r+0xa24>
    2ac4:	010000b4 	movhi	r4,2
    2ac8:	18c00404 	addi	r3,r3,16
    2acc:	10800044 	addi	r2,r2,1
    2ad0:	2120af84 	addi	r4,r4,-32066
    2ad4:	41000015 	stw	r4,0(r8)
    2ad8:	44400115 	stw	r17,4(r8)
    2adc:	d8c02015 	stw	r3,128(sp)
    2ae0:	d8801f15 	stw	r2,124(sp)
    2ae4:	90bff40e 	bge	r18,r2,2ab8 <__alt_mem_Onchip_SRAM+0xf8002ab8>
    2ae8:	d9801e04 	addi	r6,sp,120
    2aec:	a00b883a 	mov	r5,r20
    2af0:	9809883a 	mov	r4,r19
    2af4:	000a7500 	call	a750 <__ssprint_r>
    2af8:	103e631e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    2afc:	843ffc04 	addi	r16,r16,-16
    2b00:	d8c02017 	ldw	r3,128(sp)
    2b04:	d8801f17 	ldw	r2,124(sp)
    2b08:	da000404 	addi	r8,sp,16
    2b0c:	8c3fed16 	blt	r17,r16,2ac4 <__alt_mem_Onchip_SRAM+0xf8002ac4>
    2b10:	d9403517 	ldw	r5,212(sp)
    2b14:	1c07883a 	add	r3,r3,r16
    2b18:	10800044 	addi	r2,r2,1
    2b1c:	41400015 	stw	r5,0(r8)
    2b20:	44000115 	stw	r16,4(r8)
    2b24:	d8c02015 	stw	r3,128(sp)
    2b28:	d8801f15 	stw	r2,124(sp)
    2b2c:	010001c4 	movi	r4,7
    2b30:	2080060e 	bge	r4,r2,2b4c <___svfprintf_internal_r+0xa60>
    2b34:	d9402d17 	ldw	r5,180(sp)
    2b38:	d9801e04 	addi	r6,sp,120
    2b3c:	9809883a 	mov	r4,r19
    2b40:	000a7500 	call	a750 <__ssprint_r>
    2b44:	103e501e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    2b48:	d8c02017 	ldw	r3,128(sp)
    2b4c:	d8803117 	ldw	r2,196(sp)
    2b50:	d9002917 	ldw	r4,164(sp)
    2b54:	1100010e 	bge	r2,r4,2b5c <___svfprintf_internal_r+0xa70>
    2b58:	2005883a 	mov	r2,r4
    2b5c:	d9402f17 	ldw	r5,188(sp)
    2b60:	288b883a 	add	r5,r5,r2
    2b64:	d9402f15 	stw	r5,188(sp)
    2b68:	1801be1e 	bne	r3,zero,3264 <___svfprintf_internal_r+0x1178>
    2b6c:	b8800007 	ldb	r2,0(r23)
    2b70:	d8001f15 	stw	zero,124(sp)
    2b74:	da000404 	addi	r8,sp,16
    2b78:	103d891e 	bne	r2,zero,21a0 <__alt_mem_Onchip_SRAM+0xf80021a0>
    2b7c:	b823883a 	mov	r17,r23
    2b80:	003d9f06 	br	2200 <__alt_mem_Onchip_SRAM+0xf8002200>
    2b84:	8025883a 	mov	r18,r16
    2b88:	dc002903 	ldbu	r16,164(sp)
    2b8c:	e011883a 	mov	r8,fp
    2b90:	84003fcc 	andi	r16,r16,255
    2b94:	8005e61e 	bne	r16,zero,4330 <___svfprintf_internal_r+0x2244>
    2b98:	94800414 	ori	r18,r18,16
    2b9c:	9080080c 	andi	r2,r18,32
    2ba0:	10022026 	beq	r2,zero,3424 <___svfprintf_internal_r+0x1338>
    2ba4:	d9002e17 	ldw	r4,184(sp)
    2ba8:	d9402a17 	ldw	r5,168(sp)
    2bac:	d8002785 	stb	zero,158(sp)
    2bb0:	20c00204 	addi	r3,r4,8
    2bb4:	25000017 	ldw	r20,0(r4)
    2bb8:	25800117 	ldw	r22,4(r4)
    2bbc:	2803ad16 	blt	r5,zero,3a74 <___svfprintf_internal_r+0x1988>
    2bc0:	013fdfc4 	movi	r4,-129
    2bc4:	a584b03a 	or	r2,r20,r22
    2bc8:	d8c02e15 	stw	r3,184(sp)
    2bcc:	9124703a 	and	r18,r18,r4
    2bd0:	0039883a 	mov	fp,zero
    2bd4:	103eb01e 	bne	r2,zero,2698 <__alt_mem_Onchip_SRAM+0xf8002698>
    2bd8:	d8802a17 	ldw	r2,168(sp)
    2bdc:	1002e71e 	bne	r2,zero,377c <___svfprintf_internal_r+0x1690>
    2be0:	d8002a15 	stw	zero,168(sp)
    2be4:	d8002b15 	stw	zero,172(sp)
    2be8:	dc001e04 	addi	r16,sp,120
    2bec:	003ef706 	br	27cc <__alt_mem_Onchip_SRAM+0xf80027cc>
    2bf0:	8025883a 	mov	r18,r16
    2bf4:	dc002903 	ldbu	r16,164(sp)
    2bf8:	e011883a 	mov	r8,fp
    2bfc:	84003fcc 	andi	r16,r16,255
    2c00:	8005c81e 	bne	r16,zero,4324 <___svfprintf_internal_r+0x2238>
    2c04:	010000b4 	movhi	r4,2
    2c08:	21209f04 	addi	r4,r4,-32132
    2c0c:	d9003a15 	stw	r4,232(sp)
    2c10:	9080080c 	andi	r2,r18,32
    2c14:	10007226 	beq	r2,zero,2de0 <___svfprintf_internal_r+0xcf4>
    2c18:	d9402e17 	ldw	r5,184(sp)
    2c1c:	2d000017 	ldw	r20,0(r5)
    2c20:	2d800117 	ldw	r22,4(r5)
    2c24:	29400204 	addi	r5,r5,8
    2c28:	d9402e15 	stw	r5,184(sp)
    2c2c:	9080004c 	andi	r2,r18,1
    2c30:	1001aa26 	beq	r2,zero,32dc <___svfprintf_internal_r+0x11f0>
    2c34:	a584b03a 	or	r2,r20,r22
    2c38:	10032526 	beq	r2,zero,38d0 <___svfprintf_internal_r+0x17e4>
    2c3c:	d8c02a17 	ldw	r3,168(sp)
    2c40:	00800c04 	movi	r2,48
    2c44:	d8802705 	stb	r2,156(sp)
    2c48:	dc402745 	stb	r17,157(sp)
    2c4c:	d8002785 	stb	zero,158(sp)
    2c50:	90800094 	ori	r2,r18,2
    2c54:	1804a316 	blt	r3,zero,3ee4 <___svfprintf_internal_r+0x1df8>
    2c58:	00bfdfc4 	movi	r2,-129
    2c5c:	90a4703a 	and	r18,r18,r2
    2c60:	94800094 	ori	r18,r18,2
    2c64:	0039883a 	mov	fp,zero
    2c68:	d9003a17 	ldw	r4,232(sp)
    2c6c:	dc001e04 	addi	r16,sp,120
    2c70:	a08003cc 	andi	r2,r20,15
    2c74:	b006973a 	slli	r3,r22,28
    2c78:	2085883a 	add	r2,r4,r2
    2c7c:	a028d13a 	srli	r20,r20,4
    2c80:	10800003 	ldbu	r2,0(r2)
    2c84:	b02cd13a 	srli	r22,r22,4
    2c88:	843fffc4 	addi	r16,r16,-1
    2c8c:	1d28b03a 	or	r20,r3,r20
    2c90:	80800005 	stb	r2,0(r16)
    2c94:	a584b03a 	or	r2,r20,r22
    2c98:	103ff51e 	bne	r2,zero,2c70 <__alt_mem_Onchip_SRAM+0xf8002c70>
    2c9c:	d8c02817 	ldw	r3,160(sp)
    2ca0:	1c07c83a 	sub	r3,r3,r16
    2ca4:	d8c02b15 	stw	r3,172(sp)
    2ca8:	003ec806 	br	27cc <__alt_mem_Onchip_SRAM+0xf80027cc>
    2cac:	d8c02e17 	ldw	r3,184(sp)
    2cb0:	d9002e17 	ldw	r4,184(sp)
    2cb4:	8025883a 	mov	r18,r16
    2cb8:	18800017 	ldw	r2,0(r3)
    2cbc:	21000104 	addi	r4,r4,4
    2cc0:	00c00044 	movi	r3,1
    2cc4:	e011883a 	mov	r8,fp
    2cc8:	d8c02915 	stw	r3,164(sp)
    2ccc:	d8002785 	stb	zero,158(sp)
    2cd0:	d8801405 	stb	r2,80(sp)
    2cd4:	d9002e15 	stw	r4,184(sp)
    2cd8:	d8c02b15 	stw	r3,172(sp)
    2cdc:	d8002a15 	stw	zero,168(sp)
    2ce0:	d8003215 	stw	zero,200(sp)
    2ce4:	dc001404 	addi	r16,sp,80
    2ce8:	0039883a 	mov	fp,zero
    2cec:	003ec406 	br	2800 <__alt_mem_Onchip_SRAM+0xf8002800>
    2cf0:	8025883a 	mov	r18,r16
    2cf4:	dc002903 	ldbu	r16,164(sp)
    2cf8:	e011883a 	mov	r8,fp
    2cfc:	84003fcc 	andi	r16,r16,255
    2d00:	803e8726 	beq	r16,zero,2720 <__alt_mem_Onchip_SRAM+0xf8002720>
    2d04:	d8c02b03 	ldbu	r3,172(sp)
    2d08:	d8c02785 	stb	r3,158(sp)
    2d0c:	003e8406 	br	2720 <__alt_mem_Onchip_SRAM+0xf8002720>
    2d10:	00c00044 	movi	r3,1
    2d14:	d8c02905 	stb	r3,164(sp)
    2d18:	00c00ac4 	movi	r3,43
    2d1c:	d8c02b05 	stb	r3,172(sp)
    2d20:	bc400007 	ldb	r17,0(r23)
    2d24:	003d4606 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    2d28:	84000814 	ori	r16,r16,32
    2d2c:	bc400007 	ldb	r17,0(r23)
    2d30:	003d4306 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    2d34:	d8802e17 	ldw	r2,184(sp)
    2d38:	8025883a 	mov	r18,r16
    2d3c:	d8002785 	stb	zero,158(sp)
    2d40:	14000017 	ldw	r16,0(r2)
    2d44:	e011883a 	mov	r8,fp
    2d48:	15000104 	addi	r20,r2,4
    2d4c:	80042126 	beq	r16,zero,3dd4 <___svfprintf_internal_r+0x1ce8>
    2d50:	d8c02a17 	ldw	r3,168(sp)
    2d54:	1803ee16 	blt	r3,zero,3d10 <___svfprintf_internal_r+0x1c24>
    2d58:	180d883a 	mov	r6,r3
    2d5c:	000b883a 	mov	r5,zero
    2d60:	8009883a 	mov	r4,r16
    2d64:	df003e15 	stw	fp,248(sp)
    2d68:	00090b80 	call	90b8 <memchr>
    2d6c:	da003e17 	ldw	r8,248(sp)
    2d70:	10046a26 	beq	r2,zero,3f1c <___svfprintf_internal_r+0x1e30>
    2d74:	1405c83a 	sub	r2,r2,r16
    2d78:	d8802b15 	stw	r2,172(sp)
    2d7c:	1003ea16 	blt	r2,zero,3d28 <___svfprintf_internal_r+0x1c3c>
    2d80:	df002783 	ldbu	fp,158(sp)
    2d84:	d8802915 	stw	r2,164(sp)
    2d88:	dd002e15 	stw	r20,184(sp)
    2d8c:	d8002a15 	stw	zero,168(sp)
    2d90:	d8003215 	stw	zero,200(sp)
    2d94:	003e9306 	br	27e4 <__alt_mem_Onchip_SRAM+0xf80027e4>
    2d98:	8025883a 	mov	r18,r16
    2d9c:	dc002903 	ldbu	r16,164(sp)
    2da0:	e011883a 	mov	r8,fp
    2da4:	84003fcc 	andi	r16,r16,255
    2da8:	803f7c26 	beq	r16,zero,2b9c <__alt_mem_Onchip_SRAM+0xf8002b9c>
    2dac:	d8c02b03 	ldbu	r3,172(sp)
    2db0:	d8c02785 	stb	r3,158(sp)
    2db4:	003f7906 	br	2b9c <__alt_mem_Onchip_SRAM+0xf8002b9c>
    2db8:	8025883a 	mov	r18,r16
    2dbc:	dc002903 	ldbu	r16,164(sp)
    2dc0:	e011883a 	mov	r8,fp
    2dc4:	84003fcc 	andi	r16,r16,255
    2dc8:	8005741e 	bne	r16,zero,439c <___svfprintf_internal_r+0x22b0>
    2dcc:	010000b4 	movhi	r4,2
    2dd0:	2120a404 	addi	r4,r4,-32112
    2dd4:	d9003a15 	stw	r4,232(sp)
    2dd8:	9080080c 	andi	r2,r18,32
    2ddc:	103f8e1e 	bne	r2,zero,2c18 <__alt_mem_Onchip_SRAM+0xf8002c18>
    2de0:	9080040c 	andi	r2,r18,16
    2de4:	1002a726 	beq	r2,zero,3884 <___svfprintf_internal_r+0x1798>
    2de8:	d8802e17 	ldw	r2,184(sp)
    2dec:	002d883a 	mov	r22,zero
    2df0:	15000017 	ldw	r20,0(r2)
    2df4:	10800104 	addi	r2,r2,4
    2df8:	d8802e15 	stw	r2,184(sp)
    2dfc:	003f8b06 	br	2c2c <__alt_mem_Onchip_SRAM+0xf8002c2c>
    2e00:	84000054 	ori	r16,r16,1
    2e04:	bc400007 	ldb	r17,0(r23)
    2e08:	003d0d06 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    2e0c:	d8802b07 	ldb	r2,172(sp)
    2e10:	1002a41e 	bne	r2,zero,38a4 <___svfprintf_internal_r+0x17b8>
    2e14:	00c00044 	movi	r3,1
    2e18:	d8c02905 	stb	r3,164(sp)
    2e1c:	00c00804 	movi	r3,32
    2e20:	d8c02b05 	stb	r3,172(sp)
    2e24:	bc400007 	ldb	r17,0(r23)
    2e28:	003d0506 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    2e2c:	8025883a 	mov	r18,r16
    2e30:	dc002903 	ldbu	r16,164(sp)
    2e34:	e011883a 	mov	r8,fp
    2e38:	84003fcc 	andi	r16,r16,255
    2e3c:	803e0626 	beq	r16,zero,2658 <__alt_mem_Onchip_SRAM+0xf8002658>
    2e40:	d8c02b03 	ldbu	r3,172(sp)
    2e44:	d8c02785 	stb	r3,158(sp)
    2e48:	003e0306 	br	2658 <__alt_mem_Onchip_SRAM+0xf8002658>
    2e4c:	bc400007 	ldb	r17,0(r23)
    2e50:	00801b04 	movi	r2,108
    2e54:	88830a26 	beq	r17,r2,3a80 <___svfprintf_internal_r+0x1994>
    2e58:	84000414 	ori	r16,r16,16
    2e5c:	003cf806 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    2e60:	8025883a 	mov	r18,r16
    2e64:	dc002903 	ldbu	r16,164(sp)
    2e68:	e011883a 	mov	r8,fp
    2e6c:	84003fcc 	andi	r16,r16,255
    2e70:	8005471e 	bne	r16,zero,4390 <___svfprintf_internal_r+0x22a4>
    2e74:	9080080c 	andi	r2,r18,32
    2e78:	10028c26 	beq	r2,zero,38ac <___svfprintf_internal_r+0x17c0>
    2e7c:	d9002e17 	ldw	r4,184(sp)
    2e80:	d9402f17 	ldw	r5,188(sp)
    2e84:	20800017 	ldw	r2,0(r4)
    2e88:	2807d7fa 	srai	r3,r5,31
    2e8c:	21000104 	addi	r4,r4,4
    2e90:	d9002e15 	stw	r4,184(sp)
    2e94:	11400015 	stw	r5,0(r2)
    2e98:	10c00115 	stw	r3,4(r2)
    2e9c:	003cbe06 	br	2198 <__alt_mem_Onchip_SRAM+0xf8002198>
    2ea0:	84001014 	ori	r16,r16,64
    2ea4:	bc400007 	ldb	r17,0(r23)
    2ea8:	003ce506 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    2eac:	010000b4 	movhi	r4,2
    2eb0:	2120a404 	addi	r4,r4,-32112
    2eb4:	0039883a 	mov	fp,zero
    2eb8:	d9003a15 	stw	r4,232(sp)
    2ebc:	04401e04 	movi	r17,120
    2ec0:	003f6906 	br	2c68 <__alt_mem_Onchip_SRAM+0xf8002c68>
    2ec4:	8025883a 	mov	r18,r16
    2ec8:	dc002903 	ldbu	r16,164(sp)
    2ecc:	e011883a 	mov	r8,fp
    2ed0:	84003fcc 	andi	r16,r16,255
    2ed4:	8005261e 	bne	r16,zero,4370 <___svfprintf_internal_r+0x2284>
    2ed8:	883d6526 	beq	r17,zero,2470 <__alt_mem_Onchip_SRAM+0xf8002470>
    2edc:	00c00044 	movi	r3,1
    2ee0:	d8c02915 	stw	r3,164(sp)
    2ee4:	dc401405 	stb	r17,80(sp)
    2ee8:	d8002785 	stb	zero,158(sp)
    2eec:	003f7a06 	br	2cd8 <__alt_mem_Onchip_SRAM+0xf8002cd8>
    2ef0:	010000b4 	movhi	r4,2
    2ef4:	2120a404 	addi	r4,r4,-32112
    2ef8:	d9003a15 	stw	r4,232(sp)
    2efc:	d8c02e15 	stw	r3,184(sp)
    2f00:	1025883a 	mov	r18,r2
    2f04:	04401e04 	movi	r17,120
    2f08:	a584b03a 	or	r2,r20,r22
    2f0c:	1000fa1e 	bne	r2,zero,32f8 <___svfprintf_internal_r+0x120c>
    2f10:	0039883a 	mov	fp,zero
    2f14:	00800084 	movi	r2,2
    2f18:	10803fcc 	andi	r2,r2,255
    2f1c:	00c00044 	movi	r3,1
    2f20:	10c21626 	beq	r2,r3,377c <___svfprintf_internal_r+0x1690>
    2f24:	00c00084 	movi	r3,2
    2f28:	10fe0e1e 	bne	r2,r3,2764 <__alt_mem_Onchip_SRAM+0xf8002764>
    2f2c:	003d4606 	br	2448 <__alt_mem_Onchip_SRAM+0xf8002448>
    2f30:	d8c02017 	ldw	r3,128(sp)
    2f34:	003e7306 	br	2904 <__alt_mem_Onchip_SRAM+0xf8002904>
    2f38:	00801944 	movi	r2,101
    2f3c:	14407c0e 	bge	r2,r17,3130 <___svfprintf_internal_r+0x1044>
    2f40:	d9003617 	ldw	r4,216(sp)
    2f44:	d9403717 	ldw	r5,220(sp)
    2f48:	000d883a 	mov	r6,zero
    2f4c:	000f883a 	mov	r7,zero
    2f50:	d8c03d15 	stw	r3,244(sp)
    2f54:	da003e15 	stw	r8,248(sp)
    2f58:	00107d40 	call	107d4 <__eqdf2>
    2f5c:	d8c03d17 	ldw	r3,244(sp)
    2f60:	da003e17 	ldw	r8,248(sp)
    2f64:	1000f51e 	bne	r2,zero,333c <___svfprintf_internal_r+0x1250>
    2f68:	d8801f17 	ldw	r2,124(sp)
    2f6c:	010000b4 	movhi	r4,2
    2f70:	2120ab04 	addi	r4,r4,-32084
    2f74:	18c00044 	addi	r3,r3,1
    2f78:	10800044 	addi	r2,r2,1
    2f7c:	41000015 	stw	r4,0(r8)
    2f80:	01000044 	movi	r4,1
    2f84:	41000115 	stw	r4,4(r8)
    2f88:	d8c02015 	stw	r3,128(sp)
    2f8c:	d8801f15 	stw	r2,124(sp)
    2f90:	010001c4 	movi	r4,7
    2f94:	20826616 	blt	r4,r2,3930 <___svfprintf_internal_r+0x1844>
    2f98:	42000204 	addi	r8,r8,8
    2f9c:	d8802617 	ldw	r2,152(sp)
    2fa0:	d9403317 	ldw	r5,204(sp)
    2fa4:	11400216 	blt	r2,r5,2fb0 <___svfprintf_internal_r+0xec4>
    2fa8:	9080004c 	andi	r2,r18,1
    2fac:	103eb326 	beq	r2,zero,2a7c <__alt_mem_Onchip_SRAM+0xf8002a7c>
    2fb0:	d8803817 	ldw	r2,224(sp)
    2fb4:	d9003417 	ldw	r4,208(sp)
    2fb8:	d9403817 	ldw	r5,224(sp)
    2fbc:	1887883a 	add	r3,r3,r2
    2fc0:	d8801f17 	ldw	r2,124(sp)
    2fc4:	41000015 	stw	r4,0(r8)
    2fc8:	41400115 	stw	r5,4(r8)
    2fcc:	10800044 	addi	r2,r2,1
    2fd0:	d8c02015 	stw	r3,128(sp)
    2fd4:	d8801f15 	stw	r2,124(sp)
    2fd8:	010001c4 	movi	r4,7
    2fdc:	2082af16 	blt	r4,r2,3a9c <___svfprintf_internal_r+0x19b0>
    2fe0:	42000204 	addi	r8,r8,8
    2fe4:	d8803317 	ldw	r2,204(sp)
    2fe8:	143fffc4 	addi	r16,r2,-1
    2fec:	043ea30e 	bge	zero,r16,2a7c <__alt_mem_Onchip_SRAM+0xf8002a7c>
    2ff0:	04400404 	movi	r17,16
    2ff4:	d8801f17 	ldw	r2,124(sp)
    2ff8:	8c00860e 	bge	r17,r16,3214 <___svfprintf_internal_r+0x1128>
    2ffc:	014000b4 	movhi	r5,2
    3000:	2960ab84 	addi	r5,r5,-32082
    3004:	d9402c15 	stw	r5,176(sp)
    3008:	058001c4 	movi	r22,7
    300c:	dd002d17 	ldw	r20,180(sp)
    3010:	00000306 	br	3020 <___svfprintf_internal_r+0xf34>
    3014:	42000204 	addi	r8,r8,8
    3018:	843ffc04 	addi	r16,r16,-16
    301c:	8c00800e 	bge	r17,r16,3220 <___svfprintf_internal_r+0x1134>
    3020:	18c00404 	addi	r3,r3,16
    3024:	10800044 	addi	r2,r2,1
    3028:	45400015 	stw	r21,0(r8)
    302c:	44400115 	stw	r17,4(r8)
    3030:	d8c02015 	stw	r3,128(sp)
    3034:	d8801f15 	stw	r2,124(sp)
    3038:	b0bff60e 	bge	r22,r2,3014 <__alt_mem_Onchip_SRAM+0xf8003014>
    303c:	d9801e04 	addi	r6,sp,120
    3040:	a00b883a 	mov	r5,r20
    3044:	9809883a 	mov	r4,r19
    3048:	000a7500 	call	a750 <__ssprint_r>
    304c:	103d0e1e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3050:	d8c02017 	ldw	r3,128(sp)
    3054:	d8801f17 	ldw	r2,124(sp)
    3058:	da000404 	addi	r8,sp,16
    305c:	003fee06 	br	3018 <__alt_mem_Onchip_SRAM+0xf8003018>
    3060:	d9403117 	ldw	r5,196(sp)
    3064:	d8802917 	ldw	r2,164(sp)
    3068:	28adc83a 	sub	r22,r5,r2
    306c:	05be430e 	bge	zero,r22,297c <__alt_mem_Onchip_SRAM+0xf800297c>
    3070:	07000404 	movi	fp,16
    3074:	d8801f17 	ldw	r2,124(sp)
    3078:	e583a20e 	bge	fp,r22,3f04 <___svfprintf_internal_r+0x1e18>
    307c:	014000b4 	movhi	r5,2
    3080:	2960ab84 	addi	r5,r5,-32082
    3084:	dc403015 	stw	r17,192(sp)
    3088:	d9402c15 	stw	r5,176(sp)
    308c:	b023883a 	mov	r17,r22
    3090:	050001c4 	movi	r20,7
    3094:	902d883a 	mov	r22,r18
    3098:	8025883a 	mov	r18,r16
    309c:	dc002d17 	ldw	r16,180(sp)
    30a0:	00000306 	br	30b0 <___svfprintf_internal_r+0xfc4>
    30a4:	8c7ffc04 	addi	r17,r17,-16
    30a8:	42000204 	addi	r8,r8,8
    30ac:	e440110e 	bge	fp,r17,30f4 <___svfprintf_internal_r+0x1008>
    30b0:	18c00404 	addi	r3,r3,16
    30b4:	10800044 	addi	r2,r2,1
    30b8:	45400015 	stw	r21,0(r8)
    30bc:	47000115 	stw	fp,4(r8)
    30c0:	d8c02015 	stw	r3,128(sp)
    30c4:	d8801f15 	stw	r2,124(sp)
    30c8:	a0bff60e 	bge	r20,r2,30a4 <__alt_mem_Onchip_SRAM+0xf80030a4>
    30cc:	d9801e04 	addi	r6,sp,120
    30d0:	800b883a 	mov	r5,r16
    30d4:	9809883a 	mov	r4,r19
    30d8:	000a7500 	call	a750 <__ssprint_r>
    30dc:	103cea1e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    30e0:	8c7ffc04 	addi	r17,r17,-16
    30e4:	d8c02017 	ldw	r3,128(sp)
    30e8:	d8801f17 	ldw	r2,124(sp)
    30ec:	da000404 	addi	r8,sp,16
    30f0:	e47fef16 	blt	fp,r17,30b0 <__alt_mem_Onchip_SRAM+0xf80030b0>
    30f4:	9021883a 	mov	r16,r18
    30f8:	b025883a 	mov	r18,r22
    30fc:	882d883a 	mov	r22,r17
    3100:	dc403017 	ldw	r17,192(sp)
    3104:	d9002c17 	ldw	r4,176(sp)
    3108:	1d87883a 	add	r3,r3,r22
    310c:	10800044 	addi	r2,r2,1
    3110:	41000015 	stw	r4,0(r8)
    3114:	45800115 	stw	r22,4(r8)
    3118:	d8c02015 	stw	r3,128(sp)
    311c:	d8801f15 	stw	r2,124(sp)
    3120:	010001c4 	movi	r4,7
    3124:	20819a16 	blt	r4,r2,3790 <___svfprintf_internal_r+0x16a4>
    3128:	42000204 	addi	r8,r8,8
    312c:	003e1306 	br	297c <__alt_mem_Onchip_SRAM+0xf800297c>
    3130:	d9403317 	ldw	r5,204(sp)
    3134:	00800044 	movi	r2,1
    3138:	18c00044 	addi	r3,r3,1
    313c:	1141710e 	bge	r2,r5,3704 <___svfprintf_internal_r+0x1618>
    3140:	dc401f17 	ldw	r17,124(sp)
    3144:	00800044 	movi	r2,1
    3148:	40800115 	stw	r2,4(r8)
    314c:	8c400044 	addi	r17,r17,1
    3150:	44000015 	stw	r16,0(r8)
    3154:	d8c02015 	stw	r3,128(sp)
    3158:	dc401f15 	stw	r17,124(sp)
    315c:	008001c4 	movi	r2,7
    3160:	14417416 	blt	r2,r17,3734 <___svfprintf_internal_r+0x1648>
    3164:	42000204 	addi	r8,r8,8
    3168:	d8803817 	ldw	r2,224(sp)
    316c:	d9003417 	ldw	r4,208(sp)
    3170:	8c400044 	addi	r17,r17,1
    3174:	10c7883a 	add	r3,r2,r3
    3178:	40800115 	stw	r2,4(r8)
    317c:	41000015 	stw	r4,0(r8)
    3180:	d8c02015 	stw	r3,128(sp)
    3184:	dc401f15 	stw	r17,124(sp)
    3188:	008001c4 	movi	r2,7
    318c:	14417216 	blt	r2,r17,3758 <___svfprintf_internal_r+0x166c>
    3190:	45800204 	addi	r22,r8,8
    3194:	d9003617 	ldw	r4,216(sp)
    3198:	d9403717 	ldw	r5,220(sp)
    319c:	000d883a 	mov	r6,zero
    31a0:	000f883a 	mov	r7,zero
    31a4:	d8c03d15 	stw	r3,244(sp)
    31a8:	00107d40 	call	107d4 <__eqdf2>
    31ac:	d8c03d17 	ldw	r3,244(sp)
    31b0:	1000b326 	beq	r2,zero,3480 <___svfprintf_internal_r+0x1394>
    31b4:	d9403317 	ldw	r5,204(sp)
    31b8:	84000044 	addi	r16,r16,1
    31bc:	8c400044 	addi	r17,r17,1
    31c0:	28bfffc4 	addi	r2,r5,-1
    31c4:	1887883a 	add	r3,r3,r2
    31c8:	b0800115 	stw	r2,4(r22)
    31cc:	b4000015 	stw	r16,0(r22)
    31d0:	d8c02015 	stw	r3,128(sp)
    31d4:	dc401f15 	stw	r17,124(sp)
    31d8:	008001c4 	movi	r2,7
    31dc:	1440d216 	blt	r2,r17,3528 <___svfprintf_internal_r+0x143c>
    31e0:	b5800204 	addi	r22,r22,8
    31e4:	d9003b17 	ldw	r4,236(sp)
    31e8:	df0022c4 	addi	fp,sp,139
    31ec:	8c400044 	addi	r17,r17,1
    31f0:	20c7883a 	add	r3,r4,r3
    31f4:	b7000015 	stw	fp,0(r22)
    31f8:	b1000115 	stw	r4,4(r22)
    31fc:	d8c02015 	stw	r3,128(sp)
    3200:	dc401f15 	stw	r17,124(sp)
    3204:	008001c4 	movi	r2,7
    3208:	14400e16 	blt	r2,r17,3244 <___svfprintf_internal_r+0x1158>
    320c:	b2000204 	addi	r8,r22,8
    3210:	003e1a06 	br	2a7c <__alt_mem_Onchip_SRAM+0xf8002a7c>
    3214:	010000b4 	movhi	r4,2
    3218:	2120ab84 	addi	r4,r4,-32082
    321c:	d9002c15 	stw	r4,176(sp)
    3220:	d9002c17 	ldw	r4,176(sp)
    3224:	1c07883a 	add	r3,r3,r16
    3228:	44000115 	stw	r16,4(r8)
    322c:	41000015 	stw	r4,0(r8)
    3230:	10800044 	addi	r2,r2,1
    3234:	d8c02015 	stw	r3,128(sp)
    3238:	d8801f15 	stw	r2,124(sp)
    323c:	010001c4 	movi	r4,7
    3240:	20be0d0e 	bge	r4,r2,2a78 <__alt_mem_Onchip_SRAM+0xf8002a78>
    3244:	d9402d17 	ldw	r5,180(sp)
    3248:	d9801e04 	addi	r6,sp,120
    324c:	9809883a 	mov	r4,r19
    3250:	000a7500 	call	a750 <__ssprint_r>
    3254:	103c8c1e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3258:	d8c02017 	ldw	r3,128(sp)
    325c:	da000404 	addi	r8,sp,16
    3260:	003e0606 	br	2a7c <__alt_mem_Onchip_SRAM+0xf8002a7c>
    3264:	d9402d17 	ldw	r5,180(sp)
    3268:	d9801e04 	addi	r6,sp,120
    326c:	9809883a 	mov	r4,r19
    3270:	000a7500 	call	a750 <__ssprint_r>
    3274:	103e3d26 	beq	r2,zero,2b6c <__alt_mem_Onchip_SRAM+0xf8002b6c>
    3278:	003c8306 	br	2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    327c:	d9402d17 	ldw	r5,180(sp)
    3280:	d9801e04 	addi	r6,sp,120
    3284:	9809883a 	mov	r4,r19
    3288:	000a7500 	call	a750 <__ssprint_r>
    328c:	103c7e1e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3290:	d8c02017 	ldw	r3,128(sp)
    3294:	da000404 	addi	r8,sp,16
    3298:	003deb06 	br	2a48 <__alt_mem_Onchip_SRAM+0xf8002a48>
    329c:	d9402d17 	ldw	r5,180(sp)
    32a0:	d9801e04 	addi	r6,sp,120
    32a4:	9809883a 	mov	r4,r19
    32a8:	000a7500 	call	a750 <__ssprint_r>
    32ac:	103c761e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    32b0:	d8c02017 	ldw	r3,128(sp)
    32b4:	da000404 	addi	r8,sp,16
    32b8:	003d9f06 	br	2938 <__alt_mem_Onchip_SRAM+0xf8002938>
    32bc:	d9402d17 	ldw	r5,180(sp)
    32c0:	d9801e04 	addi	r6,sp,120
    32c4:	9809883a 	mov	r4,r19
    32c8:	000a7500 	call	a750 <__ssprint_r>
    32cc:	103c6e1e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    32d0:	d8c02017 	ldw	r3,128(sp)
    32d4:	da000404 	addi	r8,sp,16
    32d8:	003da506 	br	2970 <__alt_mem_Onchip_SRAM+0xf8002970>
    32dc:	d9402a17 	ldw	r5,168(sp)
    32e0:	d8002785 	stb	zero,158(sp)
    32e4:	283f0816 	blt	r5,zero,2f08 <__alt_mem_Onchip_SRAM+0xf8002f08>
    32e8:	00ffdfc4 	movi	r3,-129
    32ec:	a584b03a 	or	r2,r20,r22
    32f0:	90e4703a 	and	r18,r18,r3
    32f4:	103c5126 	beq	r2,zero,243c <__alt_mem_Onchip_SRAM+0xf800243c>
    32f8:	0039883a 	mov	fp,zero
    32fc:	003e5a06 	br	2c68 <__alt_mem_Onchip_SRAM+0xf8002c68>
    3300:	9080040c 	andi	r2,r18,16
    3304:	10013d26 	beq	r2,zero,37fc <___svfprintf_internal_r+0x1710>
    3308:	d8c02e17 	ldw	r3,184(sp)
    330c:	d9002a17 	ldw	r4,168(sp)
    3310:	d8002785 	stb	zero,158(sp)
    3314:	18800104 	addi	r2,r3,4
    3318:	1d000017 	ldw	r20,0(r3)
    331c:	002d883a 	mov	r22,zero
    3320:	20013f16 	blt	r4,zero,3820 <___svfprintf_internal_r+0x1734>
    3324:	00ffdfc4 	movi	r3,-129
    3328:	d8802e15 	stw	r2,184(sp)
    332c:	90e4703a 	and	r18,r18,r3
    3330:	a03d0926 	beq	r20,zero,2758 <__alt_mem_Onchip_SRAM+0xf8002758>
    3334:	0039883a 	mov	fp,zero
    3338:	003d0c06 	br	276c <__alt_mem_Onchip_SRAM+0xf800276c>
    333c:	dc402617 	ldw	r17,152(sp)
    3340:	0441830e 	bge	zero,r17,3950 <___svfprintf_internal_r+0x1864>
    3344:	dc403217 	ldw	r17,200(sp)
    3348:	d8803317 	ldw	r2,204(sp)
    334c:	1440010e 	bge	r2,r17,3354 <___svfprintf_internal_r+0x1268>
    3350:	1023883a 	mov	r17,r2
    3354:	04400a0e 	bge	zero,r17,3380 <___svfprintf_internal_r+0x1294>
    3358:	d8801f17 	ldw	r2,124(sp)
    335c:	1c47883a 	add	r3,r3,r17
    3360:	44000015 	stw	r16,0(r8)
    3364:	10800044 	addi	r2,r2,1
    3368:	44400115 	stw	r17,4(r8)
    336c:	d8c02015 	stw	r3,128(sp)
    3370:	d8801f15 	stw	r2,124(sp)
    3374:	010001c4 	movi	r4,7
    3378:	20827516 	blt	r4,r2,3d50 <___svfprintf_internal_r+0x1c64>
    337c:	42000204 	addi	r8,r8,8
    3380:	88027b16 	blt	r17,zero,3d70 <___svfprintf_internal_r+0x1c84>
    3384:	d9003217 	ldw	r4,200(sp)
    3388:	2463c83a 	sub	r17,r4,r17
    338c:	0440990e 	bge	zero,r17,35f4 <___svfprintf_internal_r+0x1508>
    3390:	05800404 	movi	r22,16
    3394:	d8801f17 	ldw	r2,124(sp)
    3398:	b441530e 	bge	r22,r17,38e8 <___svfprintf_internal_r+0x17fc>
    339c:	010000b4 	movhi	r4,2
    33a0:	2120ab84 	addi	r4,r4,-32082
    33a4:	d9002c15 	stw	r4,176(sp)
    33a8:	070001c4 	movi	fp,7
    33ac:	dd002d17 	ldw	r20,180(sp)
    33b0:	00000306 	br	33c0 <___svfprintf_internal_r+0x12d4>
    33b4:	42000204 	addi	r8,r8,8
    33b8:	8c7ffc04 	addi	r17,r17,-16
    33bc:	b4414d0e 	bge	r22,r17,38f4 <___svfprintf_internal_r+0x1808>
    33c0:	18c00404 	addi	r3,r3,16
    33c4:	10800044 	addi	r2,r2,1
    33c8:	45400015 	stw	r21,0(r8)
    33cc:	45800115 	stw	r22,4(r8)
    33d0:	d8c02015 	stw	r3,128(sp)
    33d4:	d8801f15 	stw	r2,124(sp)
    33d8:	e0bff60e 	bge	fp,r2,33b4 <__alt_mem_Onchip_SRAM+0xf80033b4>
    33dc:	d9801e04 	addi	r6,sp,120
    33e0:	a00b883a 	mov	r5,r20
    33e4:	9809883a 	mov	r4,r19
    33e8:	000a7500 	call	a750 <__ssprint_r>
    33ec:	103c261e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    33f0:	d8c02017 	ldw	r3,128(sp)
    33f4:	d8801f17 	ldw	r2,124(sp)
    33f8:	da000404 	addi	r8,sp,16
    33fc:	003fee06 	br	33b8 <__alt_mem_Onchip_SRAM+0xf80033b8>
    3400:	d9402d17 	ldw	r5,180(sp)
    3404:	d9801e04 	addi	r6,sp,120
    3408:	9809883a 	mov	r4,r19
    340c:	000a7500 	call	a750 <__ssprint_r>
    3410:	103c1d1e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3414:	d8c02017 	ldw	r3,128(sp)
    3418:	df002787 	ldb	fp,158(sp)
    341c:	da000404 	addi	r8,sp,16
    3420:	003d3806 	br	2904 <__alt_mem_Onchip_SRAM+0xf8002904>
    3424:	9080040c 	andi	r2,r18,16
    3428:	10005c26 	beq	r2,zero,359c <___svfprintf_internal_r+0x14b0>
    342c:	d8c02e17 	ldw	r3,184(sp)
    3430:	d9002a17 	ldw	r4,168(sp)
    3434:	d8002785 	stb	zero,158(sp)
    3438:	18800104 	addi	r2,r3,4
    343c:	1d000017 	ldw	r20,0(r3)
    3440:	002d883a 	mov	r22,zero
    3444:	20005e16 	blt	r4,zero,35c0 <___svfprintf_internal_r+0x14d4>
    3448:	00ffdfc4 	movi	r3,-129
    344c:	d8802e15 	stw	r2,184(sp)
    3450:	90e4703a 	and	r18,r18,r3
    3454:	0039883a 	mov	fp,zero
    3458:	a03ddf26 	beq	r20,zero,2bd8 <__alt_mem_Onchip_SRAM+0xf8002bd8>
    345c:	00800244 	movi	r2,9
    3460:	153c8e36 	bltu	r2,r20,269c <__alt_mem_Onchip_SRAM+0xf800269c>
    3464:	a5000c04 	addi	r20,r20,48
    3468:	dc001dc4 	addi	r16,sp,119
    346c:	dd001dc5 	stb	r20,119(sp)
    3470:	d8c02817 	ldw	r3,160(sp)
    3474:	1c07c83a 	sub	r3,r3,r16
    3478:	d8c02b15 	stw	r3,172(sp)
    347c:	003cd306 	br	27cc <__alt_mem_Onchip_SRAM+0xf80027cc>
    3480:	d8803317 	ldw	r2,204(sp)
    3484:	143fffc4 	addi	r16,r2,-1
    3488:	043f560e 	bge	zero,r16,31e4 <__alt_mem_Onchip_SRAM+0xf80031e4>
    348c:	07000404 	movi	fp,16
    3490:	e403530e 	bge	fp,r16,41e0 <___svfprintf_internal_r+0x20f4>
    3494:	014000b4 	movhi	r5,2
    3498:	2960ab84 	addi	r5,r5,-32082
    349c:	d9402c15 	stw	r5,176(sp)
    34a0:	01c001c4 	movi	r7,7
    34a4:	dd002d17 	ldw	r20,180(sp)
    34a8:	00000306 	br	34b8 <___svfprintf_internal_r+0x13cc>
    34ac:	843ffc04 	addi	r16,r16,-16
    34b0:	b5800204 	addi	r22,r22,8
    34b4:	e400130e 	bge	fp,r16,3504 <___svfprintf_internal_r+0x1418>
    34b8:	18c00404 	addi	r3,r3,16
    34bc:	8c400044 	addi	r17,r17,1
    34c0:	b5400015 	stw	r21,0(r22)
    34c4:	b7000115 	stw	fp,4(r22)
    34c8:	d8c02015 	stw	r3,128(sp)
    34cc:	dc401f15 	stw	r17,124(sp)
    34d0:	3c7ff60e 	bge	r7,r17,34ac <__alt_mem_Onchip_SRAM+0xf80034ac>
    34d4:	d9801e04 	addi	r6,sp,120
    34d8:	a00b883a 	mov	r5,r20
    34dc:	9809883a 	mov	r4,r19
    34e0:	d9c03d15 	stw	r7,244(sp)
    34e4:	000a7500 	call	a750 <__ssprint_r>
    34e8:	d9c03d17 	ldw	r7,244(sp)
    34ec:	103be61e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    34f0:	843ffc04 	addi	r16,r16,-16
    34f4:	d8c02017 	ldw	r3,128(sp)
    34f8:	dc401f17 	ldw	r17,124(sp)
    34fc:	dd800404 	addi	r22,sp,16
    3500:	e43fed16 	blt	fp,r16,34b8 <__alt_mem_Onchip_SRAM+0xf80034b8>
    3504:	d8802c17 	ldw	r2,176(sp)
    3508:	1c07883a 	add	r3,r3,r16
    350c:	8c400044 	addi	r17,r17,1
    3510:	b0800015 	stw	r2,0(r22)
    3514:	b4000115 	stw	r16,4(r22)
    3518:	d8c02015 	stw	r3,128(sp)
    351c:	dc401f15 	stw	r17,124(sp)
    3520:	008001c4 	movi	r2,7
    3524:	147f2e0e 	bge	r2,r17,31e0 <__alt_mem_Onchip_SRAM+0xf80031e0>
    3528:	d9402d17 	ldw	r5,180(sp)
    352c:	d9801e04 	addi	r6,sp,120
    3530:	9809883a 	mov	r4,r19
    3534:	000a7500 	call	a750 <__ssprint_r>
    3538:	103bd31e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    353c:	d8c02017 	ldw	r3,128(sp)
    3540:	dc401f17 	ldw	r17,124(sp)
    3544:	dd800404 	addi	r22,sp,16
    3548:	003f2606 	br	31e4 <__alt_mem_Onchip_SRAM+0xf80031e4>
    354c:	9080040c 	andi	r2,r18,16
    3550:	1000c326 	beq	r2,zero,3860 <___svfprintf_internal_r+0x1774>
    3554:	d9402e17 	ldw	r5,184(sp)
    3558:	2d000017 	ldw	r20,0(r5)
    355c:	29400104 	addi	r5,r5,4
    3560:	d9402e15 	stw	r5,184(sp)
    3564:	a02dd7fa 	srai	r22,r20,31
    3568:	b005883a 	mov	r2,r22
    356c:	103c430e 	bge	r2,zero,267c <__alt_mem_Onchip_SRAM+0xf800267c>
    3570:	d9402a17 	ldw	r5,168(sp)
    3574:	0529c83a 	sub	r20,zero,r20
    3578:	07000b44 	movi	fp,45
    357c:	a004c03a 	cmpne	r2,r20,zero
    3580:	05adc83a 	sub	r22,zero,r22
    3584:	df002785 	stb	fp,158(sp)
    3588:	b0adc83a 	sub	r22,r22,r2
    358c:	28022e16 	blt	r5,zero,3e48 <___svfprintf_internal_r+0x1d5c>
    3590:	00bfdfc4 	movi	r2,-129
    3594:	90a4703a 	and	r18,r18,r2
    3598:	003c3f06 	br	2698 <__alt_mem_Onchip_SRAM+0xf8002698>
    359c:	9080100c 	andi	r2,r18,64
    35a0:	d8002785 	stb	zero,158(sp)
    35a4:	10012526 	beq	r2,zero,3a3c <___svfprintf_internal_r+0x1950>
    35a8:	d9402e17 	ldw	r5,184(sp)
    35ac:	d8c02a17 	ldw	r3,168(sp)
    35b0:	002d883a 	mov	r22,zero
    35b4:	28800104 	addi	r2,r5,4
    35b8:	2d00000b 	ldhu	r20,0(r5)
    35bc:	183fa20e 	bge	r3,zero,3448 <__alt_mem_Onchip_SRAM+0xf8003448>
    35c0:	d8802e15 	stw	r2,184(sp)
    35c4:	0039883a 	mov	fp,zero
    35c8:	a584b03a 	or	r2,r20,r22
    35cc:	103c321e 	bne	r2,zero,2698 <__alt_mem_Onchip_SRAM+0xf8002698>
    35d0:	00800044 	movi	r2,1
    35d4:	003e5006 	br	2f18 <__alt_mem_Onchip_SRAM+0xf8002f18>
    35d8:	d9402d17 	ldw	r5,180(sp)
    35dc:	d9801e04 	addi	r6,sp,120
    35e0:	9809883a 	mov	r4,r19
    35e4:	000a7500 	call	a750 <__ssprint_r>
    35e8:	103ba71e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    35ec:	d8c02017 	ldw	r3,128(sp)
    35f0:	da000404 	addi	r8,sp,16
    35f4:	d9003217 	ldw	r4,200(sp)
    35f8:	d8802617 	ldw	r2,152(sp)
    35fc:	d9403317 	ldw	r5,204(sp)
    3600:	8123883a 	add	r17,r16,r4
    3604:	11400216 	blt	r2,r5,3610 <___svfprintf_internal_r+0x1524>
    3608:	9100004c 	andi	r4,r18,1
    360c:	20000d26 	beq	r4,zero,3644 <___svfprintf_internal_r+0x1558>
    3610:	d9003817 	ldw	r4,224(sp)
    3614:	d9403417 	ldw	r5,208(sp)
    3618:	1907883a 	add	r3,r3,r4
    361c:	d9001f17 	ldw	r4,124(sp)
    3620:	41400015 	stw	r5,0(r8)
    3624:	d9403817 	ldw	r5,224(sp)
    3628:	21000044 	addi	r4,r4,1
    362c:	d8c02015 	stw	r3,128(sp)
    3630:	41400115 	stw	r5,4(r8)
    3634:	d9001f15 	stw	r4,124(sp)
    3638:	014001c4 	movi	r5,7
    363c:	2901dc16 	blt	r5,r4,3db0 <___svfprintf_internal_r+0x1cc4>
    3640:	42000204 	addi	r8,r8,8
    3644:	d9003317 	ldw	r4,204(sp)
    3648:	8121883a 	add	r16,r16,r4
    364c:	2085c83a 	sub	r2,r4,r2
    3650:	8461c83a 	sub	r16,r16,r17
    3654:	1400010e 	bge	r2,r16,365c <___svfprintf_internal_r+0x1570>
    3658:	1021883a 	mov	r16,r2
    365c:	04000a0e 	bge	zero,r16,3688 <___svfprintf_internal_r+0x159c>
    3660:	d9001f17 	ldw	r4,124(sp)
    3664:	1c07883a 	add	r3,r3,r16
    3668:	44400015 	stw	r17,0(r8)
    366c:	21000044 	addi	r4,r4,1
    3670:	44000115 	stw	r16,4(r8)
    3674:	d8c02015 	stw	r3,128(sp)
    3678:	d9001f15 	stw	r4,124(sp)
    367c:	014001c4 	movi	r5,7
    3680:	2901e616 	blt	r5,r4,3e1c <___svfprintf_internal_r+0x1d30>
    3684:	42000204 	addi	r8,r8,8
    3688:	8001f616 	blt	r16,zero,3e64 <___svfprintf_internal_r+0x1d78>
    368c:	1421c83a 	sub	r16,r2,r16
    3690:	043cfa0e 	bge	zero,r16,2a7c <__alt_mem_Onchip_SRAM+0xf8002a7c>
    3694:	04400404 	movi	r17,16
    3698:	d8801f17 	ldw	r2,124(sp)
    369c:	8c3edd0e 	bge	r17,r16,3214 <__alt_mem_Onchip_SRAM+0xf8003214>
    36a0:	014000b4 	movhi	r5,2
    36a4:	2960ab84 	addi	r5,r5,-32082
    36a8:	d9402c15 	stw	r5,176(sp)
    36ac:	058001c4 	movi	r22,7
    36b0:	dd002d17 	ldw	r20,180(sp)
    36b4:	00000306 	br	36c4 <___svfprintf_internal_r+0x15d8>
    36b8:	42000204 	addi	r8,r8,8
    36bc:	843ffc04 	addi	r16,r16,-16
    36c0:	8c3ed70e 	bge	r17,r16,3220 <__alt_mem_Onchip_SRAM+0xf8003220>
    36c4:	18c00404 	addi	r3,r3,16
    36c8:	10800044 	addi	r2,r2,1
    36cc:	45400015 	stw	r21,0(r8)
    36d0:	44400115 	stw	r17,4(r8)
    36d4:	d8c02015 	stw	r3,128(sp)
    36d8:	d8801f15 	stw	r2,124(sp)
    36dc:	b0bff60e 	bge	r22,r2,36b8 <__alt_mem_Onchip_SRAM+0xf80036b8>
    36e0:	d9801e04 	addi	r6,sp,120
    36e4:	a00b883a 	mov	r5,r20
    36e8:	9809883a 	mov	r4,r19
    36ec:	000a7500 	call	a750 <__ssprint_r>
    36f0:	103b651e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    36f4:	d8c02017 	ldw	r3,128(sp)
    36f8:	d8801f17 	ldw	r2,124(sp)
    36fc:	da000404 	addi	r8,sp,16
    3700:	003fee06 	br	36bc <__alt_mem_Onchip_SRAM+0xf80036bc>
    3704:	9088703a 	and	r4,r18,r2
    3708:	203e8d1e 	bne	r4,zero,3140 <__alt_mem_Onchip_SRAM+0xf8003140>
    370c:	dc401f17 	ldw	r17,124(sp)
    3710:	40800115 	stw	r2,4(r8)
    3714:	44000015 	stw	r16,0(r8)
    3718:	8c400044 	addi	r17,r17,1
    371c:	d8c02015 	stw	r3,128(sp)
    3720:	dc401f15 	stw	r17,124(sp)
    3724:	008001c4 	movi	r2,7
    3728:	147f7f16 	blt	r2,r17,3528 <__alt_mem_Onchip_SRAM+0xf8003528>
    372c:	45800204 	addi	r22,r8,8
    3730:	003eac06 	br	31e4 <__alt_mem_Onchip_SRAM+0xf80031e4>
    3734:	d9402d17 	ldw	r5,180(sp)
    3738:	d9801e04 	addi	r6,sp,120
    373c:	9809883a 	mov	r4,r19
    3740:	000a7500 	call	a750 <__ssprint_r>
    3744:	103b501e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3748:	d8c02017 	ldw	r3,128(sp)
    374c:	dc401f17 	ldw	r17,124(sp)
    3750:	da000404 	addi	r8,sp,16
    3754:	003e8406 	br	3168 <__alt_mem_Onchip_SRAM+0xf8003168>
    3758:	d9402d17 	ldw	r5,180(sp)
    375c:	d9801e04 	addi	r6,sp,120
    3760:	9809883a 	mov	r4,r19
    3764:	000a7500 	call	a750 <__ssprint_r>
    3768:	103b471e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    376c:	d8c02017 	ldw	r3,128(sp)
    3770:	dc401f17 	ldw	r17,124(sp)
    3774:	dd800404 	addi	r22,sp,16
    3778:	003e8606 	br	3194 <__alt_mem_Onchip_SRAM+0xf8003194>
    377c:	0029883a 	mov	r20,zero
    3780:	a5000c04 	addi	r20,r20,48
    3784:	dc001dc4 	addi	r16,sp,119
    3788:	dd001dc5 	stb	r20,119(sp)
    378c:	003f3806 	br	3470 <__alt_mem_Onchip_SRAM+0xf8003470>
    3790:	d9402d17 	ldw	r5,180(sp)
    3794:	d9801e04 	addi	r6,sp,120
    3798:	9809883a 	mov	r4,r19
    379c:	000a7500 	call	a750 <__ssprint_r>
    37a0:	103b391e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    37a4:	d8c02017 	ldw	r3,128(sp)
    37a8:	da000404 	addi	r8,sp,16
    37ac:	003c7306 	br	297c <__alt_mem_Onchip_SRAM+0xf800297c>
    37b0:	d9003617 	ldw	r4,216(sp)
    37b4:	d9403717 	ldw	r5,220(sp)
    37b8:	da003e15 	stw	r8,248(sp)
    37bc:	000a4c40 	call	a4c4 <__fpclassifyd>
    37c0:	da003e17 	ldw	r8,248(sp)
    37c4:	1000bd1e 	bne	r2,zero,3abc <___svfprintf_internal_r+0x19d0>
    37c8:	008011c4 	movi	r2,71
    37cc:	14411e0e 	bge	r2,r17,3c48 <___svfprintf_internal_r+0x1b5c>
    37d0:	040000b4 	movhi	r16,2
    37d4:	84209e04 	addi	r16,r16,-32136
    37d8:	00c000c4 	movi	r3,3
    37dc:	00bfdfc4 	movi	r2,-129
    37e0:	d8c02915 	stw	r3,164(sp)
    37e4:	90a4703a 	and	r18,r18,r2
    37e8:	df002783 	ldbu	fp,158(sp)
    37ec:	d8c02b15 	stw	r3,172(sp)
    37f0:	d8002a15 	stw	zero,168(sp)
    37f4:	d8003215 	stw	zero,200(sp)
    37f8:	003bfa06 	br	27e4 <__alt_mem_Onchip_SRAM+0xf80027e4>
    37fc:	9080100c 	andi	r2,r18,64
    3800:	d8002785 	stb	zero,158(sp)
    3804:	10009426 	beq	r2,zero,3a58 <___svfprintf_internal_r+0x196c>
    3808:	d9402e17 	ldw	r5,184(sp)
    380c:	d8c02a17 	ldw	r3,168(sp)
    3810:	002d883a 	mov	r22,zero
    3814:	28800104 	addi	r2,r5,4
    3818:	2d00000b 	ldhu	r20,0(r5)
    381c:	183ec10e 	bge	r3,zero,3324 <__alt_mem_Onchip_SRAM+0xf8003324>
    3820:	a586b03a 	or	r3,r20,r22
    3824:	d8802e15 	stw	r2,184(sp)
    3828:	183ec21e 	bne	r3,zero,3334 <__alt_mem_Onchip_SRAM+0xf8003334>
    382c:	0039883a 	mov	fp,zero
    3830:	0005883a 	mov	r2,zero
    3834:	003db806 	br	2f18 <__alt_mem_Onchip_SRAM+0xf8002f18>
    3838:	d8c02e17 	ldw	r3,184(sp)
    383c:	d9002e17 	ldw	r4,184(sp)
    3840:	d9402e17 	ldw	r5,184(sp)
    3844:	18c00017 	ldw	r3,0(r3)
    3848:	21000117 	ldw	r4,4(r4)
    384c:	29400204 	addi	r5,r5,8
    3850:	d8c03615 	stw	r3,216(sp)
    3854:	d9003715 	stw	r4,220(sp)
    3858:	d9402e15 	stw	r5,184(sp)
    385c:	003b5a06 	br	25c8 <__alt_mem_Onchip_SRAM+0xf80025c8>
    3860:	9080100c 	andi	r2,r18,64
    3864:	10010726 	beq	r2,zero,3c84 <___svfprintf_internal_r+0x1b98>
    3868:	d8802e17 	ldw	r2,184(sp)
    386c:	1500000f 	ldh	r20,0(r2)
    3870:	10800104 	addi	r2,r2,4
    3874:	d8802e15 	stw	r2,184(sp)
    3878:	a02dd7fa 	srai	r22,r20,31
    387c:	b005883a 	mov	r2,r22
    3880:	003b7d06 	br	2678 <__alt_mem_Onchip_SRAM+0xf8002678>
    3884:	9080100c 	andi	r2,r18,64
    3888:	10010526 	beq	r2,zero,3ca0 <___svfprintf_internal_r+0x1bb4>
    388c:	d8c02e17 	ldw	r3,184(sp)
    3890:	002d883a 	mov	r22,zero
    3894:	1d00000b 	ldhu	r20,0(r3)
    3898:	18c00104 	addi	r3,r3,4
    389c:	d8c02e15 	stw	r3,184(sp)
    38a0:	003ce206 	br	2c2c <__alt_mem_Onchip_SRAM+0xf8002c2c>
    38a4:	bc400007 	ldb	r17,0(r23)
    38a8:	003a6506 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    38ac:	9080040c 	andi	r2,r18,16
    38b0:	10010126 	beq	r2,zero,3cb8 <___svfprintf_internal_r+0x1bcc>
    38b4:	d8c02e17 	ldw	r3,184(sp)
    38b8:	d9002f17 	ldw	r4,188(sp)
    38bc:	18800017 	ldw	r2,0(r3)
    38c0:	18c00104 	addi	r3,r3,4
    38c4:	d8c02e15 	stw	r3,184(sp)
    38c8:	11000015 	stw	r4,0(r2)
    38cc:	003a3206 	br	2198 <__alt_mem_Onchip_SRAM+0xf8002198>
    38d0:	d9002a17 	ldw	r4,168(sp)
    38d4:	d8002785 	stb	zero,158(sp)
    38d8:	203d8d16 	blt	r4,zero,2f10 <__alt_mem_Onchip_SRAM+0xf8002f10>
    38dc:	00bfdfc4 	movi	r2,-129
    38e0:	90a4703a 	and	r18,r18,r2
    38e4:	003ad506 	br	243c <__alt_mem_Onchip_SRAM+0xf800243c>
    38e8:	014000b4 	movhi	r5,2
    38ec:	2960ab84 	addi	r5,r5,-32082
    38f0:	d9402c15 	stw	r5,176(sp)
    38f4:	d9402c17 	ldw	r5,176(sp)
    38f8:	1c47883a 	add	r3,r3,r17
    38fc:	10800044 	addi	r2,r2,1
    3900:	41400015 	stw	r5,0(r8)
    3904:	44400115 	stw	r17,4(r8)
    3908:	d8c02015 	stw	r3,128(sp)
    390c:	d8801f15 	stw	r2,124(sp)
    3910:	010001c4 	movi	r4,7
    3914:	20bf3016 	blt	r4,r2,35d8 <__alt_mem_Onchip_SRAM+0xf80035d8>
    3918:	42000204 	addi	r8,r8,8
    391c:	003f3506 	br	35f4 <__alt_mem_Onchip_SRAM+0xf80035f4>
    3920:	010000b4 	movhi	r4,2
    3924:	2120ab84 	addi	r4,r4,-32082
    3928:	d9002c15 	stw	r4,176(sp)
    392c:	003c3c06 	br	2a20 <__alt_mem_Onchip_SRAM+0xf8002a20>
    3930:	d9402d17 	ldw	r5,180(sp)
    3934:	d9801e04 	addi	r6,sp,120
    3938:	9809883a 	mov	r4,r19
    393c:	000a7500 	call	a750 <__ssprint_r>
    3940:	103ad11e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3944:	d8c02017 	ldw	r3,128(sp)
    3948:	da000404 	addi	r8,sp,16
    394c:	003d9306 	br	2f9c <__alt_mem_Onchip_SRAM+0xf8002f9c>
    3950:	d8801f17 	ldw	r2,124(sp)
    3954:	014000b4 	movhi	r5,2
    3958:	01000044 	movi	r4,1
    395c:	18c00044 	addi	r3,r3,1
    3960:	10800044 	addi	r2,r2,1
    3964:	2960ab04 	addi	r5,r5,-32084
    3968:	41000115 	stw	r4,4(r8)
    396c:	41400015 	stw	r5,0(r8)
    3970:	d8c02015 	stw	r3,128(sp)
    3974:	d8801f15 	stw	r2,124(sp)
    3978:	010001c4 	movi	r4,7
    397c:	2080b516 	blt	r4,r2,3c54 <___svfprintf_internal_r+0x1b68>
    3980:	42000204 	addi	r8,r8,8
    3984:	8800041e 	bne	r17,zero,3998 <___svfprintf_internal_r+0x18ac>
    3988:	d8803317 	ldw	r2,204(sp)
    398c:	1000021e 	bne	r2,zero,3998 <___svfprintf_internal_r+0x18ac>
    3990:	9080004c 	andi	r2,r18,1
    3994:	103c3926 	beq	r2,zero,2a7c <__alt_mem_Onchip_SRAM+0xf8002a7c>
    3998:	d9003817 	ldw	r4,224(sp)
    399c:	d8801f17 	ldw	r2,124(sp)
    39a0:	d9403417 	ldw	r5,208(sp)
    39a4:	20c7883a 	add	r3,r4,r3
    39a8:	10800044 	addi	r2,r2,1
    39ac:	41000115 	stw	r4,4(r8)
    39b0:	41400015 	stw	r5,0(r8)
    39b4:	d8c02015 	stw	r3,128(sp)
    39b8:	d8801f15 	stw	r2,124(sp)
    39bc:	010001c4 	movi	r4,7
    39c0:	20818016 	blt	r4,r2,3fc4 <___svfprintf_internal_r+0x1ed8>
    39c4:	42000204 	addi	r8,r8,8
    39c8:	0463c83a 	sub	r17,zero,r17
    39cc:	0440cb0e 	bge	zero,r17,3cfc <___svfprintf_internal_r+0x1c10>
    39d0:	05800404 	movi	r22,16
    39d4:	b440e80e 	bge	r22,r17,3d78 <___svfprintf_internal_r+0x1c8c>
    39d8:	014000b4 	movhi	r5,2
    39dc:	2960ab84 	addi	r5,r5,-32082
    39e0:	d9402c15 	stw	r5,176(sp)
    39e4:	070001c4 	movi	fp,7
    39e8:	dd002d17 	ldw	r20,180(sp)
    39ec:	00000306 	br	39fc <___svfprintf_internal_r+0x1910>
    39f0:	42000204 	addi	r8,r8,8
    39f4:	8c7ffc04 	addi	r17,r17,-16
    39f8:	b440e20e 	bge	r22,r17,3d84 <___svfprintf_internal_r+0x1c98>
    39fc:	18c00404 	addi	r3,r3,16
    3a00:	10800044 	addi	r2,r2,1
    3a04:	45400015 	stw	r21,0(r8)
    3a08:	45800115 	stw	r22,4(r8)
    3a0c:	d8c02015 	stw	r3,128(sp)
    3a10:	d8801f15 	stw	r2,124(sp)
    3a14:	e0bff60e 	bge	fp,r2,39f0 <__alt_mem_Onchip_SRAM+0xf80039f0>
    3a18:	d9801e04 	addi	r6,sp,120
    3a1c:	a00b883a 	mov	r5,r20
    3a20:	9809883a 	mov	r4,r19
    3a24:	000a7500 	call	a750 <__ssprint_r>
    3a28:	103a971e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3a2c:	d8c02017 	ldw	r3,128(sp)
    3a30:	d8801f17 	ldw	r2,124(sp)
    3a34:	da000404 	addi	r8,sp,16
    3a38:	003fee06 	br	39f4 <__alt_mem_Onchip_SRAM+0xf80039f4>
    3a3c:	d9002e17 	ldw	r4,184(sp)
    3a40:	d9402a17 	ldw	r5,168(sp)
    3a44:	002d883a 	mov	r22,zero
    3a48:	20800104 	addi	r2,r4,4
    3a4c:	25000017 	ldw	r20,0(r4)
    3a50:	283e7d0e 	bge	r5,zero,3448 <__alt_mem_Onchip_SRAM+0xf8003448>
    3a54:	003eda06 	br	35c0 <__alt_mem_Onchip_SRAM+0xf80035c0>
    3a58:	d9002e17 	ldw	r4,184(sp)
    3a5c:	d9402a17 	ldw	r5,168(sp)
    3a60:	002d883a 	mov	r22,zero
    3a64:	20800104 	addi	r2,r4,4
    3a68:	25000017 	ldw	r20,0(r4)
    3a6c:	283e2d0e 	bge	r5,zero,3324 <__alt_mem_Onchip_SRAM+0xf8003324>
    3a70:	003f6b06 	br	3820 <__alt_mem_Onchip_SRAM+0xf8003820>
    3a74:	d8c02e15 	stw	r3,184(sp)
    3a78:	0039883a 	mov	fp,zero
    3a7c:	003ed206 	br	35c8 <__alt_mem_Onchip_SRAM+0xf80035c8>
    3a80:	bc400043 	ldbu	r17,1(r23)
    3a84:	84000814 	ori	r16,r16,32
    3a88:	bdc00044 	addi	r23,r23,1
    3a8c:	8c403fcc 	andi	r17,r17,255
    3a90:	8c40201c 	xori	r17,r17,128
    3a94:	8c7fe004 	addi	r17,r17,-128
    3a98:	0039e906 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    3a9c:	d9402d17 	ldw	r5,180(sp)
    3aa0:	d9801e04 	addi	r6,sp,120
    3aa4:	9809883a 	mov	r4,r19
    3aa8:	000a7500 	call	a750 <__ssprint_r>
    3aac:	103a761e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3ab0:	d8c02017 	ldw	r3,128(sp)
    3ab4:	da000404 	addi	r8,sp,16
    3ab8:	003d4a06 	br	2fe4 <__alt_mem_Onchip_SRAM+0xf8002fe4>
    3abc:	d9002a17 	ldw	r4,168(sp)
    3ac0:	05bff7c4 	movi	r22,-33
    3ac4:	00bfffc4 	movi	r2,-1
    3ac8:	8dac703a 	and	r22,r17,r22
    3acc:	20806a26 	beq	r4,r2,3c78 <___svfprintf_internal_r+0x1b8c>
    3ad0:	008011c4 	movi	r2,71
    3ad4:	b0813726 	beq	r22,r2,3fb4 <___svfprintf_internal_r+0x1ec8>
    3ad8:	d9003717 	ldw	r4,220(sp)
    3adc:	90c04014 	ori	r3,r18,256
    3ae0:	d8c02c15 	stw	r3,176(sp)
    3ae4:	20015d16 	blt	r4,zero,405c <___svfprintf_internal_r+0x1f70>
    3ae8:	dd003717 	ldw	r20,220(sp)
    3aec:	d8002905 	stb	zero,164(sp)
    3af0:	00801984 	movi	r2,102
    3af4:	88814026 	beq	r17,r2,3ff8 <___svfprintf_internal_r+0x1f0c>
    3af8:	00801184 	movi	r2,70
    3afc:	88817126 	beq	r17,r2,40c4 <___svfprintf_internal_r+0x1fd8>
    3b00:	00801144 	movi	r2,69
    3b04:	b0816226 	beq	r22,r2,4090 <___svfprintf_internal_r+0x1fa4>
    3b08:	d8c02a17 	ldw	r3,168(sp)
    3b0c:	d8802104 	addi	r2,sp,132
    3b10:	d8800315 	stw	r2,12(sp)
    3b14:	d9403617 	ldw	r5,216(sp)
    3b18:	d8802504 	addi	r2,sp,148
    3b1c:	d8800215 	stw	r2,8(sp)
    3b20:	d8802604 	addi	r2,sp,152
    3b24:	d8c00015 	stw	r3,0(sp)
    3b28:	d8800115 	stw	r2,4(sp)
    3b2c:	01c00084 	movi	r7,2
    3b30:	a00d883a 	mov	r6,r20
    3b34:	9809883a 	mov	r4,r19
    3b38:	d8c03d15 	stw	r3,244(sp)
    3b3c:	da003e15 	stw	r8,248(sp)
    3b40:	0006b280 	call	6b28 <_dtoa_r>
    3b44:	1021883a 	mov	r16,r2
    3b48:	008019c4 	movi	r2,103
    3b4c:	d8c03d17 	ldw	r3,244(sp)
    3b50:	da003e17 	ldw	r8,248(sp)
    3b54:	8880e726 	beq	r17,r2,3ef4 <___svfprintf_internal_r+0x1e08>
    3b58:	008011c4 	movi	r2,71
    3b5c:	8880d426 	beq	r17,r2,3eb0 <___svfprintf_internal_r+0x1dc4>
    3b60:	80f9883a 	add	fp,r16,r3
    3b64:	d9003617 	ldw	r4,216(sp)
    3b68:	000d883a 	mov	r6,zero
    3b6c:	000f883a 	mov	r7,zero
    3b70:	a00b883a 	mov	r5,r20
    3b74:	da003e15 	stw	r8,248(sp)
    3b78:	00107d40 	call	107d4 <__eqdf2>
    3b7c:	da003e17 	ldw	r8,248(sp)
    3b80:	1000e426 	beq	r2,zero,3f14 <___svfprintf_internal_r+0x1e28>
    3b84:	d8802117 	ldw	r2,132(sp)
    3b88:	1700062e 	bgeu	r2,fp,3ba4 <___svfprintf_internal_r+0x1ab8>
    3b8c:	01000c04 	movi	r4,48
    3b90:	10c00044 	addi	r3,r2,1
    3b94:	d8c02115 	stw	r3,132(sp)
    3b98:	11000005 	stb	r4,0(r2)
    3b9c:	d8802117 	ldw	r2,132(sp)
    3ba0:	173ffb36 	bltu	r2,fp,3b90 <__alt_mem_Onchip_SRAM+0xf8003b90>
    3ba4:	1405c83a 	sub	r2,r2,r16
    3ba8:	d8803315 	stw	r2,204(sp)
    3bac:	008011c4 	movi	r2,71
    3bb0:	b080c526 	beq	r22,r2,3ec8 <___svfprintf_internal_r+0x1ddc>
    3bb4:	00801944 	movi	r2,101
    3bb8:	1441d80e 	bge	r2,r17,431c <___svfprintf_internal_r+0x2230>
    3bbc:	d8c02617 	ldw	r3,152(sp)
    3bc0:	00801984 	movi	r2,102
    3bc4:	d8c03215 	stw	r3,200(sp)
    3bc8:	88813426 	beq	r17,r2,409c <___svfprintf_internal_r+0x1fb0>
    3bcc:	d8c03217 	ldw	r3,200(sp)
    3bd0:	d9003317 	ldw	r4,204(sp)
    3bd4:	19012516 	blt	r3,r4,406c <___svfprintf_internal_r+0x1f80>
    3bd8:	9480004c 	andi	r18,r18,1
    3bdc:	9001841e 	bne	r18,zero,41f0 <___svfprintf_internal_r+0x2104>
    3be0:	1805883a 	mov	r2,r3
    3be4:	1801cb16 	blt	r3,zero,4314 <___svfprintf_internal_r+0x2228>
    3be8:	d8c03217 	ldw	r3,200(sp)
    3bec:	044019c4 	movi	r17,103
    3bf0:	d8c02b15 	stw	r3,172(sp)
    3bf4:	df002907 	ldb	fp,164(sp)
    3bf8:	e000a61e 	bne	fp,zero,3e94 <___svfprintf_internal_r+0x1da8>
    3bfc:	df002783 	ldbu	fp,158(sp)
    3c00:	d8802915 	stw	r2,164(sp)
    3c04:	dc802c17 	ldw	r18,176(sp)
    3c08:	d8002a15 	stw	zero,168(sp)
    3c0c:	003af506 	br	27e4 <__alt_mem_Onchip_SRAM+0xf80027e4>
    3c10:	040000b4 	movhi	r16,2
    3c14:	84209b04 	addi	r16,r16,-32148
    3c18:	003a7e06 	br	2614 <__alt_mem_Onchip_SRAM+0xf8002614>
    3c1c:	d9003917 	ldw	r4,228(sp)
    3c20:	04001004 	movi	r16,64
    3c24:	800b883a 	mov	r5,r16
    3c28:	00015b80 	call	15b8 <_malloc_r>
    3c2c:	d9002d17 	ldw	r4,180(sp)
    3c30:	20800015 	stw	r2,0(r4)
    3c34:	20800415 	stw	r2,16(r4)
    3c38:	1001d026 	beq	r2,zero,437c <___svfprintf_internal_r+0x2290>
    3c3c:	d8802d17 	ldw	r2,180(sp)
    3c40:	14000515 	stw	r16,20(r2)
    3c44:	00394406 	br	2158 <__alt_mem_Onchip_SRAM+0xf8002158>
    3c48:	040000b4 	movhi	r16,2
    3c4c:	84209d04 	addi	r16,r16,-32140
    3c50:	003ee106 	br	37d8 <__alt_mem_Onchip_SRAM+0xf80037d8>
    3c54:	d9402d17 	ldw	r5,180(sp)
    3c58:	d9801e04 	addi	r6,sp,120
    3c5c:	9809883a 	mov	r4,r19
    3c60:	000a7500 	call	a750 <__ssprint_r>
    3c64:	103a081e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3c68:	dc402617 	ldw	r17,152(sp)
    3c6c:	d8c02017 	ldw	r3,128(sp)
    3c70:	da000404 	addi	r8,sp,16
    3c74:	003f4306 	br	3984 <__alt_mem_Onchip_SRAM+0xf8003984>
    3c78:	01400184 	movi	r5,6
    3c7c:	d9402a15 	stw	r5,168(sp)
    3c80:	003f9506 	br	3ad8 <__alt_mem_Onchip_SRAM+0xf8003ad8>
    3c84:	d8c02e17 	ldw	r3,184(sp)
    3c88:	1d000017 	ldw	r20,0(r3)
    3c8c:	18c00104 	addi	r3,r3,4
    3c90:	d8c02e15 	stw	r3,184(sp)
    3c94:	a02dd7fa 	srai	r22,r20,31
    3c98:	b005883a 	mov	r2,r22
    3c9c:	003a7606 	br	2678 <__alt_mem_Onchip_SRAM+0xf8002678>
    3ca0:	d9002e17 	ldw	r4,184(sp)
    3ca4:	002d883a 	mov	r22,zero
    3ca8:	25000017 	ldw	r20,0(r4)
    3cac:	21000104 	addi	r4,r4,4
    3cb0:	d9002e15 	stw	r4,184(sp)
    3cb4:	003bdd06 	br	2c2c <__alt_mem_Onchip_SRAM+0xf8002c2c>
    3cb8:	9480100c 	andi	r18,r18,64
    3cbc:	90006e26 	beq	r18,zero,3e78 <___svfprintf_internal_r+0x1d8c>
    3cc0:	d9402e17 	ldw	r5,184(sp)
    3cc4:	d8c02f17 	ldw	r3,188(sp)
    3cc8:	28800017 	ldw	r2,0(r5)
    3ccc:	29400104 	addi	r5,r5,4
    3cd0:	d9402e15 	stw	r5,184(sp)
    3cd4:	10c0000d 	sth	r3,0(r2)
    3cd8:	00392f06 	br	2198 <__alt_mem_Onchip_SRAM+0xf8002198>
    3cdc:	d9402d17 	ldw	r5,180(sp)
    3ce0:	d9801e04 	addi	r6,sp,120
    3ce4:	9809883a 	mov	r4,r19
    3ce8:	000a7500 	call	a750 <__ssprint_r>
    3cec:	1039e61e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3cf0:	d8c02017 	ldw	r3,128(sp)
    3cf4:	d8801f17 	ldw	r2,124(sp)
    3cf8:	da000404 	addi	r8,sp,16
    3cfc:	d9403317 	ldw	r5,204(sp)
    3d00:	10800044 	addi	r2,r2,1
    3d04:	44000015 	stw	r16,0(r8)
    3d08:	28c7883a 	add	r3,r5,r3
    3d0c:	003b5506 	br	2a64 <__alt_mem_Onchip_SRAM+0xf8002a64>
    3d10:	8009883a 	mov	r4,r16
    3d14:	df003e15 	stw	fp,248(sp)
    3d18:	00020540 	call	2054 <strlen>
    3d1c:	d8802b15 	stw	r2,172(sp)
    3d20:	da003e17 	ldw	r8,248(sp)
    3d24:	103c160e 	bge	r2,zero,2d80 <__alt_mem_Onchip_SRAM+0xf8002d80>
    3d28:	0005883a 	mov	r2,zero
    3d2c:	003c1406 	br	2d80 <__alt_mem_Onchip_SRAM+0xf8002d80>
    3d30:	00bfffc4 	movi	r2,-1
    3d34:	0039d906 	br	249c <__alt_mem_Onchip_SRAM+0xf800249c>
    3d38:	010000b4 	movhi	r4,2
    3d3c:	2120af84 	addi	r4,r4,-32066
    3d40:	d9003515 	stw	r4,212(sp)
    3d44:	003ae406 	br	28d8 <__alt_mem_Onchip_SRAM+0xf80028d8>
    3d48:	013fffc4 	movi	r4,-1
    3d4c:	0039fa06 	br	2538 <__alt_mem_Onchip_SRAM+0xf8002538>
    3d50:	d9402d17 	ldw	r5,180(sp)
    3d54:	d9801e04 	addi	r6,sp,120
    3d58:	9809883a 	mov	r4,r19
    3d5c:	000a7500 	call	a750 <__ssprint_r>
    3d60:	1039c91e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3d64:	d8c02017 	ldw	r3,128(sp)
    3d68:	da000404 	addi	r8,sp,16
    3d6c:	003d8406 	br	3380 <__alt_mem_Onchip_SRAM+0xf8003380>
    3d70:	0023883a 	mov	r17,zero
    3d74:	003d8306 	br	3384 <__alt_mem_Onchip_SRAM+0xf8003384>
    3d78:	010000b4 	movhi	r4,2
    3d7c:	2120ab84 	addi	r4,r4,-32082
    3d80:	d9002c15 	stw	r4,176(sp)
    3d84:	d9002c17 	ldw	r4,176(sp)
    3d88:	1c47883a 	add	r3,r3,r17
    3d8c:	10800044 	addi	r2,r2,1
    3d90:	41000015 	stw	r4,0(r8)
    3d94:	44400115 	stw	r17,4(r8)
    3d98:	d8c02015 	stw	r3,128(sp)
    3d9c:	d8801f15 	stw	r2,124(sp)
    3da0:	010001c4 	movi	r4,7
    3da4:	20bfcd16 	blt	r4,r2,3cdc <__alt_mem_Onchip_SRAM+0xf8003cdc>
    3da8:	42000204 	addi	r8,r8,8
    3dac:	003fd306 	br	3cfc <__alt_mem_Onchip_SRAM+0xf8003cfc>
    3db0:	d9402d17 	ldw	r5,180(sp)
    3db4:	d9801e04 	addi	r6,sp,120
    3db8:	9809883a 	mov	r4,r19
    3dbc:	000a7500 	call	a750 <__ssprint_r>
    3dc0:	1039b11e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3dc4:	d8802617 	ldw	r2,152(sp)
    3dc8:	d8c02017 	ldw	r3,128(sp)
    3dcc:	da000404 	addi	r8,sp,16
    3dd0:	003e1c06 	br	3644 <__alt_mem_Onchip_SRAM+0xf8003644>
    3dd4:	d8802a17 	ldw	r2,168(sp)
    3dd8:	00c00184 	movi	r3,6
    3ddc:	1880012e 	bgeu	r3,r2,3de4 <___svfprintf_internal_r+0x1cf8>
    3de0:	1805883a 	mov	r2,r3
    3de4:	d8802b15 	stw	r2,172(sp)
    3de8:	1000f316 	blt	r2,zero,41b8 <___svfprintf_internal_r+0x20cc>
    3dec:	040000b4 	movhi	r16,2
    3df0:	d8802915 	stw	r2,164(sp)
    3df4:	dd002e15 	stw	r20,184(sp)
    3df8:	d8002a15 	stw	zero,168(sp)
    3dfc:	d8003215 	stw	zero,200(sp)
    3e00:	8420a904 	addi	r16,r16,-32092
    3e04:	0039883a 	mov	fp,zero
    3e08:	003a7d06 	br	2800 <__alt_mem_Onchip_SRAM+0xf8002800>
    3e0c:	010000b4 	movhi	r4,2
    3e10:	2120af84 	addi	r4,r4,-32066
    3e14:	d9003515 	stw	r4,212(sp)
    3e18:	003b3d06 	br	2b10 <__alt_mem_Onchip_SRAM+0xf8002b10>
    3e1c:	d9402d17 	ldw	r5,180(sp)
    3e20:	d9801e04 	addi	r6,sp,120
    3e24:	9809883a 	mov	r4,r19
    3e28:	000a7500 	call	a750 <__ssprint_r>
    3e2c:	1039961e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3e30:	d8802617 	ldw	r2,152(sp)
    3e34:	d9403317 	ldw	r5,204(sp)
    3e38:	d8c02017 	ldw	r3,128(sp)
    3e3c:	da000404 	addi	r8,sp,16
    3e40:	2885c83a 	sub	r2,r5,r2
    3e44:	003e1006 	br	3688 <__alt_mem_Onchip_SRAM+0xf8003688>
    3e48:	00800044 	movi	r2,1
    3e4c:	10803fcc 	andi	r2,r2,255
    3e50:	00c00044 	movi	r3,1
    3e54:	10fa1026 	beq	r2,r3,2698 <__alt_mem_Onchip_SRAM+0xf8002698>
    3e58:	00c00084 	movi	r3,2
    3e5c:	10fb8226 	beq	r2,r3,2c68 <__alt_mem_Onchip_SRAM+0xf8002c68>
    3e60:	003a4206 	br	276c <__alt_mem_Onchip_SRAM+0xf800276c>
    3e64:	0021883a 	mov	r16,zero
    3e68:	003e0806 	br	368c <__alt_mem_Onchip_SRAM+0xf800368c>
    3e6c:	07000b44 	movi	fp,45
    3e70:	df002785 	stb	fp,158(sp)
    3e74:	0039e306 	br	2604 <__alt_mem_Onchip_SRAM+0xf8002604>
    3e78:	d9002e17 	ldw	r4,184(sp)
    3e7c:	d9402f17 	ldw	r5,188(sp)
    3e80:	20800017 	ldw	r2,0(r4)
    3e84:	21000104 	addi	r4,r4,4
    3e88:	d9002e15 	stw	r4,184(sp)
    3e8c:	11400015 	stw	r5,0(r2)
    3e90:	0038c106 	br	2198 <__alt_mem_Onchip_SRAM+0xf8002198>
    3e94:	00c00b44 	movi	r3,45
    3e98:	d8c02785 	stb	r3,158(sp)
    3e9c:	d8802915 	stw	r2,164(sp)
    3ea0:	dc802c17 	ldw	r18,176(sp)
    3ea4:	d8002a15 	stw	zero,168(sp)
    3ea8:	07000b44 	movi	fp,45
    3eac:	003a5106 	br	27f4 <__alt_mem_Onchip_SRAM+0xf80027f4>
    3eb0:	9080004c 	andi	r2,r18,1
    3eb4:	1000941e 	bne	r2,zero,4108 <___svfprintf_internal_r+0x201c>
    3eb8:	d8802117 	ldw	r2,132(sp)
    3ebc:	1405c83a 	sub	r2,r2,r16
    3ec0:	d8803315 	stw	r2,204(sp)
    3ec4:	b441151e 	bne	r22,r17,431c <___svfprintf_internal_r+0x2230>
    3ec8:	dd802617 	ldw	r22,152(sp)
    3ecc:	00bfff44 	movi	r2,-3
    3ed0:	b0801a16 	blt	r22,r2,3f3c <___svfprintf_internal_r+0x1e50>
    3ed4:	d9402a17 	ldw	r5,168(sp)
    3ed8:	2d801816 	blt	r5,r22,3f3c <___svfprintf_internal_r+0x1e50>
    3edc:	dd803215 	stw	r22,200(sp)
    3ee0:	003f3a06 	br	3bcc <__alt_mem_Onchip_SRAM+0xf8003bcc>
    3ee4:	1025883a 	mov	r18,r2
    3ee8:	0039883a 	mov	fp,zero
    3eec:	00800084 	movi	r2,2
    3ef0:	003fd606 	br	3e4c <__alt_mem_Onchip_SRAM+0xf8003e4c>
    3ef4:	9080004c 	andi	r2,r18,1
    3ef8:	103f191e 	bne	r2,zero,3b60 <__alt_mem_Onchip_SRAM+0xf8003b60>
    3efc:	d8802117 	ldw	r2,132(sp)
    3f00:	003f2806 	br	3ba4 <__alt_mem_Onchip_SRAM+0xf8003ba4>
    3f04:	010000b4 	movhi	r4,2
    3f08:	2120ab84 	addi	r4,r4,-32082
    3f0c:	d9002c15 	stw	r4,176(sp)
    3f10:	003c7c06 	br	3104 <__alt_mem_Onchip_SRAM+0xf8003104>
    3f14:	e005883a 	mov	r2,fp
    3f18:	003f2206 	br	3ba4 <__alt_mem_Onchip_SRAM+0xf8003ba4>
    3f1c:	d9002a17 	ldw	r4,168(sp)
    3f20:	df002783 	ldbu	fp,158(sp)
    3f24:	dd002e15 	stw	r20,184(sp)
    3f28:	d9002915 	stw	r4,164(sp)
    3f2c:	d9002b15 	stw	r4,172(sp)
    3f30:	d8002a15 	stw	zero,168(sp)
    3f34:	d8003215 	stw	zero,200(sp)
    3f38:	003a2a06 	br	27e4 <__alt_mem_Onchip_SRAM+0xf80027e4>
    3f3c:	8c7fff84 	addi	r17,r17,-2
    3f40:	b5bfffc4 	addi	r22,r22,-1
    3f44:	dd802615 	stw	r22,152(sp)
    3f48:	dc4022c5 	stb	r17,139(sp)
    3f4c:	b000c316 	blt	r22,zero,425c <___svfprintf_internal_r+0x2170>
    3f50:	00800ac4 	movi	r2,43
    3f54:	d8802305 	stb	r2,140(sp)
    3f58:	00800244 	movi	r2,9
    3f5c:	15806e16 	blt	r2,r22,4118 <___svfprintf_internal_r+0x202c>
    3f60:	00800c04 	movi	r2,48
    3f64:	b5800c04 	addi	r22,r22,48
    3f68:	d8802345 	stb	r2,141(sp)
    3f6c:	dd802385 	stb	r22,142(sp)
    3f70:	d88023c4 	addi	r2,sp,143
    3f74:	df0022c4 	addi	fp,sp,139
    3f78:	d8c03317 	ldw	r3,204(sp)
    3f7c:	1739c83a 	sub	fp,r2,fp
    3f80:	d9003317 	ldw	r4,204(sp)
    3f84:	e0c7883a 	add	r3,fp,r3
    3f88:	df003b15 	stw	fp,236(sp)
    3f8c:	d8c02b15 	stw	r3,172(sp)
    3f90:	00800044 	movi	r2,1
    3f94:	1100b70e 	bge	r2,r4,4274 <___svfprintf_internal_r+0x2188>
    3f98:	d8c02b17 	ldw	r3,172(sp)
    3f9c:	18c00044 	addi	r3,r3,1
    3fa0:	d8c02b15 	stw	r3,172(sp)
    3fa4:	1805883a 	mov	r2,r3
    3fa8:	1800b016 	blt	r3,zero,426c <___svfprintf_internal_r+0x2180>
    3fac:	d8003215 	stw	zero,200(sp)
    3fb0:	003f1006 	br	3bf4 <__alt_mem_Onchip_SRAM+0xf8003bf4>
    3fb4:	d8802a17 	ldw	r2,168(sp)
    3fb8:	103ec71e 	bne	r2,zero,3ad8 <__alt_mem_Onchip_SRAM+0xf8003ad8>
    3fbc:	dc002a15 	stw	r16,168(sp)
    3fc0:	003ec506 	br	3ad8 <__alt_mem_Onchip_SRAM+0xf8003ad8>
    3fc4:	d9402d17 	ldw	r5,180(sp)
    3fc8:	d9801e04 	addi	r6,sp,120
    3fcc:	9809883a 	mov	r4,r19
    3fd0:	000a7500 	call	a750 <__ssprint_r>
    3fd4:	10392c1e 	bne	r2,zero,2488 <__alt_mem_Onchip_SRAM+0xf8002488>
    3fd8:	dc402617 	ldw	r17,152(sp)
    3fdc:	d8c02017 	ldw	r3,128(sp)
    3fe0:	d8801f17 	ldw	r2,124(sp)
    3fe4:	da000404 	addi	r8,sp,16
    3fe8:	003e7706 	br	39c8 <__alt_mem_Onchip_SRAM+0xf80039c8>
    3fec:	182f883a 	mov	r23,r3
    3ff0:	d8002a15 	stw	zero,168(sp)
    3ff4:	00389306 	br	2244 <__alt_mem_Onchip_SRAM+0xf8002244>
    3ff8:	d8c02a17 	ldw	r3,168(sp)
    3ffc:	d8802104 	addi	r2,sp,132
    4000:	d8800315 	stw	r2,12(sp)
    4004:	d9403617 	ldw	r5,216(sp)
    4008:	d8802504 	addi	r2,sp,148
    400c:	d8800215 	stw	r2,8(sp)
    4010:	d8802604 	addi	r2,sp,152
    4014:	d8c00015 	stw	r3,0(sp)
    4018:	9809883a 	mov	r4,r19
    401c:	d8800115 	stw	r2,4(sp)
    4020:	01c000c4 	movi	r7,3
    4024:	a00d883a 	mov	r6,r20
    4028:	da003e15 	stw	r8,248(sp)
    402c:	0006b280 	call	6b28 <_dtoa_r>
    4030:	d9002a17 	ldw	r4,168(sp)
    4034:	da003e17 	ldw	r8,248(sp)
    4038:	1021883a 	mov	r16,r2
    403c:	1139883a 	add	fp,r2,r4
    4040:	2007883a 	mov	r3,r4
    4044:	81000007 	ldb	r4,0(r16)
    4048:	00800c04 	movi	r2,48
    404c:	20806f26 	beq	r4,r2,420c <___svfprintf_internal_r+0x2120>
    4050:	d8c02617 	ldw	r3,152(sp)
    4054:	e0f9883a 	add	fp,fp,r3
    4058:	003ec206 	br	3b64 <__alt_mem_Onchip_SRAM+0xf8003b64>
    405c:	00c00b44 	movi	r3,45
    4060:	2520003c 	xorhi	r20,r4,32768
    4064:	d8c02905 	stb	r3,164(sp)
    4068:	003ea106 	br	3af0 <__alt_mem_Onchip_SRAM+0xf8003af0>
    406c:	d8c03217 	ldw	r3,200(sp)
    4070:	00c0890e 	bge	zero,r3,4298 <___svfprintf_internal_r+0x21ac>
    4074:	00800044 	movi	r2,1
    4078:	d9003317 	ldw	r4,204(sp)
    407c:	1105883a 	add	r2,r2,r4
    4080:	d8802b15 	stw	r2,172(sp)
    4084:	10005f16 	blt	r2,zero,4204 <___svfprintf_internal_r+0x2118>
    4088:	044019c4 	movi	r17,103
    408c:	003ed906 	br	3bf4 <__alt_mem_Onchip_SRAM+0xf8003bf4>
    4090:	d9002a17 	ldw	r4,168(sp)
    4094:	20c00044 	addi	r3,r4,1
    4098:	003e9c06 	br	3b0c <__alt_mem_Onchip_SRAM+0xf8003b0c>
    409c:	d9002a17 	ldw	r4,168(sp)
    40a0:	00c0680e 	bge	zero,r3,4244 <___svfprintf_internal_r+0x2158>
    40a4:	2000461e 	bne	r4,zero,41c0 <___svfprintf_internal_r+0x20d4>
    40a8:	9480004c 	andi	r18,r18,1
    40ac:	9000441e 	bne	r18,zero,41c0 <___svfprintf_internal_r+0x20d4>
    40b0:	1805883a 	mov	r2,r3
    40b4:	1800a116 	blt	r3,zero,433c <___svfprintf_internal_r+0x2250>
    40b8:	d8c03217 	ldw	r3,200(sp)
    40bc:	d8c02b15 	stw	r3,172(sp)
    40c0:	003ecc06 	br	3bf4 <__alt_mem_Onchip_SRAM+0xf8003bf4>
    40c4:	d9402a17 	ldw	r5,168(sp)
    40c8:	d8802104 	addi	r2,sp,132
    40cc:	d8800315 	stw	r2,12(sp)
    40d0:	d9400015 	stw	r5,0(sp)
    40d4:	d8802504 	addi	r2,sp,148
    40d8:	d9403617 	ldw	r5,216(sp)
    40dc:	d8800215 	stw	r2,8(sp)
    40e0:	d8802604 	addi	r2,sp,152
    40e4:	d8800115 	stw	r2,4(sp)
    40e8:	01c000c4 	movi	r7,3
    40ec:	a00d883a 	mov	r6,r20
    40f0:	9809883a 	mov	r4,r19
    40f4:	da003e15 	stw	r8,248(sp)
    40f8:	0006b280 	call	6b28 <_dtoa_r>
    40fc:	d8c02a17 	ldw	r3,168(sp)
    4100:	da003e17 	ldw	r8,248(sp)
    4104:	1021883a 	mov	r16,r2
    4108:	00801184 	movi	r2,70
    410c:	80f9883a 	add	fp,r16,r3
    4110:	88bfcc26 	beq	r17,r2,4044 <__alt_mem_Onchip_SRAM+0xf8004044>
    4114:	003e9306 	br	3b64 <__alt_mem_Onchip_SRAM+0xf8003b64>
    4118:	df0022c4 	addi	fp,sp,139
    411c:	dc002a15 	stw	r16,168(sp)
    4120:	9829883a 	mov	r20,r19
    4124:	e021883a 	mov	r16,fp
    4128:	4027883a 	mov	r19,r8
    412c:	b009883a 	mov	r4,r22
    4130:	01400284 	movi	r5,10
    4134:	00014380 	call	1438 <__modsi3>
    4138:	10800c04 	addi	r2,r2,48
    413c:	843fffc4 	addi	r16,r16,-1
    4140:	b009883a 	mov	r4,r22
    4144:	01400284 	movi	r5,10
    4148:	80800005 	stb	r2,0(r16)
    414c:	00013b40 	call	13b4 <__divsi3>
    4150:	102d883a 	mov	r22,r2
    4154:	00800244 	movi	r2,9
    4158:	15bff416 	blt	r2,r22,412c <__alt_mem_Onchip_SRAM+0xf800412c>
    415c:	9811883a 	mov	r8,r19
    4160:	b0800c04 	addi	r2,r22,48
    4164:	a027883a 	mov	r19,r20
    4168:	8029883a 	mov	r20,r16
    416c:	a17fffc4 	addi	r5,r20,-1
    4170:	a0bfffc5 	stb	r2,-1(r20)
    4174:	dc002a17 	ldw	r16,168(sp)
    4178:	2f00782e 	bgeu	r5,fp,435c <___svfprintf_internal_r+0x2270>
    417c:	d9c02384 	addi	r7,sp,142
    4180:	3d0fc83a 	sub	r7,r7,r20
    4184:	d9002344 	addi	r4,sp,141
    4188:	e1cf883a 	add	r7,fp,r7
    418c:	00000106 	br	4194 <___svfprintf_internal_r+0x20a8>
    4190:	28800003 	ldbu	r2,0(r5)
    4194:	20800005 	stb	r2,0(r4)
    4198:	21000044 	addi	r4,r4,1
    419c:	29400044 	addi	r5,r5,1
    41a0:	21fffb1e 	bne	r4,r7,4190 <__alt_mem_Onchip_SRAM+0xf8004190>
    41a4:	d8802304 	addi	r2,sp,140
    41a8:	1505c83a 	sub	r2,r2,r20
    41ac:	d8c02344 	addi	r3,sp,141
    41b0:	1885883a 	add	r2,r3,r2
    41b4:	003f7006 	br	3f78 <__alt_mem_Onchip_SRAM+0xf8003f78>
    41b8:	0005883a 	mov	r2,zero
    41bc:	003f0b06 	br	3dec <__alt_mem_Onchip_SRAM+0xf8003dec>
    41c0:	d9002a17 	ldw	r4,168(sp)
    41c4:	d8c03217 	ldw	r3,200(sp)
    41c8:	20800044 	addi	r2,r4,1
    41cc:	1885883a 	add	r2,r3,r2
    41d0:	d8802b15 	stw	r2,172(sp)
    41d4:	103e870e 	bge	r2,zero,3bf4 <__alt_mem_Onchip_SRAM+0xf8003bf4>
    41d8:	0005883a 	mov	r2,zero
    41dc:	003e8506 	br	3bf4 <__alt_mem_Onchip_SRAM+0xf8003bf4>
    41e0:	010000b4 	movhi	r4,2
    41e4:	2120ab84 	addi	r4,r4,-32082
    41e8:	d9002c15 	stw	r4,176(sp)
    41ec:	003cc506 	br	3504 <__alt_mem_Onchip_SRAM+0xf8003504>
    41f0:	d8c03217 	ldw	r3,200(sp)
    41f4:	18c00044 	addi	r3,r3,1
    41f8:	d8c02b15 	stw	r3,172(sp)
    41fc:	1805883a 	mov	r2,r3
    4200:	183fa10e 	bge	r3,zero,4088 <__alt_mem_Onchip_SRAM+0xf8004088>
    4204:	0005883a 	mov	r2,zero
    4208:	003f9f06 	br	4088 <__alt_mem_Onchip_SRAM+0xf8004088>
    420c:	d9003617 	ldw	r4,216(sp)
    4210:	000d883a 	mov	r6,zero
    4214:	000f883a 	mov	r7,zero
    4218:	a00b883a 	mov	r5,r20
    421c:	d8c03d15 	stw	r3,244(sp)
    4220:	da003e15 	stw	r8,248(sp)
    4224:	00107d40 	call	107d4 <__eqdf2>
    4228:	d8c03d17 	ldw	r3,244(sp)
    422c:	da003e17 	ldw	r8,248(sp)
    4230:	103f8726 	beq	r2,zero,4050 <__alt_mem_Onchip_SRAM+0xf8004050>
    4234:	00800044 	movi	r2,1
    4238:	10c7c83a 	sub	r3,r2,r3
    423c:	d8c02615 	stw	r3,152(sp)
    4240:	003f8406 	br	4054 <__alt_mem_Onchip_SRAM+0xf8004054>
    4244:	20000e1e 	bne	r4,zero,4280 <___svfprintf_internal_r+0x2194>
    4248:	9480004c 	andi	r18,r18,1
    424c:	90000c1e 	bne	r18,zero,4280 <___svfprintf_internal_r+0x2194>
    4250:	00800044 	movi	r2,1
    4254:	d8802b15 	stw	r2,172(sp)
    4258:	003e6606 	br	3bf4 <__alt_mem_Onchip_SRAM+0xf8003bf4>
    425c:	00800b44 	movi	r2,45
    4260:	05adc83a 	sub	r22,zero,r22
    4264:	d8802305 	stb	r2,140(sp)
    4268:	003f3b06 	br	3f58 <__alt_mem_Onchip_SRAM+0xf8003f58>
    426c:	0005883a 	mov	r2,zero
    4270:	003f4e06 	br	3fac <__alt_mem_Onchip_SRAM+0xf8003fac>
    4274:	90a4703a 	and	r18,r18,r2
    4278:	903f4a26 	beq	r18,zero,3fa4 <__alt_mem_Onchip_SRAM+0xf8003fa4>
    427c:	003f4606 	br	3f98 <__alt_mem_Onchip_SRAM+0xf8003f98>
    4280:	d8c02a17 	ldw	r3,168(sp)
    4284:	18c00084 	addi	r3,r3,2
    4288:	d8c02b15 	stw	r3,172(sp)
    428c:	1805883a 	mov	r2,r3
    4290:	183e580e 	bge	r3,zero,3bf4 <__alt_mem_Onchip_SRAM+0xf8003bf4>
    4294:	003fd006 	br	41d8 <__alt_mem_Onchip_SRAM+0xf80041d8>
    4298:	00800084 	movi	r2,2
    429c:	10c5c83a 	sub	r2,r2,r3
    42a0:	003f7506 	br	4078 <__alt_mem_Onchip_SRAM+0xf8004078>
    42a4:	d9402e17 	ldw	r5,184(sp)
    42a8:	d9002e17 	ldw	r4,184(sp)
    42ac:	bc400043 	ldbu	r17,1(r23)
    42b0:	29400017 	ldw	r5,0(r5)
    42b4:	20800104 	addi	r2,r4,4
    42b8:	d8802e15 	stw	r2,184(sp)
    42bc:	d9402a15 	stw	r5,168(sp)
    42c0:	182f883a 	mov	r23,r3
    42c4:	283df10e 	bge	r5,zero,3a8c <__alt_mem_Onchip_SRAM+0xf8003a8c>
    42c8:	8c403fcc 	andi	r17,r17,255
    42cc:	017fffc4 	movi	r5,-1
    42d0:	8c40201c 	xori	r17,r17,128
    42d4:	d9402a15 	stw	r5,168(sp)
    42d8:	8c7fe004 	addi	r17,r17,-128
    42dc:	0037d806 	br	2240 <__alt_mem_Onchip_SRAM+0xf8002240>
    42e0:	9080004c 	andi	r2,r18,1
    42e4:	0039883a 	mov	fp,zero
    42e8:	10000726 	beq	r2,zero,4308 <___svfprintf_internal_r+0x221c>
    42ec:	d8c02817 	ldw	r3,160(sp)
    42f0:	dc001dc4 	addi	r16,sp,119
    42f4:	00800c04 	movi	r2,48
    42f8:	1c07c83a 	sub	r3,r3,r16
    42fc:	d8801dc5 	stb	r2,119(sp)
    4300:	d8c02b15 	stw	r3,172(sp)
    4304:	00393106 	br	27cc <__alt_mem_Onchip_SRAM+0xf80027cc>
    4308:	d8002b15 	stw	zero,172(sp)
    430c:	dc001e04 	addi	r16,sp,120
    4310:	00392e06 	br	27cc <__alt_mem_Onchip_SRAM+0xf80027cc>
    4314:	0005883a 	mov	r2,zero
    4318:	003e3306 	br	3be8 <__alt_mem_Onchip_SRAM+0xf8003be8>
    431c:	dd802617 	ldw	r22,152(sp)
    4320:	003f0706 	br	3f40 <__alt_mem_Onchip_SRAM+0xf8003f40>
    4324:	d8c02b03 	ldbu	r3,172(sp)
    4328:	d8c02785 	stb	r3,158(sp)
    432c:	003a3506 	br	2c04 <__alt_mem_Onchip_SRAM+0xf8002c04>
    4330:	d8c02b03 	ldbu	r3,172(sp)
    4334:	d8c02785 	stb	r3,158(sp)
    4338:	003a1706 	br	2b98 <__alt_mem_Onchip_SRAM+0xf8002b98>
    433c:	0005883a 	mov	r2,zero
    4340:	003f5d06 	br	40b8 <__alt_mem_Onchip_SRAM+0xf80040b8>
    4344:	d8c02b03 	ldbu	r3,172(sp)
    4348:	d8c02785 	stb	r3,158(sp)
    434c:	0038f306 	br	271c <__alt_mem_Onchip_SRAM+0xf800271c>
    4350:	d8c02b03 	ldbu	r3,172(sp)
    4354:	d8c02785 	stb	r3,158(sp)
    4358:	0038be06 	br	2654 <__alt_mem_Onchip_SRAM+0xf8002654>
    435c:	d8802344 	addi	r2,sp,141
    4360:	003f0506 	br	3f78 <__alt_mem_Onchip_SRAM+0xf8003f78>
    4364:	d8c02b03 	ldbu	r3,172(sp)
    4368:	d8c02785 	stb	r3,158(sp)
    436c:	00388b06 	br	259c <__alt_mem_Onchip_SRAM+0xf800259c>
    4370:	d8c02b03 	ldbu	r3,172(sp)
    4374:	d8c02785 	stb	r3,158(sp)
    4378:	003ad706 	br	2ed8 <__alt_mem_Onchip_SRAM+0xf8002ed8>
    437c:	d9403917 	ldw	r5,228(sp)
    4380:	00800304 	movi	r2,12
    4384:	28800015 	stw	r2,0(r5)
    4388:	00bfffc4 	movi	r2,-1
    438c:	00384306 	br	249c <__alt_mem_Onchip_SRAM+0xf800249c>
    4390:	d8c02b03 	ldbu	r3,172(sp)
    4394:	d8c02785 	stb	r3,158(sp)
    4398:	003ab606 	br	2e74 <__alt_mem_Onchip_SRAM+0xf8002e74>
    439c:	d8c02b03 	ldbu	r3,172(sp)
    43a0:	d8c02785 	stb	r3,158(sp)
    43a4:	003a8906 	br	2dcc <__alt_mem_Onchip_SRAM+0xf8002dcc>

000043a8 <time>:
    43a8:	008000b4 	movhi	r2,2
    43ac:	defffc04 	addi	sp,sp,-16
    43b0:	10a88304 	addi	r2,r2,-24052
    43b4:	dc000215 	stw	r16,8(sp)
    43b8:	2021883a 	mov	r16,r4
    43bc:	11000017 	ldw	r4,0(r2)
    43c0:	000d883a 	mov	r6,zero
    43c4:	d80b883a 	mov	r5,sp
    43c8:	dfc00315 	stw	ra,12(sp)
    43cc:	0008dc40 	call	8dc4 <_gettimeofday_r>
    43d0:	10000716 	blt	r2,zero,43f0 <time+0x48>
    43d4:	d8800017 	ldw	r2,0(sp)
    43d8:	80000126 	beq	r16,zero,43e0 <time+0x38>
    43dc:	80800015 	stw	r2,0(r16)
    43e0:	dfc00317 	ldw	ra,12(sp)
    43e4:	dc000217 	ldw	r16,8(sp)
    43e8:	dec00404 	addi	sp,sp,16
    43ec:	f800283a 	ret
    43f0:	00bfffc4 	movi	r2,-1
    43f4:	003ffa06 	br	43e0 <__alt_mem_Onchip_SRAM+0xf80043e0>

000043f8 <___vfprintf_internal_r>:
    43f8:	deffb804 	addi	sp,sp,-288
    43fc:	dfc04715 	stw	ra,284(sp)
    4400:	ddc04515 	stw	r23,276(sp)
    4404:	dd404315 	stw	r21,268(sp)
    4408:	d9002d15 	stw	r4,180(sp)
    440c:	282f883a 	mov	r23,r5
    4410:	302b883a 	mov	r21,r6
    4414:	d9c02e15 	stw	r7,184(sp)
    4418:	df004615 	stw	fp,280(sp)
    441c:	dd804415 	stw	r22,272(sp)
    4420:	dd004215 	stw	r20,264(sp)
    4424:	dcc04115 	stw	r19,260(sp)
    4428:	dc804015 	stw	r18,256(sp)
    442c:	dc403f15 	stw	r17,252(sp)
    4430:	dc003e15 	stw	r16,248(sp)
    4434:	0008ecc0 	call	8ecc <_localeconv_r>
    4438:	10800017 	ldw	r2,0(r2)
    443c:	1009883a 	mov	r4,r2
    4440:	d8803415 	stw	r2,208(sp)
    4444:	00020540 	call	2054 <strlen>
    4448:	d8803715 	stw	r2,220(sp)
    444c:	d8802d17 	ldw	r2,180(sp)
    4450:	10000226 	beq	r2,zero,445c <___vfprintf_internal_r+0x64>
    4454:	10800e17 	ldw	r2,56(r2)
    4458:	1000fb26 	beq	r2,zero,4848 <___vfprintf_internal_r+0x450>
    445c:	b880030b 	ldhu	r2,12(r23)
    4460:	10c8000c 	andi	r3,r2,8192
    4464:	1800061e 	bne	r3,zero,4480 <___vfprintf_internal_r+0x88>
    4468:	b9001917 	ldw	r4,100(r23)
    446c:	00f7ffc4 	movi	r3,-8193
    4470:	10880014 	ori	r2,r2,8192
    4474:	20c6703a 	and	r3,r4,r3
    4478:	b880030d 	sth	r2,12(r23)
    447c:	b8c01915 	stw	r3,100(r23)
    4480:	10c0020c 	andi	r3,r2,8
    4484:	1800c326 	beq	r3,zero,4794 <___vfprintf_internal_r+0x39c>
    4488:	b8c00417 	ldw	r3,16(r23)
    448c:	1800c126 	beq	r3,zero,4794 <___vfprintf_internal_r+0x39c>
    4490:	1080068c 	andi	r2,r2,26
    4494:	00c00284 	movi	r3,10
    4498:	10c0c626 	beq	r2,r3,47b4 <___vfprintf_internal_r+0x3bc>
    449c:	d8c00404 	addi	r3,sp,16
    44a0:	050000b4 	movhi	r20,2
    44a4:	d9001e04 	addi	r4,sp,120
    44a8:	a520b384 	addi	r20,r20,-32050
    44ac:	d8c01e15 	stw	r3,120(sp)
    44b0:	d8002015 	stw	zero,128(sp)
    44b4:	d8001f15 	stw	zero,124(sp)
    44b8:	d8003315 	stw	zero,204(sp)
    44bc:	d8003615 	stw	zero,216(sp)
    44c0:	d8003815 	stw	zero,224(sp)
    44c4:	1811883a 	mov	r8,r3
    44c8:	d8003915 	stw	zero,228(sp)
    44cc:	d8003a15 	stw	zero,232(sp)
    44d0:	d8002f15 	stw	zero,188(sp)
    44d4:	d9002815 	stw	r4,160(sp)
    44d8:	a8800007 	ldb	r2,0(r21)
    44dc:	10028b26 	beq	r2,zero,4f0c <___vfprintf_internal_r+0xb14>
    44e0:	00c00944 	movi	r3,37
    44e4:	a823883a 	mov	r17,r21
    44e8:	10c0021e 	bne	r2,r3,44f4 <___vfprintf_internal_r+0xfc>
    44ec:	00001406 	br	4540 <___vfprintf_internal_r+0x148>
    44f0:	10c00326 	beq	r2,r3,4500 <___vfprintf_internal_r+0x108>
    44f4:	8c400044 	addi	r17,r17,1
    44f8:	88800007 	ldb	r2,0(r17)
    44fc:	103ffc1e 	bne	r2,zero,44f0 <__alt_mem_Onchip_SRAM+0xf80044f0>
    4500:	8d61c83a 	sub	r16,r17,r21
    4504:	80000e26 	beq	r16,zero,4540 <___vfprintf_internal_r+0x148>
    4508:	d8c02017 	ldw	r3,128(sp)
    450c:	d8801f17 	ldw	r2,124(sp)
    4510:	45400015 	stw	r21,0(r8)
    4514:	1c07883a 	add	r3,r3,r16
    4518:	10800044 	addi	r2,r2,1
    451c:	d8c02015 	stw	r3,128(sp)
    4520:	44000115 	stw	r16,4(r8)
    4524:	d8801f15 	stw	r2,124(sp)
    4528:	00c001c4 	movi	r3,7
    452c:	1880a916 	blt	r3,r2,47d4 <___vfprintf_internal_r+0x3dc>
    4530:	42000204 	addi	r8,r8,8
    4534:	d9402f17 	ldw	r5,188(sp)
    4538:	2c0b883a 	add	r5,r5,r16
    453c:	d9402f15 	stw	r5,188(sp)
    4540:	88800007 	ldb	r2,0(r17)
    4544:	1000aa26 	beq	r2,zero,47f0 <___vfprintf_internal_r+0x3f8>
    4548:	8d400044 	addi	r21,r17,1
    454c:	8c400047 	ldb	r17,1(r17)
    4550:	0021883a 	mov	r16,zero
    4554:	00bfffc4 	movi	r2,-1
    4558:	0025883a 	mov	r18,zero
    455c:	dc002905 	stb	r16,164(sp)
    4560:	d8002785 	stb	zero,158(sp)
    4564:	d8002b05 	stb	zero,172(sp)
    4568:	d8802a15 	stw	r2,168(sp)
    456c:	d8003115 	stw	zero,196(sp)
    4570:	04c01604 	movi	r19,88
    4574:	05800244 	movi	r22,9
    4578:	9021883a 	mov	r16,r18
    457c:	4039883a 	mov	fp,r8
    4580:	ad400044 	addi	r21,r21,1
    4584:	88bff804 	addi	r2,r17,-32
    4588:	98833236 	bltu	r19,r2,5254 <___vfprintf_internal_r+0xe5c>
    458c:	100490ba 	slli	r2,r2,2
    4590:	00c00034 	movhi	r3,0
    4594:	18d16904 	addi	r3,r3,17828
    4598:	10c5883a 	add	r2,r2,r3
    459c:	10800017 	ldw	r2,0(r2)
    45a0:	1000683a 	jmp	r2
    45a4:	0000514c 	andi	zero,zero,325
    45a8:	00005254 	movui	zero,329
    45ac:	00005254 	movui	zero,329
    45b0:	0000516c 	andhi	zero,zero,325
    45b4:	00005254 	movui	zero,329
    45b8:	00005254 	movui	zero,329
    45bc:	00005254 	movui	zero,329
    45c0:	00005254 	movui	zero,329
    45c4:	00005254 	movui	zero,329
    45c8:	00005254 	movui	zero,329
    45cc:	00004854 	movui	zero,289
    45d0:	0000505c 	xori	zero,zero,321
    45d4:	00005254 	movui	zero,329
    45d8:	00004718 	cmpnei	zero,zero,284
    45dc:	00004878 	rdprs	zero,zero,289
    45e0:	00005254 	movui	zero,329
    45e4:	000048c8 	cmpgei	zero,zero,291
    45e8:	000048d4 	movui	zero,291
    45ec:	000048d4 	movui	zero,291
    45f0:	000048d4 	movui	zero,291
    45f4:	000048d4 	movui	zero,291
    45f8:	000048d4 	movui	zero,291
    45fc:	000048d4 	movui	zero,291
    4600:	000048d4 	movui	zero,291
    4604:	000048d4 	movui	zero,291
    4608:	000048d4 	movui	zero,291
    460c:	00005254 	movui	zero,329
    4610:	00005254 	movui	zero,329
    4614:	00005254 	movui	zero,329
    4618:	00005254 	movui	zero,329
    461c:	00005254 	movui	zero,329
    4620:	00005254 	movui	zero,329
    4624:	00005254 	movui	zero,329
    4628:	00005254 	movui	zero,329
    462c:	00005254 	movui	zero,329
    4630:	00005254 	movui	zero,329
    4634:	00004910 	cmplti	zero,zero,292
    4638:	000049d8 	cmpnei	zero,zero,295
    463c:	00005254 	movui	zero,329
    4640:	000049d8 	cmpnei	zero,zero,295
    4644:	00005254 	movui	zero,329
    4648:	00005254 	movui	zero,329
    464c:	00005254 	movui	zero,329
    4650:	00005254 	movui	zero,329
    4654:	00004a84 	movi	zero,298
    4658:	00005254 	movui	zero,329
    465c:	00005254 	movui	zero,329
    4660:	00004a90 	cmplti	zero,zero,298
    4664:	00005254 	movui	zero,329
    4668:	00005254 	movui	zero,329
    466c:	00005254 	movui	zero,329
    4670:	00005254 	movui	zero,329
    4674:	00005254 	movui	zero,329
    4678:	00004f14 	movui	zero,316
    467c:	00005254 	movui	zero,329
    4680:	00005254 	movui	zero,329
    4684:	00004f80 	call	4f8 <generate_next_level+0x84>
    4688:	00005254 	movui	zero,329
    468c:	00005254 	movui	zero,329
    4690:	00005254 	movui	zero,329
    4694:	00005254 	movui	zero,329
    4698:	00005254 	movui	zero,329
    469c:	00005254 	movui	zero,329
    46a0:	00005254 	movui	zero,329
    46a4:	00005254 	movui	zero,329
    46a8:	00005254 	movui	zero,329
    46ac:	00005254 	movui	zero,329
    46b0:	000051f8 	rdprs	zero,zero,327
    46b4:	00005178 	rdprs	zero,zero,325
    46b8:	000049d8 	cmpnei	zero,zero,295
    46bc:	000049d8 	cmpnei	zero,zero,295
    46c0:	000049d8 	cmpnei	zero,zero,295
    46c4:	00005198 	cmpnei	zero,zero,326
    46c8:	00005178 	rdprs	zero,zero,325
    46cc:	00005254 	movui	zero,329
    46d0:	00005254 	movui	zero,329
    46d4:	000051a4 	muli	zero,zero,326
    46d8:	00005254 	movui	zero,329
    46dc:	000051b8 	rdprs	zero,zero,326
    46e0:	0000503c 	xorhi	zero,zero,320
    46e4:	00004724 	muli	zero,zero,284
    46e8:	00005074 	movhi	zero,321
    46ec:	00005254 	movui	zero,329
    46f0:	00005080 	call	508 <generate_next_level+0x94>
    46f4:	00005254 	movui	zero,329
    46f8:	000050e4 	muli	zero,zero,323
    46fc:	00005254 	movui	zero,329
    4700:	00005254 	movui	zero,329
    4704:	00005104 	movi	zero,324
    4708:	d8c03117 	ldw	r3,196(sp)
    470c:	d8802e15 	stw	r2,184(sp)
    4710:	00c7c83a 	sub	r3,zero,r3
    4714:	d8c03115 	stw	r3,196(sp)
    4718:	84000114 	ori	r16,r16,4
    471c:	ac400007 	ldb	r17,0(r21)
    4720:	003f9706 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    4724:	00800c04 	movi	r2,48
    4728:	d8802705 	stb	r2,156(sp)
    472c:	00801e04 	movi	r2,120
    4730:	d8802745 	stb	r2,157(sp)
    4734:	d9002a17 	ldw	r4,168(sp)
    4738:	d8802e17 	ldw	r2,184(sp)
    473c:	d8002785 	stb	zero,158(sp)
    4740:	e011883a 	mov	r8,fp
    4744:	10c00104 	addi	r3,r2,4
    4748:	14c00017 	ldw	r19,0(r2)
    474c:	002d883a 	mov	r22,zero
    4750:	80800094 	ori	r2,r16,2
    4754:	2002ca16 	blt	r4,zero,5280 <___vfprintf_internal_r+0xe88>
    4758:	00bfdfc4 	movi	r2,-129
    475c:	80a4703a 	and	r18,r16,r2
    4760:	d8c02e15 	stw	r3,184(sp)
    4764:	94800094 	ori	r18,r18,2
    4768:	9802b41e 	bne	r19,zero,523c <___vfprintf_internal_r+0xe44>
    476c:	014000b4 	movhi	r5,2
    4770:	2960a404 	addi	r5,r5,-32112
    4774:	d9403915 	stw	r5,228(sp)
    4778:	04401e04 	movi	r17,120
    477c:	d8802a17 	ldw	r2,168(sp)
    4780:	0039883a 	mov	fp,zero
    4784:	1001fa26 	beq	r2,zero,4f70 <___vfprintf_internal_r+0xb78>
    4788:	0027883a 	mov	r19,zero
    478c:	002d883a 	mov	r22,zero
    4790:	00021906 	br	4ff8 <___vfprintf_internal_r+0xc00>
    4794:	d9002d17 	ldw	r4,180(sp)
    4798:	b80b883a 	mov	r5,r23
    479c:	00067ac0 	call	67ac <__swsetup_r>
    47a0:	1005dc1e 	bne	r2,zero,5f14 <___vfprintf_internal_r+0x1b1c>
    47a4:	b880030b 	ldhu	r2,12(r23)
    47a8:	00c00284 	movi	r3,10
    47ac:	1080068c 	andi	r2,r2,26
    47b0:	10ff3a1e 	bne	r2,r3,449c <__alt_mem_Onchip_SRAM+0xf800449c>
    47b4:	b880038f 	ldh	r2,14(r23)
    47b8:	103f3816 	blt	r2,zero,449c <__alt_mem_Onchip_SRAM+0xf800449c>
    47bc:	d9c02e17 	ldw	r7,184(sp)
    47c0:	d9002d17 	ldw	r4,180(sp)
    47c4:	a80d883a 	mov	r6,r21
    47c8:	b80b883a 	mov	r5,r23
    47cc:	00066f00 	call	66f0 <__sbprintf>
    47d0:	00001106 	br	4818 <___vfprintf_internal_r+0x420>
    47d4:	d9002d17 	ldw	r4,180(sp)
    47d8:	d9801e04 	addi	r6,sp,120
    47dc:	b80b883a 	mov	r5,r23
    47e0:	000bdbc0 	call	bdbc <__sprint_r>
    47e4:	1000081e 	bne	r2,zero,4808 <___vfprintf_internal_r+0x410>
    47e8:	da000404 	addi	r8,sp,16
    47ec:	003f5106 	br	4534 <__alt_mem_Onchip_SRAM+0xf8004534>
    47f0:	d8802017 	ldw	r2,128(sp)
    47f4:	10000426 	beq	r2,zero,4808 <___vfprintf_internal_r+0x410>
    47f8:	d9002d17 	ldw	r4,180(sp)
    47fc:	d9801e04 	addi	r6,sp,120
    4800:	b80b883a 	mov	r5,r23
    4804:	000bdbc0 	call	bdbc <__sprint_r>
    4808:	b880030b 	ldhu	r2,12(r23)
    480c:	1080100c 	andi	r2,r2,64
    4810:	1005c01e 	bne	r2,zero,5f14 <___vfprintf_internal_r+0x1b1c>
    4814:	d8802f17 	ldw	r2,188(sp)
    4818:	dfc04717 	ldw	ra,284(sp)
    481c:	df004617 	ldw	fp,280(sp)
    4820:	ddc04517 	ldw	r23,276(sp)
    4824:	dd804417 	ldw	r22,272(sp)
    4828:	dd404317 	ldw	r21,268(sp)
    482c:	dd004217 	ldw	r20,264(sp)
    4830:	dcc04117 	ldw	r19,260(sp)
    4834:	dc804017 	ldw	r18,256(sp)
    4838:	dc403f17 	ldw	r17,252(sp)
    483c:	dc003e17 	ldw	r16,248(sp)
    4840:	dec04804 	addi	sp,sp,288
    4844:	f800283a 	ret
    4848:	d9002d17 	ldw	r4,180(sp)
    484c:	00087b80 	call	87b8 <__sinit>
    4850:	003f0206 	br	445c <__alt_mem_Onchip_SRAM+0xf800445c>
    4854:	d9002e17 	ldw	r4,184(sp)
    4858:	d9402e17 	ldw	r5,184(sp)
    485c:	21000017 	ldw	r4,0(r4)
    4860:	28800104 	addi	r2,r5,4
    4864:	d9003115 	stw	r4,196(sp)
    4868:	203fa716 	blt	r4,zero,4708 <__alt_mem_Onchip_SRAM+0xf8004708>
    486c:	d8802e15 	stw	r2,184(sp)
    4870:	ac400007 	ldb	r17,0(r21)
    4874:	003f4206 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    4878:	ac400007 	ldb	r17,0(r21)
    487c:	01000a84 	movi	r4,42
    4880:	a8c00044 	addi	r3,r21,1
    4884:	89075826 	beq	r17,r4,65e8 <___vfprintf_internal_r+0x21f0>
    4888:	8cbff404 	addi	r18,r17,-48
    488c:	b486ae36 	bltu	r22,r18,6348 <___vfprintf_internal_r+0x1f50>
    4890:	0009883a 	mov	r4,zero
    4894:	1823883a 	mov	r17,r3
    4898:	01400284 	movi	r5,10
    489c:	00015680 	call	1568 <__mulsi3>
    48a0:	88c00007 	ldb	r3,0(r17)
    48a4:	1489883a 	add	r4,r2,r18
    48a8:	8d400044 	addi	r21,r17,1
    48ac:	1cbff404 	addi	r18,r3,-48
    48b0:	a823883a 	mov	r17,r21
    48b4:	b4bff82e 	bgeu	r22,r18,4898 <__alt_mem_Onchip_SRAM+0xf8004898>
    48b8:	1823883a 	mov	r17,r3
    48bc:	2005f616 	blt	r4,zero,6098 <___vfprintf_internal_r+0x1ca0>
    48c0:	d9002a15 	stw	r4,168(sp)
    48c4:	003f2f06 	br	4584 <__alt_mem_Onchip_SRAM+0xf8004584>
    48c8:	84002014 	ori	r16,r16,128
    48cc:	ac400007 	ldb	r17,0(r21)
    48d0:	003f2b06 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    48d4:	8cbff404 	addi	r18,r17,-48
    48d8:	d8003115 	stw	zero,196(sp)
    48dc:	0009883a 	mov	r4,zero
    48e0:	a823883a 	mov	r17,r21
    48e4:	01400284 	movi	r5,10
    48e8:	00015680 	call	1568 <__mulsi3>
    48ec:	88c00007 	ldb	r3,0(r17)
    48f0:	9089883a 	add	r4,r18,r2
    48f4:	ad400044 	addi	r21,r21,1
    48f8:	1cbff404 	addi	r18,r3,-48
    48fc:	a823883a 	mov	r17,r21
    4900:	b4bff82e 	bgeu	r22,r18,48e4 <__alt_mem_Onchip_SRAM+0xf80048e4>
    4904:	1823883a 	mov	r17,r3
    4908:	d9003115 	stw	r4,196(sp)
    490c:	003f1d06 	br	4584 <__alt_mem_Onchip_SRAM+0xf8004584>
    4910:	8025883a 	mov	r18,r16
    4914:	dc002903 	ldbu	r16,164(sp)
    4918:	e011883a 	mov	r8,fp
    491c:	84003fcc 	andi	r16,r16,255
    4920:	8007531e 	bne	r16,zero,6670 <___vfprintf_internal_r+0x2278>
    4924:	94800414 	ori	r18,r18,16
    4928:	9080080c 	andi	r2,r18,32
    492c:	1003a326 	beq	r2,zero,57bc <___vfprintf_internal_r+0x13c4>
    4930:	d9002e17 	ldw	r4,184(sp)
    4934:	20800117 	ldw	r2,4(r4)
    4938:	24c00017 	ldw	r19,0(r4)
    493c:	21000204 	addi	r4,r4,8
    4940:	d9002e15 	stw	r4,184(sp)
    4944:	102d883a 	mov	r22,r2
    4948:	10047316 	blt	r2,zero,5b18 <___vfprintf_internal_r+0x1720>
    494c:	d9002a17 	ldw	r4,168(sp)
    4950:	df002783 	ldbu	fp,158(sp)
    4954:	2003e416 	blt	r4,zero,58e8 <___vfprintf_internal_r+0x14f0>
    4958:	00ffdfc4 	movi	r3,-129
    495c:	9d84b03a 	or	r2,r19,r22
    4960:	90e4703a 	and	r18,r18,r3
    4964:	10018026 	beq	r2,zero,4f68 <___vfprintf_internal_r+0xb70>
    4968:	b003ab26 	beq	r22,zero,5818 <___vfprintf_internal_r+0x1420>
    496c:	dc402915 	stw	r17,164(sp)
    4970:	dc001e04 	addi	r16,sp,120
    4974:	b023883a 	mov	r17,r22
    4978:	402d883a 	mov	r22,r8
    497c:	9809883a 	mov	r4,r19
    4980:	880b883a 	mov	r5,r17
    4984:	01800284 	movi	r6,10
    4988:	000f883a 	mov	r7,zero
    498c:	000ef940 	call	ef94 <__umoddi3>
    4990:	10800c04 	addi	r2,r2,48
    4994:	843fffc4 	addi	r16,r16,-1
    4998:	9809883a 	mov	r4,r19
    499c:	880b883a 	mov	r5,r17
    49a0:	80800005 	stb	r2,0(r16)
    49a4:	01800284 	movi	r6,10
    49a8:	000f883a 	mov	r7,zero
    49ac:	000e9980 	call	e998 <__udivdi3>
    49b0:	1027883a 	mov	r19,r2
    49b4:	10c4b03a 	or	r2,r2,r3
    49b8:	1823883a 	mov	r17,r3
    49bc:	103fef1e 	bne	r2,zero,497c <__alt_mem_Onchip_SRAM+0xf800497c>
    49c0:	d8c02817 	ldw	r3,160(sp)
    49c4:	dc402917 	ldw	r17,164(sp)
    49c8:	b011883a 	mov	r8,r22
    49cc:	1c07c83a 	sub	r3,r3,r16
    49d0:	d8c02b15 	stw	r3,172(sp)
    49d4:	00005f06 	br	4b54 <___vfprintf_internal_r+0x75c>
    49d8:	8025883a 	mov	r18,r16
    49dc:	dc002903 	ldbu	r16,164(sp)
    49e0:	e011883a 	mov	r8,fp
    49e4:	84003fcc 	andi	r16,r16,255
    49e8:	80071e1e 	bne	r16,zero,6664 <___vfprintf_internal_r+0x226c>
    49ec:	9080020c 	andi	r2,r18,8
    49f0:	1004af26 	beq	r2,zero,5cb0 <___vfprintf_internal_r+0x18b8>
    49f4:	d9002e17 	ldw	r4,184(sp)
    49f8:	d9402e17 	ldw	r5,184(sp)
    49fc:	d8802e17 	ldw	r2,184(sp)
    4a00:	21000017 	ldw	r4,0(r4)
    4a04:	29400117 	ldw	r5,4(r5)
    4a08:	10800204 	addi	r2,r2,8
    4a0c:	d9003615 	stw	r4,216(sp)
    4a10:	d9403815 	stw	r5,224(sp)
    4a14:	d8802e15 	stw	r2,184(sp)
    4a18:	d9003617 	ldw	r4,216(sp)
    4a1c:	d9403817 	ldw	r5,224(sp)
    4a20:	da003d15 	stw	r8,244(sp)
    4a24:	04000044 	movi	r16,1
    4a28:	000a4c40 	call	a4c4 <__fpclassifyd>
    4a2c:	da003d17 	ldw	r8,244(sp)
    4a30:	1404441e 	bne	r2,r16,5b44 <___vfprintf_internal_r+0x174c>
    4a34:	d9003617 	ldw	r4,216(sp)
    4a38:	d9403817 	ldw	r5,224(sp)
    4a3c:	000d883a 	mov	r6,zero
    4a40:	000f883a 	mov	r7,zero
    4a44:	00109380 	call	10938 <__ledf2>
    4a48:	da003d17 	ldw	r8,244(sp)
    4a4c:	1005e316 	blt	r2,zero,61dc <___vfprintf_internal_r+0x1de4>
    4a50:	df002783 	ldbu	fp,158(sp)
    4a54:	008011c4 	movi	r2,71
    4a58:	1445580e 	bge	r2,r17,5fbc <___vfprintf_internal_r+0x1bc4>
    4a5c:	040000b4 	movhi	r16,2
    4a60:	84209c04 	addi	r16,r16,-32144
    4a64:	00c000c4 	movi	r3,3
    4a68:	00bfdfc4 	movi	r2,-129
    4a6c:	d8c02915 	stw	r3,164(sp)
    4a70:	90a4703a 	and	r18,r18,r2
    4a74:	d8c02b15 	stw	r3,172(sp)
    4a78:	d8002a15 	stw	zero,168(sp)
    4a7c:	d8003215 	stw	zero,200(sp)
    4a80:	00003a06 	br	4b6c <___vfprintf_internal_r+0x774>
    4a84:	84000214 	ori	r16,r16,8
    4a88:	ac400007 	ldb	r17,0(r21)
    4a8c:	003ebc06 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    4a90:	8025883a 	mov	r18,r16
    4a94:	dc002903 	ldbu	r16,164(sp)
    4a98:	e011883a 	mov	r8,fp
    4a9c:	84003fcc 	andi	r16,r16,255
    4aa0:	8007001e 	bne	r16,zero,66a4 <___vfprintf_internal_r+0x22ac>
    4aa4:	94800414 	ori	r18,r18,16
    4aa8:	9080080c 	andi	r2,r18,32
    4aac:	1002fa26 	beq	r2,zero,5698 <___vfprintf_internal_r+0x12a0>
    4ab0:	d9002e17 	ldw	r4,184(sp)
    4ab4:	d9402a17 	ldw	r5,168(sp)
    4ab8:	d8002785 	stb	zero,158(sp)
    4abc:	20800204 	addi	r2,r4,8
    4ac0:	24c00017 	ldw	r19,0(r4)
    4ac4:	25800117 	ldw	r22,4(r4)
    4ac8:	2804b116 	blt	r5,zero,5d90 <___vfprintf_internal_r+0x1998>
    4acc:	013fdfc4 	movi	r4,-129
    4ad0:	9d86b03a 	or	r3,r19,r22
    4ad4:	d8802e15 	stw	r2,184(sp)
    4ad8:	9124703a 	and	r18,r18,r4
    4adc:	1802fb1e 	bne	r3,zero,56cc <___vfprintf_internal_r+0x12d4>
    4ae0:	d8c02a17 	ldw	r3,168(sp)
    4ae4:	0039883a 	mov	fp,zero
    4ae8:	1805e526 	beq	r3,zero,6280 <___vfprintf_internal_r+0x1e88>
    4aec:	0027883a 	mov	r19,zero
    4af0:	002d883a 	mov	r22,zero
    4af4:	dc001e04 	addi	r16,sp,120
    4af8:	9806d0fa 	srli	r3,r19,3
    4afc:	b008977a 	slli	r4,r22,29
    4b00:	b02cd0fa 	srli	r22,r22,3
    4b04:	9cc001cc 	andi	r19,r19,7
    4b08:	98800c04 	addi	r2,r19,48
    4b0c:	843fffc4 	addi	r16,r16,-1
    4b10:	20e6b03a 	or	r19,r4,r3
    4b14:	80800005 	stb	r2,0(r16)
    4b18:	9d86b03a 	or	r3,r19,r22
    4b1c:	183ff61e 	bne	r3,zero,4af8 <__alt_mem_Onchip_SRAM+0xf8004af8>
    4b20:	90c0004c 	andi	r3,r18,1
    4b24:	18014126 	beq	r3,zero,502c <___vfprintf_internal_r+0xc34>
    4b28:	10803fcc 	andi	r2,r2,255
    4b2c:	1080201c 	xori	r2,r2,128
    4b30:	10bfe004 	addi	r2,r2,-128
    4b34:	00c00c04 	movi	r3,48
    4b38:	10c13c26 	beq	r2,r3,502c <___vfprintf_internal_r+0xc34>
    4b3c:	80ffffc5 	stb	r3,-1(r16)
    4b40:	d8c02817 	ldw	r3,160(sp)
    4b44:	80bfffc4 	addi	r2,r16,-1
    4b48:	1021883a 	mov	r16,r2
    4b4c:	1887c83a 	sub	r3,r3,r2
    4b50:	d8c02b15 	stw	r3,172(sp)
    4b54:	d8802b17 	ldw	r2,172(sp)
    4b58:	d9002a17 	ldw	r4,168(sp)
    4b5c:	1100010e 	bge	r2,r4,4b64 <___vfprintf_internal_r+0x76c>
    4b60:	2005883a 	mov	r2,r4
    4b64:	d8802915 	stw	r2,164(sp)
    4b68:	d8003215 	stw	zero,200(sp)
    4b6c:	e7003fcc 	andi	fp,fp,255
    4b70:	e700201c 	xori	fp,fp,128
    4b74:	e73fe004 	addi	fp,fp,-128
    4b78:	e0000326 	beq	fp,zero,4b88 <___vfprintf_internal_r+0x790>
    4b7c:	d8c02917 	ldw	r3,164(sp)
    4b80:	18c00044 	addi	r3,r3,1
    4b84:	d8c02915 	stw	r3,164(sp)
    4b88:	90c0008c 	andi	r3,r18,2
    4b8c:	d8c02c15 	stw	r3,176(sp)
    4b90:	18000326 	beq	r3,zero,4ba0 <___vfprintf_internal_r+0x7a8>
    4b94:	d8c02917 	ldw	r3,164(sp)
    4b98:	18c00084 	addi	r3,r3,2
    4b9c:	d8c02915 	stw	r3,164(sp)
    4ba0:	90c0210c 	andi	r3,r18,132
    4ba4:	d8c03015 	stw	r3,192(sp)
    4ba8:	1801c51e 	bne	r3,zero,52c0 <___vfprintf_internal_r+0xec8>
    4bac:	d9003117 	ldw	r4,196(sp)
    4bb0:	d8c02917 	ldw	r3,164(sp)
    4bb4:	20e7c83a 	sub	r19,r4,r3
    4bb8:	04c1c10e 	bge	zero,r19,52c0 <___vfprintf_internal_r+0xec8>
    4bbc:	02400404 	movi	r9,16
    4bc0:	d8c02017 	ldw	r3,128(sp)
    4bc4:	d8801f17 	ldw	r2,124(sp)
    4bc8:	4cc52f0e 	bge	r9,r19,6088 <___vfprintf_internal_r+0x1c90>
    4bcc:	014000b4 	movhi	r5,2
    4bd0:	2960b784 	addi	r5,r5,-32034
    4bd4:	dc403b15 	stw	r17,236(sp)
    4bd8:	d9403515 	stw	r5,212(sp)
    4bdc:	9823883a 	mov	r17,r19
    4be0:	482d883a 	mov	r22,r9
    4be4:	9027883a 	mov	r19,r18
    4be8:	070001c4 	movi	fp,7
    4bec:	8025883a 	mov	r18,r16
    4bf0:	dc002d17 	ldw	r16,180(sp)
    4bf4:	00000306 	br	4c04 <___vfprintf_internal_r+0x80c>
    4bf8:	8c7ffc04 	addi	r17,r17,-16
    4bfc:	42000204 	addi	r8,r8,8
    4c00:	b440130e 	bge	r22,r17,4c50 <___vfprintf_internal_r+0x858>
    4c04:	010000b4 	movhi	r4,2
    4c08:	18c00404 	addi	r3,r3,16
    4c0c:	10800044 	addi	r2,r2,1
    4c10:	2120b784 	addi	r4,r4,-32034
    4c14:	41000015 	stw	r4,0(r8)
    4c18:	45800115 	stw	r22,4(r8)
    4c1c:	d8c02015 	stw	r3,128(sp)
    4c20:	d8801f15 	stw	r2,124(sp)
    4c24:	e0bff40e 	bge	fp,r2,4bf8 <__alt_mem_Onchip_SRAM+0xf8004bf8>
    4c28:	d9801e04 	addi	r6,sp,120
    4c2c:	b80b883a 	mov	r5,r23
    4c30:	8009883a 	mov	r4,r16
    4c34:	000bdbc0 	call	bdbc <__sprint_r>
    4c38:	103ef31e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    4c3c:	8c7ffc04 	addi	r17,r17,-16
    4c40:	d8c02017 	ldw	r3,128(sp)
    4c44:	d8801f17 	ldw	r2,124(sp)
    4c48:	da000404 	addi	r8,sp,16
    4c4c:	b47fed16 	blt	r22,r17,4c04 <__alt_mem_Onchip_SRAM+0xf8004c04>
    4c50:	9021883a 	mov	r16,r18
    4c54:	9825883a 	mov	r18,r19
    4c58:	8827883a 	mov	r19,r17
    4c5c:	dc403b17 	ldw	r17,236(sp)
    4c60:	d9403517 	ldw	r5,212(sp)
    4c64:	98c7883a 	add	r3,r19,r3
    4c68:	10800044 	addi	r2,r2,1
    4c6c:	41400015 	stw	r5,0(r8)
    4c70:	44c00115 	stw	r19,4(r8)
    4c74:	d8c02015 	stw	r3,128(sp)
    4c78:	d8801f15 	stw	r2,124(sp)
    4c7c:	010001c4 	movi	r4,7
    4c80:	2082c516 	blt	r4,r2,5798 <___vfprintf_internal_r+0x13a0>
    4c84:	df002787 	ldb	fp,158(sp)
    4c88:	42000204 	addi	r8,r8,8
    4c8c:	e0000c26 	beq	fp,zero,4cc0 <___vfprintf_internal_r+0x8c8>
    4c90:	d8801f17 	ldw	r2,124(sp)
    4c94:	d9002784 	addi	r4,sp,158
    4c98:	18c00044 	addi	r3,r3,1
    4c9c:	10800044 	addi	r2,r2,1
    4ca0:	41000015 	stw	r4,0(r8)
    4ca4:	01000044 	movi	r4,1
    4ca8:	41000115 	stw	r4,4(r8)
    4cac:	d8c02015 	stw	r3,128(sp)
    4cb0:	d8801f15 	stw	r2,124(sp)
    4cb4:	010001c4 	movi	r4,7
    4cb8:	20825e16 	blt	r4,r2,5634 <___vfprintf_internal_r+0x123c>
    4cbc:	42000204 	addi	r8,r8,8
    4cc0:	d8802c17 	ldw	r2,176(sp)
    4cc4:	10000c26 	beq	r2,zero,4cf8 <___vfprintf_internal_r+0x900>
    4cc8:	d8801f17 	ldw	r2,124(sp)
    4ccc:	d9002704 	addi	r4,sp,156
    4cd0:	18c00084 	addi	r3,r3,2
    4cd4:	10800044 	addi	r2,r2,1
    4cd8:	41000015 	stw	r4,0(r8)
    4cdc:	01000084 	movi	r4,2
    4ce0:	41000115 	stw	r4,4(r8)
    4ce4:	d8c02015 	stw	r3,128(sp)
    4ce8:	d8801f15 	stw	r2,124(sp)
    4cec:	010001c4 	movi	r4,7
    4cf0:	20825816 	blt	r4,r2,5654 <___vfprintf_internal_r+0x125c>
    4cf4:	42000204 	addi	r8,r8,8
    4cf8:	d9003017 	ldw	r4,192(sp)
    4cfc:	00802004 	movi	r2,128
    4d00:	2081bb26 	beq	r4,r2,53f0 <___vfprintf_internal_r+0xff8>
    4d04:	d9402a17 	ldw	r5,168(sp)
    4d08:	d8802b17 	ldw	r2,172(sp)
    4d0c:	28adc83a 	sub	r22,r5,r2
    4d10:	0580310e 	bge	zero,r22,4dd8 <___vfprintf_internal_r+0x9e0>
    4d14:	07000404 	movi	fp,16
    4d18:	d8801f17 	ldw	r2,124(sp)
    4d1c:	e584360e 	bge	fp,r22,5df8 <___vfprintf_internal_r+0x1a00>
    4d20:	014000b4 	movhi	r5,2
    4d24:	2960b384 	addi	r5,r5,-32050
    4d28:	dc402a15 	stw	r17,168(sp)
    4d2c:	d9402c15 	stw	r5,176(sp)
    4d30:	b023883a 	mov	r17,r22
    4d34:	04c001c4 	movi	r19,7
    4d38:	a82d883a 	mov	r22,r21
    4d3c:	902b883a 	mov	r21,r18
    4d40:	8025883a 	mov	r18,r16
    4d44:	dc002d17 	ldw	r16,180(sp)
    4d48:	00000306 	br	4d58 <___vfprintf_internal_r+0x960>
    4d4c:	8c7ffc04 	addi	r17,r17,-16
    4d50:	42000204 	addi	r8,r8,8
    4d54:	e440110e 	bge	fp,r17,4d9c <___vfprintf_internal_r+0x9a4>
    4d58:	18c00404 	addi	r3,r3,16
    4d5c:	10800044 	addi	r2,r2,1
    4d60:	45000015 	stw	r20,0(r8)
    4d64:	47000115 	stw	fp,4(r8)
    4d68:	d8c02015 	stw	r3,128(sp)
    4d6c:	d8801f15 	stw	r2,124(sp)
    4d70:	98bff60e 	bge	r19,r2,4d4c <__alt_mem_Onchip_SRAM+0xf8004d4c>
    4d74:	d9801e04 	addi	r6,sp,120
    4d78:	b80b883a 	mov	r5,r23
    4d7c:	8009883a 	mov	r4,r16
    4d80:	000bdbc0 	call	bdbc <__sprint_r>
    4d84:	103ea01e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    4d88:	8c7ffc04 	addi	r17,r17,-16
    4d8c:	d8c02017 	ldw	r3,128(sp)
    4d90:	d8801f17 	ldw	r2,124(sp)
    4d94:	da000404 	addi	r8,sp,16
    4d98:	e47fef16 	blt	fp,r17,4d58 <__alt_mem_Onchip_SRAM+0xf8004d58>
    4d9c:	9021883a 	mov	r16,r18
    4da0:	a825883a 	mov	r18,r21
    4da4:	b02b883a 	mov	r21,r22
    4da8:	882d883a 	mov	r22,r17
    4dac:	dc402a17 	ldw	r17,168(sp)
    4db0:	d9002c17 	ldw	r4,176(sp)
    4db4:	1d87883a 	add	r3,r3,r22
    4db8:	10800044 	addi	r2,r2,1
    4dbc:	41000015 	stw	r4,0(r8)
    4dc0:	45800115 	stw	r22,4(r8)
    4dc4:	d8c02015 	stw	r3,128(sp)
    4dc8:	d8801f15 	stw	r2,124(sp)
    4dcc:	010001c4 	movi	r4,7
    4dd0:	20821016 	blt	r4,r2,5614 <___vfprintf_internal_r+0x121c>
    4dd4:	42000204 	addi	r8,r8,8
    4dd8:	9080400c 	andi	r2,r18,256
    4ddc:	10013a1e 	bne	r2,zero,52c8 <___vfprintf_internal_r+0xed0>
    4de0:	d9402b17 	ldw	r5,172(sp)
    4de4:	d8801f17 	ldw	r2,124(sp)
    4de8:	44000015 	stw	r16,0(r8)
    4dec:	1947883a 	add	r3,r3,r5
    4df0:	10800044 	addi	r2,r2,1
    4df4:	41400115 	stw	r5,4(r8)
    4df8:	d8c02015 	stw	r3,128(sp)
    4dfc:	d8801f15 	stw	r2,124(sp)
    4e00:	010001c4 	movi	r4,7
    4e04:	2081f516 	blt	r4,r2,55dc <___vfprintf_internal_r+0x11e4>
    4e08:	42000204 	addi	r8,r8,8
    4e0c:	9480010c 	andi	r18,r18,4
    4e10:	90003226 	beq	r18,zero,4edc <___vfprintf_internal_r+0xae4>
    4e14:	d9403117 	ldw	r5,196(sp)
    4e18:	d8802917 	ldw	r2,164(sp)
    4e1c:	28a1c83a 	sub	r16,r5,r2
    4e20:	04002e0e 	bge	zero,r16,4edc <___vfprintf_internal_r+0xae4>
    4e24:	04400404 	movi	r17,16
    4e28:	d8801f17 	ldw	r2,124(sp)
    4e2c:	8c04c40e 	bge	r17,r16,6140 <___vfprintf_internal_r+0x1d48>
    4e30:	014000b4 	movhi	r5,2
    4e34:	2960b784 	addi	r5,r5,-32034
    4e38:	d9403515 	stw	r5,212(sp)
    4e3c:	048001c4 	movi	r18,7
    4e40:	dcc02d17 	ldw	r19,180(sp)
    4e44:	00000306 	br	4e54 <___vfprintf_internal_r+0xa5c>
    4e48:	843ffc04 	addi	r16,r16,-16
    4e4c:	42000204 	addi	r8,r8,8
    4e50:	8c00130e 	bge	r17,r16,4ea0 <___vfprintf_internal_r+0xaa8>
    4e54:	010000b4 	movhi	r4,2
    4e58:	18c00404 	addi	r3,r3,16
    4e5c:	10800044 	addi	r2,r2,1
    4e60:	2120b784 	addi	r4,r4,-32034
    4e64:	41000015 	stw	r4,0(r8)
    4e68:	44400115 	stw	r17,4(r8)
    4e6c:	d8c02015 	stw	r3,128(sp)
    4e70:	d8801f15 	stw	r2,124(sp)
    4e74:	90bff40e 	bge	r18,r2,4e48 <__alt_mem_Onchip_SRAM+0xf8004e48>
    4e78:	d9801e04 	addi	r6,sp,120
    4e7c:	b80b883a 	mov	r5,r23
    4e80:	9809883a 	mov	r4,r19
    4e84:	000bdbc0 	call	bdbc <__sprint_r>
    4e88:	103e5f1e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    4e8c:	843ffc04 	addi	r16,r16,-16
    4e90:	d8c02017 	ldw	r3,128(sp)
    4e94:	d8801f17 	ldw	r2,124(sp)
    4e98:	da000404 	addi	r8,sp,16
    4e9c:	8c3fed16 	blt	r17,r16,4e54 <__alt_mem_Onchip_SRAM+0xf8004e54>
    4ea0:	d9403517 	ldw	r5,212(sp)
    4ea4:	1c07883a 	add	r3,r3,r16
    4ea8:	10800044 	addi	r2,r2,1
    4eac:	41400015 	stw	r5,0(r8)
    4eb0:	44000115 	stw	r16,4(r8)
    4eb4:	d8c02015 	stw	r3,128(sp)
    4eb8:	d8801f15 	stw	r2,124(sp)
    4ebc:	010001c4 	movi	r4,7
    4ec0:	2080060e 	bge	r4,r2,4edc <___vfprintf_internal_r+0xae4>
    4ec4:	d9002d17 	ldw	r4,180(sp)
    4ec8:	d9801e04 	addi	r6,sp,120
    4ecc:	b80b883a 	mov	r5,r23
    4ed0:	000bdbc0 	call	bdbc <__sprint_r>
    4ed4:	103e4c1e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    4ed8:	d8c02017 	ldw	r3,128(sp)
    4edc:	d8803117 	ldw	r2,196(sp)
    4ee0:	d9002917 	ldw	r4,164(sp)
    4ee4:	1100010e 	bge	r2,r4,4eec <___vfprintf_internal_r+0xaf4>
    4ee8:	2005883a 	mov	r2,r4
    4eec:	d9402f17 	ldw	r5,188(sp)
    4ef0:	288b883a 	add	r5,r5,r2
    4ef4:	d9402f15 	stw	r5,188(sp)
    4ef8:	1801c01e 	bne	r3,zero,55fc <___vfprintf_internal_r+0x1204>
    4efc:	a8800007 	ldb	r2,0(r21)
    4f00:	d8001f15 	stw	zero,124(sp)
    4f04:	da000404 	addi	r8,sp,16
    4f08:	103d751e 	bne	r2,zero,44e0 <__alt_mem_Onchip_SRAM+0xf80044e0>
    4f0c:	a823883a 	mov	r17,r21
    4f10:	003d8b06 	br	4540 <__alt_mem_Onchip_SRAM+0xf8004540>
    4f14:	8025883a 	mov	r18,r16
    4f18:	dc002903 	ldbu	r16,164(sp)
    4f1c:	e011883a 	mov	r8,fp
    4f20:	84003fcc 	andi	r16,r16,255
    4f24:	8005e51e 	bne	r16,zero,66bc <___vfprintf_internal_r+0x22c4>
    4f28:	94800414 	ori	r18,r18,16
    4f2c:	9080080c 	andi	r2,r18,32
    4f30:	10022b26 	beq	r2,zero,57e0 <___vfprintf_internal_r+0x13e8>
    4f34:	d9002e17 	ldw	r4,184(sp)
    4f38:	d9402a17 	ldw	r5,168(sp)
    4f3c:	d8002785 	stb	zero,158(sp)
    4f40:	20c00204 	addi	r3,r4,8
    4f44:	24c00017 	ldw	r19,0(r4)
    4f48:	25800117 	ldw	r22,4(r4)
    4f4c:	28042e16 	blt	r5,zero,6008 <___vfprintf_internal_r+0x1c10>
    4f50:	013fdfc4 	movi	r4,-129
    4f54:	9d84b03a 	or	r2,r19,r22
    4f58:	d8c02e15 	stw	r3,184(sp)
    4f5c:	9124703a 	and	r18,r18,r4
    4f60:	0039883a 	mov	fp,zero
    4f64:	103e801e 	bne	r2,zero,4968 <__alt_mem_Onchip_SRAM+0xf8004968>
    4f68:	d9002a17 	ldw	r4,168(sp)
    4f6c:	2002e01e 	bne	r4,zero,5af0 <___vfprintf_internal_r+0x16f8>
    4f70:	d8002a15 	stw	zero,168(sp)
    4f74:	d8002b15 	stw	zero,172(sp)
    4f78:	dc001e04 	addi	r16,sp,120
    4f7c:	003ef506 	br	4b54 <__alt_mem_Onchip_SRAM+0xf8004b54>
    4f80:	8025883a 	mov	r18,r16
    4f84:	dc002903 	ldbu	r16,164(sp)
    4f88:	e011883a 	mov	r8,fp
    4f8c:	84003fcc 	andi	r16,r16,255
    4f90:	8005ba1e 	bne	r16,zero,667c <___vfprintf_internal_r+0x2284>
    4f94:	010000b4 	movhi	r4,2
    4f98:	21209f04 	addi	r4,r4,-32132
    4f9c:	d9003915 	stw	r4,228(sp)
    4fa0:	9080080c 	andi	r2,r18,32
    4fa4:	10006126 	beq	r2,zero,512c <___vfprintf_internal_r+0xd34>
    4fa8:	d9402e17 	ldw	r5,184(sp)
    4fac:	2cc00017 	ldw	r19,0(r5)
    4fb0:	2d800117 	ldw	r22,4(r5)
    4fb4:	29400204 	addi	r5,r5,8
    4fb8:	d9402e15 	stw	r5,184(sp)
    4fbc:	9080004c 	andi	r2,r18,1
    4fc0:	1001ac26 	beq	r2,zero,5674 <___vfprintf_internal_r+0x127c>
    4fc4:	9d84b03a 	or	r2,r19,r22
    4fc8:	10038526 	beq	r2,zero,5de0 <___vfprintf_internal_r+0x19e8>
    4fcc:	d8c02a17 	ldw	r3,168(sp)
    4fd0:	00800c04 	movi	r2,48
    4fd4:	d8802705 	stb	r2,156(sp)
    4fd8:	dc402745 	stb	r17,157(sp)
    4fdc:	d8002785 	stb	zero,158(sp)
    4fe0:	90800094 	ori	r2,r18,2
    4fe4:	18047916 	blt	r3,zero,61cc <___vfprintf_internal_r+0x1dd4>
    4fe8:	00bfdfc4 	movi	r2,-129
    4fec:	90a4703a 	and	r18,r18,r2
    4ff0:	94800094 	ori	r18,r18,2
    4ff4:	0039883a 	mov	fp,zero
    4ff8:	d9003917 	ldw	r4,228(sp)
    4ffc:	dc001e04 	addi	r16,sp,120
    5000:	988003cc 	andi	r2,r19,15
    5004:	b006973a 	slli	r3,r22,28
    5008:	2085883a 	add	r2,r4,r2
    500c:	9826d13a 	srli	r19,r19,4
    5010:	10800003 	ldbu	r2,0(r2)
    5014:	b02cd13a 	srli	r22,r22,4
    5018:	843fffc4 	addi	r16,r16,-1
    501c:	1ce6b03a 	or	r19,r3,r19
    5020:	80800005 	stb	r2,0(r16)
    5024:	9d84b03a 	or	r2,r19,r22
    5028:	103ff51e 	bne	r2,zero,5000 <__alt_mem_Onchip_SRAM+0xf8005000>
    502c:	d8c02817 	ldw	r3,160(sp)
    5030:	1c07c83a 	sub	r3,r3,r16
    5034:	d8c02b15 	stw	r3,172(sp)
    5038:	003ec606 	br	4b54 <__alt_mem_Onchip_SRAM+0xf8004b54>
    503c:	8025883a 	mov	r18,r16
    5040:	dc002903 	ldbu	r16,164(sp)
    5044:	e011883a 	mov	r8,fp
    5048:	84003fcc 	andi	r16,r16,255
    504c:	803e9626 	beq	r16,zero,4aa8 <__alt_mem_Onchip_SRAM+0xf8004aa8>
    5050:	d8c02b03 	ldbu	r3,172(sp)
    5054:	d8c02785 	stb	r3,158(sp)
    5058:	003e9306 	br	4aa8 <__alt_mem_Onchip_SRAM+0xf8004aa8>
    505c:	00c00044 	movi	r3,1
    5060:	d8c02905 	stb	r3,164(sp)
    5064:	00c00ac4 	movi	r3,43
    5068:	d8c02b05 	stb	r3,172(sp)
    506c:	ac400007 	ldb	r17,0(r21)
    5070:	003d4306 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    5074:	84000814 	ori	r16,r16,32
    5078:	ac400007 	ldb	r17,0(r21)
    507c:	003d4006 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    5080:	d8802e17 	ldw	r2,184(sp)
    5084:	8025883a 	mov	r18,r16
    5088:	d8002785 	stb	zero,158(sp)
    508c:	14000017 	ldw	r16,0(r2)
    5090:	e011883a 	mov	r8,fp
    5094:	14c00104 	addi	r19,r2,4
    5098:	80042d26 	beq	r16,zero,6150 <___vfprintf_internal_r+0x1d58>
    509c:	d8c02a17 	ldw	r3,168(sp)
    50a0:	1803e416 	blt	r3,zero,6034 <___vfprintf_internal_r+0x1c3c>
    50a4:	180d883a 	mov	r6,r3
    50a8:	000b883a 	mov	r5,zero
    50ac:	8009883a 	mov	r4,r16
    50b0:	df003d15 	stw	fp,244(sp)
    50b4:	00090b80 	call	90b8 <memchr>
    50b8:	da003d17 	ldw	r8,244(sp)
    50bc:	10046826 	beq	r2,zero,6260 <___vfprintf_internal_r+0x1e68>
    50c0:	1405c83a 	sub	r2,r2,r16
    50c4:	d8802b15 	stw	r2,172(sp)
    50c8:	1003e016 	blt	r2,zero,604c <___vfprintf_internal_r+0x1c54>
    50cc:	df002783 	ldbu	fp,158(sp)
    50d0:	d8802915 	stw	r2,164(sp)
    50d4:	dcc02e15 	stw	r19,184(sp)
    50d8:	d8002a15 	stw	zero,168(sp)
    50dc:	d8003215 	stw	zero,200(sp)
    50e0:	003ea206 	br	4b6c <__alt_mem_Onchip_SRAM+0xf8004b6c>
    50e4:	8025883a 	mov	r18,r16
    50e8:	dc002903 	ldbu	r16,164(sp)
    50ec:	e011883a 	mov	r8,fp
    50f0:	84003fcc 	andi	r16,r16,255
    50f4:	803f8d26 	beq	r16,zero,4f2c <__alt_mem_Onchip_SRAM+0xf8004f2c>
    50f8:	d8c02b03 	ldbu	r3,172(sp)
    50fc:	d8c02785 	stb	r3,158(sp)
    5100:	003f8a06 	br	4f2c <__alt_mem_Onchip_SRAM+0xf8004f2c>
    5104:	8025883a 	mov	r18,r16
    5108:	dc002903 	ldbu	r16,164(sp)
    510c:	e011883a 	mov	r8,fp
    5110:	84003fcc 	andi	r16,r16,255
    5114:	8005661e 	bne	r16,zero,66b0 <___vfprintf_internal_r+0x22b8>
    5118:	010000b4 	movhi	r4,2
    511c:	2120a404 	addi	r4,r4,-32112
    5120:	d9003915 	stw	r4,228(sp)
    5124:	9080080c 	andi	r2,r18,32
    5128:	103f9f1e 	bne	r2,zero,4fa8 <__alt_mem_Onchip_SRAM+0xf8004fa8>
    512c:	9080040c 	andi	r2,r18,16
    5130:	1002eb26 	beq	r2,zero,5ce0 <___vfprintf_internal_r+0x18e8>
    5134:	d8802e17 	ldw	r2,184(sp)
    5138:	002d883a 	mov	r22,zero
    513c:	14c00017 	ldw	r19,0(r2)
    5140:	10800104 	addi	r2,r2,4
    5144:	d8802e15 	stw	r2,184(sp)
    5148:	003f9c06 	br	4fbc <__alt_mem_Onchip_SRAM+0xf8004fbc>
    514c:	d8802b07 	ldb	r2,172(sp)
    5150:	1002e11e 	bne	r2,zero,5cd8 <___vfprintf_internal_r+0x18e0>
    5154:	00c00044 	movi	r3,1
    5158:	d8c02905 	stb	r3,164(sp)
    515c:	00c00804 	movi	r3,32
    5160:	d8c02b05 	stb	r3,172(sp)
    5164:	ac400007 	ldb	r17,0(r21)
    5168:	003d0506 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    516c:	84000054 	ori	r16,r16,1
    5170:	ac400007 	ldb	r17,0(r21)
    5174:	003d0206 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    5178:	8025883a 	mov	r18,r16
    517c:	dc002903 	ldbu	r16,164(sp)
    5180:	e011883a 	mov	r8,fp
    5184:	84003fcc 	andi	r16,r16,255
    5188:	803de726 	beq	r16,zero,4928 <__alt_mem_Onchip_SRAM+0xf8004928>
    518c:	d8c02b03 	ldbu	r3,172(sp)
    5190:	d8c02785 	stb	r3,158(sp)
    5194:	003de406 	br	4928 <__alt_mem_Onchip_SRAM+0xf8004928>
    5198:	84001014 	ori	r16,r16,64
    519c:	ac400007 	ldb	r17,0(r21)
    51a0:	003cf706 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    51a4:	ac400007 	ldb	r17,0(r21)
    51a8:	00801b04 	movi	r2,108
    51ac:	88838f26 	beq	r17,r2,5fec <___vfprintf_internal_r+0x1bf4>
    51b0:	84000414 	ori	r16,r16,16
    51b4:	003cf206 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    51b8:	8025883a 	mov	r18,r16
    51bc:	dc002903 	ldbu	r16,164(sp)
    51c0:	e011883a 	mov	r8,fp
    51c4:	84003fcc 	andi	r16,r16,255
    51c8:	80053f1e 	bne	r16,zero,66c8 <___vfprintf_internal_r+0x22d0>
    51cc:	9080080c 	andi	r2,r18,32
    51d0:	1002d226 	beq	r2,zero,5d1c <___vfprintf_internal_r+0x1924>
    51d4:	d9002e17 	ldw	r4,184(sp)
    51d8:	d9402f17 	ldw	r5,188(sp)
    51dc:	20800017 	ldw	r2,0(r4)
    51e0:	2807d7fa 	srai	r3,r5,31
    51e4:	21000104 	addi	r4,r4,4
    51e8:	d9002e15 	stw	r4,184(sp)
    51ec:	11400015 	stw	r5,0(r2)
    51f0:	10c00115 	stw	r3,4(r2)
    51f4:	003cb806 	br	44d8 <__alt_mem_Onchip_SRAM+0xf80044d8>
    51f8:	d8c02e17 	ldw	r3,184(sp)
    51fc:	d9002e17 	ldw	r4,184(sp)
    5200:	8025883a 	mov	r18,r16
    5204:	18800017 	ldw	r2,0(r3)
    5208:	21000104 	addi	r4,r4,4
    520c:	00c00044 	movi	r3,1
    5210:	e011883a 	mov	r8,fp
    5214:	d8c02915 	stw	r3,164(sp)
    5218:	d8002785 	stb	zero,158(sp)
    521c:	d8801405 	stb	r2,80(sp)
    5220:	d9002e15 	stw	r4,184(sp)
    5224:	d8c02b15 	stw	r3,172(sp)
    5228:	d8002a15 	stw	zero,168(sp)
    522c:	d8003215 	stw	zero,200(sp)
    5230:	dc001404 	addi	r16,sp,80
    5234:	0039883a 	mov	fp,zero
    5238:	003e5306 	br	4b88 <__alt_mem_Onchip_SRAM+0xf8004b88>
    523c:	010000b4 	movhi	r4,2
    5240:	2120a404 	addi	r4,r4,-32112
    5244:	0039883a 	mov	fp,zero
    5248:	d9003915 	stw	r4,228(sp)
    524c:	04401e04 	movi	r17,120
    5250:	003f6906 	br	4ff8 <__alt_mem_Onchip_SRAM+0xf8004ff8>
    5254:	8025883a 	mov	r18,r16
    5258:	dc002903 	ldbu	r16,164(sp)
    525c:	e011883a 	mov	r8,fp
    5260:	84003fcc 	andi	r16,r16,255
    5264:	8005081e 	bne	r16,zero,6688 <___vfprintf_internal_r+0x2290>
    5268:	883d6126 	beq	r17,zero,47f0 <__alt_mem_Onchip_SRAM+0xf80047f0>
    526c:	00c00044 	movi	r3,1
    5270:	d8c02915 	stw	r3,164(sp)
    5274:	dc401405 	stb	r17,80(sp)
    5278:	d8002785 	stb	zero,158(sp)
    527c:	003fe906 	br	5224 <__alt_mem_Onchip_SRAM+0xf8005224>
    5280:	014000b4 	movhi	r5,2
    5284:	2960a404 	addi	r5,r5,-32112
    5288:	d9403915 	stw	r5,228(sp)
    528c:	d8c02e15 	stw	r3,184(sp)
    5290:	1025883a 	mov	r18,r2
    5294:	04401e04 	movi	r17,120
    5298:	9d84b03a 	or	r2,r19,r22
    529c:	1000fc1e 	bne	r2,zero,5690 <___vfprintf_internal_r+0x1298>
    52a0:	0039883a 	mov	fp,zero
    52a4:	00800084 	movi	r2,2
    52a8:	10803fcc 	andi	r2,r2,255
    52ac:	00c00044 	movi	r3,1
    52b0:	10c20f26 	beq	r2,r3,5af0 <___vfprintf_internal_r+0x16f8>
    52b4:	00c00084 	movi	r3,2
    52b8:	10fd3326 	beq	r2,r3,4788 <__alt_mem_Onchip_SRAM+0xf8004788>
    52bc:	003e0b06 	br	4aec <__alt_mem_Onchip_SRAM+0xf8004aec>
    52c0:	d8c02017 	ldw	r3,128(sp)
    52c4:	003e7106 	br	4c8c <__alt_mem_Onchip_SRAM+0xf8004c8c>
    52c8:	00801944 	movi	r2,101
    52cc:	14407e0e 	bge	r2,r17,54c8 <___vfprintf_internal_r+0x10d0>
    52d0:	d9003617 	ldw	r4,216(sp)
    52d4:	d9403817 	ldw	r5,224(sp)
    52d8:	000d883a 	mov	r6,zero
    52dc:	000f883a 	mov	r7,zero
    52e0:	d8c03c15 	stw	r3,240(sp)
    52e4:	da003d15 	stw	r8,244(sp)
    52e8:	00107d40 	call	107d4 <__eqdf2>
    52ec:	d8c03c17 	ldw	r3,240(sp)
    52f0:	da003d17 	ldw	r8,244(sp)
    52f4:	1000f71e 	bne	r2,zero,56d4 <___vfprintf_internal_r+0x12dc>
    52f8:	d8801f17 	ldw	r2,124(sp)
    52fc:	010000b4 	movhi	r4,2
    5300:	2120ab04 	addi	r4,r4,-32084
    5304:	18c00044 	addi	r3,r3,1
    5308:	10800044 	addi	r2,r2,1
    530c:	41000015 	stw	r4,0(r8)
    5310:	01000044 	movi	r4,1
    5314:	41000115 	stw	r4,4(r8)
    5318:	d8c02015 	stw	r3,128(sp)
    531c:	d8801f15 	stw	r2,124(sp)
    5320:	010001c4 	movi	r4,7
    5324:	2082b816 	blt	r4,r2,5e08 <___vfprintf_internal_r+0x1a10>
    5328:	42000204 	addi	r8,r8,8
    532c:	d8802617 	ldw	r2,152(sp)
    5330:	d9403317 	ldw	r5,204(sp)
    5334:	11400216 	blt	r2,r5,5340 <___vfprintf_internal_r+0xf48>
    5338:	9080004c 	andi	r2,r18,1
    533c:	103eb326 	beq	r2,zero,4e0c <__alt_mem_Onchip_SRAM+0xf8004e0c>
    5340:	d8803717 	ldw	r2,220(sp)
    5344:	d9003417 	ldw	r4,208(sp)
    5348:	d9403717 	ldw	r5,220(sp)
    534c:	1887883a 	add	r3,r3,r2
    5350:	d8801f17 	ldw	r2,124(sp)
    5354:	41000015 	stw	r4,0(r8)
    5358:	41400115 	stw	r5,4(r8)
    535c:	10800044 	addi	r2,r2,1
    5360:	d8c02015 	stw	r3,128(sp)
    5364:	d8801f15 	stw	r2,124(sp)
    5368:	010001c4 	movi	r4,7
    536c:	20832916 	blt	r4,r2,6014 <___vfprintf_internal_r+0x1c1c>
    5370:	42000204 	addi	r8,r8,8
    5374:	d8803317 	ldw	r2,204(sp)
    5378:	143fffc4 	addi	r16,r2,-1
    537c:	043ea30e 	bge	zero,r16,4e0c <__alt_mem_Onchip_SRAM+0xf8004e0c>
    5380:	04400404 	movi	r17,16
    5384:	d8801f17 	ldw	r2,124(sp)
    5388:	8c00880e 	bge	r17,r16,55ac <___vfprintf_internal_r+0x11b4>
    538c:	014000b4 	movhi	r5,2
    5390:	2960b384 	addi	r5,r5,-32050
    5394:	d9402c15 	stw	r5,176(sp)
    5398:	058001c4 	movi	r22,7
    539c:	dcc02d17 	ldw	r19,180(sp)
    53a0:	00000306 	br	53b0 <___vfprintf_internal_r+0xfb8>
    53a4:	42000204 	addi	r8,r8,8
    53a8:	843ffc04 	addi	r16,r16,-16
    53ac:	8c00820e 	bge	r17,r16,55b8 <___vfprintf_internal_r+0x11c0>
    53b0:	18c00404 	addi	r3,r3,16
    53b4:	10800044 	addi	r2,r2,1
    53b8:	45000015 	stw	r20,0(r8)
    53bc:	44400115 	stw	r17,4(r8)
    53c0:	d8c02015 	stw	r3,128(sp)
    53c4:	d8801f15 	stw	r2,124(sp)
    53c8:	b0bff60e 	bge	r22,r2,53a4 <__alt_mem_Onchip_SRAM+0xf80053a4>
    53cc:	d9801e04 	addi	r6,sp,120
    53d0:	b80b883a 	mov	r5,r23
    53d4:	9809883a 	mov	r4,r19
    53d8:	000bdbc0 	call	bdbc <__sprint_r>
    53dc:	103d0a1e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    53e0:	d8c02017 	ldw	r3,128(sp)
    53e4:	d8801f17 	ldw	r2,124(sp)
    53e8:	da000404 	addi	r8,sp,16
    53ec:	003fee06 	br	53a8 <__alt_mem_Onchip_SRAM+0xf80053a8>
    53f0:	d9403117 	ldw	r5,196(sp)
    53f4:	d8802917 	ldw	r2,164(sp)
    53f8:	28adc83a 	sub	r22,r5,r2
    53fc:	05be410e 	bge	zero,r22,4d04 <__alt_mem_Onchip_SRAM+0xf8004d04>
    5400:	07000404 	movi	fp,16
    5404:	d8801f17 	ldw	r2,124(sp)
    5408:	e5838f0e 	bge	fp,r22,6248 <___vfprintf_internal_r+0x1e50>
    540c:	014000b4 	movhi	r5,2
    5410:	2960b384 	addi	r5,r5,-32050
    5414:	dc403015 	stw	r17,192(sp)
    5418:	d9402c15 	stw	r5,176(sp)
    541c:	b023883a 	mov	r17,r22
    5420:	04c001c4 	movi	r19,7
    5424:	a82d883a 	mov	r22,r21
    5428:	902b883a 	mov	r21,r18
    542c:	8025883a 	mov	r18,r16
    5430:	dc002d17 	ldw	r16,180(sp)
    5434:	00000306 	br	5444 <___vfprintf_internal_r+0x104c>
    5438:	8c7ffc04 	addi	r17,r17,-16
    543c:	42000204 	addi	r8,r8,8
    5440:	e440110e 	bge	fp,r17,5488 <___vfprintf_internal_r+0x1090>
    5444:	18c00404 	addi	r3,r3,16
    5448:	10800044 	addi	r2,r2,1
    544c:	45000015 	stw	r20,0(r8)
    5450:	47000115 	stw	fp,4(r8)
    5454:	d8c02015 	stw	r3,128(sp)
    5458:	d8801f15 	stw	r2,124(sp)
    545c:	98bff60e 	bge	r19,r2,5438 <__alt_mem_Onchip_SRAM+0xf8005438>
    5460:	d9801e04 	addi	r6,sp,120
    5464:	b80b883a 	mov	r5,r23
    5468:	8009883a 	mov	r4,r16
    546c:	000bdbc0 	call	bdbc <__sprint_r>
    5470:	103ce51e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5474:	8c7ffc04 	addi	r17,r17,-16
    5478:	d8c02017 	ldw	r3,128(sp)
    547c:	d8801f17 	ldw	r2,124(sp)
    5480:	da000404 	addi	r8,sp,16
    5484:	e47fef16 	blt	fp,r17,5444 <__alt_mem_Onchip_SRAM+0xf8005444>
    5488:	9021883a 	mov	r16,r18
    548c:	a825883a 	mov	r18,r21
    5490:	b02b883a 	mov	r21,r22
    5494:	882d883a 	mov	r22,r17
    5498:	dc403017 	ldw	r17,192(sp)
    549c:	d9002c17 	ldw	r4,176(sp)
    54a0:	1d87883a 	add	r3,r3,r22
    54a4:	10800044 	addi	r2,r2,1
    54a8:	41000015 	stw	r4,0(r8)
    54ac:	45800115 	stw	r22,4(r8)
    54b0:	d8c02015 	stw	r3,128(sp)
    54b4:	d8801f15 	stw	r2,124(sp)
    54b8:	010001c4 	movi	r4,7
    54bc:	20818e16 	blt	r4,r2,5af8 <___vfprintf_internal_r+0x1700>
    54c0:	42000204 	addi	r8,r8,8
    54c4:	003e0f06 	br	4d04 <__alt_mem_Onchip_SRAM+0xf8004d04>
    54c8:	d9403317 	ldw	r5,204(sp)
    54cc:	00800044 	movi	r2,1
    54d0:	18c00044 	addi	r3,r3,1
    54d4:	1141530e 	bge	r2,r5,5a24 <___vfprintf_internal_r+0x162c>
    54d8:	dc401f17 	ldw	r17,124(sp)
    54dc:	00800044 	movi	r2,1
    54e0:	40800115 	stw	r2,4(r8)
    54e4:	8c400044 	addi	r17,r17,1
    54e8:	44000015 	stw	r16,0(r8)
    54ec:	d8c02015 	stw	r3,128(sp)
    54f0:	dc401f15 	stw	r17,124(sp)
    54f4:	008001c4 	movi	r2,7
    54f8:	14416b16 	blt	r2,r17,5aa8 <___vfprintf_internal_r+0x16b0>
    54fc:	42000204 	addi	r8,r8,8
    5500:	d8803717 	ldw	r2,220(sp)
    5504:	d9003417 	ldw	r4,208(sp)
    5508:	8c400044 	addi	r17,r17,1
    550c:	10c7883a 	add	r3,r2,r3
    5510:	40800115 	stw	r2,4(r8)
    5514:	41000015 	stw	r4,0(r8)
    5518:	d8c02015 	stw	r3,128(sp)
    551c:	dc401f15 	stw	r17,124(sp)
    5520:	008001c4 	movi	r2,7
    5524:	14416916 	blt	r2,r17,5acc <___vfprintf_internal_r+0x16d4>
    5528:	45800204 	addi	r22,r8,8
    552c:	d9003617 	ldw	r4,216(sp)
    5530:	d9403817 	ldw	r5,224(sp)
    5534:	000d883a 	mov	r6,zero
    5538:	000f883a 	mov	r7,zero
    553c:	d8c03c15 	stw	r3,240(sp)
    5540:	00107d40 	call	107d4 <__eqdf2>
    5544:	d8c03c17 	ldw	r3,240(sp)
    5548:	1000bc26 	beq	r2,zero,583c <___vfprintf_internal_r+0x1444>
    554c:	d9403317 	ldw	r5,204(sp)
    5550:	84000044 	addi	r16,r16,1
    5554:	8c400044 	addi	r17,r17,1
    5558:	28bfffc4 	addi	r2,r5,-1
    555c:	1887883a 	add	r3,r3,r2
    5560:	b0800115 	stw	r2,4(r22)
    5564:	b4000015 	stw	r16,0(r22)
    5568:	d8c02015 	stw	r3,128(sp)
    556c:	dc401f15 	stw	r17,124(sp)
    5570:	008001c4 	movi	r2,7
    5574:	14414316 	blt	r2,r17,5a84 <___vfprintf_internal_r+0x168c>
    5578:	b5800204 	addi	r22,r22,8
    557c:	d9003a17 	ldw	r4,232(sp)
    5580:	df0022c4 	addi	fp,sp,139
    5584:	8c400044 	addi	r17,r17,1
    5588:	20c7883a 	add	r3,r4,r3
    558c:	b7000015 	stw	fp,0(r22)
    5590:	b1000115 	stw	r4,4(r22)
    5594:	d8c02015 	stw	r3,128(sp)
    5598:	dc401f15 	stw	r17,124(sp)
    559c:	008001c4 	movi	r2,7
    55a0:	14400e16 	blt	r2,r17,55dc <___vfprintf_internal_r+0x11e4>
    55a4:	b2000204 	addi	r8,r22,8
    55a8:	003e1806 	br	4e0c <__alt_mem_Onchip_SRAM+0xf8004e0c>
    55ac:	010000b4 	movhi	r4,2
    55b0:	2120b384 	addi	r4,r4,-32050
    55b4:	d9002c15 	stw	r4,176(sp)
    55b8:	d9002c17 	ldw	r4,176(sp)
    55bc:	1c07883a 	add	r3,r3,r16
    55c0:	44000115 	stw	r16,4(r8)
    55c4:	41000015 	stw	r4,0(r8)
    55c8:	10800044 	addi	r2,r2,1
    55cc:	d8c02015 	stw	r3,128(sp)
    55d0:	d8801f15 	stw	r2,124(sp)
    55d4:	010001c4 	movi	r4,7
    55d8:	20be0b0e 	bge	r4,r2,4e08 <__alt_mem_Onchip_SRAM+0xf8004e08>
    55dc:	d9002d17 	ldw	r4,180(sp)
    55e0:	d9801e04 	addi	r6,sp,120
    55e4:	b80b883a 	mov	r5,r23
    55e8:	000bdbc0 	call	bdbc <__sprint_r>
    55ec:	103c861e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    55f0:	d8c02017 	ldw	r3,128(sp)
    55f4:	da000404 	addi	r8,sp,16
    55f8:	003e0406 	br	4e0c <__alt_mem_Onchip_SRAM+0xf8004e0c>
    55fc:	d9002d17 	ldw	r4,180(sp)
    5600:	d9801e04 	addi	r6,sp,120
    5604:	b80b883a 	mov	r5,r23
    5608:	000bdbc0 	call	bdbc <__sprint_r>
    560c:	103e3b26 	beq	r2,zero,4efc <__alt_mem_Onchip_SRAM+0xf8004efc>
    5610:	003c7d06 	br	4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5614:	d9002d17 	ldw	r4,180(sp)
    5618:	d9801e04 	addi	r6,sp,120
    561c:	b80b883a 	mov	r5,r23
    5620:	000bdbc0 	call	bdbc <__sprint_r>
    5624:	103c781e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5628:	d8c02017 	ldw	r3,128(sp)
    562c:	da000404 	addi	r8,sp,16
    5630:	003de906 	br	4dd8 <__alt_mem_Onchip_SRAM+0xf8004dd8>
    5634:	d9002d17 	ldw	r4,180(sp)
    5638:	d9801e04 	addi	r6,sp,120
    563c:	b80b883a 	mov	r5,r23
    5640:	000bdbc0 	call	bdbc <__sprint_r>
    5644:	103c701e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5648:	d8c02017 	ldw	r3,128(sp)
    564c:	da000404 	addi	r8,sp,16
    5650:	003d9b06 	br	4cc0 <__alt_mem_Onchip_SRAM+0xf8004cc0>
    5654:	d9002d17 	ldw	r4,180(sp)
    5658:	d9801e04 	addi	r6,sp,120
    565c:	b80b883a 	mov	r5,r23
    5660:	000bdbc0 	call	bdbc <__sprint_r>
    5664:	103c681e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5668:	d8c02017 	ldw	r3,128(sp)
    566c:	da000404 	addi	r8,sp,16
    5670:	003da106 	br	4cf8 <__alt_mem_Onchip_SRAM+0xf8004cf8>
    5674:	d9402a17 	ldw	r5,168(sp)
    5678:	d8002785 	stb	zero,158(sp)
    567c:	283f0616 	blt	r5,zero,5298 <__alt_mem_Onchip_SRAM+0xf8005298>
    5680:	00ffdfc4 	movi	r3,-129
    5684:	9d84b03a 	or	r2,r19,r22
    5688:	90e4703a 	and	r18,r18,r3
    568c:	103c3b26 	beq	r2,zero,477c <__alt_mem_Onchip_SRAM+0xf800477c>
    5690:	0039883a 	mov	fp,zero
    5694:	003e5806 	br	4ff8 <__alt_mem_Onchip_SRAM+0xf8004ff8>
    5698:	9080040c 	andi	r2,r18,16
    569c:	1001b326 	beq	r2,zero,5d6c <___vfprintf_internal_r+0x1974>
    56a0:	d8c02e17 	ldw	r3,184(sp)
    56a4:	d9002a17 	ldw	r4,168(sp)
    56a8:	d8002785 	stb	zero,158(sp)
    56ac:	18800104 	addi	r2,r3,4
    56b0:	1cc00017 	ldw	r19,0(r3)
    56b4:	002d883a 	mov	r22,zero
    56b8:	2001b516 	blt	r4,zero,5d90 <___vfprintf_internal_r+0x1998>
    56bc:	00ffdfc4 	movi	r3,-129
    56c0:	d8802e15 	stw	r2,184(sp)
    56c4:	90e4703a 	and	r18,r18,r3
    56c8:	983d0526 	beq	r19,zero,4ae0 <__alt_mem_Onchip_SRAM+0xf8004ae0>
    56cc:	0039883a 	mov	fp,zero
    56d0:	003d0806 	br	4af4 <__alt_mem_Onchip_SRAM+0xf8004af4>
    56d4:	dc402617 	ldw	r17,152(sp)
    56d8:	0441d30e 	bge	zero,r17,5e28 <___vfprintf_internal_r+0x1a30>
    56dc:	dc403217 	ldw	r17,200(sp)
    56e0:	d8803317 	ldw	r2,204(sp)
    56e4:	1440010e 	bge	r2,r17,56ec <___vfprintf_internal_r+0x12f4>
    56e8:	1023883a 	mov	r17,r2
    56ec:	04400a0e 	bge	zero,r17,5718 <___vfprintf_internal_r+0x1320>
    56f0:	d8801f17 	ldw	r2,124(sp)
    56f4:	1c47883a 	add	r3,r3,r17
    56f8:	44000015 	stw	r16,0(r8)
    56fc:	10800044 	addi	r2,r2,1
    5700:	44400115 	stw	r17,4(r8)
    5704:	d8c02015 	stw	r3,128(sp)
    5708:	d8801f15 	stw	r2,124(sp)
    570c:	010001c4 	movi	r4,7
    5710:	20826516 	blt	r4,r2,60a8 <___vfprintf_internal_r+0x1cb0>
    5714:	42000204 	addi	r8,r8,8
    5718:	88026116 	blt	r17,zero,60a0 <___vfprintf_internal_r+0x1ca8>
    571c:	d9003217 	ldw	r4,200(sp)
    5720:	2463c83a 	sub	r17,r4,r17
    5724:	04407b0e 	bge	zero,r17,5914 <___vfprintf_internal_r+0x151c>
    5728:	05800404 	movi	r22,16
    572c:	d8801f17 	ldw	r2,124(sp)
    5730:	b4419d0e 	bge	r22,r17,5da8 <___vfprintf_internal_r+0x19b0>
    5734:	010000b4 	movhi	r4,2
    5738:	2120b384 	addi	r4,r4,-32050
    573c:	d9002c15 	stw	r4,176(sp)
    5740:	070001c4 	movi	fp,7
    5744:	dcc02d17 	ldw	r19,180(sp)
    5748:	00000306 	br	5758 <___vfprintf_internal_r+0x1360>
    574c:	42000204 	addi	r8,r8,8
    5750:	8c7ffc04 	addi	r17,r17,-16
    5754:	b441970e 	bge	r22,r17,5db4 <___vfprintf_internal_r+0x19bc>
    5758:	18c00404 	addi	r3,r3,16
    575c:	10800044 	addi	r2,r2,1
    5760:	45000015 	stw	r20,0(r8)
    5764:	45800115 	stw	r22,4(r8)
    5768:	d8c02015 	stw	r3,128(sp)
    576c:	d8801f15 	stw	r2,124(sp)
    5770:	e0bff60e 	bge	fp,r2,574c <__alt_mem_Onchip_SRAM+0xf800574c>
    5774:	d9801e04 	addi	r6,sp,120
    5778:	b80b883a 	mov	r5,r23
    577c:	9809883a 	mov	r4,r19
    5780:	000bdbc0 	call	bdbc <__sprint_r>
    5784:	103c201e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5788:	d8c02017 	ldw	r3,128(sp)
    578c:	d8801f17 	ldw	r2,124(sp)
    5790:	da000404 	addi	r8,sp,16
    5794:	003fee06 	br	5750 <__alt_mem_Onchip_SRAM+0xf8005750>
    5798:	d9002d17 	ldw	r4,180(sp)
    579c:	d9801e04 	addi	r6,sp,120
    57a0:	b80b883a 	mov	r5,r23
    57a4:	000bdbc0 	call	bdbc <__sprint_r>
    57a8:	103c171e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    57ac:	d8c02017 	ldw	r3,128(sp)
    57b0:	df002787 	ldb	fp,158(sp)
    57b4:	da000404 	addi	r8,sp,16
    57b8:	003d3406 	br	4c8c <__alt_mem_Onchip_SRAM+0xf8004c8c>
    57bc:	9080040c 	andi	r2,r18,16
    57c0:	10016126 	beq	r2,zero,5d48 <___vfprintf_internal_r+0x1950>
    57c4:	d9402e17 	ldw	r5,184(sp)
    57c8:	2cc00017 	ldw	r19,0(r5)
    57cc:	29400104 	addi	r5,r5,4
    57d0:	d9402e15 	stw	r5,184(sp)
    57d4:	982dd7fa 	srai	r22,r19,31
    57d8:	b005883a 	mov	r2,r22
    57dc:	003c5a06 	br	4948 <__alt_mem_Onchip_SRAM+0xf8004948>
    57e0:	9080040c 	andi	r2,r18,16
    57e4:	10003526 	beq	r2,zero,58bc <___vfprintf_internal_r+0x14c4>
    57e8:	d8c02e17 	ldw	r3,184(sp)
    57ec:	d9002a17 	ldw	r4,168(sp)
    57f0:	d8002785 	stb	zero,158(sp)
    57f4:	18800104 	addi	r2,r3,4
    57f8:	1cc00017 	ldw	r19,0(r3)
    57fc:	002d883a 	mov	r22,zero
    5800:	20003716 	blt	r4,zero,58e0 <___vfprintf_internal_r+0x14e8>
    5804:	00ffdfc4 	movi	r3,-129
    5808:	d8802e15 	stw	r2,184(sp)
    580c:	90e4703a 	and	r18,r18,r3
    5810:	0039883a 	mov	fp,zero
    5814:	983dd426 	beq	r19,zero,4f68 <__alt_mem_Onchip_SRAM+0xf8004f68>
    5818:	00800244 	movi	r2,9
    581c:	14fc5336 	bltu	r2,r19,496c <__alt_mem_Onchip_SRAM+0xf800496c>
    5820:	d8c02817 	ldw	r3,160(sp)
    5824:	dc001dc4 	addi	r16,sp,119
    5828:	9cc00c04 	addi	r19,r19,48
    582c:	1c07c83a 	sub	r3,r3,r16
    5830:	dcc01dc5 	stb	r19,119(sp)
    5834:	d8c02b15 	stw	r3,172(sp)
    5838:	003cc606 	br	4b54 <__alt_mem_Onchip_SRAM+0xf8004b54>
    583c:	d8803317 	ldw	r2,204(sp)
    5840:	143fffc4 	addi	r16,r2,-1
    5844:	043f4d0e 	bge	zero,r16,557c <__alt_mem_Onchip_SRAM+0xf800557c>
    5848:	07000404 	movi	fp,16
    584c:	e400810e 	bge	fp,r16,5a54 <___vfprintf_internal_r+0x165c>
    5850:	014000b4 	movhi	r5,2
    5854:	2960b384 	addi	r5,r5,-32050
    5858:	d9402c15 	stw	r5,176(sp)
    585c:	01c001c4 	movi	r7,7
    5860:	dcc02d17 	ldw	r19,180(sp)
    5864:	00000306 	br	5874 <___vfprintf_internal_r+0x147c>
    5868:	b5800204 	addi	r22,r22,8
    586c:	843ffc04 	addi	r16,r16,-16
    5870:	e4007b0e 	bge	fp,r16,5a60 <___vfprintf_internal_r+0x1668>
    5874:	18c00404 	addi	r3,r3,16
    5878:	8c400044 	addi	r17,r17,1
    587c:	b5000015 	stw	r20,0(r22)
    5880:	b7000115 	stw	fp,4(r22)
    5884:	d8c02015 	stw	r3,128(sp)
    5888:	dc401f15 	stw	r17,124(sp)
    588c:	3c7ff60e 	bge	r7,r17,5868 <__alt_mem_Onchip_SRAM+0xf8005868>
    5890:	d9801e04 	addi	r6,sp,120
    5894:	b80b883a 	mov	r5,r23
    5898:	9809883a 	mov	r4,r19
    589c:	d9c03c15 	stw	r7,240(sp)
    58a0:	000bdbc0 	call	bdbc <__sprint_r>
    58a4:	d9c03c17 	ldw	r7,240(sp)
    58a8:	103bd71e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    58ac:	d8c02017 	ldw	r3,128(sp)
    58b0:	dc401f17 	ldw	r17,124(sp)
    58b4:	dd800404 	addi	r22,sp,16
    58b8:	003fec06 	br	586c <__alt_mem_Onchip_SRAM+0xf800586c>
    58bc:	9080100c 	andi	r2,r18,64
    58c0:	d8002785 	stb	zero,158(sp)
    58c4:	10010e26 	beq	r2,zero,5d00 <___vfprintf_internal_r+0x1908>
    58c8:	d9402e17 	ldw	r5,184(sp)
    58cc:	d8c02a17 	ldw	r3,168(sp)
    58d0:	002d883a 	mov	r22,zero
    58d4:	28800104 	addi	r2,r5,4
    58d8:	2cc0000b 	ldhu	r19,0(r5)
    58dc:	183fc90e 	bge	r3,zero,5804 <__alt_mem_Onchip_SRAM+0xf8005804>
    58e0:	d8802e15 	stw	r2,184(sp)
    58e4:	0039883a 	mov	fp,zero
    58e8:	9d84b03a 	or	r2,r19,r22
    58ec:	103c1e1e 	bne	r2,zero,4968 <__alt_mem_Onchip_SRAM+0xf8004968>
    58f0:	00800044 	movi	r2,1
    58f4:	003e6c06 	br	52a8 <__alt_mem_Onchip_SRAM+0xf80052a8>
    58f8:	d9002d17 	ldw	r4,180(sp)
    58fc:	d9801e04 	addi	r6,sp,120
    5900:	b80b883a 	mov	r5,r23
    5904:	000bdbc0 	call	bdbc <__sprint_r>
    5908:	103bbf1e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    590c:	d8c02017 	ldw	r3,128(sp)
    5910:	da000404 	addi	r8,sp,16
    5914:	d9003217 	ldw	r4,200(sp)
    5918:	d8802617 	ldw	r2,152(sp)
    591c:	d9403317 	ldw	r5,204(sp)
    5920:	8123883a 	add	r17,r16,r4
    5924:	11400216 	blt	r2,r5,5930 <___vfprintf_internal_r+0x1538>
    5928:	9100004c 	andi	r4,r18,1
    592c:	20000d26 	beq	r4,zero,5964 <___vfprintf_internal_r+0x156c>
    5930:	d9003717 	ldw	r4,220(sp)
    5934:	d9403417 	ldw	r5,208(sp)
    5938:	1907883a 	add	r3,r3,r4
    593c:	d9001f17 	ldw	r4,124(sp)
    5940:	41400015 	stw	r5,0(r8)
    5944:	d9403717 	ldw	r5,220(sp)
    5948:	21000044 	addi	r4,r4,1
    594c:	d8c02015 	stw	r3,128(sp)
    5950:	41400115 	stw	r5,4(r8)
    5954:	d9001f15 	stw	r4,124(sp)
    5958:	014001c4 	movi	r5,7
    595c:	2901e816 	blt	r5,r4,6100 <___vfprintf_internal_r+0x1d08>
    5960:	42000204 	addi	r8,r8,8
    5964:	d9003317 	ldw	r4,204(sp)
    5968:	8121883a 	add	r16,r16,r4
    596c:	2085c83a 	sub	r2,r4,r2
    5970:	8461c83a 	sub	r16,r16,r17
    5974:	1400010e 	bge	r2,r16,597c <___vfprintf_internal_r+0x1584>
    5978:	1021883a 	mov	r16,r2
    597c:	04000a0e 	bge	zero,r16,59a8 <___vfprintf_internal_r+0x15b0>
    5980:	d9001f17 	ldw	r4,124(sp)
    5984:	1c07883a 	add	r3,r3,r16
    5988:	44400015 	stw	r17,0(r8)
    598c:	21000044 	addi	r4,r4,1
    5990:	44000115 	stw	r16,4(r8)
    5994:	d8c02015 	stw	r3,128(sp)
    5998:	d9001f15 	stw	r4,124(sp)
    599c:	014001c4 	movi	r5,7
    59a0:	2901fb16 	blt	r5,r4,6190 <___vfprintf_internal_r+0x1d98>
    59a4:	42000204 	addi	r8,r8,8
    59a8:	8001f716 	blt	r16,zero,6188 <___vfprintf_internal_r+0x1d90>
    59ac:	1421c83a 	sub	r16,r2,r16
    59b0:	043d160e 	bge	zero,r16,4e0c <__alt_mem_Onchip_SRAM+0xf8004e0c>
    59b4:	04400404 	movi	r17,16
    59b8:	d8801f17 	ldw	r2,124(sp)
    59bc:	8c3efb0e 	bge	r17,r16,55ac <__alt_mem_Onchip_SRAM+0xf80055ac>
    59c0:	014000b4 	movhi	r5,2
    59c4:	2960b384 	addi	r5,r5,-32050
    59c8:	d9402c15 	stw	r5,176(sp)
    59cc:	058001c4 	movi	r22,7
    59d0:	dcc02d17 	ldw	r19,180(sp)
    59d4:	00000306 	br	59e4 <___vfprintf_internal_r+0x15ec>
    59d8:	42000204 	addi	r8,r8,8
    59dc:	843ffc04 	addi	r16,r16,-16
    59e0:	8c3ef50e 	bge	r17,r16,55b8 <__alt_mem_Onchip_SRAM+0xf80055b8>
    59e4:	18c00404 	addi	r3,r3,16
    59e8:	10800044 	addi	r2,r2,1
    59ec:	45000015 	stw	r20,0(r8)
    59f0:	44400115 	stw	r17,4(r8)
    59f4:	d8c02015 	stw	r3,128(sp)
    59f8:	d8801f15 	stw	r2,124(sp)
    59fc:	b0bff60e 	bge	r22,r2,59d8 <__alt_mem_Onchip_SRAM+0xf80059d8>
    5a00:	d9801e04 	addi	r6,sp,120
    5a04:	b80b883a 	mov	r5,r23
    5a08:	9809883a 	mov	r4,r19
    5a0c:	000bdbc0 	call	bdbc <__sprint_r>
    5a10:	103b7d1e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5a14:	d8c02017 	ldw	r3,128(sp)
    5a18:	d8801f17 	ldw	r2,124(sp)
    5a1c:	da000404 	addi	r8,sp,16
    5a20:	003fee06 	br	59dc <__alt_mem_Onchip_SRAM+0xf80059dc>
    5a24:	9088703a 	and	r4,r18,r2
    5a28:	203eab1e 	bne	r4,zero,54d8 <__alt_mem_Onchip_SRAM+0xf80054d8>
    5a2c:	dc401f17 	ldw	r17,124(sp)
    5a30:	40800115 	stw	r2,4(r8)
    5a34:	44000015 	stw	r16,0(r8)
    5a38:	8c400044 	addi	r17,r17,1
    5a3c:	d8c02015 	stw	r3,128(sp)
    5a40:	dc401f15 	stw	r17,124(sp)
    5a44:	008001c4 	movi	r2,7
    5a48:	14400e16 	blt	r2,r17,5a84 <___vfprintf_internal_r+0x168c>
    5a4c:	45800204 	addi	r22,r8,8
    5a50:	003eca06 	br	557c <__alt_mem_Onchip_SRAM+0xf800557c>
    5a54:	010000b4 	movhi	r4,2
    5a58:	2120b384 	addi	r4,r4,-32050
    5a5c:	d9002c15 	stw	r4,176(sp)
    5a60:	d8802c17 	ldw	r2,176(sp)
    5a64:	1c07883a 	add	r3,r3,r16
    5a68:	8c400044 	addi	r17,r17,1
    5a6c:	b0800015 	stw	r2,0(r22)
    5a70:	b4000115 	stw	r16,4(r22)
    5a74:	d8c02015 	stw	r3,128(sp)
    5a78:	dc401f15 	stw	r17,124(sp)
    5a7c:	008001c4 	movi	r2,7
    5a80:	147ebd0e 	bge	r2,r17,5578 <__alt_mem_Onchip_SRAM+0xf8005578>
    5a84:	d9002d17 	ldw	r4,180(sp)
    5a88:	d9801e04 	addi	r6,sp,120
    5a8c:	b80b883a 	mov	r5,r23
    5a90:	000bdbc0 	call	bdbc <__sprint_r>
    5a94:	103b5c1e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5a98:	d8c02017 	ldw	r3,128(sp)
    5a9c:	dc401f17 	ldw	r17,124(sp)
    5aa0:	dd800404 	addi	r22,sp,16
    5aa4:	003eb506 	br	557c <__alt_mem_Onchip_SRAM+0xf800557c>
    5aa8:	d9002d17 	ldw	r4,180(sp)
    5aac:	d9801e04 	addi	r6,sp,120
    5ab0:	b80b883a 	mov	r5,r23
    5ab4:	000bdbc0 	call	bdbc <__sprint_r>
    5ab8:	103b531e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5abc:	d8c02017 	ldw	r3,128(sp)
    5ac0:	dc401f17 	ldw	r17,124(sp)
    5ac4:	da000404 	addi	r8,sp,16
    5ac8:	003e8d06 	br	5500 <__alt_mem_Onchip_SRAM+0xf8005500>
    5acc:	d9002d17 	ldw	r4,180(sp)
    5ad0:	d9801e04 	addi	r6,sp,120
    5ad4:	b80b883a 	mov	r5,r23
    5ad8:	000bdbc0 	call	bdbc <__sprint_r>
    5adc:	103b4a1e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5ae0:	d8c02017 	ldw	r3,128(sp)
    5ae4:	dc401f17 	ldw	r17,124(sp)
    5ae8:	dd800404 	addi	r22,sp,16
    5aec:	003e8f06 	br	552c <__alt_mem_Onchip_SRAM+0xf800552c>
    5af0:	0027883a 	mov	r19,zero
    5af4:	003f4a06 	br	5820 <__alt_mem_Onchip_SRAM+0xf8005820>
    5af8:	d9002d17 	ldw	r4,180(sp)
    5afc:	d9801e04 	addi	r6,sp,120
    5b00:	b80b883a 	mov	r5,r23
    5b04:	000bdbc0 	call	bdbc <__sprint_r>
    5b08:	103b3f1e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5b0c:	d8c02017 	ldw	r3,128(sp)
    5b10:	da000404 	addi	r8,sp,16
    5b14:	003c7b06 	br	4d04 <__alt_mem_Onchip_SRAM+0xf8004d04>
    5b18:	d9402a17 	ldw	r5,168(sp)
    5b1c:	04e7c83a 	sub	r19,zero,r19
    5b20:	07000b44 	movi	fp,45
    5b24:	9804c03a 	cmpne	r2,r19,zero
    5b28:	05adc83a 	sub	r22,zero,r22
    5b2c:	df002785 	stb	fp,158(sp)
    5b30:	b0adc83a 	sub	r22,r22,r2
    5b34:	28017b16 	blt	r5,zero,6124 <___vfprintf_internal_r+0x1d2c>
    5b38:	00bfdfc4 	movi	r2,-129
    5b3c:	90a4703a 	and	r18,r18,r2
    5b40:	003b8906 	br	4968 <__alt_mem_Onchip_SRAM+0xf8004968>
    5b44:	d9003617 	ldw	r4,216(sp)
    5b48:	d9403817 	ldw	r5,224(sp)
    5b4c:	da003d15 	stw	r8,244(sp)
    5b50:	000a4c40 	call	a4c4 <__fpclassifyd>
    5b54:	da003d17 	ldw	r8,244(sp)
    5b58:	1000f026 	beq	r2,zero,5f1c <___vfprintf_internal_r+0x1b24>
    5b5c:	d9002a17 	ldw	r4,168(sp)
    5b60:	05bff7c4 	movi	r22,-33
    5b64:	00bfffc4 	movi	r2,-1
    5b68:	8dac703a 	and	r22,r17,r22
    5b6c:	20820026 	beq	r4,r2,6370 <___vfprintf_internal_r+0x1f78>
    5b70:	008011c4 	movi	r2,71
    5b74:	b081f726 	beq	r22,r2,6354 <___vfprintf_internal_r+0x1f5c>
    5b78:	d9003817 	ldw	r4,224(sp)
    5b7c:	90c04014 	ori	r3,r18,256
    5b80:	d8c02c15 	stw	r3,176(sp)
    5b84:	20021516 	blt	r4,zero,63dc <___vfprintf_internal_r+0x1fe4>
    5b88:	dcc03817 	ldw	r19,224(sp)
    5b8c:	d8002905 	stb	zero,164(sp)
    5b90:	00801984 	movi	r2,102
    5b94:	8881f926 	beq	r17,r2,637c <___vfprintf_internal_r+0x1f84>
    5b98:	00801184 	movi	r2,70
    5b9c:	88821c26 	beq	r17,r2,6410 <___vfprintf_internal_r+0x2018>
    5ba0:	00801144 	movi	r2,69
    5ba4:	b081ef26 	beq	r22,r2,6364 <___vfprintf_internal_r+0x1f6c>
    5ba8:	d8c02a17 	ldw	r3,168(sp)
    5bac:	d8802104 	addi	r2,sp,132
    5bb0:	d8800315 	stw	r2,12(sp)
    5bb4:	d9403617 	ldw	r5,216(sp)
    5bb8:	d8802504 	addi	r2,sp,148
    5bbc:	d9002d17 	ldw	r4,180(sp)
    5bc0:	d8800215 	stw	r2,8(sp)
    5bc4:	d8802604 	addi	r2,sp,152
    5bc8:	d8c00015 	stw	r3,0(sp)
    5bcc:	d8800115 	stw	r2,4(sp)
    5bd0:	01c00084 	movi	r7,2
    5bd4:	980d883a 	mov	r6,r19
    5bd8:	d8c03c15 	stw	r3,240(sp)
    5bdc:	da003d15 	stw	r8,244(sp)
    5be0:	0006b280 	call	6b28 <_dtoa_r>
    5be4:	1021883a 	mov	r16,r2
    5be8:	008019c4 	movi	r2,103
    5bec:	d8c03c17 	ldw	r3,240(sp)
    5bf0:	da003d17 	ldw	r8,244(sp)
    5bf4:	88817126 	beq	r17,r2,61bc <___vfprintf_internal_r+0x1dc4>
    5bf8:	008011c4 	movi	r2,71
    5bfc:	88829126 	beq	r17,r2,6644 <___vfprintf_internal_r+0x224c>
    5c00:	80f9883a 	add	fp,r16,r3
    5c04:	d9003617 	ldw	r4,216(sp)
    5c08:	000d883a 	mov	r6,zero
    5c0c:	000f883a 	mov	r7,zero
    5c10:	980b883a 	mov	r5,r19
    5c14:	da003d15 	stw	r8,244(sp)
    5c18:	00107d40 	call	107d4 <__eqdf2>
    5c1c:	da003d17 	ldw	r8,244(sp)
    5c20:	10018d26 	beq	r2,zero,6258 <___vfprintf_internal_r+0x1e60>
    5c24:	d8802117 	ldw	r2,132(sp)
    5c28:	1700062e 	bgeu	r2,fp,5c44 <___vfprintf_internal_r+0x184c>
    5c2c:	01000c04 	movi	r4,48
    5c30:	10c00044 	addi	r3,r2,1
    5c34:	d8c02115 	stw	r3,132(sp)
    5c38:	11000005 	stb	r4,0(r2)
    5c3c:	d8802117 	ldw	r2,132(sp)
    5c40:	173ffb36 	bltu	r2,fp,5c30 <__alt_mem_Onchip_SRAM+0xf8005c30>
    5c44:	1405c83a 	sub	r2,r2,r16
    5c48:	d8803315 	stw	r2,204(sp)
    5c4c:	008011c4 	movi	r2,71
    5c50:	b0817626 	beq	r22,r2,622c <___vfprintf_internal_r+0x1e34>
    5c54:	00801944 	movi	r2,101
    5c58:	1442800e 	bge	r2,r17,665c <___vfprintf_internal_r+0x2264>
    5c5c:	d8c02617 	ldw	r3,152(sp)
    5c60:	00801984 	movi	r2,102
    5c64:	d8c03215 	stw	r3,200(sp)
    5c68:	8881fe26 	beq	r17,r2,6464 <___vfprintf_internal_r+0x206c>
    5c6c:	d8c03217 	ldw	r3,200(sp)
    5c70:	d9003317 	ldw	r4,204(sp)
    5c74:	1901dd16 	blt	r3,r4,63ec <___vfprintf_internal_r+0x1ff4>
    5c78:	9480004c 	andi	r18,r18,1
    5c7c:	90022b1e 	bne	r18,zero,652c <___vfprintf_internal_r+0x2134>
    5c80:	1805883a 	mov	r2,r3
    5c84:	18028316 	blt	r3,zero,6694 <___vfprintf_internal_r+0x229c>
    5c88:	d8c03217 	ldw	r3,200(sp)
    5c8c:	044019c4 	movi	r17,103
    5c90:	d8c02b15 	stw	r3,172(sp)
    5c94:	df002907 	ldb	fp,164(sp)
    5c98:	e001531e 	bne	fp,zero,61e8 <___vfprintf_internal_r+0x1df0>
    5c9c:	df002783 	ldbu	fp,158(sp)
    5ca0:	d8802915 	stw	r2,164(sp)
    5ca4:	dc802c17 	ldw	r18,176(sp)
    5ca8:	d8002a15 	stw	zero,168(sp)
    5cac:	003baf06 	br	4b6c <__alt_mem_Onchip_SRAM+0xf8004b6c>
    5cb0:	d8c02e17 	ldw	r3,184(sp)
    5cb4:	d9002e17 	ldw	r4,184(sp)
    5cb8:	d9402e17 	ldw	r5,184(sp)
    5cbc:	18c00017 	ldw	r3,0(r3)
    5cc0:	21000117 	ldw	r4,4(r4)
    5cc4:	29400204 	addi	r5,r5,8
    5cc8:	d8c03615 	stw	r3,216(sp)
    5ccc:	d9003815 	stw	r4,224(sp)
    5cd0:	d9402e15 	stw	r5,184(sp)
    5cd4:	003b5006 	br	4a18 <__alt_mem_Onchip_SRAM+0xf8004a18>
    5cd8:	ac400007 	ldb	r17,0(r21)
    5cdc:	003a2806 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    5ce0:	9080100c 	andi	r2,r18,64
    5ce4:	1000a826 	beq	r2,zero,5f88 <___vfprintf_internal_r+0x1b90>
    5ce8:	d8c02e17 	ldw	r3,184(sp)
    5cec:	002d883a 	mov	r22,zero
    5cf0:	1cc0000b 	ldhu	r19,0(r3)
    5cf4:	18c00104 	addi	r3,r3,4
    5cf8:	d8c02e15 	stw	r3,184(sp)
    5cfc:	003caf06 	br	4fbc <__alt_mem_Onchip_SRAM+0xf8004fbc>
    5d00:	d9002e17 	ldw	r4,184(sp)
    5d04:	d9402a17 	ldw	r5,168(sp)
    5d08:	002d883a 	mov	r22,zero
    5d0c:	20800104 	addi	r2,r4,4
    5d10:	24c00017 	ldw	r19,0(r4)
    5d14:	283ebb0e 	bge	r5,zero,5804 <__alt_mem_Onchip_SRAM+0xf8005804>
    5d18:	003ef106 	br	58e0 <__alt_mem_Onchip_SRAM+0xf80058e0>
    5d1c:	9080040c 	andi	r2,r18,16
    5d20:	1000921e 	bne	r2,zero,5f6c <___vfprintf_internal_r+0x1b74>
    5d24:	9480100c 	andi	r18,r18,64
    5d28:	90013926 	beq	r18,zero,6210 <___vfprintf_internal_r+0x1e18>
    5d2c:	d9402e17 	ldw	r5,184(sp)
    5d30:	d8c02f17 	ldw	r3,188(sp)
    5d34:	28800017 	ldw	r2,0(r5)
    5d38:	29400104 	addi	r5,r5,4
    5d3c:	d9402e15 	stw	r5,184(sp)
    5d40:	10c0000d 	sth	r3,0(r2)
    5d44:	0039e406 	br	44d8 <__alt_mem_Onchip_SRAM+0xf80044d8>
    5d48:	9080100c 	andi	r2,r18,64
    5d4c:	10008026 	beq	r2,zero,5f50 <___vfprintf_internal_r+0x1b58>
    5d50:	d8802e17 	ldw	r2,184(sp)
    5d54:	14c0000f 	ldh	r19,0(r2)
    5d58:	10800104 	addi	r2,r2,4
    5d5c:	d8802e15 	stw	r2,184(sp)
    5d60:	982dd7fa 	srai	r22,r19,31
    5d64:	b005883a 	mov	r2,r22
    5d68:	003af706 	br	4948 <__alt_mem_Onchip_SRAM+0xf8004948>
    5d6c:	9080100c 	andi	r2,r18,64
    5d70:	d8002785 	stb	zero,158(sp)
    5d74:	10008a1e 	bne	r2,zero,5fa0 <___vfprintf_internal_r+0x1ba8>
    5d78:	d9002e17 	ldw	r4,184(sp)
    5d7c:	d9402a17 	ldw	r5,168(sp)
    5d80:	002d883a 	mov	r22,zero
    5d84:	20800104 	addi	r2,r4,4
    5d88:	24c00017 	ldw	r19,0(r4)
    5d8c:	283e4b0e 	bge	r5,zero,56bc <__alt_mem_Onchip_SRAM+0xf80056bc>
    5d90:	9d86b03a 	or	r3,r19,r22
    5d94:	d8802e15 	stw	r2,184(sp)
    5d98:	183e4c1e 	bne	r3,zero,56cc <__alt_mem_Onchip_SRAM+0xf80056cc>
    5d9c:	0039883a 	mov	fp,zero
    5da0:	0005883a 	mov	r2,zero
    5da4:	003d4006 	br	52a8 <__alt_mem_Onchip_SRAM+0xf80052a8>
    5da8:	014000b4 	movhi	r5,2
    5dac:	2960b384 	addi	r5,r5,-32050
    5db0:	d9402c15 	stw	r5,176(sp)
    5db4:	d9402c17 	ldw	r5,176(sp)
    5db8:	1c47883a 	add	r3,r3,r17
    5dbc:	10800044 	addi	r2,r2,1
    5dc0:	41400015 	stw	r5,0(r8)
    5dc4:	44400115 	stw	r17,4(r8)
    5dc8:	d8c02015 	stw	r3,128(sp)
    5dcc:	d8801f15 	stw	r2,124(sp)
    5dd0:	010001c4 	movi	r4,7
    5dd4:	20bec816 	blt	r4,r2,58f8 <__alt_mem_Onchip_SRAM+0xf80058f8>
    5dd8:	42000204 	addi	r8,r8,8
    5ddc:	003ecd06 	br	5914 <__alt_mem_Onchip_SRAM+0xf8005914>
    5de0:	d9002a17 	ldw	r4,168(sp)
    5de4:	d8002785 	stb	zero,158(sp)
    5de8:	203d2d16 	blt	r4,zero,52a0 <__alt_mem_Onchip_SRAM+0xf80052a0>
    5dec:	00bfdfc4 	movi	r2,-129
    5df0:	90a4703a 	and	r18,r18,r2
    5df4:	003a6106 	br	477c <__alt_mem_Onchip_SRAM+0xf800477c>
    5df8:	010000b4 	movhi	r4,2
    5dfc:	2120b384 	addi	r4,r4,-32050
    5e00:	d9002c15 	stw	r4,176(sp)
    5e04:	003bea06 	br	4db0 <__alt_mem_Onchip_SRAM+0xf8004db0>
    5e08:	d9002d17 	ldw	r4,180(sp)
    5e0c:	d9801e04 	addi	r6,sp,120
    5e10:	b80b883a 	mov	r5,r23
    5e14:	000bdbc0 	call	bdbc <__sprint_r>
    5e18:	103a7b1e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5e1c:	d8c02017 	ldw	r3,128(sp)
    5e20:	da000404 	addi	r8,sp,16
    5e24:	003d4106 	br	532c <__alt_mem_Onchip_SRAM+0xf800532c>
    5e28:	d8801f17 	ldw	r2,124(sp)
    5e2c:	014000b4 	movhi	r5,2
    5e30:	01000044 	movi	r4,1
    5e34:	18c00044 	addi	r3,r3,1
    5e38:	10800044 	addi	r2,r2,1
    5e3c:	2960ab04 	addi	r5,r5,-32084
    5e40:	41000115 	stw	r4,4(r8)
    5e44:	41400015 	stw	r5,0(r8)
    5e48:	d8c02015 	stw	r3,128(sp)
    5e4c:	d8801f15 	stw	r2,124(sp)
    5e50:	010001c4 	movi	r4,7
    5e54:	20805c16 	blt	r4,r2,5fc8 <___vfprintf_internal_r+0x1bd0>
    5e58:	42000204 	addi	r8,r8,8
    5e5c:	8800041e 	bne	r17,zero,5e70 <___vfprintf_internal_r+0x1a78>
    5e60:	d8803317 	ldw	r2,204(sp)
    5e64:	1000021e 	bne	r2,zero,5e70 <___vfprintf_internal_r+0x1a78>
    5e68:	9080004c 	andi	r2,r18,1
    5e6c:	103be726 	beq	r2,zero,4e0c <__alt_mem_Onchip_SRAM+0xf8004e0c>
    5e70:	d9003717 	ldw	r4,220(sp)
    5e74:	d8801f17 	ldw	r2,124(sp)
    5e78:	d9403417 	ldw	r5,208(sp)
    5e7c:	20c7883a 	add	r3,r4,r3
    5e80:	10800044 	addi	r2,r2,1
    5e84:	41000115 	stw	r4,4(r8)
    5e88:	41400015 	stw	r5,0(r8)
    5e8c:	d8c02015 	stw	r3,128(sp)
    5e90:	d8801f15 	stw	r2,124(sp)
    5e94:	010001c4 	movi	r4,7
    5e98:	20812116 	blt	r4,r2,6320 <___vfprintf_internal_r+0x1f28>
    5e9c:	42000204 	addi	r8,r8,8
    5ea0:	0463c83a 	sub	r17,zero,r17
    5ea4:	0440730e 	bge	zero,r17,6074 <___vfprintf_internal_r+0x1c7c>
    5ea8:	05800404 	movi	r22,16
    5eac:	b440860e 	bge	r22,r17,60c8 <___vfprintf_internal_r+0x1cd0>
    5eb0:	014000b4 	movhi	r5,2
    5eb4:	2960b384 	addi	r5,r5,-32050
    5eb8:	d9402c15 	stw	r5,176(sp)
    5ebc:	070001c4 	movi	fp,7
    5ec0:	dcc02d17 	ldw	r19,180(sp)
    5ec4:	00000306 	br	5ed4 <___vfprintf_internal_r+0x1adc>
    5ec8:	42000204 	addi	r8,r8,8
    5ecc:	8c7ffc04 	addi	r17,r17,-16
    5ed0:	b440800e 	bge	r22,r17,60d4 <___vfprintf_internal_r+0x1cdc>
    5ed4:	18c00404 	addi	r3,r3,16
    5ed8:	10800044 	addi	r2,r2,1
    5edc:	45000015 	stw	r20,0(r8)
    5ee0:	45800115 	stw	r22,4(r8)
    5ee4:	d8c02015 	stw	r3,128(sp)
    5ee8:	d8801f15 	stw	r2,124(sp)
    5eec:	e0bff60e 	bge	fp,r2,5ec8 <__alt_mem_Onchip_SRAM+0xf8005ec8>
    5ef0:	d9801e04 	addi	r6,sp,120
    5ef4:	b80b883a 	mov	r5,r23
    5ef8:	9809883a 	mov	r4,r19
    5efc:	000bdbc0 	call	bdbc <__sprint_r>
    5f00:	103a411e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5f04:	d8c02017 	ldw	r3,128(sp)
    5f08:	d8801f17 	ldw	r2,124(sp)
    5f0c:	da000404 	addi	r8,sp,16
    5f10:	003fee06 	br	5ecc <__alt_mem_Onchip_SRAM+0xf8005ecc>
    5f14:	00bfffc4 	movi	r2,-1
    5f18:	003a3f06 	br	4818 <__alt_mem_Onchip_SRAM+0xf8004818>
    5f1c:	008011c4 	movi	r2,71
    5f20:	1440b816 	blt	r2,r17,6204 <___vfprintf_internal_r+0x1e0c>
    5f24:	040000b4 	movhi	r16,2
    5f28:	84209d04 	addi	r16,r16,-32140
    5f2c:	00c000c4 	movi	r3,3
    5f30:	00bfdfc4 	movi	r2,-129
    5f34:	d8c02915 	stw	r3,164(sp)
    5f38:	90a4703a 	and	r18,r18,r2
    5f3c:	df002783 	ldbu	fp,158(sp)
    5f40:	d8c02b15 	stw	r3,172(sp)
    5f44:	d8002a15 	stw	zero,168(sp)
    5f48:	d8003215 	stw	zero,200(sp)
    5f4c:	003b0706 	br	4b6c <__alt_mem_Onchip_SRAM+0xf8004b6c>
    5f50:	d8c02e17 	ldw	r3,184(sp)
    5f54:	1cc00017 	ldw	r19,0(r3)
    5f58:	18c00104 	addi	r3,r3,4
    5f5c:	d8c02e15 	stw	r3,184(sp)
    5f60:	982dd7fa 	srai	r22,r19,31
    5f64:	b005883a 	mov	r2,r22
    5f68:	003a7706 	br	4948 <__alt_mem_Onchip_SRAM+0xf8004948>
    5f6c:	d8c02e17 	ldw	r3,184(sp)
    5f70:	d9002f17 	ldw	r4,188(sp)
    5f74:	18800017 	ldw	r2,0(r3)
    5f78:	18c00104 	addi	r3,r3,4
    5f7c:	d8c02e15 	stw	r3,184(sp)
    5f80:	11000015 	stw	r4,0(r2)
    5f84:	00395406 	br	44d8 <__alt_mem_Onchip_SRAM+0xf80044d8>
    5f88:	d9002e17 	ldw	r4,184(sp)
    5f8c:	002d883a 	mov	r22,zero
    5f90:	24c00017 	ldw	r19,0(r4)
    5f94:	21000104 	addi	r4,r4,4
    5f98:	d9002e15 	stw	r4,184(sp)
    5f9c:	003c0706 	br	4fbc <__alt_mem_Onchip_SRAM+0xf8004fbc>
    5fa0:	d9402e17 	ldw	r5,184(sp)
    5fa4:	d8c02a17 	ldw	r3,168(sp)
    5fa8:	002d883a 	mov	r22,zero
    5fac:	28800104 	addi	r2,r5,4
    5fb0:	2cc0000b 	ldhu	r19,0(r5)
    5fb4:	183dc10e 	bge	r3,zero,56bc <__alt_mem_Onchip_SRAM+0xf80056bc>
    5fb8:	003f7506 	br	5d90 <__alt_mem_Onchip_SRAM+0xf8005d90>
    5fbc:	040000b4 	movhi	r16,2
    5fc0:	84209b04 	addi	r16,r16,-32148
    5fc4:	003aa706 	br	4a64 <__alt_mem_Onchip_SRAM+0xf8004a64>
    5fc8:	d9002d17 	ldw	r4,180(sp)
    5fcc:	d9801e04 	addi	r6,sp,120
    5fd0:	b80b883a 	mov	r5,r23
    5fd4:	000bdbc0 	call	bdbc <__sprint_r>
    5fd8:	103a0b1e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    5fdc:	dc402617 	ldw	r17,152(sp)
    5fe0:	d8c02017 	ldw	r3,128(sp)
    5fe4:	da000404 	addi	r8,sp,16
    5fe8:	003f9c06 	br	5e5c <__alt_mem_Onchip_SRAM+0xf8005e5c>
    5fec:	ac400043 	ldbu	r17,1(r21)
    5ff0:	84000814 	ori	r16,r16,32
    5ff4:	ad400044 	addi	r21,r21,1
    5ff8:	8c403fcc 	andi	r17,r17,255
    5ffc:	8c40201c 	xori	r17,r17,128
    6000:	8c7fe004 	addi	r17,r17,-128
    6004:	00395e06 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    6008:	d8c02e15 	stw	r3,184(sp)
    600c:	0039883a 	mov	fp,zero
    6010:	003e3506 	br	58e8 <__alt_mem_Onchip_SRAM+0xf80058e8>
    6014:	d9002d17 	ldw	r4,180(sp)
    6018:	d9801e04 	addi	r6,sp,120
    601c:	b80b883a 	mov	r5,r23
    6020:	000bdbc0 	call	bdbc <__sprint_r>
    6024:	1039f81e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    6028:	d8c02017 	ldw	r3,128(sp)
    602c:	da000404 	addi	r8,sp,16
    6030:	003cd006 	br	5374 <__alt_mem_Onchip_SRAM+0xf8005374>
    6034:	8009883a 	mov	r4,r16
    6038:	df003d15 	stw	fp,244(sp)
    603c:	00020540 	call	2054 <strlen>
    6040:	d8802b15 	stw	r2,172(sp)
    6044:	da003d17 	ldw	r8,244(sp)
    6048:	103c200e 	bge	r2,zero,50cc <__alt_mem_Onchip_SRAM+0xf80050cc>
    604c:	0005883a 	mov	r2,zero
    6050:	003c1e06 	br	50cc <__alt_mem_Onchip_SRAM+0xf80050cc>
    6054:	d9002d17 	ldw	r4,180(sp)
    6058:	d9801e04 	addi	r6,sp,120
    605c:	b80b883a 	mov	r5,r23
    6060:	000bdbc0 	call	bdbc <__sprint_r>
    6064:	1039e81e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    6068:	d8c02017 	ldw	r3,128(sp)
    606c:	d8801f17 	ldw	r2,124(sp)
    6070:	da000404 	addi	r8,sp,16
    6074:	d9403317 	ldw	r5,204(sp)
    6078:	10800044 	addi	r2,r2,1
    607c:	44000015 	stw	r16,0(r8)
    6080:	28c7883a 	add	r3,r5,r3
    6084:	003b5b06 	br	4df4 <__alt_mem_Onchip_SRAM+0xf8004df4>
    6088:	010000b4 	movhi	r4,2
    608c:	2120b784 	addi	r4,r4,-32034
    6090:	d9003515 	stw	r4,212(sp)
    6094:	003af206 	br	4c60 <__alt_mem_Onchip_SRAM+0xf8004c60>
    6098:	013fffc4 	movi	r4,-1
    609c:	003a0806 	br	48c0 <__alt_mem_Onchip_SRAM+0xf80048c0>
    60a0:	0023883a 	mov	r17,zero
    60a4:	003d9d06 	br	571c <__alt_mem_Onchip_SRAM+0xf800571c>
    60a8:	d9002d17 	ldw	r4,180(sp)
    60ac:	d9801e04 	addi	r6,sp,120
    60b0:	b80b883a 	mov	r5,r23
    60b4:	000bdbc0 	call	bdbc <__sprint_r>
    60b8:	1039d31e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    60bc:	d8c02017 	ldw	r3,128(sp)
    60c0:	da000404 	addi	r8,sp,16
    60c4:	003d9406 	br	5718 <__alt_mem_Onchip_SRAM+0xf8005718>
    60c8:	010000b4 	movhi	r4,2
    60cc:	2120b384 	addi	r4,r4,-32050
    60d0:	d9002c15 	stw	r4,176(sp)
    60d4:	d9002c17 	ldw	r4,176(sp)
    60d8:	1c47883a 	add	r3,r3,r17
    60dc:	10800044 	addi	r2,r2,1
    60e0:	41000015 	stw	r4,0(r8)
    60e4:	44400115 	stw	r17,4(r8)
    60e8:	d8c02015 	stw	r3,128(sp)
    60ec:	d8801f15 	stw	r2,124(sp)
    60f0:	010001c4 	movi	r4,7
    60f4:	20bfd716 	blt	r4,r2,6054 <__alt_mem_Onchip_SRAM+0xf8006054>
    60f8:	42000204 	addi	r8,r8,8
    60fc:	003fdd06 	br	6074 <__alt_mem_Onchip_SRAM+0xf8006074>
    6100:	d9002d17 	ldw	r4,180(sp)
    6104:	d9801e04 	addi	r6,sp,120
    6108:	b80b883a 	mov	r5,r23
    610c:	000bdbc0 	call	bdbc <__sprint_r>
    6110:	1039bd1e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    6114:	d8802617 	ldw	r2,152(sp)
    6118:	d8c02017 	ldw	r3,128(sp)
    611c:	da000404 	addi	r8,sp,16
    6120:	003e1006 	br	5964 <__alt_mem_Onchip_SRAM+0xf8005964>
    6124:	00800044 	movi	r2,1
    6128:	10803fcc 	andi	r2,r2,255
    612c:	00c00044 	movi	r3,1
    6130:	10fa0d26 	beq	r2,r3,4968 <__alt_mem_Onchip_SRAM+0xf8004968>
    6134:	00c00084 	movi	r3,2
    6138:	10fbaf26 	beq	r2,r3,4ff8 <__alt_mem_Onchip_SRAM+0xf8004ff8>
    613c:	003a6d06 	br	4af4 <__alt_mem_Onchip_SRAM+0xf8004af4>
    6140:	010000b4 	movhi	r4,2
    6144:	2120b784 	addi	r4,r4,-32034
    6148:	d9003515 	stw	r4,212(sp)
    614c:	003b5406 	br	4ea0 <__alt_mem_Onchip_SRAM+0xf8004ea0>
    6150:	d8802a17 	ldw	r2,168(sp)
    6154:	00c00184 	movi	r3,6
    6158:	1880012e 	bgeu	r3,r2,6160 <___vfprintf_internal_r+0x1d68>
    615c:	1805883a 	mov	r2,r3
    6160:	d8802b15 	stw	r2,172(sp)
    6164:	1000ef16 	blt	r2,zero,6524 <___vfprintf_internal_r+0x212c>
    6168:	040000b4 	movhi	r16,2
    616c:	d8802915 	stw	r2,164(sp)
    6170:	dcc02e15 	stw	r19,184(sp)
    6174:	d8002a15 	stw	zero,168(sp)
    6178:	d8003215 	stw	zero,200(sp)
    617c:	8420a904 	addi	r16,r16,-32092
    6180:	0039883a 	mov	fp,zero
    6184:	003a8006 	br	4b88 <__alt_mem_Onchip_SRAM+0xf8004b88>
    6188:	0021883a 	mov	r16,zero
    618c:	003e0706 	br	59ac <__alt_mem_Onchip_SRAM+0xf80059ac>
    6190:	d9002d17 	ldw	r4,180(sp)
    6194:	d9801e04 	addi	r6,sp,120
    6198:	b80b883a 	mov	r5,r23
    619c:	000bdbc0 	call	bdbc <__sprint_r>
    61a0:	1039991e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    61a4:	d8802617 	ldw	r2,152(sp)
    61a8:	d9403317 	ldw	r5,204(sp)
    61ac:	d8c02017 	ldw	r3,128(sp)
    61b0:	da000404 	addi	r8,sp,16
    61b4:	2885c83a 	sub	r2,r5,r2
    61b8:	003dfb06 	br	59a8 <__alt_mem_Onchip_SRAM+0xf80059a8>
    61bc:	9080004c 	andi	r2,r18,1
    61c0:	103e8f1e 	bne	r2,zero,5c00 <__alt_mem_Onchip_SRAM+0xf8005c00>
    61c4:	d8802117 	ldw	r2,132(sp)
    61c8:	003e9e06 	br	5c44 <__alt_mem_Onchip_SRAM+0xf8005c44>
    61cc:	1025883a 	mov	r18,r2
    61d0:	0039883a 	mov	fp,zero
    61d4:	00800084 	movi	r2,2
    61d8:	003fd306 	br	6128 <__alt_mem_Onchip_SRAM+0xf8006128>
    61dc:	07000b44 	movi	fp,45
    61e0:	df002785 	stb	fp,158(sp)
    61e4:	003a1b06 	br	4a54 <__alt_mem_Onchip_SRAM+0xf8004a54>
    61e8:	00c00b44 	movi	r3,45
    61ec:	d8c02785 	stb	r3,158(sp)
    61f0:	d8802915 	stw	r2,164(sp)
    61f4:	dc802c17 	ldw	r18,176(sp)
    61f8:	d8002a15 	stw	zero,168(sp)
    61fc:	07000b44 	movi	fp,45
    6200:	003a5e06 	br	4b7c <__alt_mem_Onchip_SRAM+0xf8004b7c>
    6204:	040000b4 	movhi	r16,2
    6208:	84209e04 	addi	r16,r16,-32136
    620c:	003f4706 	br	5f2c <__alt_mem_Onchip_SRAM+0xf8005f2c>
    6210:	d9002e17 	ldw	r4,184(sp)
    6214:	d9402f17 	ldw	r5,188(sp)
    6218:	20800017 	ldw	r2,0(r4)
    621c:	21000104 	addi	r4,r4,4
    6220:	d9002e15 	stw	r4,184(sp)
    6224:	11400015 	stw	r5,0(r2)
    6228:	0038ab06 	br	44d8 <__alt_mem_Onchip_SRAM+0xf80044d8>
    622c:	dd802617 	ldw	r22,152(sp)
    6230:	00bfff44 	movi	r2,-3
    6234:	b0801c16 	blt	r22,r2,62a8 <___vfprintf_internal_r+0x1eb0>
    6238:	d9402a17 	ldw	r5,168(sp)
    623c:	2d801a16 	blt	r5,r22,62a8 <___vfprintf_internal_r+0x1eb0>
    6240:	dd803215 	stw	r22,200(sp)
    6244:	003e8906 	br	5c6c <__alt_mem_Onchip_SRAM+0xf8005c6c>
    6248:	010000b4 	movhi	r4,2
    624c:	2120b384 	addi	r4,r4,-32050
    6250:	d9002c15 	stw	r4,176(sp)
    6254:	003c9106 	br	549c <__alt_mem_Onchip_SRAM+0xf800549c>
    6258:	e005883a 	mov	r2,fp
    625c:	003e7906 	br	5c44 <__alt_mem_Onchip_SRAM+0xf8005c44>
    6260:	d9002a17 	ldw	r4,168(sp)
    6264:	df002783 	ldbu	fp,158(sp)
    6268:	dcc02e15 	stw	r19,184(sp)
    626c:	d9002915 	stw	r4,164(sp)
    6270:	d9002b15 	stw	r4,172(sp)
    6274:	d8002a15 	stw	zero,168(sp)
    6278:	d8003215 	stw	zero,200(sp)
    627c:	003a3b06 	br	4b6c <__alt_mem_Onchip_SRAM+0xf8004b6c>
    6280:	9080004c 	andi	r2,r18,1
    6284:	0039883a 	mov	fp,zero
    6288:	10000426 	beq	r2,zero,629c <___vfprintf_internal_r+0x1ea4>
    628c:	00800c04 	movi	r2,48
    6290:	dc001dc4 	addi	r16,sp,119
    6294:	d8801dc5 	stb	r2,119(sp)
    6298:	003b6406 	br	502c <__alt_mem_Onchip_SRAM+0xf800502c>
    629c:	d8002b15 	stw	zero,172(sp)
    62a0:	dc001e04 	addi	r16,sp,120
    62a4:	003a2b06 	br	4b54 <__alt_mem_Onchip_SRAM+0xf8004b54>
    62a8:	8c7fff84 	addi	r17,r17,-2
    62ac:	b5bfffc4 	addi	r22,r22,-1
    62b0:	dd802615 	stw	r22,152(sp)
    62b4:	dc4022c5 	stb	r17,139(sp)
    62b8:	b000bf16 	blt	r22,zero,65b8 <___vfprintf_internal_r+0x21c0>
    62bc:	00800ac4 	movi	r2,43
    62c0:	d8802305 	stb	r2,140(sp)
    62c4:	00800244 	movi	r2,9
    62c8:	15807016 	blt	r2,r22,648c <___vfprintf_internal_r+0x2094>
    62cc:	00800c04 	movi	r2,48
    62d0:	b5800c04 	addi	r22,r22,48
    62d4:	d8802345 	stb	r2,141(sp)
    62d8:	dd802385 	stb	r22,142(sp)
    62dc:	d88023c4 	addi	r2,sp,143
    62e0:	df0022c4 	addi	fp,sp,139
    62e4:	d8c03317 	ldw	r3,204(sp)
    62e8:	1739c83a 	sub	fp,r2,fp
    62ec:	d9003317 	ldw	r4,204(sp)
    62f0:	e0c7883a 	add	r3,fp,r3
    62f4:	df003a15 	stw	fp,232(sp)
    62f8:	d8c02b15 	stw	r3,172(sp)
    62fc:	00800044 	movi	r2,1
    6300:	1100b30e 	bge	r2,r4,65d0 <___vfprintf_internal_r+0x21d8>
    6304:	d8c02b17 	ldw	r3,172(sp)
    6308:	18c00044 	addi	r3,r3,1
    630c:	d8c02b15 	stw	r3,172(sp)
    6310:	1805883a 	mov	r2,r3
    6314:	1800ac16 	blt	r3,zero,65c8 <___vfprintf_internal_r+0x21d0>
    6318:	d8003215 	stw	zero,200(sp)
    631c:	003e5d06 	br	5c94 <__alt_mem_Onchip_SRAM+0xf8005c94>
    6320:	d9002d17 	ldw	r4,180(sp)
    6324:	d9801e04 	addi	r6,sp,120
    6328:	b80b883a 	mov	r5,r23
    632c:	000bdbc0 	call	bdbc <__sprint_r>
    6330:	1039351e 	bne	r2,zero,4808 <__alt_mem_Onchip_SRAM+0xf8004808>
    6334:	dc402617 	ldw	r17,152(sp)
    6338:	d8c02017 	ldw	r3,128(sp)
    633c:	d8801f17 	ldw	r2,124(sp)
    6340:	da000404 	addi	r8,sp,16
    6344:	003ed606 	br	5ea0 <__alt_mem_Onchip_SRAM+0xf8005ea0>
    6348:	182b883a 	mov	r21,r3
    634c:	d8002a15 	stw	zero,168(sp)
    6350:	00388c06 	br	4584 <__alt_mem_Onchip_SRAM+0xf8004584>
    6354:	d8802a17 	ldw	r2,168(sp)
    6358:	103e071e 	bne	r2,zero,5b78 <__alt_mem_Onchip_SRAM+0xf8005b78>
    635c:	dc002a15 	stw	r16,168(sp)
    6360:	003e0506 	br	5b78 <__alt_mem_Onchip_SRAM+0xf8005b78>
    6364:	d9002a17 	ldw	r4,168(sp)
    6368:	20c00044 	addi	r3,r4,1
    636c:	003e0f06 	br	5bac <__alt_mem_Onchip_SRAM+0xf8005bac>
    6370:	01400184 	movi	r5,6
    6374:	d9402a15 	stw	r5,168(sp)
    6378:	003dff06 	br	5b78 <__alt_mem_Onchip_SRAM+0xf8005b78>
    637c:	d8802104 	addi	r2,sp,132
    6380:	d8800315 	stw	r2,12(sp)
    6384:	d8802504 	addi	r2,sp,148
    6388:	d8800215 	stw	r2,8(sp)
    638c:	d8802604 	addi	r2,sp,152
    6390:	d8800115 	stw	r2,4(sp)
    6394:	d8802a17 	ldw	r2,168(sp)
    6398:	d9403617 	ldw	r5,216(sp)
    639c:	d9002d17 	ldw	r4,180(sp)
    63a0:	d8800015 	stw	r2,0(sp)
    63a4:	01c000c4 	movi	r7,3
    63a8:	980d883a 	mov	r6,r19
    63ac:	da003d15 	stw	r8,244(sp)
    63b0:	0006b280 	call	6b28 <_dtoa_r>
    63b4:	d8c02a17 	ldw	r3,168(sp)
    63b8:	da003d17 	ldw	r8,244(sp)
    63bc:	1021883a 	mov	r16,r2
    63c0:	10f9883a 	add	fp,r2,r3
    63c4:	81000007 	ldb	r4,0(r16)
    63c8:	00800c04 	movi	r2,48
    63cc:	20805e26 	beq	r4,r2,6548 <___vfprintf_internal_r+0x2150>
    63d0:	d8c02617 	ldw	r3,152(sp)
    63d4:	e0f9883a 	add	fp,fp,r3
    63d8:	003e0a06 	br	5c04 <__alt_mem_Onchip_SRAM+0xf8005c04>
    63dc:	00c00b44 	movi	r3,45
    63e0:	24e0003c 	xorhi	r19,r4,32768
    63e4:	d8c02905 	stb	r3,164(sp)
    63e8:	003de906 	br	5b90 <__alt_mem_Onchip_SRAM+0xf8005b90>
    63ec:	d8c03217 	ldw	r3,200(sp)
    63f0:	00c07a0e 	bge	zero,r3,65dc <___vfprintf_internal_r+0x21e4>
    63f4:	00800044 	movi	r2,1
    63f8:	d9003317 	ldw	r4,204(sp)
    63fc:	1105883a 	add	r2,r2,r4
    6400:	d8802b15 	stw	r2,172(sp)
    6404:	10004e16 	blt	r2,zero,6540 <___vfprintf_internal_r+0x2148>
    6408:	044019c4 	movi	r17,103
    640c:	003e2106 	br	5c94 <__alt_mem_Onchip_SRAM+0xf8005c94>
    6410:	d9002a17 	ldw	r4,168(sp)
    6414:	d8802104 	addi	r2,sp,132
    6418:	d8800315 	stw	r2,12(sp)
    641c:	d9000015 	stw	r4,0(sp)
    6420:	d8802504 	addi	r2,sp,148
    6424:	d9403617 	ldw	r5,216(sp)
    6428:	d9002d17 	ldw	r4,180(sp)
    642c:	d8800215 	stw	r2,8(sp)
    6430:	d8802604 	addi	r2,sp,152
    6434:	d8800115 	stw	r2,4(sp)
    6438:	01c000c4 	movi	r7,3
    643c:	980d883a 	mov	r6,r19
    6440:	da003d15 	stw	r8,244(sp)
    6444:	0006b280 	call	6b28 <_dtoa_r>
    6448:	d8c02a17 	ldw	r3,168(sp)
    644c:	da003d17 	ldw	r8,244(sp)
    6450:	1021883a 	mov	r16,r2
    6454:	00801184 	movi	r2,70
    6458:	80f9883a 	add	fp,r16,r3
    645c:	88bfd926 	beq	r17,r2,63c4 <__alt_mem_Onchip_SRAM+0xf80063c4>
    6460:	003de806 	br	5c04 <__alt_mem_Onchip_SRAM+0xf8005c04>
    6464:	d9002a17 	ldw	r4,168(sp)
    6468:	00c04d0e 	bge	zero,r3,65a0 <___vfprintf_internal_r+0x21a8>
    646c:	2000441e 	bne	r4,zero,6580 <___vfprintf_internal_r+0x2188>
    6470:	9480004c 	andi	r18,r18,1
    6474:	9000421e 	bne	r18,zero,6580 <___vfprintf_internal_r+0x2188>
    6478:	1805883a 	mov	r2,r3
    647c:	18006f16 	blt	r3,zero,663c <___vfprintf_internal_r+0x2244>
    6480:	d8c03217 	ldw	r3,200(sp)
    6484:	d8c02b15 	stw	r3,172(sp)
    6488:	003e0206 	br	5c94 <__alt_mem_Onchip_SRAM+0xf8005c94>
    648c:	df0022c4 	addi	fp,sp,139
    6490:	dc002a15 	stw	r16,168(sp)
    6494:	4027883a 	mov	r19,r8
    6498:	e021883a 	mov	r16,fp
    649c:	b009883a 	mov	r4,r22
    64a0:	01400284 	movi	r5,10
    64a4:	00014380 	call	1438 <__modsi3>
    64a8:	10800c04 	addi	r2,r2,48
    64ac:	843fffc4 	addi	r16,r16,-1
    64b0:	b009883a 	mov	r4,r22
    64b4:	01400284 	movi	r5,10
    64b8:	80800005 	stb	r2,0(r16)
    64bc:	00013b40 	call	13b4 <__divsi3>
    64c0:	102d883a 	mov	r22,r2
    64c4:	00800244 	movi	r2,9
    64c8:	15bff416 	blt	r2,r22,649c <__alt_mem_Onchip_SRAM+0xf800649c>
    64cc:	9811883a 	mov	r8,r19
    64d0:	b0800c04 	addi	r2,r22,48
    64d4:	8027883a 	mov	r19,r16
    64d8:	997fffc4 	addi	r5,r19,-1
    64dc:	98bfffc5 	stb	r2,-1(r19)
    64e0:	dc002a17 	ldw	r16,168(sp)
    64e4:	2f006d2e 	bgeu	r5,fp,669c <___vfprintf_internal_r+0x22a4>
    64e8:	d9c02384 	addi	r7,sp,142
    64ec:	3ccfc83a 	sub	r7,r7,r19
    64f0:	d9002344 	addi	r4,sp,141
    64f4:	e1cf883a 	add	r7,fp,r7
    64f8:	00000106 	br	6500 <___vfprintf_internal_r+0x2108>
    64fc:	28800003 	ldbu	r2,0(r5)
    6500:	20800005 	stb	r2,0(r4)
    6504:	21000044 	addi	r4,r4,1
    6508:	29400044 	addi	r5,r5,1
    650c:	393ffb1e 	bne	r7,r4,64fc <__alt_mem_Onchip_SRAM+0xf80064fc>
    6510:	d8802304 	addi	r2,sp,140
    6514:	14c5c83a 	sub	r2,r2,r19
    6518:	d8c02344 	addi	r3,sp,141
    651c:	1885883a 	add	r2,r3,r2
    6520:	003f7006 	br	62e4 <__alt_mem_Onchip_SRAM+0xf80062e4>
    6524:	0005883a 	mov	r2,zero
    6528:	003f0f06 	br	6168 <__alt_mem_Onchip_SRAM+0xf8006168>
    652c:	d8c03217 	ldw	r3,200(sp)
    6530:	18c00044 	addi	r3,r3,1
    6534:	d8c02b15 	stw	r3,172(sp)
    6538:	1805883a 	mov	r2,r3
    653c:	183fb20e 	bge	r3,zero,6408 <__alt_mem_Onchip_SRAM+0xf8006408>
    6540:	0005883a 	mov	r2,zero
    6544:	003fb006 	br	6408 <__alt_mem_Onchip_SRAM+0xf8006408>
    6548:	d9003617 	ldw	r4,216(sp)
    654c:	000d883a 	mov	r6,zero
    6550:	000f883a 	mov	r7,zero
    6554:	980b883a 	mov	r5,r19
    6558:	d8c03c15 	stw	r3,240(sp)
    655c:	da003d15 	stw	r8,244(sp)
    6560:	00107d40 	call	107d4 <__eqdf2>
    6564:	d8c03c17 	ldw	r3,240(sp)
    6568:	da003d17 	ldw	r8,244(sp)
    656c:	103f9826 	beq	r2,zero,63d0 <__alt_mem_Onchip_SRAM+0xf80063d0>
    6570:	00800044 	movi	r2,1
    6574:	10c7c83a 	sub	r3,r2,r3
    6578:	d8c02615 	stw	r3,152(sp)
    657c:	003f9506 	br	63d4 <__alt_mem_Onchip_SRAM+0xf80063d4>
    6580:	d9002a17 	ldw	r4,168(sp)
    6584:	d8c03217 	ldw	r3,200(sp)
    6588:	20800044 	addi	r2,r4,1
    658c:	1885883a 	add	r2,r3,r2
    6590:	d8802b15 	stw	r2,172(sp)
    6594:	103dbf0e 	bge	r2,zero,5c94 <__alt_mem_Onchip_SRAM+0xf8005c94>
    6598:	0005883a 	mov	r2,zero
    659c:	003dbd06 	br	5c94 <__alt_mem_Onchip_SRAM+0xf8005c94>
    65a0:	2000201e 	bne	r4,zero,6624 <___vfprintf_internal_r+0x222c>
    65a4:	9480004c 	andi	r18,r18,1
    65a8:	90001e1e 	bne	r18,zero,6624 <___vfprintf_internal_r+0x222c>
    65ac:	00800044 	movi	r2,1
    65b0:	d8802b15 	stw	r2,172(sp)
    65b4:	003db706 	br	5c94 <__alt_mem_Onchip_SRAM+0xf8005c94>
    65b8:	00800b44 	movi	r2,45
    65bc:	05adc83a 	sub	r22,zero,r22
    65c0:	d8802305 	stb	r2,140(sp)
    65c4:	003f3f06 	br	62c4 <__alt_mem_Onchip_SRAM+0xf80062c4>
    65c8:	0005883a 	mov	r2,zero
    65cc:	003f5206 	br	6318 <__alt_mem_Onchip_SRAM+0xf8006318>
    65d0:	90a4703a 	and	r18,r18,r2
    65d4:	903f4e26 	beq	r18,zero,6310 <__alt_mem_Onchip_SRAM+0xf8006310>
    65d8:	003f4a06 	br	6304 <__alt_mem_Onchip_SRAM+0xf8006304>
    65dc:	00800084 	movi	r2,2
    65e0:	10c5c83a 	sub	r2,r2,r3
    65e4:	003f8406 	br	63f8 <__alt_mem_Onchip_SRAM+0xf80063f8>
    65e8:	d9402e17 	ldw	r5,184(sp)
    65ec:	d9002e17 	ldw	r4,184(sp)
    65f0:	ac400043 	ldbu	r17,1(r21)
    65f4:	29400017 	ldw	r5,0(r5)
    65f8:	20800104 	addi	r2,r4,4
    65fc:	d8802e15 	stw	r2,184(sp)
    6600:	d9402a15 	stw	r5,168(sp)
    6604:	182b883a 	mov	r21,r3
    6608:	283e7b0e 	bge	r5,zero,5ff8 <__alt_mem_Onchip_SRAM+0xf8005ff8>
    660c:	8c403fcc 	andi	r17,r17,255
    6610:	017fffc4 	movi	r5,-1
    6614:	8c40201c 	xori	r17,r17,128
    6618:	d9402a15 	stw	r5,168(sp)
    661c:	8c7fe004 	addi	r17,r17,-128
    6620:	0037d706 	br	4580 <__alt_mem_Onchip_SRAM+0xf8004580>
    6624:	d8c02a17 	ldw	r3,168(sp)
    6628:	18c00084 	addi	r3,r3,2
    662c:	d8c02b15 	stw	r3,172(sp)
    6630:	1805883a 	mov	r2,r3
    6634:	183d970e 	bge	r3,zero,5c94 <__alt_mem_Onchip_SRAM+0xf8005c94>
    6638:	003fd706 	br	6598 <__alt_mem_Onchip_SRAM+0xf8006598>
    663c:	0005883a 	mov	r2,zero
    6640:	003f8f06 	br	6480 <__alt_mem_Onchip_SRAM+0xf8006480>
    6644:	9080004c 	andi	r2,r18,1
    6648:	103f821e 	bne	r2,zero,6454 <__alt_mem_Onchip_SRAM+0xf8006454>
    664c:	d8802117 	ldw	r2,132(sp)
    6650:	1405c83a 	sub	r2,r2,r16
    6654:	d8803315 	stw	r2,204(sp)
    6658:	b47ef426 	beq	r22,r17,622c <__alt_mem_Onchip_SRAM+0xf800622c>
    665c:	dd802617 	ldw	r22,152(sp)
    6660:	003f1206 	br	62ac <__alt_mem_Onchip_SRAM+0xf80062ac>
    6664:	d8c02b03 	ldbu	r3,172(sp)
    6668:	d8c02785 	stb	r3,158(sp)
    666c:	0038df06 	br	49ec <__alt_mem_Onchip_SRAM+0xf80049ec>
    6670:	d8c02b03 	ldbu	r3,172(sp)
    6674:	d8c02785 	stb	r3,158(sp)
    6678:	0038aa06 	br	4924 <__alt_mem_Onchip_SRAM+0xf8004924>
    667c:	d8c02b03 	ldbu	r3,172(sp)
    6680:	d8c02785 	stb	r3,158(sp)
    6684:	003a4306 	br	4f94 <__alt_mem_Onchip_SRAM+0xf8004f94>
    6688:	d8c02b03 	ldbu	r3,172(sp)
    668c:	d8c02785 	stb	r3,158(sp)
    6690:	003af506 	br	5268 <__alt_mem_Onchip_SRAM+0xf8005268>
    6694:	0005883a 	mov	r2,zero
    6698:	003d7b06 	br	5c88 <__alt_mem_Onchip_SRAM+0xf8005c88>
    669c:	d8802344 	addi	r2,sp,141
    66a0:	003f1006 	br	62e4 <__alt_mem_Onchip_SRAM+0xf80062e4>
    66a4:	d8c02b03 	ldbu	r3,172(sp)
    66a8:	d8c02785 	stb	r3,158(sp)
    66ac:	0038fd06 	br	4aa4 <__alt_mem_Onchip_SRAM+0xf8004aa4>
    66b0:	d8c02b03 	ldbu	r3,172(sp)
    66b4:	d8c02785 	stb	r3,158(sp)
    66b8:	003a9706 	br	5118 <__alt_mem_Onchip_SRAM+0xf8005118>
    66bc:	d8c02b03 	ldbu	r3,172(sp)
    66c0:	d8c02785 	stb	r3,158(sp)
    66c4:	003a1806 	br	4f28 <__alt_mem_Onchip_SRAM+0xf8004f28>
    66c8:	d8c02b03 	ldbu	r3,172(sp)
    66cc:	d8c02785 	stb	r3,158(sp)
    66d0:	003abe06 	br	51cc <__alt_mem_Onchip_SRAM+0xf80051cc>

000066d4 <__vfprintf_internal>:
    66d4:	008000b4 	movhi	r2,2
    66d8:	10a88304 	addi	r2,r2,-24052
    66dc:	300f883a 	mov	r7,r6
    66e0:	280d883a 	mov	r6,r5
    66e4:	200b883a 	mov	r5,r4
    66e8:	11000017 	ldw	r4,0(r2)
    66ec:	00043f81 	jmpi	43f8 <___vfprintf_internal_r>

000066f0 <__sbprintf>:
    66f0:	2880030b 	ldhu	r2,12(r5)
    66f4:	2ac01917 	ldw	r11,100(r5)
    66f8:	2a80038b 	ldhu	r10,14(r5)
    66fc:	2a400717 	ldw	r9,28(r5)
    6700:	2a000917 	ldw	r8,36(r5)
    6704:	defee204 	addi	sp,sp,-1144
    6708:	00c10004 	movi	r3,1024
    670c:	dc011a15 	stw	r16,1128(sp)
    6710:	10bfff4c 	andi	r2,r2,65533
    6714:	2821883a 	mov	r16,r5
    6718:	d8cb883a 	add	r5,sp,r3
    671c:	dc811c15 	stw	r18,1136(sp)
    6720:	dc411b15 	stw	r17,1132(sp)
    6724:	dfc11d15 	stw	ra,1140(sp)
    6728:	2025883a 	mov	r18,r4
    672c:	d881030d 	sth	r2,1036(sp)
    6730:	dac11915 	stw	r11,1124(sp)
    6734:	da81038d 	sth	r10,1038(sp)
    6738:	da410715 	stw	r9,1052(sp)
    673c:	da010915 	stw	r8,1060(sp)
    6740:	dec10015 	stw	sp,1024(sp)
    6744:	dec10415 	stw	sp,1040(sp)
    6748:	d8c10215 	stw	r3,1032(sp)
    674c:	d8c10515 	stw	r3,1044(sp)
    6750:	d8010615 	stw	zero,1048(sp)
    6754:	00043f80 	call	43f8 <___vfprintf_internal_r>
    6758:	1023883a 	mov	r17,r2
    675c:	10000416 	blt	r2,zero,6770 <__sbprintf+0x80>
    6760:	d9410004 	addi	r5,sp,1024
    6764:	9009883a 	mov	r4,r18
    6768:	00083cc0 	call	83cc <_fflush_r>
    676c:	10000d1e 	bne	r2,zero,67a4 <__sbprintf+0xb4>
    6770:	d881030b 	ldhu	r2,1036(sp)
    6774:	1080100c 	andi	r2,r2,64
    6778:	10000326 	beq	r2,zero,6788 <__sbprintf+0x98>
    677c:	8080030b 	ldhu	r2,12(r16)
    6780:	10801014 	ori	r2,r2,64
    6784:	8080030d 	sth	r2,12(r16)
    6788:	8805883a 	mov	r2,r17
    678c:	dfc11d17 	ldw	ra,1140(sp)
    6790:	dc811c17 	ldw	r18,1136(sp)
    6794:	dc411b17 	ldw	r17,1132(sp)
    6798:	dc011a17 	ldw	r16,1128(sp)
    679c:	dec11e04 	addi	sp,sp,1144
    67a0:	f800283a 	ret
    67a4:	047fffc4 	movi	r17,-1
    67a8:	003ff106 	br	6770 <__alt_mem_Onchip_SRAM+0xf8006770>

000067ac <__swsetup_r>:
    67ac:	008000b4 	movhi	r2,2
    67b0:	defffd04 	addi	sp,sp,-12
    67b4:	10a88304 	addi	r2,r2,-24052
    67b8:	dc400115 	stw	r17,4(sp)
    67bc:	2023883a 	mov	r17,r4
    67c0:	11000017 	ldw	r4,0(r2)
    67c4:	dc000015 	stw	r16,0(sp)
    67c8:	dfc00215 	stw	ra,8(sp)
    67cc:	2821883a 	mov	r16,r5
    67d0:	20000226 	beq	r4,zero,67dc <__swsetup_r+0x30>
    67d4:	20800e17 	ldw	r2,56(r4)
    67d8:	10003126 	beq	r2,zero,68a0 <__swsetup_r+0xf4>
    67dc:	8080030b 	ldhu	r2,12(r16)
    67e0:	10c0020c 	andi	r3,r2,8
    67e4:	1009883a 	mov	r4,r2
    67e8:	18000f26 	beq	r3,zero,6828 <__swsetup_r+0x7c>
    67ec:	80c00417 	ldw	r3,16(r16)
    67f0:	18001526 	beq	r3,zero,6848 <__swsetup_r+0x9c>
    67f4:	1100004c 	andi	r4,r2,1
    67f8:	20001c1e 	bne	r4,zero,686c <__swsetup_r+0xc0>
    67fc:	1080008c 	andi	r2,r2,2
    6800:	1000291e 	bne	r2,zero,68a8 <__swsetup_r+0xfc>
    6804:	80800517 	ldw	r2,20(r16)
    6808:	80800215 	stw	r2,8(r16)
    680c:	18001c26 	beq	r3,zero,6880 <__swsetup_r+0xd4>
    6810:	0005883a 	mov	r2,zero
    6814:	dfc00217 	ldw	ra,8(sp)
    6818:	dc400117 	ldw	r17,4(sp)
    681c:	dc000017 	ldw	r16,0(sp)
    6820:	dec00304 	addi	sp,sp,12
    6824:	f800283a 	ret
    6828:	2080040c 	andi	r2,r4,16
    682c:	10002e26 	beq	r2,zero,68e8 <__swsetup_r+0x13c>
    6830:	2080010c 	andi	r2,r4,4
    6834:	10001e1e 	bne	r2,zero,68b0 <__swsetup_r+0x104>
    6838:	80c00417 	ldw	r3,16(r16)
    683c:	20800214 	ori	r2,r4,8
    6840:	8080030d 	sth	r2,12(r16)
    6844:	183feb1e 	bne	r3,zero,67f4 <__alt_mem_Onchip_SRAM+0xf80067f4>
    6848:	1100a00c 	andi	r4,r2,640
    684c:	01408004 	movi	r5,512
    6850:	217fe826 	beq	r4,r5,67f4 <__alt_mem_Onchip_SRAM+0xf80067f4>
    6854:	800b883a 	mov	r5,r16
    6858:	8809883a 	mov	r4,r17
    685c:	0008efc0 	call	8efc <__smakebuf_r>
    6860:	8080030b 	ldhu	r2,12(r16)
    6864:	80c00417 	ldw	r3,16(r16)
    6868:	003fe206 	br	67f4 <__alt_mem_Onchip_SRAM+0xf80067f4>
    686c:	80800517 	ldw	r2,20(r16)
    6870:	80000215 	stw	zero,8(r16)
    6874:	0085c83a 	sub	r2,zero,r2
    6878:	80800615 	stw	r2,24(r16)
    687c:	183fe41e 	bne	r3,zero,6810 <__alt_mem_Onchip_SRAM+0xf8006810>
    6880:	80c0030b 	ldhu	r3,12(r16)
    6884:	0005883a 	mov	r2,zero
    6888:	1900200c 	andi	r4,r3,128
    688c:	203fe126 	beq	r4,zero,6814 <__alt_mem_Onchip_SRAM+0xf8006814>
    6890:	18c01014 	ori	r3,r3,64
    6894:	80c0030d 	sth	r3,12(r16)
    6898:	00bfffc4 	movi	r2,-1
    689c:	003fdd06 	br	6814 <__alt_mem_Onchip_SRAM+0xf8006814>
    68a0:	00087b80 	call	87b8 <__sinit>
    68a4:	003fcd06 	br	67dc <__alt_mem_Onchip_SRAM+0xf80067dc>
    68a8:	0005883a 	mov	r2,zero
    68ac:	003fd606 	br	6808 <__alt_mem_Onchip_SRAM+0xf8006808>
    68b0:	81400c17 	ldw	r5,48(r16)
    68b4:	28000626 	beq	r5,zero,68d0 <__swsetup_r+0x124>
    68b8:	80801004 	addi	r2,r16,64
    68bc:	28800326 	beq	r5,r2,68cc <__swsetup_r+0x120>
    68c0:	8809883a 	mov	r4,r17
    68c4:	000892c0 	call	892c <_free_r>
    68c8:	8100030b 	ldhu	r4,12(r16)
    68cc:	80000c15 	stw	zero,48(r16)
    68d0:	80c00417 	ldw	r3,16(r16)
    68d4:	00bff6c4 	movi	r2,-37
    68d8:	1108703a 	and	r4,r2,r4
    68dc:	80000115 	stw	zero,4(r16)
    68e0:	80c00015 	stw	r3,0(r16)
    68e4:	003fd506 	br	683c <__alt_mem_Onchip_SRAM+0xf800683c>
    68e8:	00800244 	movi	r2,9
    68ec:	88800015 	stw	r2,0(r17)
    68f0:	20801014 	ori	r2,r4,64
    68f4:	8080030d 	sth	r2,12(r16)
    68f8:	00bfffc4 	movi	r2,-1
    68fc:	003fc506 	br	6814 <__alt_mem_Onchip_SRAM+0xf8006814>

00006900 <quorem>:
    6900:	defff204 	addi	sp,sp,-56
    6904:	ddc00b15 	stw	r23,44(sp)
    6908:	20800417 	ldw	r2,16(r4)
    690c:	2dc00417 	ldw	r23,16(r5)
    6910:	dfc00d15 	stw	ra,52(sp)
    6914:	df000c15 	stw	fp,48(sp)
    6918:	dd800a15 	stw	r22,40(sp)
    691c:	dd400915 	stw	r21,36(sp)
    6920:	dd000815 	stw	r20,32(sp)
    6924:	dcc00715 	stw	r19,28(sp)
    6928:	dc800615 	stw	r18,24(sp)
    692c:	dc400515 	stw	r17,20(sp)
    6930:	dc000415 	stw	r16,16(sp)
    6934:	15c07a16 	blt	r2,r23,6b20 <quorem+0x220>
    6938:	bdffffc4 	addi	r23,r23,-1
    693c:	bde9883a 	add	r20,r23,r23
    6940:	28c00504 	addi	r3,r5,20
    6944:	a529883a 	add	r20,r20,r20
    6948:	1d39883a 	add	fp,r3,r20
    694c:	24c00504 	addi	r19,r4,20
    6950:	d9400215 	stw	r5,8(sp)
    6954:	9d29883a 	add	r20,r19,r20
    6958:	e1400017 	ldw	r5,0(fp)
    695c:	d9000015 	stw	r4,0(sp)
    6960:	a1000017 	ldw	r4,0(r20)
    6964:	29400044 	addi	r5,r5,1
    6968:	d8c00115 	stw	r3,4(sp)
    696c:	dd000315 	stw	r20,12(sp)
    6970:	00014ac0 	call	14ac <__udivsi3>
    6974:	1025883a 	mov	r18,r2
    6978:	10003026 	beq	r2,zero,6a3c <quorem+0x13c>
    697c:	dc400117 	ldw	r17,4(sp)
    6980:	9829883a 	mov	r20,r19
    6984:	002d883a 	mov	r22,zero
    6988:	0021883a 	mov	r16,zero
    698c:	8d400017 	ldw	r21,0(r17)
    6990:	900b883a 	mov	r5,r18
    6994:	8c400104 	addi	r17,r17,4
    6998:	a93fffcc 	andi	r4,r21,65535
    699c:	00015680 	call	1568 <__mulsi3>
    69a0:	a808d43a 	srli	r4,r21,16
    69a4:	900b883a 	mov	r5,r18
    69a8:	15ad883a 	add	r22,r2,r22
    69ac:	00015680 	call	1568 <__mulsi3>
    69b0:	a1000017 	ldw	r4,0(r20)
    69b4:	b00cd43a 	srli	r6,r22,16
    69b8:	b0ffffcc 	andi	r3,r22,65535
    69bc:	217fffcc 	andi	r5,r4,65535
    69c0:	2c21883a 	add	r16,r5,r16
    69c4:	80c7c83a 	sub	r3,r16,r3
    69c8:	2008d43a 	srli	r4,r4,16
    69cc:	1185883a 	add	r2,r2,r6
    69d0:	1821d43a 	srai	r16,r3,16
    69d4:	117fffcc 	andi	r5,r2,65535
    69d8:	2149c83a 	sub	r4,r4,r5
    69dc:	2421883a 	add	r16,r4,r16
    69e0:	8008943a 	slli	r4,r16,16
    69e4:	18ffffcc 	andi	r3,r3,65535
    69e8:	102cd43a 	srli	r22,r2,16
    69ec:	20c8b03a 	or	r4,r4,r3
    69f0:	a1000015 	stw	r4,0(r20)
    69f4:	8021d43a 	srai	r16,r16,16
    69f8:	a5000104 	addi	r20,r20,4
    69fc:	e47fe32e 	bgeu	fp,r17,698c <__alt_mem_Onchip_SRAM+0xf800698c>
    6a00:	d8c00317 	ldw	r3,12(sp)
    6a04:	18800017 	ldw	r2,0(r3)
    6a08:	10000c1e 	bne	r2,zero,6a3c <quorem+0x13c>
    6a0c:	18bfff04 	addi	r2,r3,-4
    6a10:	9880082e 	bgeu	r19,r2,6a34 <quorem+0x134>
    6a14:	18ffff17 	ldw	r3,-4(r3)
    6a18:	18000326 	beq	r3,zero,6a28 <quorem+0x128>
    6a1c:	00000506 	br	6a34 <quorem+0x134>
    6a20:	10c00017 	ldw	r3,0(r2)
    6a24:	1800031e 	bne	r3,zero,6a34 <quorem+0x134>
    6a28:	10bfff04 	addi	r2,r2,-4
    6a2c:	bdffffc4 	addi	r23,r23,-1
    6a30:	98bffb36 	bltu	r19,r2,6a20 <__alt_mem_Onchip_SRAM+0xf8006a20>
    6a34:	d8c00017 	ldw	r3,0(sp)
    6a38:	1dc00415 	stw	r23,16(r3)
    6a3c:	d9400217 	ldw	r5,8(sp)
    6a40:	d9000017 	ldw	r4,0(sp)
    6a44:	0009d900 	call	9d90 <__mcmp>
    6a48:	10002816 	blt	r2,zero,6aec <quorem+0x1ec>
    6a4c:	dc400117 	ldw	r17,4(sp)
    6a50:	94800044 	addi	r18,r18,1
    6a54:	980d883a 	mov	r6,r19
    6a58:	0007883a 	mov	r3,zero
    6a5c:	31000017 	ldw	r4,0(r6)
    6a60:	89400017 	ldw	r5,0(r17)
    6a64:	31800104 	addi	r6,r6,4
    6a68:	20bfffcc 	andi	r2,r4,65535
    6a6c:	10c7883a 	add	r3,r2,r3
    6a70:	28bfffcc 	andi	r2,r5,65535
    6a74:	1885c83a 	sub	r2,r3,r2
    6a78:	280ad43a 	srli	r5,r5,16
    6a7c:	2008d43a 	srli	r4,r4,16
    6a80:	1007d43a 	srai	r3,r2,16
    6a84:	10bfffcc 	andi	r2,r2,65535
    6a88:	2149c83a 	sub	r4,r4,r5
    6a8c:	20c9883a 	add	r4,r4,r3
    6a90:	200a943a 	slli	r5,r4,16
    6a94:	8c400104 	addi	r17,r17,4
    6a98:	2007d43a 	srai	r3,r4,16
    6a9c:	2884b03a 	or	r2,r5,r2
    6aa0:	30bfff15 	stw	r2,-4(r6)
    6aa4:	e47fed2e 	bgeu	fp,r17,6a5c <__alt_mem_Onchip_SRAM+0xf8006a5c>
    6aa8:	bdc5883a 	add	r2,r23,r23
    6aac:	1085883a 	add	r2,r2,r2
    6ab0:	9887883a 	add	r3,r19,r2
    6ab4:	18800017 	ldw	r2,0(r3)
    6ab8:	10000c1e 	bne	r2,zero,6aec <quorem+0x1ec>
    6abc:	18bfff04 	addi	r2,r3,-4
    6ac0:	9880082e 	bgeu	r19,r2,6ae4 <quorem+0x1e4>
    6ac4:	18ffff17 	ldw	r3,-4(r3)
    6ac8:	18000326 	beq	r3,zero,6ad8 <quorem+0x1d8>
    6acc:	00000506 	br	6ae4 <quorem+0x1e4>
    6ad0:	10c00017 	ldw	r3,0(r2)
    6ad4:	1800031e 	bne	r3,zero,6ae4 <quorem+0x1e4>
    6ad8:	10bfff04 	addi	r2,r2,-4
    6adc:	bdffffc4 	addi	r23,r23,-1
    6ae0:	98bffb36 	bltu	r19,r2,6ad0 <__alt_mem_Onchip_SRAM+0xf8006ad0>
    6ae4:	d8c00017 	ldw	r3,0(sp)
    6ae8:	1dc00415 	stw	r23,16(r3)
    6aec:	9005883a 	mov	r2,r18
    6af0:	dfc00d17 	ldw	ra,52(sp)
    6af4:	df000c17 	ldw	fp,48(sp)
    6af8:	ddc00b17 	ldw	r23,44(sp)
    6afc:	dd800a17 	ldw	r22,40(sp)
    6b00:	dd400917 	ldw	r21,36(sp)
    6b04:	dd000817 	ldw	r20,32(sp)
    6b08:	dcc00717 	ldw	r19,28(sp)
    6b0c:	dc800617 	ldw	r18,24(sp)
    6b10:	dc400517 	ldw	r17,20(sp)
    6b14:	dc000417 	ldw	r16,16(sp)
    6b18:	dec00e04 	addi	sp,sp,56
    6b1c:	f800283a 	ret
    6b20:	0005883a 	mov	r2,zero
    6b24:	003ff206 	br	6af0 <__alt_mem_Onchip_SRAM+0xf8006af0>

00006b28 <_dtoa_r>:
    6b28:	20801017 	ldw	r2,64(r4)
    6b2c:	deffde04 	addi	sp,sp,-136
    6b30:	df002015 	stw	fp,128(sp)
    6b34:	dcc01b15 	stw	r19,108(sp)
    6b38:	dc801a15 	stw	r18,104(sp)
    6b3c:	dc401915 	stw	r17,100(sp)
    6b40:	dc001815 	stw	r16,96(sp)
    6b44:	dfc02115 	stw	ra,132(sp)
    6b48:	ddc01f15 	stw	r23,124(sp)
    6b4c:	dd801e15 	stw	r22,120(sp)
    6b50:	dd401d15 	stw	r21,116(sp)
    6b54:	dd001c15 	stw	r20,112(sp)
    6b58:	d9c00315 	stw	r7,12(sp)
    6b5c:	2039883a 	mov	fp,r4
    6b60:	3023883a 	mov	r17,r6
    6b64:	2825883a 	mov	r18,r5
    6b68:	dc002417 	ldw	r16,144(sp)
    6b6c:	3027883a 	mov	r19,r6
    6b70:	10000826 	beq	r2,zero,6b94 <_dtoa_r+0x6c>
    6b74:	21801117 	ldw	r6,68(r4)
    6b78:	00c00044 	movi	r3,1
    6b7c:	100b883a 	mov	r5,r2
    6b80:	1986983a 	sll	r3,r3,r6
    6b84:	11800115 	stw	r6,4(r2)
    6b88:	10c00215 	stw	r3,8(r2)
    6b8c:	00094b40 	call	94b4 <_Bfree>
    6b90:	e0001015 	stw	zero,64(fp)
    6b94:	88002e16 	blt	r17,zero,6c50 <_dtoa_r+0x128>
    6b98:	80000015 	stw	zero,0(r16)
    6b9c:	889ffc2c 	andhi	r2,r17,32752
    6ba0:	00dffc34 	movhi	r3,32752
    6ba4:	10c01c26 	beq	r2,r3,6c18 <_dtoa_r+0xf0>
    6ba8:	000d883a 	mov	r6,zero
    6bac:	000f883a 	mov	r7,zero
    6bb0:	9009883a 	mov	r4,r18
    6bb4:	980b883a 	mov	r5,r19
    6bb8:	00107d40 	call	107d4 <__eqdf2>
    6bbc:	10002b1e 	bne	r2,zero,6c6c <_dtoa_r+0x144>
    6bc0:	d9c02317 	ldw	r7,140(sp)
    6bc4:	00800044 	movi	r2,1
    6bc8:	38800015 	stw	r2,0(r7)
    6bcc:	d8802517 	ldw	r2,148(sp)
    6bd0:	10019e26 	beq	r2,zero,724c <_dtoa_r+0x724>
    6bd4:	d8c02517 	ldw	r3,148(sp)
    6bd8:	008000b4 	movhi	r2,2
    6bdc:	10a0ab44 	addi	r2,r2,-32083
    6be0:	18800015 	stw	r2,0(r3)
    6be4:	10bfffc4 	addi	r2,r2,-1
    6be8:	dfc02117 	ldw	ra,132(sp)
    6bec:	df002017 	ldw	fp,128(sp)
    6bf0:	ddc01f17 	ldw	r23,124(sp)
    6bf4:	dd801e17 	ldw	r22,120(sp)
    6bf8:	dd401d17 	ldw	r21,116(sp)
    6bfc:	dd001c17 	ldw	r20,112(sp)
    6c00:	dcc01b17 	ldw	r19,108(sp)
    6c04:	dc801a17 	ldw	r18,104(sp)
    6c08:	dc401917 	ldw	r17,100(sp)
    6c0c:	dc001817 	ldw	r16,96(sp)
    6c10:	dec02204 	addi	sp,sp,136
    6c14:	f800283a 	ret
    6c18:	d8c02317 	ldw	r3,140(sp)
    6c1c:	0089c3c4 	movi	r2,9999
    6c20:	18800015 	stw	r2,0(r3)
    6c24:	90017726 	beq	r18,zero,7204 <_dtoa_r+0x6dc>
    6c28:	008000b4 	movhi	r2,2
    6c2c:	10a0bf04 	addi	r2,r2,-32004
    6c30:	d9002517 	ldw	r4,148(sp)
    6c34:	203fec26 	beq	r4,zero,6be8 <__alt_mem_Onchip_SRAM+0xf8006be8>
    6c38:	10c000c7 	ldb	r3,3(r2)
    6c3c:	1801781e 	bne	r3,zero,7220 <_dtoa_r+0x6f8>
    6c40:	10c000c4 	addi	r3,r2,3
    6c44:	d9802517 	ldw	r6,148(sp)
    6c48:	30c00015 	stw	r3,0(r6)
    6c4c:	003fe606 	br	6be8 <__alt_mem_Onchip_SRAM+0xf8006be8>
    6c50:	04e00034 	movhi	r19,32768
    6c54:	9cffffc4 	addi	r19,r19,-1
    6c58:	00800044 	movi	r2,1
    6c5c:	8ce6703a 	and	r19,r17,r19
    6c60:	80800015 	stw	r2,0(r16)
    6c64:	9823883a 	mov	r17,r19
    6c68:	003fcc06 	br	6b9c <__alt_mem_Onchip_SRAM+0xf8006b9c>
    6c6c:	d8800204 	addi	r2,sp,8
    6c70:	d8800015 	stw	r2,0(sp)
    6c74:	d9c00104 	addi	r7,sp,4
    6c78:	900b883a 	mov	r5,r18
    6c7c:	980d883a 	mov	r6,r19
    6c80:	e009883a 	mov	r4,fp
    6c84:	8820d53a 	srli	r16,r17,20
    6c88:	000a15c0 	call	a15c <__d2b>
    6c8c:	d8800915 	stw	r2,36(sp)
    6c90:	8001651e 	bne	r16,zero,7228 <_dtoa_r+0x700>
    6c94:	dd800217 	ldw	r22,8(sp)
    6c98:	dc000117 	ldw	r16,4(sp)
    6c9c:	00800804 	movi	r2,32
    6ca0:	b421883a 	add	r16,r22,r16
    6ca4:	80c10c84 	addi	r3,r16,1074
    6ca8:	10c2d10e 	bge	r2,r3,77f0 <_dtoa_r+0xcc8>
    6cac:	00801004 	movi	r2,64
    6cb0:	81010484 	addi	r4,r16,1042
    6cb4:	10c7c83a 	sub	r3,r2,r3
    6cb8:	9108d83a 	srl	r4,r18,r4
    6cbc:	88e2983a 	sll	r17,r17,r3
    6cc0:	2448b03a 	or	r4,r4,r17
    6cc4:	0011cf00 	call	11cf0 <__floatunsidf>
    6cc8:	017f8434 	movhi	r5,65040
    6ccc:	01800044 	movi	r6,1
    6cd0:	1009883a 	mov	r4,r2
    6cd4:	194b883a 	add	r5,r3,r5
    6cd8:	843fffc4 	addi	r16,r16,-1
    6cdc:	d9801115 	stw	r6,68(sp)
    6ce0:	000d883a 	mov	r6,zero
    6ce4:	01cffe34 	movhi	r7,16376
    6ce8:	00112980 	call	11298 <__subdf3>
    6cec:	0198dbf4 	movhi	r6,25455
    6cf0:	01cff4f4 	movhi	r7,16339
    6cf4:	3190d844 	addi	r6,r6,17249
    6cf8:	39e1e9c4 	addi	r7,r7,-30809
    6cfc:	1009883a 	mov	r4,r2
    6d00:	180b883a 	mov	r5,r3
    6d04:	0010a2c0 	call	10a2c <__muldf3>
    6d08:	01a2d874 	movhi	r6,35681
    6d0c:	01cff1f4 	movhi	r7,16327
    6d10:	31b22cc4 	addi	r6,r6,-14157
    6d14:	39e28a04 	addi	r7,r7,-30168
    6d18:	180b883a 	mov	r5,r3
    6d1c:	1009883a 	mov	r4,r2
    6d20:	000f5580 	call	f558 <__adddf3>
    6d24:	8009883a 	mov	r4,r16
    6d28:	1029883a 	mov	r20,r2
    6d2c:	1823883a 	mov	r17,r3
    6d30:	0011c140 	call	11c14 <__floatsidf>
    6d34:	019427f4 	movhi	r6,20639
    6d38:	01cff4f4 	movhi	r7,16339
    6d3c:	319e7ec4 	addi	r6,r6,31227
    6d40:	39d104c4 	addi	r7,r7,17427
    6d44:	1009883a 	mov	r4,r2
    6d48:	180b883a 	mov	r5,r3
    6d4c:	0010a2c0 	call	10a2c <__muldf3>
    6d50:	100d883a 	mov	r6,r2
    6d54:	180f883a 	mov	r7,r3
    6d58:	a009883a 	mov	r4,r20
    6d5c:	880b883a 	mov	r5,r17
    6d60:	000f5580 	call	f558 <__adddf3>
    6d64:	1009883a 	mov	r4,r2
    6d68:	180b883a 	mov	r5,r3
    6d6c:	1029883a 	mov	r20,r2
    6d70:	1823883a 	mov	r17,r3
    6d74:	0011b940 	call	11b94 <__fixdfsi>
    6d78:	000d883a 	mov	r6,zero
    6d7c:	000f883a 	mov	r7,zero
    6d80:	a009883a 	mov	r4,r20
    6d84:	880b883a 	mov	r5,r17
    6d88:	d8800515 	stw	r2,20(sp)
    6d8c:	00109380 	call	10938 <__ledf2>
    6d90:	10028716 	blt	r2,zero,77b0 <_dtoa_r+0xc88>
    6d94:	d8c00517 	ldw	r3,20(sp)
    6d98:	00800584 	movi	r2,22
    6d9c:	10c27536 	bltu	r2,r3,7774 <_dtoa_r+0xc4c>
    6da0:	180490fa 	slli	r2,r3,3
    6da4:	00c000b4 	movhi	r3,2
    6da8:	18e0db04 	addi	r3,r3,-31892
    6dac:	1885883a 	add	r2,r3,r2
    6db0:	11000017 	ldw	r4,0(r2)
    6db4:	11400117 	ldw	r5,4(r2)
    6db8:	900d883a 	mov	r6,r18
    6dbc:	980f883a 	mov	r7,r19
    6dc0:	001085c0 	call	1085c <__gedf2>
    6dc4:	00828d0e 	bge	zero,r2,77fc <_dtoa_r+0xcd4>
    6dc8:	d9000517 	ldw	r4,20(sp)
    6dcc:	d8000e15 	stw	zero,56(sp)
    6dd0:	213fffc4 	addi	r4,r4,-1
    6dd4:	d9000515 	stw	r4,20(sp)
    6dd8:	b42dc83a 	sub	r22,r22,r16
    6ddc:	b5bfffc4 	addi	r22,r22,-1
    6de0:	b0026f16 	blt	r22,zero,77a0 <_dtoa_r+0xc78>
    6de4:	d8000815 	stw	zero,32(sp)
    6de8:	d9c00517 	ldw	r7,20(sp)
    6dec:	38026416 	blt	r7,zero,7780 <_dtoa_r+0xc58>
    6df0:	b1ed883a 	add	r22,r22,r7
    6df4:	d9c00d15 	stw	r7,52(sp)
    6df8:	d8000a15 	stw	zero,40(sp)
    6dfc:	d9800317 	ldw	r6,12(sp)
    6e00:	00800244 	movi	r2,9
    6e04:	11811436 	bltu	r2,r6,7258 <_dtoa_r+0x730>
    6e08:	00800144 	movi	r2,5
    6e0c:	1184e10e 	bge	r2,r6,8194 <_dtoa_r+0x166c>
    6e10:	31bfff04 	addi	r6,r6,-4
    6e14:	d9800315 	stw	r6,12(sp)
    6e18:	0023883a 	mov	r17,zero
    6e1c:	d9800317 	ldw	r6,12(sp)
    6e20:	008000c4 	movi	r2,3
    6e24:	30836726 	beq	r6,r2,7bc4 <_dtoa_r+0x109c>
    6e28:	1183410e 	bge	r2,r6,7b30 <_dtoa_r+0x1008>
    6e2c:	d9c00317 	ldw	r7,12(sp)
    6e30:	00800104 	movi	r2,4
    6e34:	38827c26 	beq	r7,r2,7828 <_dtoa_r+0xd00>
    6e38:	00800144 	movi	r2,5
    6e3c:	3884c41e 	bne	r7,r2,8150 <_dtoa_r+0x1628>
    6e40:	00800044 	movi	r2,1
    6e44:	d8800b15 	stw	r2,44(sp)
    6e48:	d8c00517 	ldw	r3,20(sp)
    6e4c:	d9002217 	ldw	r4,136(sp)
    6e50:	1907883a 	add	r3,r3,r4
    6e54:	19800044 	addi	r6,r3,1
    6e58:	d8c00c15 	stw	r3,48(sp)
    6e5c:	d9800615 	stw	r6,24(sp)
    6e60:	0183a40e 	bge	zero,r6,7cf4 <_dtoa_r+0x11cc>
    6e64:	d9800617 	ldw	r6,24(sp)
    6e68:	3021883a 	mov	r16,r6
    6e6c:	e0001115 	stw	zero,68(fp)
    6e70:	008005c4 	movi	r2,23
    6e74:	1184c92e 	bgeu	r2,r6,819c <_dtoa_r+0x1674>
    6e78:	00c00044 	movi	r3,1
    6e7c:	00800104 	movi	r2,4
    6e80:	1085883a 	add	r2,r2,r2
    6e84:	11000504 	addi	r4,r2,20
    6e88:	180b883a 	mov	r5,r3
    6e8c:	18c00044 	addi	r3,r3,1
    6e90:	313ffb2e 	bgeu	r6,r4,6e80 <__alt_mem_Onchip_SRAM+0xf8006e80>
    6e94:	e1401115 	stw	r5,68(fp)
    6e98:	e009883a 	mov	r4,fp
    6e9c:	000940c0 	call	940c <_Balloc>
    6ea0:	d8800715 	stw	r2,28(sp)
    6ea4:	e0801015 	stw	r2,64(fp)
    6ea8:	00800384 	movi	r2,14
    6eac:	1400f736 	bltu	r2,r16,728c <_dtoa_r+0x764>
    6eb0:	8800f626 	beq	r17,zero,728c <_dtoa_r+0x764>
    6eb4:	d9c00517 	ldw	r7,20(sp)
    6eb8:	01c39a0e 	bge	zero,r7,7d24 <_dtoa_r+0x11fc>
    6ebc:	388003cc 	andi	r2,r7,15
    6ec0:	100490fa 	slli	r2,r2,3
    6ec4:	382bd13a 	srai	r21,r7,4
    6ec8:	00c000b4 	movhi	r3,2
    6ecc:	18e0db04 	addi	r3,r3,-31892
    6ed0:	1885883a 	add	r2,r3,r2
    6ed4:	a8c0040c 	andi	r3,r21,16
    6ed8:	12400017 	ldw	r9,0(r2)
    6edc:	12000117 	ldw	r8,4(r2)
    6ee0:	18037926 	beq	r3,zero,7cc8 <_dtoa_r+0x11a0>
    6ee4:	008000b4 	movhi	r2,2
    6ee8:	10a0d104 	addi	r2,r2,-31932
    6eec:	11800817 	ldw	r6,32(r2)
    6ef0:	11c00917 	ldw	r7,36(r2)
    6ef4:	9009883a 	mov	r4,r18
    6ef8:	980b883a 	mov	r5,r19
    6efc:	da001715 	stw	r8,92(sp)
    6f00:	da401615 	stw	r9,88(sp)
    6f04:	000fe040 	call	fe04 <__divdf3>
    6f08:	da001717 	ldw	r8,92(sp)
    6f0c:	da401617 	ldw	r9,88(sp)
    6f10:	ad4003cc 	andi	r21,r21,15
    6f14:	040000c4 	movi	r16,3
    6f18:	1023883a 	mov	r17,r2
    6f1c:	1829883a 	mov	r20,r3
    6f20:	a8001126 	beq	r21,zero,6f68 <_dtoa_r+0x440>
    6f24:	05c000b4 	movhi	r23,2
    6f28:	bde0d104 	addi	r23,r23,-31932
    6f2c:	4805883a 	mov	r2,r9
    6f30:	4007883a 	mov	r3,r8
    6f34:	a980004c 	andi	r6,r21,1
    6f38:	1009883a 	mov	r4,r2
    6f3c:	a82bd07a 	srai	r21,r21,1
    6f40:	180b883a 	mov	r5,r3
    6f44:	30000426 	beq	r6,zero,6f58 <_dtoa_r+0x430>
    6f48:	b9800017 	ldw	r6,0(r23)
    6f4c:	b9c00117 	ldw	r7,4(r23)
    6f50:	84000044 	addi	r16,r16,1
    6f54:	0010a2c0 	call	10a2c <__muldf3>
    6f58:	bdc00204 	addi	r23,r23,8
    6f5c:	a83ff51e 	bne	r21,zero,6f34 <__alt_mem_Onchip_SRAM+0xf8006f34>
    6f60:	1013883a 	mov	r9,r2
    6f64:	1811883a 	mov	r8,r3
    6f68:	480d883a 	mov	r6,r9
    6f6c:	400f883a 	mov	r7,r8
    6f70:	8809883a 	mov	r4,r17
    6f74:	a00b883a 	mov	r5,r20
    6f78:	000fe040 	call	fe04 <__divdf3>
    6f7c:	d8800f15 	stw	r2,60(sp)
    6f80:	d8c01015 	stw	r3,64(sp)
    6f84:	d8c00e17 	ldw	r3,56(sp)
    6f88:	18000626 	beq	r3,zero,6fa4 <_dtoa_r+0x47c>
    6f8c:	d9000f17 	ldw	r4,60(sp)
    6f90:	d9401017 	ldw	r5,64(sp)
    6f94:	000d883a 	mov	r6,zero
    6f98:	01cffc34 	movhi	r7,16368
    6f9c:	00109380 	call	10938 <__ledf2>
    6fa0:	10040b16 	blt	r2,zero,7fd0 <_dtoa_r+0x14a8>
    6fa4:	8009883a 	mov	r4,r16
    6fa8:	0011c140 	call	11c14 <__floatsidf>
    6fac:	d9800f17 	ldw	r6,60(sp)
    6fb0:	d9c01017 	ldw	r7,64(sp)
    6fb4:	1009883a 	mov	r4,r2
    6fb8:	180b883a 	mov	r5,r3
    6fbc:	0010a2c0 	call	10a2c <__muldf3>
    6fc0:	000d883a 	mov	r6,zero
    6fc4:	01d00734 	movhi	r7,16412
    6fc8:	1009883a 	mov	r4,r2
    6fcc:	180b883a 	mov	r5,r3
    6fd0:	000f5580 	call	f558 <__adddf3>
    6fd4:	1021883a 	mov	r16,r2
    6fd8:	d8800617 	ldw	r2,24(sp)
    6fdc:	047f3034 	movhi	r17,64704
    6fe0:	1c63883a 	add	r17,r3,r17
    6fe4:	10031826 	beq	r2,zero,7c48 <_dtoa_r+0x1120>
    6fe8:	d8c00517 	ldw	r3,20(sp)
    6fec:	db000617 	ldw	r12,24(sp)
    6ff0:	d8c01315 	stw	r3,76(sp)
    6ff4:	d9000b17 	ldw	r4,44(sp)
    6ff8:	20038f26 	beq	r4,zero,7e38 <_dtoa_r+0x1310>
    6ffc:	60bfffc4 	addi	r2,r12,-1
    7000:	100490fa 	slli	r2,r2,3
    7004:	00c000b4 	movhi	r3,2
    7008:	18e0db04 	addi	r3,r3,-31892
    700c:	1885883a 	add	r2,r3,r2
    7010:	11800017 	ldw	r6,0(r2)
    7014:	11c00117 	ldw	r7,4(r2)
    7018:	d8800717 	ldw	r2,28(sp)
    701c:	0009883a 	mov	r4,zero
    7020:	014ff834 	movhi	r5,16352
    7024:	db001615 	stw	r12,88(sp)
    7028:	15c00044 	addi	r23,r2,1
    702c:	000fe040 	call	fe04 <__divdf3>
    7030:	800d883a 	mov	r6,r16
    7034:	880f883a 	mov	r7,r17
    7038:	1009883a 	mov	r4,r2
    703c:	180b883a 	mov	r5,r3
    7040:	00112980 	call	11298 <__subdf3>
    7044:	d9401017 	ldw	r5,64(sp)
    7048:	d9000f17 	ldw	r4,60(sp)
    704c:	102b883a 	mov	r21,r2
    7050:	d8c01215 	stw	r3,72(sp)
    7054:	0011b940 	call	11b94 <__fixdfsi>
    7058:	1009883a 	mov	r4,r2
    705c:	1029883a 	mov	r20,r2
    7060:	0011c140 	call	11c14 <__floatsidf>
    7064:	d9000f17 	ldw	r4,60(sp)
    7068:	d9401017 	ldw	r5,64(sp)
    706c:	100d883a 	mov	r6,r2
    7070:	180f883a 	mov	r7,r3
    7074:	00112980 	call	11298 <__subdf3>
    7078:	1823883a 	mov	r17,r3
    707c:	d8c00717 	ldw	r3,28(sp)
    7080:	d9401217 	ldw	r5,72(sp)
    7084:	a2000c04 	addi	r8,r20,48
    7088:	1021883a 	mov	r16,r2
    708c:	1a000005 	stb	r8,0(r3)
    7090:	800d883a 	mov	r6,r16
    7094:	880f883a 	mov	r7,r17
    7098:	a809883a 	mov	r4,r21
    709c:	4029883a 	mov	r20,r8
    70a0:	001085c0 	call	1085c <__gedf2>
    70a4:	00841d16 	blt	zero,r2,811c <_dtoa_r+0x15f4>
    70a8:	800d883a 	mov	r6,r16
    70ac:	880f883a 	mov	r7,r17
    70b0:	0009883a 	mov	r4,zero
    70b4:	014ffc34 	movhi	r5,16368
    70b8:	00112980 	call	11298 <__subdf3>
    70bc:	d9401217 	ldw	r5,72(sp)
    70c0:	100d883a 	mov	r6,r2
    70c4:	180f883a 	mov	r7,r3
    70c8:	a809883a 	mov	r4,r21
    70cc:	001085c0 	call	1085c <__gedf2>
    70d0:	db001617 	ldw	r12,88(sp)
    70d4:	00840e16 	blt	zero,r2,8110 <_dtoa_r+0x15e8>
    70d8:	00800044 	movi	r2,1
    70dc:	13006b0e 	bge	r2,r12,728c <_dtoa_r+0x764>
    70e0:	d9000717 	ldw	r4,28(sp)
    70e4:	dd800f15 	stw	r22,60(sp)
    70e8:	dcc01015 	stw	r19,64(sp)
    70ec:	2319883a 	add	r12,r4,r12
    70f0:	dcc01217 	ldw	r19,72(sp)
    70f4:	602d883a 	mov	r22,r12
    70f8:	dc801215 	stw	r18,72(sp)
    70fc:	b825883a 	mov	r18,r23
    7100:	00000906 	br	7128 <_dtoa_r+0x600>
    7104:	00112980 	call	11298 <__subdf3>
    7108:	a80d883a 	mov	r6,r21
    710c:	980f883a 	mov	r7,r19
    7110:	1009883a 	mov	r4,r2
    7114:	180b883a 	mov	r5,r3
    7118:	00109380 	call	10938 <__ledf2>
    711c:	1003e816 	blt	r2,zero,80c0 <_dtoa_r+0x1598>
    7120:	b825883a 	mov	r18,r23
    7124:	bd83e926 	beq	r23,r22,80cc <_dtoa_r+0x15a4>
    7128:	a809883a 	mov	r4,r21
    712c:	980b883a 	mov	r5,r19
    7130:	000d883a 	mov	r6,zero
    7134:	01d00934 	movhi	r7,16420
    7138:	0010a2c0 	call	10a2c <__muldf3>
    713c:	000d883a 	mov	r6,zero
    7140:	01d00934 	movhi	r7,16420
    7144:	8009883a 	mov	r4,r16
    7148:	880b883a 	mov	r5,r17
    714c:	102b883a 	mov	r21,r2
    7150:	1827883a 	mov	r19,r3
    7154:	0010a2c0 	call	10a2c <__muldf3>
    7158:	180b883a 	mov	r5,r3
    715c:	1009883a 	mov	r4,r2
    7160:	1821883a 	mov	r16,r3
    7164:	1023883a 	mov	r17,r2
    7168:	0011b940 	call	11b94 <__fixdfsi>
    716c:	1009883a 	mov	r4,r2
    7170:	1029883a 	mov	r20,r2
    7174:	0011c140 	call	11c14 <__floatsidf>
    7178:	8809883a 	mov	r4,r17
    717c:	800b883a 	mov	r5,r16
    7180:	100d883a 	mov	r6,r2
    7184:	180f883a 	mov	r7,r3
    7188:	00112980 	call	11298 <__subdf3>
    718c:	a5000c04 	addi	r20,r20,48
    7190:	a80d883a 	mov	r6,r21
    7194:	980f883a 	mov	r7,r19
    7198:	1009883a 	mov	r4,r2
    719c:	180b883a 	mov	r5,r3
    71a0:	95000005 	stb	r20,0(r18)
    71a4:	1021883a 	mov	r16,r2
    71a8:	1823883a 	mov	r17,r3
    71ac:	00109380 	call	10938 <__ledf2>
    71b0:	bdc00044 	addi	r23,r23,1
    71b4:	800d883a 	mov	r6,r16
    71b8:	880f883a 	mov	r7,r17
    71bc:	0009883a 	mov	r4,zero
    71c0:	014ffc34 	movhi	r5,16368
    71c4:	103fcf0e 	bge	r2,zero,7104 <__alt_mem_Onchip_SRAM+0xf8007104>
    71c8:	d8c01317 	ldw	r3,76(sp)
    71cc:	d8c00515 	stw	r3,20(sp)
    71d0:	d9400917 	ldw	r5,36(sp)
    71d4:	e009883a 	mov	r4,fp
    71d8:	00094b40 	call	94b4 <_Bfree>
    71dc:	d9000517 	ldw	r4,20(sp)
    71e0:	d9802317 	ldw	r6,140(sp)
    71e4:	d9c02517 	ldw	r7,148(sp)
    71e8:	b8000005 	stb	zero,0(r23)
    71ec:	20800044 	addi	r2,r4,1
    71f0:	30800015 	stw	r2,0(r6)
    71f4:	3802aa26 	beq	r7,zero,7ca0 <_dtoa_r+0x1178>
    71f8:	3dc00015 	stw	r23,0(r7)
    71fc:	d8800717 	ldw	r2,28(sp)
    7200:	003e7906 	br	6be8 <__alt_mem_Onchip_SRAM+0xf8006be8>
    7204:	00800434 	movhi	r2,16
    7208:	10bfffc4 	addi	r2,r2,-1
    720c:	88a2703a 	and	r17,r17,r2
    7210:	883e851e 	bne	r17,zero,6c28 <__alt_mem_Onchip_SRAM+0xf8006c28>
    7214:	008000b4 	movhi	r2,2
    7218:	10a0bc04 	addi	r2,r2,-32016
    721c:	003e8406 	br	6c30 <__alt_mem_Onchip_SRAM+0xf8006c30>
    7220:	10c00204 	addi	r3,r2,8
    7224:	003e8706 	br	6c44 <__alt_mem_Onchip_SRAM+0xf8006c44>
    7228:	01400434 	movhi	r5,16
    722c:	297fffc4 	addi	r5,r5,-1
    7230:	994a703a 	and	r5,r19,r5
    7234:	9009883a 	mov	r4,r18
    7238:	843f0044 	addi	r16,r16,-1023
    723c:	294ffc34 	orhi	r5,r5,16368
    7240:	dd800217 	ldw	r22,8(sp)
    7244:	d8001115 	stw	zero,68(sp)
    7248:	003ea506 	br	6ce0 <__alt_mem_Onchip_SRAM+0xf8006ce0>
    724c:	008000b4 	movhi	r2,2
    7250:	10a0ab04 	addi	r2,r2,-32084
    7254:	003e6406 	br	6be8 <__alt_mem_Onchip_SRAM+0xf8006be8>
    7258:	e0001115 	stw	zero,68(fp)
    725c:	000b883a 	mov	r5,zero
    7260:	e009883a 	mov	r4,fp
    7264:	000940c0 	call	940c <_Balloc>
    7268:	01bfffc4 	movi	r6,-1
    726c:	01c00044 	movi	r7,1
    7270:	d8800715 	stw	r2,28(sp)
    7274:	d9800c15 	stw	r6,48(sp)
    7278:	e0801015 	stw	r2,64(fp)
    727c:	d8000315 	stw	zero,12(sp)
    7280:	d9c00b15 	stw	r7,44(sp)
    7284:	d9800615 	stw	r6,24(sp)
    7288:	d8002215 	stw	zero,136(sp)
    728c:	d8800117 	ldw	r2,4(sp)
    7290:	10008916 	blt	r2,zero,74b8 <_dtoa_r+0x990>
    7294:	d9000517 	ldw	r4,20(sp)
    7298:	00c00384 	movi	r3,14
    729c:	19008616 	blt	r3,r4,74b8 <_dtoa_r+0x990>
    72a0:	200490fa 	slli	r2,r4,3
    72a4:	00c000b4 	movhi	r3,2
    72a8:	d9802217 	ldw	r6,136(sp)
    72ac:	18e0db04 	addi	r3,r3,-31892
    72b0:	1885883a 	add	r2,r3,r2
    72b4:	14000017 	ldw	r16,0(r2)
    72b8:	14400117 	ldw	r17,4(r2)
    72bc:	30016316 	blt	r6,zero,784c <_dtoa_r+0xd24>
    72c0:	800d883a 	mov	r6,r16
    72c4:	880f883a 	mov	r7,r17
    72c8:	9009883a 	mov	r4,r18
    72cc:	980b883a 	mov	r5,r19
    72d0:	000fe040 	call	fe04 <__divdf3>
    72d4:	180b883a 	mov	r5,r3
    72d8:	1009883a 	mov	r4,r2
    72dc:	0011b940 	call	11b94 <__fixdfsi>
    72e0:	1009883a 	mov	r4,r2
    72e4:	102b883a 	mov	r21,r2
    72e8:	0011c140 	call	11c14 <__floatsidf>
    72ec:	800d883a 	mov	r6,r16
    72f0:	880f883a 	mov	r7,r17
    72f4:	1009883a 	mov	r4,r2
    72f8:	180b883a 	mov	r5,r3
    72fc:	0010a2c0 	call	10a2c <__muldf3>
    7300:	100d883a 	mov	r6,r2
    7304:	180f883a 	mov	r7,r3
    7308:	9009883a 	mov	r4,r18
    730c:	980b883a 	mov	r5,r19
    7310:	00112980 	call	11298 <__subdf3>
    7314:	d9c00717 	ldw	r7,28(sp)
    7318:	1009883a 	mov	r4,r2
    731c:	a8800c04 	addi	r2,r21,48
    7320:	38800005 	stb	r2,0(r7)
    7324:	3dc00044 	addi	r23,r7,1
    7328:	d9c00617 	ldw	r7,24(sp)
    732c:	01800044 	movi	r6,1
    7330:	180b883a 	mov	r5,r3
    7334:	2005883a 	mov	r2,r4
    7338:	39803826 	beq	r7,r6,741c <_dtoa_r+0x8f4>
    733c:	000d883a 	mov	r6,zero
    7340:	01d00934 	movhi	r7,16420
    7344:	0010a2c0 	call	10a2c <__muldf3>
    7348:	000d883a 	mov	r6,zero
    734c:	000f883a 	mov	r7,zero
    7350:	1009883a 	mov	r4,r2
    7354:	180b883a 	mov	r5,r3
    7358:	1025883a 	mov	r18,r2
    735c:	1827883a 	mov	r19,r3
    7360:	00107d40 	call	107d4 <__eqdf2>
    7364:	103f9a26 	beq	r2,zero,71d0 <__alt_mem_Onchip_SRAM+0xf80071d0>
    7368:	d9c00617 	ldw	r7,24(sp)
    736c:	d8c00717 	ldw	r3,28(sp)
    7370:	b829883a 	mov	r20,r23
    7374:	38bfffc4 	addi	r2,r7,-1
    7378:	18ad883a 	add	r22,r3,r2
    737c:	00000a06 	br	73a8 <_dtoa_r+0x880>
    7380:	0010a2c0 	call	10a2c <__muldf3>
    7384:	000d883a 	mov	r6,zero
    7388:	000f883a 	mov	r7,zero
    738c:	1009883a 	mov	r4,r2
    7390:	180b883a 	mov	r5,r3
    7394:	1025883a 	mov	r18,r2
    7398:	1827883a 	mov	r19,r3
    739c:	b829883a 	mov	r20,r23
    73a0:	00107d40 	call	107d4 <__eqdf2>
    73a4:	103f8a26 	beq	r2,zero,71d0 <__alt_mem_Onchip_SRAM+0xf80071d0>
    73a8:	800d883a 	mov	r6,r16
    73ac:	880f883a 	mov	r7,r17
    73b0:	9009883a 	mov	r4,r18
    73b4:	980b883a 	mov	r5,r19
    73b8:	000fe040 	call	fe04 <__divdf3>
    73bc:	180b883a 	mov	r5,r3
    73c0:	1009883a 	mov	r4,r2
    73c4:	0011b940 	call	11b94 <__fixdfsi>
    73c8:	1009883a 	mov	r4,r2
    73cc:	102b883a 	mov	r21,r2
    73d0:	0011c140 	call	11c14 <__floatsidf>
    73d4:	800d883a 	mov	r6,r16
    73d8:	880f883a 	mov	r7,r17
    73dc:	1009883a 	mov	r4,r2
    73e0:	180b883a 	mov	r5,r3
    73e4:	0010a2c0 	call	10a2c <__muldf3>
    73e8:	100d883a 	mov	r6,r2
    73ec:	180f883a 	mov	r7,r3
    73f0:	9009883a 	mov	r4,r18
    73f4:	980b883a 	mov	r5,r19
    73f8:	00112980 	call	11298 <__subdf3>
    73fc:	aa000c04 	addi	r8,r21,48
    7400:	a2000005 	stb	r8,0(r20)
    7404:	000d883a 	mov	r6,zero
    7408:	01d00934 	movhi	r7,16420
    740c:	1009883a 	mov	r4,r2
    7410:	180b883a 	mov	r5,r3
    7414:	a5c00044 	addi	r23,r20,1
    7418:	b53fd91e 	bne	r22,r20,7380 <__alt_mem_Onchip_SRAM+0xf8007380>
    741c:	100d883a 	mov	r6,r2
    7420:	180f883a 	mov	r7,r3
    7424:	1009883a 	mov	r4,r2
    7428:	180b883a 	mov	r5,r3
    742c:	000f5580 	call	f558 <__adddf3>
    7430:	100d883a 	mov	r6,r2
    7434:	180f883a 	mov	r7,r3
    7438:	8009883a 	mov	r4,r16
    743c:	880b883a 	mov	r5,r17
    7440:	1027883a 	mov	r19,r2
    7444:	1825883a 	mov	r18,r3
    7448:	00109380 	call	10938 <__ledf2>
    744c:	10000816 	blt	r2,zero,7470 <_dtoa_r+0x948>
    7450:	980d883a 	mov	r6,r19
    7454:	900f883a 	mov	r7,r18
    7458:	8009883a 	mov	r4,r16
    745c:	880b883a 	mov	r5,r17
    7460:	00107d40 	call	107d4 <__eqdf2>
    7464:	103f5a1e 	bne	r2,zero,71d0 <__alt_mem_Onchip_SRAM+0xf80071d0>
    7468:	ad40004c 	andi	r21,r21,1
    746c:	a83f5826 	beq	r21,zero,71d0 <__alt_mem_Onchip_SRAM+0xf80071d0>
    7470:	bd3fffc3 	ldbu	r20,-1(r23)
    7474:	b8bfffc4 	addi	r2,r23,-1
    7478:	1007883a 	mov	r3,r2
    747c:	01400e44 	movi	r5,57
    7480:	d9800717 	ldw	r6,28(sp)
    7484:	00000506 	br	749c <_dtoa_r+0x974>
    7488:	18ffffc4 	addi	r3,r3,-1
    748c:	11824726 	beq	r2,r6,7dac <_dtoa_r+0x1284>
    7490:	1d000003 	ldbu	r20,0(r3)
    7494:	102f883a 	mov	r23,r2
    7498:	10bfffc4 	addi	r2,r2,-1
    749c:	a1003fcc 	andi	r4,r20,255
    74a0:	2100201c 	xori	r4,r4,128
    74a4:	213fe004 	addi	r4,r4,-128
    74a8:	217ff726 	beq	r4,r5,7488 <__alt_mem_Onchip_SRAM+0xf8007488>
    74ac:	a2000044 	addi	r8,r20,1
    74b0:	12000005 	stb	r8,0(r2)
    74b4:	003f4606 	br	71d0 <__alt_mem_Onchip_SRAM+0xf80071d0>
    74b8:	d9000b17 	ldw	r4,44(sp)
    74bc:	2000c826 	beq	r4,zero,77e0 <_dtoa_r+0xcb8>
    74c0:	d9800317 	ldw	r6,12(sp)
    74c4:	00c00044 	movi	r3,1
    74c8:	1980f90e 	bge	r3,r6,78b0 <_dtoa_r+0xd88>
    74cc:	d8800617 	ldw	r2,24(sp)
    74d0:	d8c00a17 	ldw	r3,40(sp)
    74d4:	157fffc4 	addi	r21,r2,-1
    74d8:	1d41f316 	blt	r3,r21,7ca8 <_dtoa_r+0x1180>
    74dc:	1d6bc83a 	sub	r21,r3,r21
    74e0:	d9c00617 	ldw	r7,24(sp)
    74e4:	3802aa16 	blt	r7,zero,7f90 <_dtoa_r+0x1468>
    74e8:	dd000817 	ldw	r20,32(sp)
    74ec:	d8800617 	ldw	r2,24(sp)
    74f0:	d8c00817 	ldw	r3,32(sp)
    74f4:	01400044 	movi	r5,1
    74f8:	e009883a 	mov	r4,fp
    74fc:	1887883a 	add	r3,r3,r2
    7500:	d8c00815 	stw	r3,32(sp)
    7504:	b0ad883a 	add	r22,r22,r2
    7508:	00098400 	call	9840 <__i2b>
    750c:	1023883a 	mov	r17,r2
    7510:	a0000826 	beq	r20,zero,7534 <_dtoa_r+0xa0c>
    7514:	0580070e 	bge	zero,r22,7534 <_dtoa_r+0xa0c>
    7518:	a005883a 	mov	r2,r20
    751c:	b500b916 	blt	r22,r20,7804 <_dtoa_r+0xcdc>
    7520:	d9000817 	ldw	r4,32(sp)
    7524:	a0a9c83a 	sub	r20,r20,r2
    7528:	b0adc83a 	sub	r22,r22,r2
    752c:	2089c83a 	sub	r4,r4,r2
    7530:	d9000815 	stw	r4,32(sp)
    7534:	d9800a17 	ldw	r6,40(sp)
    7538:	0181810e 	bge	zero,r6,7b40 <_dtoa_r+0x1018>
    753c:	d9c00b17 	ldw	r7,44(sp)
    7540:	3800b326 	beq	r7,zero,7810 <_dtoa_r+0xce8>
    7544:	a800b226 	beq	r21,zero,7810 <_dtoa_r+0xce8>
    7548:	880b883a 	mov	r5,r17
    754c:	a80d883a 	mov	r6,r21
    7550:	e009883a 	mov	r4,fp
    7554:	0009b080 	call	9b08 <__pow5mult>
    7558:	d9800917 	ldw	r6,36(sp)
    755c:	100b883a 	mov	r5,r2
    7560:	e009883a 	mov	r4,fp
    7564:	1023883a 	mov	r17,r2
    7568:	000987c0 	call	987c <__multiply>
    756c:	1021883a 	mov	r16,r2
    7570:	d8800a17 	ldw	r2,40(sp)
    7574:	d9400917 	ldw	r5,36(sp)
    7578:	e009883a 	mov	r4,fp
    757c:	1545c83a 	sub	r2,r2,r21
    7580:	d8800a15 	stw	r2,40(sp)
    7584:	00094b40 	call	94b4 <_Bfree>
    7588:	d8c00a17 	ldw	r3,40(sp)
    758c:	18009f1e 	bne	r3,zero,780c <_dtoa_r+0xce4>
    7590:	05c00044 	movi	r23,1
    7594:	e009883a 	mov	r4,fp
    7598:	b80b883a 	mov	r5,r23
    759c:	00098400 	call	9840 <__i2b>
    75a0:	d9000d17 	ldw	r4,52(sp)
    75a4:	102b883a 	mov	r21,r2
    75a8:	2000ce26 	beq	r4,zero,78e4 <_dtoa_r+0xdbc>
    75ac:	200d883a 	mov	r6,r4
    75b0:	100b883a 	mov	r5,r2
    75b4:	e009883a 	mov	r4,fp
    75b8:	0009b080 	call	9b08 <__pow5mult>
    75bc:	d9800317 	ldw	r6,12(sp)
    75c0:	102b883a 	mov	r21,r2
    75c4:	b981810e 	bge	r23,r6,7bcc <_dtoa_r+0x10a4>
    75c8:	0027883a 	mov	r19,zero
    75cc:	a8800417 	ldw	r2,16(r21)
    75d0:	05c00804 	movi	r23,32
    75d4:	10800104 	addi	r2,r2,4
    75d8:	1085883a 	add	r2,r2,r2
    75dc:	1085883a 	add	r2,r2,r2
    75e0:	a885883a 	add	r2,r21,r2
    75e4:	11000017 	ldw	r4,0(r2)
    75e8:	00097280 	call	9728 <__hi0bits>
    75ec:	b885c83a 	sub	r2,r23,r2
    75f0:	1585883a 	add	r2,r2,r22
    75f4:	108007cc 	andi	r2,r2,31
    75f8:	1000b326 	beq	r2,zero,78c8 <_dtoa_r+0xda0>
    75fc:	00c00804 	movi	r3,32
    7600:	1887c83a 	sub	r3,r3,r2
    7604:	01000104 	movi	r4,4
    7608:	20c2cd0e 	bge	r4,r3,8140 <_dtoa_r+0x1618>
    760c:	00c00704 	movi	r3,28
    7610:	1885c83a 	sub	r2,r3,r2
    7614:	d8c00817 	ldw	r3,32(sp)
    7618:	a0a9883a 	add	r20,r20,r2
    761c:	b0ad883a 	add	r22,r22,r2
    7620:	1887883a 	add	r3,r3,r2
    7624:	d8c00815 	stw	r3,32(sp)
    7628:	d9800817 	ldw	r6,32(sp)
    762c:	0180040e 	bge	zero,r6,7640 <_dtoa_r+0xb18>
    7630:	800b883a 	mov	r5,r16
    7634:	e009883a 	mov	r4,fp
    7638:	0009c480 	call	9c48 <__lshift>
    763c:	1021883a 	mov	r16,r2
    7640:	0580050e 	bge	zero,r22,7658 <_dtoa_r+0xb30>
    7644:	a80b883a 	mov	r5,r21
    7648:	b00d883a 	mov	r6,r22
    764c:	e009883a 	mov	r4,fp
    7650:	0009c480 	call	9c48 <__lshift>
    7654:	102b883a 	mov	r21,r2
    7658:	d9c00e17 	ldw	r7,56(sp)
    765c:	3801211e 	bne	r7,zero,7ae4 <_dtoa_r+0xfbc>
    7660:	d9800617 	ldw	r6,24(sp)
    7664:	0181380e 	bge	zero,r6,7b48 <_dtoa_r+0x1020>
    7668:	d8c00b17 	ldw	r3,44(sp)
    766c:	1800ab1e 	bne	r3,zero,791c <_dtoa_r+0xdf4>
    7670:	dc800717 	ldw	r18,28(sp)
    7674:	dcc00617 	ldw	r19,24(sp)
    7678:	9029883a 	mov	r20,r18
    767c:	00000206 	br	7688 <_dtoa_r+0xb60>
    7680:	00094dc0 	call	94dc <__multadd>
    7684:	1021883a 	mov	r16,r2
    7688:	a80b883a 	mov	r5,r21
    768c:	8009883a 	mov	r4,r16
    7690:	00069000 	call	6900 <quorem>
    7694:	10800c04 	addi	r2,r2,48
    7698:	90800005 	stb	r2,0(r18)
    769c:	94800044 	addi	r18,r18,1
    76a0:	9507c83a 	sub	r3,r18,r20
    76a4:	000f883a 	mov	r7,zero
    76a8:	01800284 	movi	r6,10
    76ac:	800b883a 	mov	r5,r16
    76b0:	e009883a 	mov	r4,fp
    76b4:	1cfff216 	blt	r3,r19,7680 <__alt_mem_Onchip_SRAM+0xf8007680>
    76b8:	1011883a 	mov	r8,r2
    76bc:	d8800617 	ldw	r2,24(sp)
    76c0:	0082370e 	bge	zero,r2,7fa0 <_dtoa_r+0x1478>
    76c4:	d9000717 	ldw	r4,28(sp)
    76c8:	0025883a 	mov	r18,zero
    76cc:	20af883a 	add	r23,r4,r2
    76d0:	01800044 	movi	r6,1
    76d4:	800b883a 	mov	r5,r16
    76d8:	e009883a 	mov	r4,fp
    76dc:	da001715 	stw	r8,92(sp)
    76e0:	0009c480 	call	9c48 <__lshift>
    76e4:	a80b883a 	mov	r5,r21
    76e8:	1009883a 	mov	r4,r2
    76ec:	d8800915 	stw	r2,36(sp)
    76f0:	0009d900 	call	9d90 <__mcmp>
    76f4:	da001717 	ldw	r8,92(sp)
    76f8:	0081800e 	bge	zero,r2,7cfc <_dtoa_r+0x11d4>
    76fc:	b93fffc3 	ldbu	r4,-1(r23)
    7700:	b8bfffc4 	addi	r2,r23,-1
    7704:	1007883a 	mov	r3,r2
    7708:	01800e44 	movi	r6,57
    770c:	d9c00717 	ldw	r7,28(sp)
    7710:	00000506 	br	7728 <_dtoa_r+0xc00>
    7714:	18ffffc4 	addi	r3,r3,-1
    7718:	11c12326 	beq	r2,r7,7ba8 <_dtoa_r+0x1080>
    771c:	19000003 	ldbu	r4,0(r3)
    7720:	102f883a 	mov	r23,r2
    7724:	10bfffc4 	addi	r2,r2,-1
    7728:	21403fcc 	andi	r5,r4,255
    772c:	2940201c 	xori	r5,r5,128
    7730:	297fe004 	addi	r5,r5,-128
    7734:	29bff726 	beq	r5,r6,7714 <__alt_mem_Onchip_SRAM+0xf8007714>
    7738:	21000044 	addi	r4,r4,1
    773c:	11000005 	stb	r4,0(r2)
    7740:	a80b883a 	mov	r5,r21
    7744:	e009883a 	mov	r4,fp
    7748:	00094b40 	call	94b4 <_Bfree>
    774c:	883ea026 	beq	r17,zero,71d0 <__alt_mem_Onchip_SRAM+0xf80071d0>
    7750:	90000426 	beq	r18,zero,7764 <_dtoa_r+0xc3c>
    7754:	94400326 	beq	r18,r17,7764 <_dtoa_r+0xc3c>
    7758:	900b883a 	mov	r5,r18
    775c:	e009883a 	mov	r4,fp
    7760:	00094b40 	call	94b4 <_Bfree>
    7764:	880b883a 	mov	r5,r17
    7768:	e009883a 	mov	r4,fp
    776c:	00094b40 	call	94b4 <_Bfree>
    7770:	003e9706 	br	71d0 <__alt_mem_Onchip_SRAM+0xf80071d0>
    7774:	01800044 	movi	r6,1
    7778:	d9800e15 	stw	r6,56(sp)
    777c:	003d9606 	br	6dd8 <__alt_mem_Onchip_SRAM+0xf8006dd8>
    7780:	d8800817 	ldw	r2,32(sp)
    7784:	d8c00517 	ldw	r3,20(sp)
    7788:	d8000d15 	stw	zero,52(sp)
    778c:	10c5c83a 	sub	r2,r2,r3
    7790:	00c9c83a 	sub	r4,zero,r3
    7794:	d8800815 	stw	r2,32(sp)
    7798:	d9000a15 	stw	r4,40(sp)
    779c:	003d9706 	br	6dfc <__alt_mem_Onchip_SRAM+0xf8006dfc>
    77a0:	05adc83a 	sub	r22,zero,r22
    77a4:	dd800815 	stw	r22,32(sp)
    77a8:	002d883a 	mov	r22,zero
    77ac:	003d8e06 	br	6de8 <__alt_mem_Onchip_SRAM+0xf8006de8>
    77b0:	d9000517 	ldw	r4,20(sp)
    77b4:	0011c140 	call	11c14 <__floatsidf>
    77b8:	100d883a 	mov	r6,r2
    77bc:	180f883a 	mov	r7,r3
    77c0:	a009883a 	mov	r4,r20
    77c4:	880b883a 	mov	r5,r17
    77c8:	00107d40 	call	107d4 <__eqdf2>
    77cc:	103d7126 	beq	r2,zero,6d94 <__alt_mem_Onchip_SRAM+0xf8006d94>
    77d0:	d9c00517 	ldw	r7,20(sp)
    77d4:	39ffffc4 	addi	r7,r7,-1
    77d8:	d9c00515 	stw	r7,20(sp)
    77dc:	003d6d06 	br	6d94 <__alt_mem_Onchip_SRAM+0xf8006d94>
    77e0:	dd400a17 	ldw	r21,40(sp)
    77e4:	dd000817 	ldw	r20,32(sp)
    77e8:	0023883a 	mov	r17,zero
    77ec:	003f4806 	br	7510 <__alt_mem_Onchip_SRAM+0xf8007510>
    77f0:	10e3c83a 	sub	r17,r2,r3
    77f4:	9448983a 	sll	r4,r18,r17
    77f8:	003d3206 	br	6cc4 <__alt_mem_Onchip_SRAM+0xf8006cc4>
    77fc:	d8000e15 	stw	zero,56(sp)
    7800:	003d7506 	br	6dd8 <__alt_mem_Onchip_SRAM+0xf8006dd8>
    7804:	b005883a 	mov	r2,r22
    7808:	003f4506 	br	7520 <__alt_mem_Onchip_SRAM+0xf8007520>
    780c:	dc000915 	stw	r16,36(sp)
    7810:	d9800a17 	ldw	r6,40(sp)
    7814:	d9400917 	ldw	r5,36(sp)
    7818:	e009883a 	mov	r4,fp
    781c:	0009b080 	call	9b08 <__pow5mult>
    7820:	1021883a 	mov	r16,r2
    7824:	003f5a06 	br	7590 <__alt_mem_Onchip_SRAM+0xf8007590>
    7828:	01c00044 	movi	r7,1
    782c:	d9c00b15 	stw	r7,44(sp)
    7830:	d8802217 	ldw	r2,136(sp)
    7834:	0081280e 	bge	zero,r2,7cd8 <_dtoa_r+0x11b0>
    7838:	100d883a 	mov	r6,r2
    783c:	1021883a 	mov	r16,r2
    7840:	d8800c15 	stw	r2,48(sp)
    7844:	d8800615 	stw	r2,24(sp)
    7848:	003d8806 	br	6e6c <__alt_mem_Onchip_SRAM+0xf8006e6c>
    784c:	d8800617 	ldw	r2,24(sp)
    7850:	00be9b16 	blt	zero,r2,72c0 <__alt_mem_Onchip_SRAM+0xf80072c0>
    7854:	10010f1e 	bne	r2,zero,7c94 <_dtoa_r+0x116c>
    7858:	880b883a 	mov	r5,r17
    785c:	000d883a 	mov	r6,zero
    7860:	01d00534 	movhi	r7,16404
    7864:	8009883a 	mov	r4,r16
    7868:	0010a2c0 	call	10a2c <__muldf3>
    786c:	900d883a 	mov	r6,r18
    7870:	980f883a 	mov	r7,r19
    7874:	1009883a 	mov	r4,r2
    7878:	180b883a 	mov	r5,r3
    787c:	001085c0 	call	1085c <__gedf2>
    7880:	002b883a 	mov	r21,zero
    7884:	0023883a 	mov	r17,zero
    7888:	1000bf16 	blt	r2,zero,7b88 <_dtoa_r+0x1060>
    788c:	d9802217 	ldw	r6,136(sp)
    7890:	ddc00717 	ldw	r23,28(sp)
    7894:	018c303a 	nor	r6,zero,r6
    7898:	d9800515 	stw	r6,20(sp)
    789c:	a80b883a 	mov	r5,r21
    78a0:	e009883a 	mov	r4,fp
    78a4:	00094b40 	call	94b4 <_Bfree>
    78a8:	883e4926 	beq	r17,zero,71d0 <__alt_mem_Onchip_SRAM+0xf80071d0>
    78ac:	003fad06 	br	7764 <__alt_mem_Onchip_SRAM+0xf8007764>
    78b0:	d9c01117 	ldw	r7,68(sp)
    78b4:	3801bc26 	beq	r7,zero,7fa8 <_dtoa_r+0x1480>
    78b8:	10810cc4 	addi	r2,r2,1075
    78bc:	dd400a17 	ldw	r21,40(sp)
    78c0:	dd000817 	ldw	r20,32(sp)
    78c4:	003f0a06 	br	74f0 <__alt_mem_Onchip_SRAM+0xf80074f0>
    78c8:	00800704 	movi	r2,28
    78cc:	d9000817 	ldw	r4,32(sp)
    78d0:	a0a9883a 	add	r20,r20,r2
    78d4:	b0ad883a 	add	r22,r22,r2
    78d8:	2089883a 	add	r4,r4,r2
    78dc:	d9000815 	stw	r4,32(sp)
    78e0:	003f5106 	br	7628 <__alt_mem_Onchip_SRAM+0xf8007628>
    78e4:	d8c00317 	ldw	r3,12(sp)
    78e8:	b8c1fc0e 	bge	r23,r3,80dc <_dtoa_r+0x15b4>
    78ec:	0027883a 	mov	r19,zero
    78f0:	b805883a 	mov	r2,r23
    78f4:	003f3e06 	br	75f0 <__alt_mem_Onchip_SRAM+0xf80075f0>
    78f8:	880b883a 	mov	r5,r17
    78fc:	e009883a 	mov	r4,fp
    7900:	000f883a 	mov	r7,zero
    7904:	01800284 	movi	r6,10
    7908:	00094dc0 	call	94dc <__multadd>
    790c:	d9000c17 	ldw	r4,48(sp)
    7910:	1023883a 	mov	r17,r2
    7914:	0102040e 	bge	zero,r4,8128 <_dtoa_r+0x1600>
    7918:	d9000615 	stw	r4,24(sp)
    791c:	0500050e 	bge	zero,r20,7934 <_dtoa_r+0xe0c>
    7920:	880b883a 	mov	r5,r17
    7924:	a00d883a 	mov	r6,r20
    7928:	e009883a 	mov	r4,fp
    792c:	0009c480 	call	9c48 <__lshift>
    7930:	1023883a 	mov	r17,r2
    7934:	9801241e 	bne	r19,zero,7dc8 <_dtoa_r+0x12a0>
    7938:	8829883a 	mov	r20,r17
    793c:	d9000617 	ldw	r4,24(sp)
    7940:	dcc00717 	ldw	r19,28(sp)
    7944:	9480004c 	andi	r18,r18,1
    7948:	20bfffc4 	addi	r2,r4,-1
    794c:	9885883a 	add	r2,r19,r2
    7950:	d8800415 	stw	r2,16(sp)
    7954:	dc800615 	stw	r18,24(sp)
    7958:	a80b883a 	mov	r5,r21
    795c:	8009883a 	mov	r4,r16
    7960:	00069000 	call	6900 <quorem>
    7964:	880b883a 	mov	r5,r17
    7968:	8009883a 	mov	r4,r16
    796c:	102f883a 	mov	r23,r2
    7970:	0009d900 	call	9d90 <__mcmp>
    7974:	a80b883a 	mov	r5,r21
    7978:	a00d883a 	mov	r6,r20
    797c:	e009883a 	mov	r4,fp
    7980:	102d883a 	mov	r22,r2
    7984:	0009df00 	call	9df0 <__mdiff>
    7988:	1007883a 	mov	r3,r2
    798c:	10800317 	ldw	r2,12(r2)
    7990:	bc800c04 	addi	r18,r23,48
    7994:	180b883a 	mov	r5,r3
    7998:	10004e1e 	bne	r2,zero,7ad4 <_dtoa_r+0xfac>
    799c:	8009883a 	mov	r4,r16
    79a0:	d8c01615 	stw	r3,88(sp)
    79a4:	0009d900 	call	9d90 <__mcmp>
    79a8:	d8c01617 	ldw	r3,88(sp)
    79ac:	e009883a 	mov	r4,fp
    79b0:	d8801615 	stw	r2,88(sp)
    79b4:	180b883a 	mov	r5,r3
    79b8:	00094b40 	call	94b4 <_Bfree>
    79bc:	d8801617 	ldw	r2,88(sp)
    79c0:	1000041e 	bne	r2,zero,79d4 <_dtoa_r+0xeac>
    79c4:	d9800317 	ldw	r6,12(sp)
    79c8:	3000021e 	bne	r6,zero,79d4 <_dtoa_r+0xeac>
    79cc:	d8c00617 	ldw	r3,24(sp)
    79d0:	18003726 	beq	r3,zero,7ab0 <_dtoa_r+0xf88>
    79d4:	b0002016 	blt	r22,zero,7a58 <_dtoa_r+0xf30>
    79d8:	b000041e 	bne	r22,zero,79ec <_dtoa_r+0xec4>
    79dc:	d9000317 	ldw	r4,12(sp)
    79e0:	2000021e 	bne	r4,zero,79ec <_dtoa_r+0xec4>
    79e4:	d8c00617 	ldw	r3,24(sp)
    79e8:	18001b26 	beq	r3,zero,7a58 <_dtoa_r+0xf30>
    79ec:	00810716 	blt	zero,r2,7e0c <_dtoa_r+0x12e4>
    79f0:	d8c00417 	ldw	r3,16(sp)
    79f4:	9d800044 	addi	r22,r19,1
    79f8:	9c800005 	stb	r18,0(r19)
    79fc:	b02f883a 	mov	r23,r22
    7a00:	98c10626 	beq	r19,r3,7e1c <_dtoa_r+0x12f4>
    7a04:	800b883a 	mov	r5,r16
    7a08:	000f883a 	mov	r7,zero
    7a0c:	01800284 	movi	r6,10
    7a10:	e009883a 	mov	r4,fp
    7a14:	00094dc0 	call	94dc <__multadd>
    7a18:	1021883a 	mov	r16,r2
    7a1c:	000f883a 	mov	r7,zero
    7a20:	01800284 	movi	r6,10
    7a24:	880b883a 	mov	r5,r17
    7a28:	e009883a 	mov	r4,fp
    7a2c:	8d002526 	beq	r17,r20,7ac4 <_dtoa_r+0xf9c>
    7a30:	00094dc0 	call	94dc <__multadd>
    7a34:	a00b883a 	mov	r5,r20
    7a38:	000f883a 	mov	r7,zero
    7a3c:	01800284 	movi	r6,10
    7a40:	e009883a 	mov	r4,fp
    7a44:	1023883a 	mov	r17,r2
    7a48:	00094dc0 	call	94dc <__multadd>
    7a4c:	1029883a 	mov	r20,r2
    7a50:	b027883a 	mov	r19,r22
    7a54:	003fc006 	br	7958 <__alt_mem_Onchip_SRAM+0xf8007958>
    7a58:	9011883a 	mov	r8,r18
    7a5c:	00800e0e 	bge	zero,r2,7a98 <_dtoa_r+0xf70>
    7a60:	800b883a 	mov	r5,r16
    7a64:	01800044 	movi	r6,1
    7a68:	e009883a 	mov	r4,fp
    7a6c:	da001715 	stw	r8,92(sp)
    7a70:	0009c480 	call	9c48 <__lshift>
    7a74:	a80b883a 	mov	r5,r21
    7a78:	1009883a 	mov	r4,r2
    7a7c:	1021883a 	mov	r16,r2
    7a80:	0009d900 	call	9d90 <__mcmp>
    7a84:	da001717 	ldw	r8,92(sp)
    7a88:	0081960e 	bge	zero,r2,80e4 <_dtoa_r+0x15bc>
    7a8c:	00800e44 	movi	r2,57
    7a90:	40817026 	beq	r8,r2,8054 <_dtoa_r+0x152c>
    7a94:	ba000c44 	addi	r8,r23,49
    7a98:	8825883a 	mov	r18,r17
    7a9c:	9dc00044 	addi	r23,r19,1
    7aa0:	9a000005 	stb	r8,0(r19)
    7aa4:	a023883a 	mov	r17,r20
    7aa8:	dc000915 	stw	r16,36(sp)
    7aac:	003f2406 	br	7740 <__alt_mem_Onchip_SRAM+0xf8007740>
    7ab0:	00800e44 	movi	r2,57
    7ab4:	9011883a 	mov	r8,r18
    7ab8:	90816626 	beq	r18,r2,8054 <_dtoa_r+0x152c>
    7abc:	05bff516 	blt	zero,r22,7a94 <__alt_mem_Onchip_SRAM+0xf8007a94>
    7ac0:	003ff506 	br	7a98 <__alt_mem_Onchip_SRAM+0xf8007a98>
    7ac4:	00094dc0 	call	94dc <__multadd>
    7ac8:	1023883a 	mov	r17,r2
    7acc:	1029883a 	mov	r20,r2
    7ad0:	003fdf06 	br	7a50 <__alt_mem_Onchip_SRAM+0xf8007a50>
    7ad4:	e009883a 	mov	r4,fp
    7ad8:	00094b40 	call	94b4 <_Bfree>
    7adc:	00800044 	movi	r2,1
    7ae0:	003fbc06 	br	79d4 <__alt_mem_Onchip_SRAM+0xf80079d4>
    7ae4:	a80b883a 	mov	r5,r21
    7ae8:	8009883a 	mov	r4,r16
    7aec:	0009d900 	call	9d90 <__mcmp>
    7af0:	103edb0e 	bge	r2,zero,7660 <__alt_mem_Onchip_SRAM+0xf8007660>
    7af4:	800b883a 	mov	r5,r16
    7af8:	000f883a 	mov	r7,zero
    7afc:	01800284 	movi	r6,10
    7b00:	e009883a 	mov	r4,fp
    7b04:	00094dc0 	call	94dc <__multadd>
    7b08:	1021883a 	mov	r16,r2
    7b0c:	d8800517 	ldw	r2,20(sp)
    7b10:	d8c00b17 	ldw	r3,44(sp)
    7b14:	10bfffc4 	addi	r2,r2,-1
    7b18:	d8800515 	stw	r2,20(sp)
    7b1c:	183f761e 	bne	r3,zero,78f8 <__alt_mem_Onchip_SRAM+0xf80078f8>
    7b20:	d9000c17 	ldw	r4,48(sp)
    7b24:	0101730e 	bge	zero,r4,80f4 <_dtoa_r+0x15cc>
    7b28:	d9000615 	stw	r4,24(sp)
    7b2c:	003ed006 	br	7670 <__alt_mem_Onchip_SRAM+0xf8007670>
    7b30:	00800084 	movi	r2,2
    7b34:	3081861e 	bne	r6,r2,8150 <_dtoa_r+0x1628>
    7b38:	d8000b15 	stw	zero,44(sp)
    7b3c:	003f3c06 	br	7830 <__alt_mem_Onchip_SRAM+0xf8007830>
    7b40:	dc000917 	ldw	r16,36(sp)
    7b44:	003e9206 	br	7590 <__alt_mem_Onchip_SRAM+0xf8007590>
    7b48:	d9c00317 	ldw	r7,12(sp)
    7b4c:	00800084 	movi	r2,2
    7b50:	11fec50e 	bge	r2,r7,7668 <__alt_mem_Onchip_SRAM+0xf8007668>
    7b54:	d9000617 	ldw	r4,24(sp)
    7b58:	20013c1e 	bne	r4,zero,804c <_dtoa_r+0x1524>
    7b5c:	a80b883a 	mov	r5,r21
    7b60:	000f883a 	mov	r7,zero
    7b64:	01800144 	movi	r6,5
    7b68:	e009883a 	mov	r4,fp
    7b6c:	00094dc0 	call	94dc <__multadd>
    7b70:	100b883a 	mov	r5,r2
    7b74:	8009883a 	mov	r4,r16
    7b78:	102b883a 	mov	r21,r2
    7b7c:	0009d900 	call	9d90 <__mcmp>
    7b80:	dc000915 	stw	r16,36(sp)
    7b84:	00bf410e 	bge	zero,r2,788c <__alt_mem_Onchip_SRAM+0xf800788c>
    7b88:	d9c00717 	ldw	r7,28(sp)
    7b8c:	00800c44 	movi	r2,49
    7b90:	38800005 	stb	r2,0(r7)
    7b94:	d8800517 	ldw	r2,20(sp)
    7b98:	3dc00044 	addi	r23,r7,1
    7b9c:	10800044 	addi	r2,r2,1
    7ba0:	d8800515 	stw	r2,20(sp)
    7ba4:	003f3d06 	br	789c <__alt_mem_Onchip_SRAM+0xf800789c>
    7ba8:	d9800517 	ldw	r6,20(sp)
    7bac:	d9c00717 	ldw	r7,28(sp)
    7bb0:	00800c44 	movi	r2,49
    7bb4:	31800044 	addi	r6,r6,1
    7bb8:	d9800515 	stw	r6,20(sp)
    7bbc:	38800005 	stb	r2,0(r7)
    7bc0:	003edf06 	br	7740 <__alt_mem_Onchip_SRAM+0xf8007740>
    7bc4:	d8000b15 	stw	zero,44(sp)
    7bc8:	003c9f06 	br	6e48 <__alt_mem_Onchip_SRAM+0xf8006e48>
    7bcc:	903e7e1e 	bne	r18,zero,75c8 <__alt_mem_Onchip_SRAM+0xf80075c8>
    7bd0:	00800434 	movhi	r2,16
    7bd4:	10bfffc4 	addi	r2,r2,-1
    7bd8:	9884703a 	and	r2,r19,r2
    7bdc:	1000ea1e 	bne	r2,zero,7f88 <_dtoa_r+0x1460>
    7be0:	9cdffc2c 	andhi	r19,r19,32752
    7be4:	9800e826 	beq	r19,zero,7f88 <_dtoa_r+0x1460>
    7be8:	d9c00817 	ldw	r7,32(sp)
    7bec:	b5800044 	addi	r22,r22,1
    7bf0:	04c00044 	movi	r19,1
    7bf4:	39c00044 	addi	r7,r7,1
    7bf8:	d9c00815 	stw	r7,32(sp)
    7bfc:	d8800d17 	ldw	r2,52(sp)
    7c00:	103e721e 	bne	r2,zero,75cc <__alt_mem_Onchip_SRAM+0xf80075cc>
    7c04:	00800044 	movi	r2,1
    7c08:	003e7906 	br	75f0 <__alt_mem_Onchip_SRAM+0xf80075f0>
    7c0c:	8009883a 	mov	r4,r16
    7c10:	0011c140 	call	11c14 <__floatsidf>
    7c14:	d9800f17 	ldw	r6,60(sp)
    7c18:	d9c01017 	ldw	r7,64(sp)
    7c1c:	1009883a 	mov	r4,r2
    7c20:	180b883a 	mov	r5,r3
    7c24:	0010a2c0 	call	10a2c <__muldf3>
    7c28:	000d883a 	mov	r6,zero
    7c2c:	01d00734 	movhi	r7,16412
    7c30:	1009883a 	mov	r4,r2
    7c34:	180b883a 	mov	r5,r3
    7c38:	000f5580 	call	f558 <__adddf3>
    7c3c:	047f3034 	movhi	r17,64704
    7c40:	1021883a 	mov	r16,r2
    7c44:	1c63883a 	add	r17,r3,r17
    7c48:	d9000f17 	ldw	r4,60(sp)
    7c4c:	d9401017 	ldw	r5,64(sp)
    7c50:	000d883a 	mov	r6,zero
    7c54:	01d00534 	movhi	r7,16404
    7c58:	00112980 	call	11298 <__subdf3>
    7c5c:	800d883a 	mov	r6,r16
    7c60:	880f883a 	mov	r7,r17
    7c64:	1009883a 	mov	r4,r2
    7c68:	180b883a 	mov	r5,r3
    7c6c:	102b883a 	mov	r21,r2
    7c70:	1829883a 	mov	r20,r3
    7c74:	001085c0 	call	1085c <__gedf2>
    7c78:	00806c16 	blt	zero,r2,7e2c <_dtoa_r+0x1304>
    7c7c:	89e0003c 	xorhi	r7,r17,32768
    7c80:	800d883a 	mov	r6,r16
    7c84:	a809883a 	mov	r4,r21
    7c88:	a00b883a 	mov	r5,r20
    7c8c:	00109380 	call	10938 <__ledf2>
    7c90:	103d7e0e 	bge	r2,zero,728c <__alt_mem_Onchip_SRAM+0xf800728c>
    7c94:	002b883a 	mov	r21,zero
    7c98:	0023883a 	mov	r17,zero
    7c9c:	003efb06 	br	788c <__alt_mem_Onchip_SRAM+0xf800788c>
    7ca0:	d8800717 	ldw	r2,28(sp)
    7ca4:	003bd006 	br	6be8 <__alt_mem_Onchip_SRAM+0xf8006be8>
    7ca8:	d9000a17 	ldw	r4,40(sp)
    7cac:	d9800d17 	ldw	r6,52(sp)
    7cb0:	dd400a15 	stw	r21,40(sp)
    7cb4:	a905c83a 	sub	r2,r21,r4
    7cb8:	308d883a 	add	r6,r6,r2
    7cbc:	d9800d15 	stw	r6,52(sp)
    7cc0:	002b883a 	mov	r21,zero
    7cc4:	003e0606 	br	74e0 <__alt_mem_Onchip_SRAM+0xf80074e0>
    7cc8:	9023883a 	mov	r17,r18
    7ccc:	9829883a 	mov	r20,r19
    7cd0:	04000084 	movi	r16,2
    7cd4:	003c9206 	br	6f20 <__alt_mem_Onchip_SRAM+0xf8006f20>
    7cd8:	04000044 	movi	r16,1
    7cdc:	dc000c15 	stw	r16,48(sp)
    7ce0:	dc000615 	stw	r16,24(sp)
    7ce4:	dc002215 	stw	r16,136(sp)
    7ce8:	e0001115 	stw	zero,68(fp)
    7cec:	000b883a 	mov	r5,zero
    7cf0:	003c6906 	br	6e98 <__alt_mem_Onchip_SRAM+0xf8006e98>
    7cf4:	3021883a 	mov	r16,r6
    7cf8:	003ffb06 	br	7ce8 <__alt_mem_Onchip_SRAM+0xf8007ce8>
    7cfc:	1000021e 	bne	r2,zero,7d08 <_dtoa_r+0x11e0>
    7d00:	4200004c 	andi	r8,r8,1
    7d04:	403e7d1e 	bne	r8,zero,76fc <__alt_mem_Onchip_SRAM+0xf80076fc>
    7d08:	01000c04 	movi	r4,48
    7d0c:	00000106 	br	7d14 <_dtoa_r+0x11ec>
    7d10:	102f883a 	mov	r23,r2
    7d14:	b8bfffc4 	addi	r2,r23,-1
    7d18:	10c00007 	ldb	r3,0(r2)
    7d1c:	193ffc26 	beq	r3,r4,7d10 <__alt_mem_Onchip_SRAM+0xf8007d10>
    7d20:	003e8706 	br	7740 <__alt_mem_Onchip_SRAM+0xf8007740>
    7d24:	d8800517 	ldw	r2,20(sp)
    7d28:	00a3c83a 	sub	r17,zero,r2
    7d2c:	8800a426 	beq	r17,zero,7fc0 <_dtoa_r+0x1498>
    7d30:	888003cc 	andi	r2,r17,15
    7d34:	100490fa 	slli	r2,r2,3
    7d38:	00c000b4 	movhi	r3,2
    7d3c:	18e0db04 	addi	r3,r3,-31892
    7d40:	1885883a 	add	r2,r3,r2
    7d44:	11800017 	ldw	r6,0(r2)
    7d48:	11c00117 	ldw	r7,4(r2)
    7d4c:	9009883a 	mov	r4,r18
    7d50:	980b883a 	mov	r5,r19
    7d54:	8823d13a 	srai	r17,r17,4
    7d58:	0010a2c0 	call	10a2c <__muldf3>
    7d5c:	d8800f15 	stw	r2,60(sp)
    7d60:	d8c01015 	stw	r3,64(sp)
    7d64:	8800e826 	beq	r17,zero,8108 <_dtoa_r+0x15e0>
    7d68:	050000b4 	movhi	r20,2
    7d6c:	a520d104 	addi	r20,r20,-31932
    7d70:	04000084 	movi	r16,2
    7d74:	8980004c 	andi	r6,r17,1
    7d78:	1009883a 	mov	r4,r2
    7d7c:	8823d07a 	srai	r17,r17,1
    7d80:	180b883a 	mov	r5,r3
    7d84:	30000426 	beq	r6,zero,7d98 <_dtoa_r+0x1270>
    7d88:	a1800017 	ldw	r6,0(r20)
    7d8c:	a1c00117 	ldw	r7,4(r20)
    7d90:	84000044 	addi	r16,r16,1
    7d94:	0010a2c0 	call	10a2c <__muldf3>
    7d98:	a5000204 	addi	r20,r20,8
    7d9c:	883ff51e 	bne	r17,zero,7d74 <__alt_mem_Onchip_SRAM+0xf8007d74>
    7da0:	d8800f15 	stw	r2,60(sp)
    7da4:	d8c01015 	stw	r3,64(sp)
    7da8:	003c7606 	br	6f84 <__alt_mem_Onchip_SRAM+0xf8006f84>
    7dac:	00c00c04 	movi	r3,48
    7db0:	10c00005 	stb	r3,0(r2)
    7db4:	d8c00517 	ldw	r3,20(sp)
    7db8:	bd3fffc3 	ldbu	r20,-1(r23)
    7dbc:	18c00044 	addi	r3,r3,1
    7dc0:	d8c00515 	stw	r3,20(sp)
    7dc4:	003db906 	br	74ac <__alt_mem_Onchip_SRAM+0xf80074ac>
    7dc8:	89400117 	ldw	r5,4(r17)
    7dcc:	e009883a 	mov	r4,fp
    7dd0:	000940c0 	call	940c <_Balloc>
    7dd4:	89800417 	ldw	r6,16(r17)
    7dd8:	89400304 	addi	r5,r17,12
    7ddc:	11000304 	addi	r4,r2,12
    7de0:	31800084 	addi	r6,r6,2
    7de4:	318d883a 	add	r6,r6,r6
    7de8:	318d883a 	add	r6,r6,r6
    7dec:	1027883a 	mov	r19,r2
    7df0:	000919c0 	call	919c <memcpy>
    7df4:	01800044 	movi	r6,1
    7df8:	980b883a 	mov	r5,r19
    7dfc:	e009883a 	mov	r4,fp
    7e00:	0009c480 	call	9c48 <__lshift>
    7e04:	1029883a 	mov	r20,r2
    7e08:	003ecc06 	br	793c <__alt_mem_Onchip_SRAM+0xf800793c>
    7e0c:	00800e44 	movi	r2,57
    7e10:	90809026 	beq	r18,r2,8054 <_dtoa_r+0x152c>
    7e14:	92000044 	addi	r8,r18,1
    7e18:	003f1f06 	br	7a98 <__alt_mem_Onchip_SRAM+0xf8007a98>
    7e1c:	9011883a 	mov	r8,r18
    7e20:	8825883a 	mov	r18,r17
    7e24:	a023883a 	mov	r17,r20
    7e28:	003e2906 	br	76d0 <__alt_mem_Onchip_SRAM+0xf80076d0>
    7e2c:	002b883a 	mov	r21,zero
    7e30:	0023883a 	mov	r17,zero
    7e34:	003f5406 	br	7b88 <__alt_mem_Onchip_SRAM+0xf8007b88>
    7e38:	61bfffc4 	addi	r6,r12,-1
    7e3c:	300490fa 	slli	r2,r6,3
    7e40:	00c000b4 	movhi	r3,2
    7e44:	18e0db04 	addi	r3,r3,-31892
    7e48:	1885883a 	add	r2,r3,r2
    7e4c:	11000017 	ldw	r4,0(r2)
    7e50:	11400117 	ldw	r5,4(r2)
    7e54:	d8800717 	ldw	r2,28(sp)
    7e58:	880f883a 	mov	r7,r17
    7e5c:	d9801215 	stw	r6,72(sp)
    7e60:	800d883a 	mov	r6,r16
    7e64:	db001615 	stw	r12,88(sp)
    7e68:	15c00044 	addi	r23,r2,1
    7e6c:	0010a2c0 	call	10a2c <__muldf3>
    7e70:	d9401017 	ldw	r5,64(sp)
    7e74:	d9000f17 	ldw	r4,60(sp)
    7e78:	d8c01515 	stw	r3,84(sp)
    7e7c:	d8801415 	stw	r2,80(sp)
    7e80:	0011b940 	call	11b94 <__fixdfsi>
    7e84:	1009883a 	mov	r4,r2
    7e88:	1021883a 	mov	r16,r2
    7e8c:	0011c140 	call	11c14 <__floatsidf>
    7e90:	d9000f17 	ldw	r4,60(sp)
    7e94:	d9401017 	ldw	r5,64(sp)
    7e98:	100d883a 	mov	r6,r2
    7e9c:	180f883a 	mov	r7,r3
    7ea0:	00112980 	call	11298 <__subdf3>
    7ea4:	1829883a 	mov	r20,r3
    7ea8:	d8c00717 	ldw	r3,28(sp)
    7eac:	84000c04 	addi	r16,r16,48
    7eb0:	1023883a 	mov	r17,r2
    7eb4:	1c000005 	stb	r16,0(r3)
    7eb8:	db001617 	ldw	r12,88(sp)
    7ebc:	00800044 	movi	r2,1
    7ec0:	60802226 	beq	r12,r2,7f4c <_dtoa_r+0x1424>
    7ec4:	d9c00717 	ldw	r7,28(sp)
    7ec8:	8805883a 	mov	r2,r17
    7ecc:	b82b883a 	mov	r21,r23
    7ed0:	3b19883a 	add	r12,r7,r12
    7ed4:	6023883a 	mov	r17,r12
    7ed8:	a007883a 	mov	r3,r20
    7edc:	dc800f15 	stw	r18,60(sp)
    7ee0:	000d883a 	mov	r6,zero
    7ee4:	01d00934 	movhi	r7,16420
    7ee8:	1009883a 	mov	r4,r2
    7eec:	180b883a 	mov	r5,r3
    7ef0:	0010a2c0 	call	10a2c <__muldf3>
    7ef4:	180b883a 	mov	r5,r3
    7ef8:	1009883a 	mov	r4,r2
    7efc:	1829883a 	mov	r20,r3
    7f00:	1025883a 	mov	r18,r2
    7f04:	0011b940 	call	11b94 <__fixdfsi>
    7f08:	1009883a 	mov	r4,r2
    7f0c:	1021883a 	mov	r16,r2
    7f10:	0011c140 	call	11c14 <__floatsidf>
    7f14:	100d883a 	mov	r6,r2
    7f18:	180f883a 	mov	r7,r3
    7f1c:	9009883a 	mov	r4,r18
    7f20:	a00b883a 	mov	r5,r20
    7f24:	84000c04 	addi	r16,r16,48
    7f28:	00112980 	call	11298 <__subdf3>
    7f2c:	ad400044 	addi	r21,r21,1
    7f30:	ac3fffc5 	stb	r16,-1(r21)
    7f34:	ac7fea1e 	bne	r21,r17,7ee0 <__alt_mem_Onchip_SRAM+0xf8007ee0>
    7f38:	1023883a 	mov	r17,r2
    7f3c:	d8801217 	ldw	r2,72(sp)
    7f40:	dc800f17 	ldw	r18,60(sp)
    7f44:	1829883a 	mov	r20,r3
    7f48:	b8af883a 	add	r23,r23,r2
    7f4c:	d9001417 	ldw	r4,80(sp)
    7f50:	d9401517 	ldw	r5,84(sp)
    7f54:	000d883a 	mov	r6,zero
    7f58:	01cff834 	movhi	r7,16352
    7f5c:	000f5580 	call	f558 <__adddf3>
    7f60:	880d883a 	mov	r6,r17
    7f64:	a00f883a 	mov	r7,r20
    7f68:	1009883a 	mov	r4,r2
    7f6c:	180b883a 	mov	r5,r3
    7f70:	00109380 	call	10938 <__ledf2>
    7f74:	10003e0e 	bge	r2,zero,8070 <_dtoa_r+0x1548>
    7f78:	d9001317 	ldw	r4,76(sp)
    7f7c:	bd3fffc3 	ldbu	r20,-1(r23)
    7f80:	d9000515 	stw	r4,20(sp)
    7f84:	003d3b06 	br	7474 <__alt_mem_Onchip_SRAM+0xf8007474>
    7f88:	0027883a 	mov	r19,zero
    7f8c:	003f1b06 	br	7bfc <__alt_mem_Onchip_SRAM+0xf8007bfc>
    7f90:	d8800817 	ldw	r2,32(sp)
    7f94:	11e9c83a 	sub	r20,r2,r7
    7f98:	0005883a 	mov	r2,zero
    7f9c:	003d5406 	br	74f0 <__alt_mem_Onchip_SRAM+0xf80074f0>
    7fa0:	00800044 	movi	r2,1
    7fa4:	003dc706 	br	76c4 <__alt_mem_Onchip_SRAM+0xf80076c4>
    7fa8:	d8c00217 	ldw	r3,8(sp)
    7fac:	00800d84 	movi	r2,54
    7fb0:	dd400a17 	ldw	r21,40(sp)
    7fb4:	10c5c83a 	sub	r2,r2,r3
    7fb8:	dd000817 	ldw	r20,32(sp)
    7fbc:	003d4c06 	br	74f0 <__alt_mem_Onchip_SRAM+0xf80074f0>
    7fc0:	dc800f15 	stw	r18,60(sp)
    7fc4:	dcc01015 	stw	r19,64(sp)
    7fc8:	04000084 	movi	r16,2
    7fcc:	003bed06 	br	6f84 <__alt_mem_Onchip_SRAM+0xf8006f84>
    7fd0:	d9000617 	ldw	r4,24(sp)
    7fd4:	203f0d26 	beq	r4,zero,7c0c <__alt_mem_Onchip_SRAM+0xf8007c0c>
    7fd8:	d9800c17 	ldw	r6,48(sp)
    7fdc:	01bcab0e 	bge	zero,r6,728c <__alt_mem_Onchip_SRAM+0xf800728c>
    7fe0:	d9401017 	ldw	r5,64(sp)
    7fe4:	d9000f17 	ldw	r4,60(sp)
    7fe8:	000d883a 	mov	r6,zero
    7fec:	01d00934 	movhi	r7,16420
    7ff0:	0010a2c0 	call	10a2c <__muldf3>
    7ff4:	81000044 	addi	r4,r16,1
    7ff8:	d8800f15 	stw	r2,60(sp)
    7ffc:	d8c01015 	stw	r3,64(sp)
    8000:	0011c140 	call	11c14 <__floatsidf>
    8004:	d9800f17 	ldw	r6,60(sp)
    8008:	d9c01017 	ldw	r7,64(sp)
    800c:	1009883a 	mov	r4,r2
    8010:	180b883a 	mov	r5,r3
    8014:	0010a2c0 	call	10a2c <__muldf3>
    8018:	01d00734 	movhi	r7,16412
    801c:	000d883a 	mov	r6,zero
    8020:	1009883a 	mov	r4,r2
    8024:	180b883a 	mov	r5,r3
    8028:	000f5580 	call	f558 <__adddf3>
    802c:	d9c00517 	ldw	r7,20(sp)
    8030:	047f3034 	movhi	r17,64704
    8034:	1021883a 	mov	r16,r2
    8038:	39ffffc4 	addi	r7,r7,-1
    803c:	d9c01315 	stw	r7,76(sp)
    8040:	1c63883a 	add	r17,r3,r17
    8044:	db000c17 	ldw	r12,48(sp)
    8048:	003bea06 	br	6ff4 <__alt_mem_Onchip_SRAM+0xf8006ff4>
    804c:	dc000915 	stw	r16,36(sp)
    8050:	003e0e06 	br	788c <__alt_mem_Onchip_SRAM+0xf800788c>
    8054:	01000e44 	movi	r4,57
    8058:	8825883a 	mov	r18,r17
    805c:	9dc00044 	addi	r23,r19,1
    8060:	99000005 	stb	r4,0(r19)
    8064:	a023883a 	mov	r17,r20
    8068:	dc000915 	stw	r16,36(sp)
    806c:	003da406 	br	7700 <__alt_mem_Onchip_SRAM+0xf8007700>
    8070:	d9801417 	ldw	r6,80(sp)
    8074:	d9c01517 	ldw	r7,84(sp)
    8078:	0009883a 	mov	r4,zero
    807c:	014ff834 	movhi	r5,16352
    8080:	00112980 	call	11298 <__subdf3>
    8084:	880d883a 	mov	r6,r17
    8088:	a00f883a 	mov	r7,r20
    808c:	1009883a 	mov	r4,r2
    8090:	180b883a 	mov	r5,r3
    8094:	001085c0 	call	1085c <__gedf2>
    8098:	00bc7c0e 	bge	zero,r2,728c <__alt_mem_Onchip_SRAM+0xf800728c>
    809c:	01000c04 	movi	r4,48
    80a0:	00000106 	br	80a8 <_dtoa_r+0x1580>
    80a4:	102f883a 	mov	r23,r2
    80a8:	b8bfffc4 	addi	r2,r23,-1
    80ac:	10c00007 	ldb	r3,0(r2)
    80b0:	193ffc26 	beq	r3,r4,80a4 <__alt_mem_Onchip_SRAM+0xf80080a4>
    80b4:	d9801317 	ldw	r6,76(sp)
    80b8:	d9800515 	stw	r6,20(sp)
    80bc:	003c4406 	br	71d0 <__alt_mem_Onchip_SRAM+0xf80071d0>
    80c0:	d9801317 	ldw	r6,76(sp)
    80c4:	d9800515 	stw	r6,20(sp)
    80c8:	003cea06 	br	7474 <__alt_mem_Onchip_SRAM+0xf8007474>
    80cc:	dd800f17 	ldw	r22,60(sp)
    80d0:	dcc01017 	ldw	r19,64(sp)
    80d4:	dc801217 	ldw	r18,72(sp)
    80d8:	003c6c06 	br	728c <__alt_mem_Onchip_SRAM+0xf800728c>
    80dc:	903e031e 	bne	r18,zero,78ec <__alt_mem_Onchip_SRAM+0xf80078ec>
    80e0:	003ebb06 	br	7bd0 <__alt_mem_Onchip_SRAM+0xf8007bd0>
    80e4:	103e6c1e 	bne	r2,zero,7a98 <__alt_mem_Onchip_SRAM+0xf8007a98>
    80e8:	4080004c 	andi	r2,r8,1
    80ec:	103e6a26 	beq	r2,zero,7a98 <__alt_mem_Onchip_SRAM+0xf8007a98>
    80f0:	003e6606 	br	7a8c <__alt_mem_Onchip_SRAM+0xf8007a8c>
    80f4:	d8c00317 	ldw	r3,12(sp)
    80f8:	00800084 	movi	r2,2
    80fc:	10c02916 	blt	r2,r3,81a4 <_dtoa_r+0x167c>
    8100:	d9000c17 	ldw	r4,48(sp)
    8104:	003e8806 	br	7b28 <__alt_mem_Onchip_SRAM+0xf8007b28>
    8108:	04000084 	movi	r16,2
    810c:	003b9d06 	br	6f84 <__alt_mem_Onchip_SRAM+0xf8006f84>
    8110:	d9001317 	ldw	r4,76(sp)
    8114:	d9000515 	stw	r4,20(sp)
    8118:	003cd606 	br	7474 <__alt_mem_Onchip_SRAM+0xf8007474>
    811c:	d8801317 	ldw	r2,76(sp)
    8120:	d8800515 	stw	r2,20(sp)
    8124:	003c2a06 	br	71d0 <__alt_mem_Onchip_SRAM+0xf80071d0>
    8128:	d9800317 	ldw	r6,12(sp)
    812c:	00800084 	movi	r2,2
    8130:	11801516 	blt	r2,r6,8188 <_dtoa_r+0x1660>
    8134:	d9c00c17 	ldw	r7,48(sp)
    8138:	d9c00615 	stw	r7,24(sp)
    813c:	003df706 	br	791c <__alt_mem_Onchip_SRAM+0xf800791c>
    8140:	193d3926 	beq	r3,r4,7628 <__alt_mem_Onchip_SRAM+0xf8007628>
    8144:	00c00f04 	movi	r3,60
    8148:	1885c83a 	sub	r2,r3,r2
    814c:	003ddf06 	br	78cc <__alt_mem_Onchip_SRAM+0xf80078cc>
    8150:	e009883a 	mov	r4,fp
    8154:	e0001115 	stw	zero,68(fp)
    8158:	000b883a 	mov	r5,zero
    815c:	000940c0 	call	940c <_Balloc>
    8160:	d8800715 	stw	r2,28(sp)
    8164:	d8c00717 	ldw	r3,28(sp)
    8168:	00bfffc4 	movi	r2,-1
    816c:	01000044 	movi	r4,1
    8170:	d8800c15 	stw	r2,48(sp)
    8174:	e0c01015 	stw	r3,64(fp)
    8178:	d9000b15 	stw	r4,44(sp)
    817c:	d8800615 	stw	r2,24(sp)
    8180:	d8002215 	stw	zero,136(sp)
    8184:	003c4106 	br	728c <__alt_mem_Onchip_SRAM+0xf800728c>
    8188:	d8c00c17 	ldw	r3,48(sp)
    818c:	d8c00615 	stw	r3,24(sp)
    8190:	003e7006 	br	7b54 <__alt_mem_Onchip_SRAM+0xf8007b54>
    8194:	04400044 	movi	r17,1
    8198:	003b2006 	br	6e1c <__alt_mem_Onchip_SRAM+0xf8006e1c>
    819c:	000b883a 	mov	r5,zero
    81a0:	003b3d06 	br	6e98 <__alt_mem_Onchip_SRAM+0xf8006e98>
    81a4:	d8800c17 	ldw	r2,48(sp)
    81a8:	d8800615 	stw	r2,24(sp)
    81ac:	003e6906 	br	7b54 <__alt_mem_Onchip_SRAM+0xf8007b54>

000081b0 <__sflush_r>:
    81b0:	2880030b 	ldhu	r2,12(r5)
    81b4:	defffb04 	addi	sp,sp,-20
    81b8:	dcc00315 	stw	r19,12(sp)
    81bc:	dc400115 	stw	r17,4(sp)
    81c0:	dfc00415 	stw	ra,16(sp)
    81c4:	dc800215 	stw	r18,8(sp)
    81c8:	dc000015 	stw	r16,0(sp)
    81cc:	10c0020c 	andi	r3,r2,8
    81d0:	2823883a 	mov	r17,r5
    81d4:	2027883a 	mov	r19,r4
    81d8:	1800311e 	bne	r3,zero,82a0 <__sflush_r+0xf0>
    81dc:	28c00117 	ldw	r3,4(r5)
    81e0:	10820014 	ori	r2,r2,2048
    81e4:	2880030d 	sth	r2,12(r5)
    81e8:	00c04b0e 	bge	zero,r3,8318 <__sflush_r+0x168>
    81ec:	8a000a17 	ldw	r8,40(r17)
    81f0:	40002326 	beq	r8,zero,8280 <__sflush_r+0xd0>
    81f4:	9c000017 	ldw	r16,0(r19)
    81f8:	10c4000c 	andi	r3,r2,4096
    81fc:	98000015 	stw	zero,0(r19)
    8200:	18004826 	beq	r3,zero,8324 <__sflush_r+0x174>
    8204:	89801417 	ldw	r6,80(r17)
    8208:	10c0010c 	andi	r3,r2,4
    820c:	18000626 	beq	r3,zero,8228 <__sflush_r+0x78>
    8210:	88c00117 	ldw	r3,4(r17)
    8214:	88800c17 	ldw	r2,48(r17)
    8218:	30cdc83a 	sub	r6,r6,r3
    821c:	10000226 	beq	r2,zero,8228 <__sflush_r+0x78>
    8220:	88800f17 	ldw	r2,60(r17)
    8224:	308dc83a 	sub	r6,r6,r2
    8228:	89400717 	ldw	r5,28(r17)
    822c:	000f883a 	mov	r7,zero
    8230:	9809883a 	mov	r4,r19
    8234:	403ee83a 	callr	r8
    8238:	00ffffc4 	movi	r3,-1
    823c:	10c04426 	beq	r2,r3,8350 <__sflush_r+0x1a0>
    8240:	88c0030b 	ldhu	r3,12(r17)
    8244:	89000417 	ldw	r4,16(r17)
    8248:	88000115 	stw	zero,4(r17)
    824c:	197dffcc 	andi	r5,r3,63487
    8250:	8940030d 	sth	r5,12(r17)
    8254:	89000015 	stw	r4,0(r17)
    8258:	18c4000c 	andi	r3,r3,4096
    825c:	18002c1e 	bne	r3,zero,8310 <__sflush_r+0x160>
    8260:	89400c17 	ldw	r5,48(r17)
    8264:	9c000015 	stw	r16,0(r19)
    8268:	28000526 	beq	r5,zero,8280 <__sflush_r+0xd0>
    826c:	88801004 	addi	r2,r17,64
    8270:	28800226 	beq	r5,r2,827c <__sflush_r+0xcc>
    8274:	9809883a 	mov	r4,r19
    8278:	000892c0 	call	892c <_free_r>
    827c:	88000c15 	stw	zero,48(r17)
    8280:	0005883a 	mov	r2,zero
    8284:	dfc00417 	ldw	ra,16(sp)
    8288:	dcc00317 	ldw	r19,12(sp)
    828c:	dc800217 	ldw	r18,8(sp)
    8290:	dc400117 	ldw	r17,4(sp)
    8294:	dc000017 	ldw	r16,0(sp)
    8298:	dec00504 	addi	sp,sp,20
    829c:	f800283a 	ret
    82a0:	2c800417 	ldw	r18,16(r5)
    82a4:	903ff626 	beq	r18,zero,8280 <__alt_mem_Onchip_SRAM+0xf8008280>
    82a8:	2c000017 	ldw	r16,0(r5)
    82ac:	108000cc 	andi	r2,r2,3
    82b0:	2c800015 	stw	r18,0(r5)
    82b4:	84a1c83a 	sub	r16,r16,r18
    82b8:	1000131e 	bne	r2,zero,8308 <__sflush_r+0x158>
    82bc:	28800517 	ldw	r2,20(r5)
    82c0:	88800215 	stw	r2,8(r17)
    82c4:	04000316 	blt	zero,r16,82d4 <__sflush_r+0x124>
    82c8:	003fed06 	br	8280 <__alt_mem_Onchip_SRAM+0xf8008280>
    82cc:	90a5883a 	add	r18,r18,r2
    82d0:	043feb0e 	bge	zero,r16,8280 <__alt_mem_Onchip_SRAM+0xf8008280>
    82d4:	88800917 	ldw	r2,36(r17)
    82d8:	89400717 	ldw	r5,28(r17)
    82dc:	800f883a 	mov	r7,r16
    82e0:	900d883a 	mov	r6,r18
    82e4:	9809883a 	mov	r4,r19
    82e8:	103ee83a 	callr	r2
    82ec:	80a1c83a 	sub	r16,r16,r2
    82f0:	00bff616 	blt	zero,r2,82cc <__alt_mem_Onchip_SRAM+0xf80082cc>
    82f4:	88c0030b 	ldhu	r3,12(r17)
    82f8:	00bfffc4 	movi	r2,-1
    82fc:	18c01014 	ori	r3,r3,64
    8300:	88c0030d 	sth	r3,12(r17)
    8304:	003fdf06 	br	8284 <__alt_mem_Onchip_SRAM+0xf8008284>
    8308:	0005883a 	mov	r2,zero
    830c:	003fec06 	br	82c0 <__alt_mem_Onchip_SRAM+0xf80082c0>
    8310:	88801415 	stw	r2,80(r17)
    8314:	003fd206 	br	8260 <__alt_mem_Onchip_SRAM+0xf8008260>
    8318:	28c00f17 	ldw	r3,60(r5)
    831c:	00ffb316 	blt	zero,r3,81ec <__alt_mem_Onchip_SRAM+0xf80081ec>
    8320:	003fd706 	br	8280 <__alt_mem_Onchip_SRAM+0xf8008280>
    8324:	89400717 	ldw	r5,28(r17)
    8328:	000d883a 	mov	r6,zero
    832c:	01c00044 	movi	r7,1
    8330:	9809883a 	mov	r4,r19
    8334:	403ee83a 	callr	r8
    8338:	100d883a 	mov	r6,r2
    833c:	00bfffc4 	movi	r2,-1
    8340:	30801426 	beq	r6,r2,8394 <__sflush_r+0x1e4>
    8344:	8880030b 	ldhu	r2,12(r17)
    8348:	8a000a17 	ldw	r8,40(r17)
    834c:	003fae06 	br	8208 <__alt_mem_Onchip_SRAM+0xf8008208>
    8350:	98c00017 	ldw	r3,0(r19)
    8354:	183fba26 	beq	r3,zero,8240 <__alt_mem_Onchip_SRAM+0xf8008240>
    8358:	01000744 	movi	r4,29
    835c:	19000626 	beq	r3,r4,8378 <__sflush_r+0x1c8>
    8360:	01000584 	movi	r4,22
    8364:	19000426 	beq	r3,r4,8378 <__sflush_r+0x1c8>
    8368:	88c0030b 	ldhu	r3,12(r17)
    836c:	18c01014 	ori	r3,r3,64
    8370:	88c0030d 	sth	r3,12(r17)
    8374:	003fc306 	br	8284 <__alt_mem_Onchip_SRAM+0xf8008284>
    8378:	8880030b 	ldhu	r2,12(r17)
    837c:	88c00417 	ldw	r3,16(r17)
    8380:	88000115 	stw	zero,4(r17)
    8384:	10bdffcc 	andi	r2,r2,63487
    8388:	8880030d 	sth	r2,12(r17)
    838c:	88c00015 	stw	r3,0(r17)
    8390:	003fb306 	br	8260 <__alt_mem_Onchip_SRAM+0xf8008260>
    8394:	98800017 	ldw	r2,0(r19)
    8398:	103fea26 	beq	r2,zero,8344 <__alt_mem_Onchip_SRAM+0xf8008344>
    839c:	00c00744 	movi	r3,29
    83a0:	10c00226 	beq	r2,r3,83ac <__sflush_r+0x1fc>
    83a4:	00c00584 	movi	r3,22
    83a8:	10c0031e 	bne	r2,r3,83b8 <__sflush_r+0x208>
    83ac:	9c000015 	stw	r16,0(r19)
    83b0:	0005883a 	mov	r2,zero
    83b4:	003fb306 	br	8284 <__alt_mem_Onchip_SRAM+0xf8008284>
    83b8:	88c0030b 	ldhu	r3,12(r17)
    83bc:	3005883a 	mov	r2,r6
    83c0:	18c01014 	ori	r3,r3,64
    83c4:	88c0030d 	sth	r3,12(r17)
    83c8:	003fae06 	br	8284 <__alt_mem_Onchip_SRAM+0xf8008284>

000083cc <_fflush_r>:
    83cc:	defffd04 	addi	sp,sp,-12
    83d0:	dc000115 	stw	r16,4(sp)
    83d4:	dfc00215 	stw	ra,8(sp)
    83d8:	2021883a 	mov	r16,r4
    83dc:	20000226 	beq	r4,zero,83e8 <_fflush_r+0x1c>
    83e0:	20800e17 	ldw	r2,56(r4)
    83e4:	10000c26 	beq	r2,zero,8418 <_fflush_r+0x4c>
    83e8:	2880030f 	ldh	r2,12(r5)
    83ec:	1000051e 	bne	r2,zero,8404 <_fflush_r+0x38>
    83f0:	0005883a 	mov	r2,zero
    83f4:	dfc00217 	ldw	ra,8(sp)
    83f8:	dc000117 	ldw	r16,4(sp)
    83fc:	dec00304 	addi	sp,sp,12
    8400:	f800283a 	ret
    8404:	8009883a 	mov	r4,r16
    8408:	dfc00217 	ldw	ra,8(sp)
    840c:	dc000117 	ldw	r16,4(sp)
    8410:	dec00304 	addi	sp,sp,12
    8414:	00081b01 	jmpi	81b0 <__sflush_r>
    8418:	d9400015 	stw	r5,0(sp)
    841c:	00087b80 	call	87b8 <__sinit>
    8420:	d9400017 	ldw	r5,0(sp)
    8424:	003ff006 	br	83e8 <__alt_mem_Onchip_SRAM+0xf80083e8>

00008428 <fflush>:
    8428:	20000526 	beq	r4,zero,8440 <fflush+0x18>
    842c:	008000b4 	movhi	r2,2
    8430:	10a88304 	addi	r2,r2,-24052
    8434:	200b883a 	mov	r5,r4
    8438:	11000017 	ldw	r4,0(r2)
    843c:	00083cc1 	jmpi	83cc <_fflush_r>
    8440:	008000b4 	movhi	r2,2
    8444:	10a88204 	addi	r2,r2,-24056
    8448:	11000017 	ldw	r4,0(r2)
    844c:	01400074 	movhi	r5,1
    8450:	2960f304 	addi	r5,r5,-31796
    8454:	0008d001 	jmpi	8d00 <_fwalk_reent>

00008458 <__fp_unlock>:
    8458:	0005883a 	mov	r2,zero
    845c:	f800283a 	ret

00008460 <_cleanup_r>:
    8460:	01400074 	movhi	r5,1
    8464:	29755204 	addi	r5,r5,-10936
    8468:	0008d001 	jmpi	8d00 <_fwalk_reent>

0000846c <__sinit.part.1>:
    846c:	defff704 	addi	sp,sp,-36
    8470:	00c00074 	movhi	r3,1
    8474:	dfc00815 	stw	ra,32(sp)
    8478:	ddc00715 	stw	r23,28(sp)
    847c:	dd800615 	stw	r22,24(sp)
    8480:	dd400515 	stw	r21,20(sp)
    8484:	dd000415 	stw	r20,16(sp)
    8488:	dcc00315 	stw	r19,12(sp)
    848c:	dc800215 	stw	r18,8(sp)
    8490:	dc400115 	stw	r17,4(sp)
    8494:	dc000015 	stw	r16,0(sp)
    8498:	18e11804 	addi	r3,r3,-31648
    849c:	24000117 	ldw	r16,4(r4)
    84a0:	20c00f15 	stw	r3,60(r4)
    84a4:	2080bb04 	addi	r2,r4,748
    84a8:	00c000c4 	movi	r3,3
    84ac:	20c0b915 	stw	r3,740(r4)
    84b0:	2080ba15 	stw	r2,744(r4)
    84b4:	2000b815 	stw	zero,736(r4)
    84b8:	05c00204 	movi	r23,8
    84bc:	00800104 	movi	r2,4
    84c0:	2025883a 	mov	r18,r4
    84c4:	b80d883a 	mov	r6,r23
    84c8:	81001704 	addi	r4,r16,92
    84cc:	000b883a 	mov	r5,zero
    84d0:	80000015 	stw	zero,0(r16)
    84d4:	80000115 	stw	zero,4(r16)
    84d8:	80000215 	stw	zero,8(r16)
    84dc:	8080030d 	sth	r2,12(r16)
    84e0:	80001915 	stw	zero,100(r16)
    84e4:	8000038d 	sth	zero,14(r16)
    84e8:	80000415 	stw	zero,16(r16)
    84ec:	80000515 	stw	zero,20(r16)
    84f0:	80000615 	stw	zero,24(r16)
    84f4:	00092e40 	call	92e4 <memset>
    84f8:	05800074 	movhi	r22,1
    84fc:	94400217 	ldw	r17,8(r18)
    8500:	05400074 	movhi	r21,1
    8504:	05000074 	movhi	r20,1
    8508:	04c00074 	movhi	r19,1
    850c:	b5a94e04 	addi	r22,r22,-23240
    8510:	ad696504 	addi	r21,r21,-23148
    8514:	a5298404 	addi	r20,r20,-23024
    8518:	9ce99b04 	addi	r19,r19,-22932
    851c:	85800815 	stw	r22,32(r16)
    8520:	85400915 	stw	r21,36(r16)
    8524:	85000a15 	stw	r20,40(r16)
    8528:	84c00b15 	stw	r19,44(r16)
    852c:	84000715 	stw	r16,28(r16)
    8530:	00800284 	movi	r2,10
    8534:	8880030d 	sth	r2,12(r17)
    8538:	00800044 	movi	r2,1
    853c:	b80d883a 	mov	r6,r23
    8540:	89001704 	addi	r4,r17,92
    8544:	000b883a 	mov	r5,zero
    8548:	88000015 	stw	zero,0(r17)
    854c:	88000115 	stw	zero,4(r17)
    8550:	88000215 	stw	zero,8(r17)
    8554:	88001915 	stw	zero,100(r17)
    8558:	8880038d 	sth	r2,14(r17)
    855c:	88000415 	stw	zero,16(r17)
    8560:	88000515 	stw	zero,20(r17)
    8564:	88000615 	stw	zero,24(r17)
    8568:	00092e40 	call	92e4 <memset>
    856c:	94000317 	ldw	r16,12(r18)
    8570:	00800484 	movi	r2,18
    8574:	8c400715 	stw	r17,28(r17)
    8578:	8d800815 	stw	r22,32(r17)
    857c:	8d400915 	stw	r21,36(r17)
    8580:	8d000a15 	stw	r20,40(r17)
    8584:	8cc00b15 	stw	r19,44(r17)
    8588:	8080030d 	sth	r2,12(r16)
    858c:	00800084 	movi	r2,2
    8590:	80000015 	stw	zero,0(r16)
    8594:	80000115 	stw	zero,4(r16)
    8598:	80000215 	stw	zero,8(r16)
    859c:	80001915 	stw	zero,100(r16)
    85a0:	8080038d 	sth	r2,14(r16)
    85a4:	80000415 	stw	zero,16(r16)
    85a8:	80000515 	stw	zero,20(r16)
    85ac:	80000615 	stw	zero,24(r16)
    85b0:	b80d883a 	mov	r6,r23
    85b4:	000b883a 	mov	r5,zero
    85b8:	81001704 	addi	r4,r16,92
    85bc:	00092e40 	call	92e4 <memset>
    85c0:	00800044 	movi	r2,1
    85c4:	84000715 	stw	r16,28(r16)
    85c8:	85800815 	stw	r22,32(r16)
    85cc:	85400915 	stw	r21,36(r16)
    85d0:	85000a15 	stw	r20,40(r16)
    85d4:	84c00b15 	stw	r19,44(r16)
    85d8:	90800e15 	stw	r2,56(r18)
    85dc:	dfc00817 	ldw	ra,32(sp)
    85e0:	ddc00717 	ldw	r23,28(sp)
    85e4:	dd800617 	ldw	r22,24(sp)
    85e8:	dd400517 	ldw	r21,20(sp)
    85ec:	dd000417 	ldw	r20,16(sp)
    85f0:	dcc00317 	ldw	r19,12(sp)
    85f4:	dc800217 	ldw	r18,8(sp)
    85f8:	dc400117 	ldw	r17,4(sp)
    85fc:	dc000017 	ldw	r16,0(sp)
    8600:	dec00904 	addi	sp,sp,36
    8604:	f800283a 	ret

00008608 <__fp_lock>:
    8608:	0005883a 	mov	r2,zero
    860c:	f800283a 	ret

00008610 <__sfmoreglue>:
    8610:	defffc04 	addi	sp,sp,-16
    8614:	dc800215 	stw	r18,8(sp)
    8618:	2825883a 	mov	r18,r5
    861c:	dc000015 	stw	r16,0(sp)
    8620:	01401a04 	movi	r5,104
    8624:	2021883a 	mov	r16,r4
    8628:	913fffc4 	addi	r4,r18,-1
    862c:	dfc00315 	stw	ra,12(sp)
    8630:	dc400115 	stw	r17,4(sp)
    8634:	00015680 	call	1568 <__mulsi3>
    8638:	8009883a 	mov	r4,r16
    863c:	11401d04 	addi	r5,r2,116
    8640:	1023883a 	mov	r17,r2
    8644:	00015b80 	call	15b8 <_malloc_r>
    8648:	1021883a 	mov	r16,r2
    864c:	10000726 	beq	r2,zero,866c <__sfmoreglue+0x5c>
    8650:	11000304 	addi	r4,r2,12
    8654:	10000015 	stw	zero,0(r2)
    8658:	14800115 	stw	r18,4(r2)
    865c:	11000215 	stw	r4,8(r2)
    8660:	89801a04 	addi	r6,r17,104
    8664:	000b883a 	mov	r5,zero
    8668:	00092e40 	call	92e4 <memset>
    866c:	8005883a 	mov	r2,r16
    8670:	dfc00317 	ldw	ra,12(sp)
    8674:	dc800217 	ldw	r18,8(sp)
    8678:	dc400117 	ldw	r17,4(sp)
    867c:	dc000017 	ldw	r16,0(sp)
    8680:	dec00404 	addi	sp,sp,16
    8684:	f800283a 	ret

00008688 <__sfp>:
    8688:	defffb04 	addi	sp,sp,-20
    868c:	dc000015 	stw	r16,0(sp)
    8690:	040000b4 	movhi	r16,2
    8694:	84288204 	addi	r16,r16,-24056
    8698:	dcc00315 	stw	r19,12(sp)
    869c:	2027883a 	mov	r19,r4
    86a0:	81000017 	ldw	r4,0(r16)
    86a4:	dfc00415 	stw	ra,16(sp)
    86a8:	dc800215 	stw	r18,8(sp)
    86ac:	20800e17 	ldw	r2,56(r4)
    86b0:	dc400115 	stw	r17,4(sp)
    86b4:	1000021e 	bne	r2,zero,86c0 <__sfp+0x38>
    86b8:	000846c0 	call	846c <__sinit.part.1>
    86bc:	81000017 	ldw	r4,0(r16)
    86c0:	2480b804 	addi	r18,r4,736
    86c4:	047fffc4 	movi	r17,-1
    86c8:	91000117 	ldw	r4,4(r18)
    86cc:	94000217 	ldw	r16,8(r18)
    86d0:	213fffc4 	addi	r4,r4,-1
    86d4:	20000a16 	blt	r4,zero,8700 <__sfp+0x78>
    86d8:	8080030f 	ldh	r2,12(r16)
    86dc:	10000c26 	beq	r2,zero,8710 <__sfp+0x88>
    86e0:	80c01d04 	addi	r3,r16,116
    86e4:	00000206 	br	86f0 <__sfp+0x68>
    86e8:	18bfe60f 	ldh	r2,-104(r3)
    86ec:	10000826 	beq	r2,zero,8710 <__sfp+0x88>
    86f0:	213fffc4 	addi	r4,r4,-1
    86f4:	1c3ffd04 	addi	r16,r3,-12
    86f8:	18c01a04 	addi	r3,r3,104
    86fc:	247ffa1e 	bne	r4,r17,86e8 <__alt_mem_Onchip_SRAM+0xf80086e8>
    8700:	90800017 	ldw	r2,0(r18)
    8704:	10001d26 	beq	r2,zero,877c <__sfp+0xf4>
    8708:	1025883a 	mov	r18,r2
    870c:	003fee06 	br	86c8 <__alt_mem_Onchip_SRAM+0xf80086c8>
    8710:	00bfffc4 	movi	r2,-1
    8714:	8080038d 	sth	r2,14(r16)
    8718:	00800044 	movi	r2,1
    871c:	8080030d 	sth	r2,12(r16)
    8720:	80001915 	stw	zero,100(r16)
    8724:	80000015 	stw	zero,0(r16)
    8728:	80000215 	stw	zero,8(r16)
    872c:	80000115 	stw	zero,4(r16)
    8730:	80000415 	stw	zero,16(r16)
    8734:	80000515 	stw	zero,20(r16)
    8738:	80000615 	stw	zero,24(r16)
    873c:	01800204 	movi	r6,8
    8740:	000b883a 	mov	r5,zero
    8744:	81001704 	addi	r4,r16,92
    8748:	00092e40 	call	92e4 <memset>
    874c:	8005883a 	mov	r2,r16
    8750:	80000c15 	stw	zero,48(r16)
    8754:	80000d15 	stw	zero,52(r16)
    8758:	80001115 	stw	zero,68(r16)
    875c:	80001215 	stw	zero,72(r16)
    8760:	dfc00417 	ldw	ra,16(sp)
    8764:	dcc00317 	ldw	r19,12(sp)
    8768:	dc800217 	ldw	r18,8(sp)
    876c:	dc400117 	ldw	r17,4(sp)
    8770:	dc000017 	ldw	r16,0(sp)
    8774:	dec00504 	addi	sp,sp,20
    8778:	f800283a 	ret
    877c:	01400104 	movi	r5,4
    8780:	9809883a 	mov	r4,r19
    8784:	00086100 	call	8610 <__sfmoreglue>
    8788:	90800015 	stw	r2,0(r18)
    878c:	103fde1e 	bne	r2,zero,8708 <__alt_mem_Onchip_SRAM+0xf8008708>
    8790:	00800304 	movi	r2,12
    8794:	98800015 	stw	r2,0(r19)
    8798:	0005883a 	mov	r2,zero
    879c:	003ff006 	br	8760 <__alt_mem_Onchip_SRAM+0xf8008760>

000087a0 <_cleanup>:
    87a0:	008000b4 	movhi	r2,2
    87a4:	10a88204 	addi	r2,r2,-24056
    87a8:	11000017 	ldw	r4,0(r2)
    87ac:	01400074 	movhi	r5,1
    87b0:	29755204 	addi	r5,r5,-10936
    87b4:	0008d001 	jmpi	8d00 <_fwalk_reent>

000087b8 <__sinit>:
    87b8:	20800e17 	ldw	r2,56(r4)
    87bc:	10000126 	beq	r2,zero,87c4 <__sinit+0xc>
    87c0:	f800283a 	ret
    87c4:	000846c1 	jmpi	846c <__sinit.part.1>

000087c8 <__sfp_lock_acquire>:
    87c8:	f800283a 	ret

000087cc <__sfp_lock_release>:
    87cc:	f800283a 	ret

000087d0 <__sinit_lock_acquire>:
    87d0:	f800283a 	ret

000087d4 <__sinit_lock_release>:
    87d4:	f800283a 	ret

000087d8 <__fp_lock_all>:
    87d8:	008000b4 	movhi	r2,2
    87dc:	10a88304 	addi	r2,r2,-24052
    87e0:	11000017 	ldw	r4,0(r2)
    87e4:	01400074 	movhi	r5,1
    87e8:	29618204 	addi	r5,r5,-31224
    87ec:	0008c3c1 	jmpi	8c3c <_fwalk>

000087f0 <__fp_unlock_all>:
    87f0:	008000b4 	movhi	r2,2
    87f4:	10a88304 	addi	r2,r2,-24052
    87f8:	11000017 	ldw	r4,0(r2)
    87fc:	01400074 	movhi	r5,1
    8800:	29611604 	addi	r5,r5,-31656
    8804:	0008c3c1 	jmpi	8c3c <_fwalk>

00008808 <_malloc_trim_r>:
    8808:	defffb04 	addi	sp,sp,-20
    880c:	dcc00315 	stw	r19,12(sp)
    8810:	04c000b4 	movhi	r19,2
    8814:	dc800215 	stw	r18,8(sp)
    8818:	dc400115 	stw	r17,4(sp)
    881c:	dc000015 	stw	r16,0(sp)
    8820:	dfc00415 	stw	ra,16(sp)
    8824:	2821883a 	mov	r16,r5
    8828:	9ce19004 	addi	r19,r19,-31168
    882c:	2025883a 	mov	r18,r4
    8830:	001258c0 	call	1258c <__malloc_lock>
    8834:	98800217 	ldw	r2,8(r19)
    8838:	14400117 	ldw	r17,4(r2)
    883c:	00bfff04 	movi	r2,-4
    8840:	88a2703a 	and	r17,r17,r2
    8844:	8c21c83a 	sub	r16,r17,r16
    8848:	8403fbc4 	addi	r16,r16,4079
    884c:	8020d33a 	srli	r16,r16,12
    8850:	0083ffc4 	movi	r2,4095
    8854:	843fffc4 	addi	r16,r16,-1
    8858:	8020933a 	slli	r16,r16,12
    885c:	1400060e 	bge	r2,r16,8878 <_malloc_trim_r+0x70>
    8860:	000b883a 	mov	r5,zero
    8864:	9009883a 	mov	r4,r18
    8868:	0001eac0 	call	1eac <_sbrk_r>
    886c:	98c00217 	ldw	r3,8(r19)
    8870:	1c47883a 	add	r3,r3,r17
    8874:	10c00a26 	beq	r2,r3,88a0 <_malloc_trim_r+0x98>
    8878:	9009883a 	mov	r4,r18
    887c:	00125b00 	call	125b0 <__malloc_unlock>
    8880:	0005883a 	mov	r2,zero
    8884:	dfc00417 	ldw	ra,16(sp)
    8888:	dcc00317 	ldw	r19,12(sp)
    888c:	dc800217 	ldw	r18,8(sp)
    8890:	dc400117 	ldw	r17,4(sp)
    8894:	dc000017 	ldw	r16,0(sp)
    8898:	dec00504 	addi	sp,sp,20
    889c:	f800283a 	ret
    88a0:	040bc83a 	sub	r5,zero,r16
    88a4:	9009883a 	mov	r4,r18
    88a8:	0001eac0 	call	1eac <_sbrk_r>
    88ac:	00ffffc4 	movi	r3,-1
    88b0:	10c00d26 	beq	r2,r3,88e8 <_malloc_trim_r+0xe0>
    88b4:	00c000b4 	movhi	r3,2
    88b8:	18efc304 	addi	r3,r3,-16628
    88bc:	18800017 	ldw	r2,0(r3)
    88c0:	99000217 	ldw	r4,8(r19)
    88c4:	8c23c83a 	sub	r17,r17,r16
    88c8:	8c400054 	ori	r17,r17,1
    88cc:	1421c83a 	sub	r16,r2,r16
    88d0:	24400115 	stw	r17,4(r4)
    88d4:	9009883a 	mov	r4,r18
    88d8:	1c000015 	stw	r16,0(r3)
    88dc:	00125b00 	call	125b0 <__malloc_unlock>
    88e0:	00800044 	movi	r2,1
    88e4:	003fe706 	br	8884 <__alt_mem_Onchip_SRAM+0xf8008884>
    88e8:	000b883a 	mov	r5,zero
    88ec:	9009883a 	mov	r4,r18
    88f0:	0001eac0 	call	1eac <_sbrk_r>
    88f4:	99000217 	ldw	r4,8(r19)
    88f8:	014003c4 	movi	r5,15
    88fc:	1107c83a 	sub	r3,r2,r4
    8900:	28ffdd0e 	bge	r5,r3,8878 <__alt_mem_Onchip_SRAM+0xf8008878>
    8904:	014000b4 	movhi	r5,2
    8908:	29688004 	addi	r5,r5,-24064
    890c:	29400017 	ldw	r5,0(r5)
    8910:	18c00054 	ori	r3,r3,1
    8914:	20c00115 	stw	r3,4(r4)
    8918:	00c000b4 	movhi	r3,2
    891c:	1145c83a 	sub	r2,r2,r5
    8920:	18efc304 	addi	r3,r3,-16628
    8924:	18800015 	stw	r2,0(r3)
    8928:	003fd306 	br	8878 <__alt_mem_Onchip_SRAM+0xf8008878>

0000892c <_free_r>:
    892c:	28004126 	beq	r5,zero,8a34 <_free_r+0x108>
    8930:	defffd04 	addi	sp,sp,-12
    8934:	dc400115 	stw	r17,4(sp)
    8938:	dc000015 	stw	r16,0(sp)
    893c:	2023883a 	mov	r17,r4
    8940:	2821883a 	mov	r16,r5
    8944:	dfc00215 	stw	ra,8(sp)
    8948:	001258c0 	call	1258c <__malloc_lock>
    894c:	81ffff17 	ldw	r7,-4(r16)
    8950:	00bfff84 	movi	r2,-2
    8954:	010000b4 	movhi	r4,2
    8958:	81bffe04 	addi	r6,r16,-8
    895c:	3884703a 	and	r2,r7,r2
    8960:	21219004 	addi	r4,r4,-31168
    8964:	308b883a 	add	r5,r6,r2
    8968:	2a400117 	ldw	r9,4(r5)
    896c:	22000217 	ldw	r8,8(r4)
    8970:	00ffff04 	movi	r3,-4
    8974:	48c6703a 	and	r3,r9,r3
    8978:	2a005726 	beq	r5,r8,8ad8 <_free_r+0x1ac>
    897c:	28c00115 	stw	r3,4(r5)
    8980:	39c0004c 	andi	r7,r7,1
    8984:	3800091e 	bne	r7,zero,89ac <_free_r+0x80>
    8988:	823ffe17 	ldw	r8,-8(r16)
    898c:	22400204 	addi	r9,r4,8
    8990:	320dc83a 	sub	r6,r6,r8
    8994:	31c00217 	ldw	r7,8(r6)
    8998:	1205883a 	add	r2,r2,r8
    899c:	3a406526 	beq	r7,r9,8b34 <_free_r+0x208>
    89a0:	32000317 	ldw	r8,12(r6)
    89a4:	3a000315 	stw	r8,12(r7)
    89a8:	41c00215 	stw	r7,8(r8)
    89ac:	28cf883a 	add	r7,r5,r3
    89b0:	39c00117 	ldw	r7,4(r7)
    89b4:	39c0004c 	andi	r7,r7,1
    89b8:	38003a26 	beq	r7,zero,8aa4 <_free_r+0x178>
    89bc:	10c00054 	ori	r3,r2,1
    89c0:	30c00115 	stw	r3,4(r6)
    89c4:	3087883a 	add	r3,r6,r2
    89c8:	18800015 	stw	r2,0(r3)
    89cc:	00c07fc4 	movi	r3,511
    89d0:	18801936 	bltu	r3,r2,8a38 <_free_r+0x10c>
    89d4:	1004d0fa 	srli	r2,r2,3
    89d8:	01c00044 	movi	r7,1
    89dc:	21400117 	ldw	r5,4(r4)
    89e0:	10c00044 	addi	r3,r2,1
    89e4:	18c7883a 	add	r3,r3,r3
    89e8:	1005d0ba 	srai	r2,r2,2
    89ec:	18c7883a 	add	r3,r3,r3
    89f0:	18c7883a 	add	r3,r3,r3
    89f4:	1907883a 	add	r3,r3,r4
    89f8:	3884983a 	sll	r2,r7,r2
    89fc:	19c00017 	ldw	r7,0(r3)
    8a00:	1a3ffe04 	addi	r8,r3,-8
    8a04:	1144b03a 	or	r2,r2,r5
    8a08:	32000315 	stw	r8,12(r6)
    8a0c:	31c00215 	stw	r7,8(r6)
    8a10:	20800115 	stw	r2,4(r4)
    8a14:	19800015 	stw	r6,0(r3)
    8a18:	39800315 	stw	r6,12(r7)
    8a1c:	8809883a 	mov	r4,r17
    8a20:	dfc00217 	ldw	ra,8(sp)
    8a24:	dc400117 	ldw	r17,4(sp)
    8a28:	dc000017 	ldw	r16,0(sp)
    8a2c:	dec00304 	addi	sp,sp,12
    8a30:	00125b01 	jmpi	125b0 <__malloc_unlock>
    8a34:	f800283a 	ret
    8a38:	100ad27a 	srli	r5,r2,9
    8a3c:	00c00104 	movi	r3,4
    8a40:	19404a36 	bltu	r3,r5,8b6c <_free_r+0x240>
    8a44:	100ad1ba 	srli	r5,r2,6
    8a48:	28c00e44 	addi	r3,r5,57
    8a4c:	18c7883a 	add	r3,r3,r3
    8a50:	29400e04 	addi	r5,r5,56
    8a54:	18c7883a 	add	r3,r3,r3
    8a58:	18c7883a 	add	r3,r3,r3
    8a5c:	1909883a 	add	r4,r3,r4
    8a60:	20c00017 	ldw	r3,0(r4)
    8a64:	01c000b4 	movhi	r7,2
    8a68:	213ffe04 	addi	r4,r4,-8
    8a6c:	39e19004 	addi	r7,r7,-31168
    8a70:	20c04426 	beq	r4,r3,8b84 <_free_r+0x258>
    8a74:	01ffff04 	movi	r7,-4
    8a78:	19400117 	ldw	r5,4(r3)
    8a7c:	29ca703a 	and	r5,r5,r7
    8a80:	1140022e 	bgeu	r2,r5,8a8c <_free_r+0x160>
    8a84:	18c00217 	ldw	r3,8(r3)
    8a88:	20fffb1e 	bne	r4,r3,8a78 <__alt_mem_Onchip_SRAM+0xf8008a78>
    8a8c:	19000317 	ldw	r4,12(r3)
    8a90:	31000315 	stw	r4,12(r6)
    8a94:	30c00215 	stw	r3,8(r6)
    8a98:	21800215 	stw	r6,8(r4)
    8a9c:	19800315 	stw	r6,12(r3)
    8aa0:	003fde06 	br	8a1c <__alt_mem_Onchip_SRAM+0xf8008a1c>
    8aa4:	29c00217 	ldw	r7,8(r5)
    8aa8:	10c5883a 	add	r2,r2,r3
    8aac:	00c000b4 	movhi	r3,2
    8ab0:	18e19204 	addi	r3,r3,-31160
    8ab4:	38c03b26 	beq	r7,r3,8ba4 <_free_r+0x278>
    8ab8:	2a000317 	ldw	r8,12(r5)
    8abc:	11400054 	ori	r5,r2,1
    8ac0:	3087883a 	add	r3,r6,r2
    8ac4:	3a000315 	stw	r8,12(r7)
    8ac8:	41c00215 	stw	r7,8(r8)
    8acc:	31400115 	stw	r5,4(r6)
    8ad0:	18800015 	stw	r2,0(r3)
    8ad4:	003fbd06 	br	89cc <__alt_mem_Onchip_SRAM+0xf80089cc>
    8ad8:	39c0004c 	andi	r7,r7,1
    8adc:	10c5883a 	add	r2,r2,r3
    8ae0:	3800071e 	bne	r7,zero,8b00 <_free_r+0x1d4>
    8ae4:	81fffe17 	ldw	r7,-8(r16)
    8ae8:	31cdc83a 	sub	r6,r6,r7
    8aec:	30c00317 	ldw	r3,12(r6)
    8af0:	31400217 	ldw	r5,8(r6)
    8af4:	11c5883a 	add	r2,r2,r7
    8af8:	28c00315 	stw	r3,12(r5)
    8afc:	19400215 	stw	r5,8(r3)
    8b00:	10c00054 	ori	r3,r2,1
    8b04:	30c00115 	stw	r3,4(r6)
    8b08:	00c000b4 	movhi	r3,2
    8b0c:	18e88104 	addi	r3,r3,-24060
    8b10:	18c00017 	ldw	r3,0(r3)
    8b14:	21800215 	stw	r6,8(r4)
    8b18:	10ffc036 	bltu	r2,r3,8a1c <__alt_mem_Onchip_SRAM+0xf8008a1c>
    8b1c:	008000b4 	movhi	r2,2
    8b20:	10afb304 	addi	r2,r2,-16692
    8b24:	11400017 	ldw	r5,0(r2)
    8b28:	8809883a 	mov	r4,r17
    8b2c:	00088080 	call	8808 <_malloc_trim_r>
    8b30:	003fba06 	br	8a1c <__alt_mem_Onchip_SRAM+0xf8008a1c>
    8b34:	28c9883a 	add	r4,r5,r3
    8b38:	21000117 	ldw	r4,4(r4)
    8b3c:	2100004c 	andi	r4,r4,1
    8b40:	2000391e 	bne	r4,zero,8c28 <_free_r+0x2fc>
    8b44:	29c00217 	ldw	r7,8(r5)
    8b48:	29000317 	ldw	r4,12(r5)
    8b4c:	1885883a 	add	r2,r3,r2
    8b50:	10c00054 	ori	r3,r2,1
    8b54:	39000315 	stw	r4,12(r7)
    8b58:	21c00215 	stw	r7,8(r4)
    8b5c:	30c00115 	stw	r3,4(r6)
    8b60:	308d883a 	add	r6,r6,r2
    8b64:	30800015 	stw	r2,0(r6)
    8b68:	003fac06 	br	8a1c <__alt_mem_Onchip_SRAM+0xf8008a1c>
    8b6c:	00c00504 	movi	r3,20
    8b70:	19401536 	bltu	r3,r5,8bc8 <_free_r+0x29c>
    8b74:	28c01704 	addi	r3,r5,92
    8b78:	18c7883a 	add	r3,r3,r3
    8b7c:	294016c4 	addi	r5,r5,91
    8b80:	003fb406 	br	8a54 <__alt_mem_Onchip_SRAM+0xf8008a54>
    8b84:	280bd0ba 	srai	r5,r5,2
    8b88:	00c00044 	movi	r3,1
    8b8c:	38800117 	ldw	r2,4(r7)
    8b90:	194a983a 	sll	r5,r3,r5
    8b94:	2007883a 	mov	r3,r4
    8b98:	2884b03a 	or	r2,r5,r2
    8b9c:	38800115 	stw	r2,4(r7)
    8ba0:	003fbb06 	br	8a90 <__alt_mem_Onchip_SRAM+0xf8008a90>
    8ba4:	21800515 	stw	r6,20(r4)
    8ba8:	21800415 	stw	r6,16(r4)
    8bac:	10c00054 	ori	r3,r2,1
    8bb0:	31c00315 	stw	r7,12(r6)
    8bb4:	31c00215 	stw	r7,8(r6)
    8bb8:	30c00115 	stw	r3,4(r6)
    8bbc:	308d883a 	add	r6,r6,r2
    8bc0:	30800015 	stw	r2,0(r6)
    8bc4:	003f9506 	br	8a1c <__alt_mem_Onchip_SRAM+0xf8008a1c>
    8bc8:	00c01504 	movi	r3,84
    8bcc:	19400536 	bltu	r3,r5,8be4 <_free_r+0x2b8>
    8bd0:	100ad33a 	srli	r5,r2,12
    8bd4:	28c01bc4 	addi	r3,r5,111
    8bd8:	18c7883a 	add	r3,r3,r3
    8bdc:	29401b84 	addi	r5,r5,110
    8be0:	003f9c06 	br	8a54 <__alt_mem_Onchip_SRAM+0xf8008a54>
    8be4:	00c05504 	movi	r3,340
    8be8:	19400536 	bltu	r3,r5,8c00 <_free_r+0x2d4>
    8bec:	100ad3fa 	srli	r5,r2,15
    8bf0:	28c01e04 	addi	r3,r5,120
    8bf4:	18c7883a 	add	r3,r3,r3
    8bf8:	29401dc4 	addi	r5,r5,119
    8bfc:	003f9506 	br	8a54 <__alt_mem_Onchip_SRAM+0xf8008a54>
    8c00:	00c15504 	movi	r3,1364
    8c04:	19400536 	bltu	r3,r5,8c1c <_free_r+0x2f0>
    8c08:	100ad4ba 	srli	r5,r2,18
    8c0c:	28c01f44 	addi	r3,r5,125
    8c10:	18c7883a 	add	r3,r3,r3
    8c14:	29401f04 	addi	r5,r5,124
    8c18:	003f8e06 	br	8a54 <__alt_mem_Onchip_SRAM+0xf8008a54>
    8c1c:	00c03f84 	movi	r3,254
    8c20:	01401f84 	movi	r5,126
    8c24:	003f8b06 	br	8a54 <__alt_mem_Onchip_SRAM+0xf8008a54>
    8c28:	10c00054 	ori	r3,r2,1
    8c2c:	30c00115 	stw	r3,4(r6)
    8c30:	308d883a 	add	r6,r6,r2
    8c34:	30800015 	stw	r2,0(r6)
    8c38:	003f7806 	br	8a1c <__alt_mem_Onchip_SRAM+0xf8008a1c>

00008c3c <_fwalk>:
    8c3c:	defff704 	addi	sp,sp,-36
    8c40:	dd000415 	stw	r20,16(sp)
    8c44:	dfc00815 	stw	ra,32(sp)
    8c48:	ddc00715 	stw	r23,28(sp)
    8c4c:	dd800615 	stw	r22,24(sp)
    8c50:	dd400515 	stw	r21,20(sp)
    8c54:	dcc00315 	stw	r19,12(sp)
    8c58:	dc800215 	stw	r18,8(sp)
    8c5c:	dc400115 	stw	r17,4(sp)
    8c60:	dc000015 	stw	r16,0(sp)
    8c64:	2500b804 	addi	r20,r4,736
    8c68:	a0002326 	beq	r20,zero,8cf8 <_fwalk+0xbc>
    8c6c:	282b883a 	mov	r21,r5
    8c70:	002f883a 	mov	r23,zero
    8c74:	05800044 	movi	r22,1
    8c78:	04ffffc4 	movi	r19,-1
    8c7c:	a4400117 	ldw	r17,4(r20)
    8c80:	a4800217 	ldw	r18,8(r20)
    8c84:	8c7fffc4 	addi	r17,r17,-1
    8c88:	88000d16 	blt	r17,zero,8cc0 <_fwalk+0x84>
    8c8c:	94000304 	addi	r16,r18,12
    8c90:	94800384 	addi	r18,r18,14
    8c94:	8080000b 	ldhu	r2,0(r16)
    8c98:	8c7fffc4 	addi	r17,r17,-1
    8c9c:	813ffd04 	addi	r4,r16,-12
    8ca0:	b080042e 	bgeu	r22,r2,8cb4 <_fwalk+0x78>
    8ca4:	9080000f 	ldh	r2,0(r18)
    8ca8:	14c00226 	beq	r2,r19,8cb4 <_fwalk+0x78>
    8cac:	a83ee83a 	callr	r21
    8cb0:	b8aeb03a 	or	r23,r23,r2
    8cb4:	84001a04 	addi	r16,r16,104
    8cb8:	94801a04 	addi	r18,r18,104
    8cbc:	8cfff51e 	bne	r17,r19,8c94 <__alt_mem_Onchip_SRAM+0xf8008c94>
    8cc0:	a5000017 	ldw	r20,0(r20)
    8cc4:	a03fed1e 	bne	r20,zero,8c7c <__alt_mem_Onchip_SRAM+0xf8008c7c>
    8cc8:	b805883a 	mov	r2,r23
    8ccc:	dfc00817 	ldw	ra,32(sp)
    8cd0:	ddc00717 	ldw	r23,28(sp)
    8cd4:	dd800617 	ldw	r22,24(sp)
    8cd8:	dd400517 	ldw	r21,20(sp)
    8cdc:	dd000417 	ldw	r20,16(sp)
    8ce0:	dcc00317 	ldw	r19,12(sp)
    8ce4:	dc800217 	ldw	r18,8(sp)
    8ce8:	dc400117 	ldw	r17,4(sp)
    8cec:	dc000017 	ldw	r16,0(sp)
    8cf0:	dec00904 	addi	sp,sp,36
    8cf4:	f800283a 	ret
    8cf8:	002f883a 	mov	r23,zero
    8cfc:	003ff206 	br	8cc8 <__alt_mem_Onchip_SRAM+0xf8008cc8>

00008d00 <_fwalk_reent>:
    8d00:	defff704 	addi	sp,sp,-36
    8d04:	dd000415 	stw	r20,16(sp)
    8d08:	dfc00815 	stw	ra,32(sp)
    8d0c:	ddc00715 	stw	r23,28(sp)
    8d10:	dd800615 	stw	r22,24(sp)
    8d14:	dd400515 	stw	r21,20(sp)
    8d18:	dcc00315 	stw	r19,12(sp)
    8d1c:	dc800215 	stw	r18,8(sp)
    8d20:	dc400115 	stw	r17,4(sp)
    8d24:	dc000015 	stw	r16,0(sp)
    8d28:	2500b804 	addi	r20,r4,736
    8d2c:	a0002326 	beq	r20,zero,8dbc <_fwalk_reent+0xbc>
    8d30:	282b883a 	mov	r21,r5
    8d34:	2027883a 	mov	r19,r4
    8d38:	002f883a 	mov	r23,zero
    8d3c:	05800044 	movi	r22,1
    8d40:	04bfffc4 	movi	r18,-1
    8d44:	a4400117 	ldw	r17,4(r20)
    8d48:	a4000217 	ldw	r16,8(r20)
    8d4c:	8c7fffc4 	addi	r17,r17,-1
    8d50:	88000c16 	blt	r17,zero,8d84 <_fwalk_reent+0x84>
    8d54:	84000304 	addi	r16,r16,12
    8d58:	8080000b 	ldhu	r2,0(r16)
    8d5c:	8c7fffc4 	addi	r17,r17,-1
    8d60:	817ffd04 	addi	r5,r16,-12
    8d64:	b080052e 	bgeu	r22,r2,8d7c <_fwalk_reent+0x7c>
    8d68:	8080008f 	ldh	r2,2(r16)
    8d6c:	9809883a 	mov	r4,r19
    8d70:	14800226 	beq	r2,r18,8d7c <_fwalk_reent+0x7c>
    8d74:	a83ee83a 	callr	r21
    8d78:	b8aeb03a 	or	r23,r23,r2
    8d7c:	84001a04 	addi	r16,r16,104
    8d80:	8cbff51e 	bne	r17,r18,8d58 <__alt_mem_Onchip_SRAM+0xf8008d58>
    8d84:	a5000017 	ldw	r20,0(r20)
    8d88:	a03fee1e 	bne	r20,zero,8d44 <__alt_mem_Onchip_SRAM+0xf8008d44>
    8d8c:	b805883a 	mov	r2,r23
    8d90:	dfc00817 	ldw	ra,32(sp)
    8d94:	ddc00717 	ldw	r23,28(sp)
    8d98:	dd800617 	ldw	r22,24(sp)
    8d9c:	dd400517 	ldw	r21,20(sp)
    8da0:	dd000417 	ldw	r20,16(sp)
    8da4:	dcc00317 	ldw	r19,12(sp)
    8da8:	dc800217 	ldw	r18,8(sp)
    8dac:	dc400117 	ldw	r17,4(sp)
    8db0:	dc000017 	ldw	r16,0(sp)
    8db4:	dec00904 	addi	sp,sp,36
    8db8:	f800283a 	ret
    8dbc:	002f883a 	mov	r23,zero
    8dc0:	003ff206 	br	8d8c <__alt_mem_Onchip_SRAM+0xf8008d8c>

00008dc4 <_gettimeofday_r>:
    8dc4:	defffd04 	addi	sp,sp,-12
    8dc8:	2805883a 	mov	r2,r5
    8dcc:	dc000015 	stw	r16,0(sp)
    8dd0:	040000b4 	movhi	r16,2
    8dd4:	dc400115 	stw	r17,4(sp)
    8dd8:	842fb404 	addi	r16,r16,-16688
    8ddc:	2023883a 	mov	r17,r4
    8de0:	300b883a 	mov	r5,r6
    8de4:	1009883a 	mov	r4,r2
    8de8:	dfc00215 	stw	ra,8(sp)
    8dec:	80000015 	stw	zero,0(r16)
    8df0:	00120300 	call	12030 <gettimeofday>
    8df4:	00ffffc4 	movi	r3,-1
    8df8:	10c00526 	beq	r2,r3,8e10 <_gettimeofday_r+0x4c>
    8dfc:	dfc00217 	ldw	ra,8(sp)
    8e00:	dc400117 	ldw	r17,4(sp)
    8e04:	dc000017 	ldw	r16,0(sp)
    8e08:	dec00304 	addi	sp,sp,12
    8e0c:	f800283a 	ret
    8e10:	80c00017 	ldw	r3,0(r16)
    8e14:	183ff926 	beq	r3,zero,8dfc <__alt_mem_Onchip_SRAM+0xf8008dfc>
    8e18:	88c00015 	stw	r3,0(r17)
    8e1c:	003ff706 	br	8dfc <__alt_mem_Onchip_SRAM+0xf8008dfc>

00008e20 <_setlocale_r>:
    8e20:	30001b26 	beq	r6,zero,8e90 <_setlocale_r+0x70>
    8e24:	014000b4 	movhi	r5,2
    8e28:	defffe04 	addi	sp,sp,-8
    8e2c:	2960c104 	addi	r5,r5,-31996
    8e30:	3009883a 	mov	r4,r6
    8e34:	dc000015 	stw	r16,0(sp)
    8e38:	dfc00115 	stw	ra,4(sp)
    8e3c:	3021883a 	mov	r16,r6
    8e40:	000a6740 	call	a674 <strcmp>
    8e44:	1000061e 	bne	r2,zero,8e60 <_setlocale_r+0x40>
    8e48:	008000b4 	movhi	r2,2
    8e4c:	10a0c004 	addi	r2,r2,-32000
    8e50:	dfc00117 	ldw	ra,4(sp)
    8e54:	dc000017 	ldw	r16,0(sp)
    8e58:	dec00204 	addi	sp,sp,8
    8e5c:	f800283a 	ret
    8e60:	014000b4 	movhi	r5,2
    8e64:	2960c004 	addi	r5,r5,-32000
    8e68:	8009883a 	mov	r4,r16
    8e6c:	000a6740 	call	a674 <strcmp>
    8e70:	103ff526 	beq	r2,zero,8e48 <__alt_mem_Onchip_SRAM+0xf8008e48>
    8e74:	014000b4 	movhi	r5,2
    8e78:	2960a304 	addi	r5,r5,-32116
    8e7c:	8009883a 	mov	r4,r16
    8e80:	000a6740 	call	a674 <strcmp>
    8e84:	103ff026 	beq	r2,zero,8e48 <__alt_mem_Onchip_SRAM+0xf8008e48>
    8e88:	0005883a 	mov	r2,zero
    8e8c:	003ff006 	br	8e50 <__alt_mem_Onchip_SRAM+0xf8008e50>
    8e90:	008000b4 	movhi	r2,2
    8e94:	10a0c004 	addi	r2,r2,-32000
    8e98:	f800283a 	ret

00008e9c <__locale_charset>:
    8e9c:	008000b4 	movhi	r2,2
    8ea0:	10a3a304 	addi	r2,r2,-29044
    8ea4:	f800283a 	ret

00008ea8 <__locale_mb_cur_max>:
    8ea8:	008000b4 	movhi	r2,2
    8eac:	10a88404 	addi	r2,r2,-24048
    8eb0:	10800017 	ldw	r2,0(r2)
    8eb4:	f800283a 	ret

00008eb8 <__locale_msgcharset>:
    8eb8:	008000b4 	movhi	r2,2
    8ebc:	10a39b04 	addi	r2,r2,-29076
    8ec0:	f800283a 	ret

00008ec4 <__locale_cjk_lang>:
    8ec4:	0005883a 	mov	r2,zero
    8ec8:	f800283a 	ret

00008ecc <_localeconv_r>:
    8ecc:	008000b4 	movhi	r2,2
    8ed0:	10a3ab04 	addi	r2,r2,-29012
    8ed4:	f800283a 	ret

00008ed8 <setlocale>:
    8ed8:	008000b4 	movhi	r2,2
    8edc:	10a88304 	addi	r2,r2,-24052
    8ee0:	280d883a 	mov	r6,r5
    8ee4:	200b883a 	mov	r5,r4
    8ee8:	11000017 	ldw	r4,0(r2)
    8eec:	0008e201 	jmpi	8e20 <_setlocale_r>

00008ef0 <localeconv>:
    8ef0:	008000b4 	movhi	r2,2
    8ef4:	10a3ab04 	addi	r2,r2,-29012
    8ef8:	f800283a 	ret

00008efc <__smakebuf_r>:
    8efc:	2880030b 	ldhu	r2,12(r5)
    8f00:	10c0008c 	andi	r3,r2,2
    8f04:	1800411e 	bne	r3,zero,900c <__smakebuf_r+0x110>
    8f08:	deffec04 	addi	sp,sp,-80
    8f0c:	dc000f15 	stw	r16,60(sp)
    8f10:	2821883a 	mov	r16,r5
    8f14:	2940038f 	ldh	r5,14(r5)
    8f18:	dc401015 	stw	r17,64(sp)
    8f1c:	dfc01315 	stw	ra,76(sp)
    8f20:	dcc01215 	stw	r19,72(sp)
    8f24:	dc801115 	stw	r18,68(sp)
    8f28:	2023883a 	mov	r17,r4
    8f2c:	28001c16 	blt	r5,zero,8fa0 <__smakebuf_r+0xa4>
    8f30:	d80d883a 	mov	r6,sp
    8f34:	000d8540 	call	d854 <_fstat_r>
    8f38:	10001816 	blt	r2,zero,8f9c <__smakebuf_r+0xa0>
    8f3c:	d8800117 	ldw	r2,4(sp)
    8f40:	00e00014 	movui	r3,32768
    8f44:	10bc000c 	andi	r2,r2,61440
    8f48:	14c80020 	cmpeqi	r19,r2,8192
    8f4c:	10c03726 	beq	r2,r3,902c <__smakebuf_r+0x130>
    8f50:	80c0030b 	ldhu	r3,12(r16)
    8f54:	18c20014 	ori	r3,r3,2048
    8f58:	80c0030d 	sth	r3,12(r16)
    8f5c:	00c80004 	movi	r3,8192
    8f60:	10c0521e 	bne	r2,r3,90ac <__smakebuf_r+0x1b0>
    8f64:	8140038f 	ldh	r5,14(r16)
    8f68:	8809883a 	mov	r4,r17
    8f6c:	000dd780 	call	dd78 <_isatty_r>
    8f70:	10004c26 	beq	r2,zero,90a4 <__smakebuf_r+0x1a8>
    8f74:	8080030b 	ldhu	r2,12(r16)
    8f78:	80c010c4 	addi	r3,r16,67
    8f7c:	80c00015 	stw	r3,0(r16)
    8f80:	10800054 	ori	r2,r2,1
    8f84:	8080030d 	sth	r2,12(r16)
    8f88:	00800044 	movi	r2,1
    8f8c:	80c00415 	stw	r3,16(r16)
    8f90:	80800515 	stw	r2,20(r16)
    8f94:	04810004 	movi	r18,1024
    8f98:	00000706 	br	8fb8 <__smakebuf_r+0xbc>
    8f9c:	8080030b 	ldhu	r2,12(r16)
    8fa0:	10c0200c 	andi	r3,r2,128
    8fa4:	18001f1e 	bne	r3,zero,9024 <__smakebuf_r+0x128>
    8fa8:	04810004 	movi	r18,1024
    8fac:	10820014 	ori	r2,r2,2048
    8fb0:	8080030d 	sth	r2,12(r16)
    8fb4:	0027883a 	mov	r19,zero
    8fb8:	900b883a 	mov	r5,r18
    8fbc:	8809883a 	mov	r4,r17
    8fc0:	00015b80 	call	15b8 <_malloc_r>
    8fc4:	10002c26 	beq	r2,zero,9078 <__smakebuf_r+0x17c>
    8fc8:	80c0030b 	ldhu	r3,12(r16)
    8fcc:	01000074 	movhi	r4,1
    8fd0:	21211804 	addi	r4,r4,-31648
    8fd4:	89000f15 	stw	r4,60(r17)
    8fd8:	18c02014 	ori	r3,r3,128
    8fdc:	80c0030d 	sth	r3,12(r16)
    8fe0:	80800015 	stw	r2,0(r16)
    8fe4:	80800415 	stw	r2,16(r16)
    8fe8:	84800515 	stw	r18,20(r16)
    8fec:	98001a1e 	bne	r19,zero,9058 <__smakebuf_r+0x15c>
    8ff0:	dfc01317 	ldw	ra,76(sp)
    8ff4:	dcc01217 	ldw	r19,72(sp)
    8ff8:	dc801117 	ldw	r18,68(sp)
    8ffc:	dc401017 	ldw	r17,64(sp)
    9000:	dc000f17 	ldw	r16,60(sp)
    9004:	dec01404 	addi	sp,sp,80
    9008:	f800283a 	ret
    900c:	288010c4 	addi	r2,r5,67
    9010:	28800015 	stw	r2,0(r5)
    9014:	28800415 	stw	r2,16(r5)
    9018:	00800044 	movi	r2,1
    901c:	28800515 	stw	r2,20(r5)
    9020:	f800283a 	ret
    9024:	04801004 	movi	r18,64
    9028:	003fe006 	br	8fac <__alt_mem_Onchip_SRAM+0xf8008fac>
    902c:	81000a17 	ldw	r4,40(r16)
    9030:	00c00074 	movhi	r3,1
    9034:	18e98404 	addi	r3,r3,-23024
    9038:	20ffc51e 	bne	r4,r3,8f50 <__alt_mem_Onchip_SRAM+0xf8008f50>
    903c:	8080030b 	ldhu	r2,12(r16)
    9040:	04810004 	movi	r18,1024
    9044:	84801315 	stw	r18,76(r16)
    9048:	1484b03a 	or	r2,r2,r18
    904c:	8080030d 	sth	r2,12(r16)
    9050:	0027883a 	mov	r19,zero
    9054:	003fd806 	br	8fb8 <__alt_mem_Onchip_SRAM+0xf8008fb8>
    9058:	8140038f 	ldh	r5,14(r16)
    905c:	8809883a 	mov	r4,r17
    9060:	000dd780 	call	dd78 <_isatty_r>
    9064:	103fe226 	beq	r2,zero,8ff0 <__alt_mem_Onchip_SRAM+0xf8008ff0>
    9068:	8080030b 	ldhu	r2,12(r16)
    906c:	10800054 	ori	r2,r2,1
    9070:	8080030d 	sth	r2,12(r16)
    9074:	003fde06 	br	8ff0 <__alt_mem_Onchip_SRAM+0xf8008ff0>
    9078:	8080030b 	ldhu	r2,12(r16)
    907c:	10c0800c 	andi	r3,r2,512
    9080:	183fdb1e 	bne	r3,zero,8ff0 <__alt_mem_Onchip_SRAM+0xf8008ff0>
    9084:	10800094 	ori	r2,r2,2
    9088:	80c010c4 	addi	r3,r16,67
    908c:	8080030d 	sth	r2,12(r16)
    9090:	00800044 	movi	r2,1
    9094:	80c00015 	stw	r3,0(r16)
    9098:	80c00415 	stw	r3,16(r16)
    909c:	80800515 	stw	r2,20(r16)
    90a0:	003fd306 	br	8ff0 <__alt_mem_Onchip_SRAM+0xf8008ff0>
    90a4:	04810004 	movi	r18,1024
    90a8:	003fc306 	br	8fb8 <__alt_mem_Onchip_SRAM+0xf8008fb8>
    90ac:	0027883a 	mov	r19,zero
    90b0:	04810004 	movi	r18,1024
    90b4:	003fc006 	br	8fb8 <__alt_mem_Onchip_SRAM+0xf8008fb8>

000090b8 <memchr>:
    90b8:	208000cc 	andi	r2,r4,3
    90bc:	280f883a 	mov	r7,r5
    90c0:	10003426 	beq	r2,zero,9194 <memchr+0xdc>
    90c4:	30bfffc4 	addi	r2,r6,-1
    90c8:	30001a26 	beq	r6,zero,9134 <memchr+0x7c>
    90cc:	20c00003 	ldbu	r3,0(r4)
    90d0:	29803fcc 	andi	r6,r5,255
    90d4:	30c0051e 	bne	r6,r3,90ec <memchr+0x34>
    90d8:	00001806 	br	913c <memchr+0x84>
    90dc:	10001526 	beq	r2,zero,9134 <memchr+0x7c>
    90e0:	20c00003 	ldbu	r3,0(r4)
    90e4:	10bfffc4 	addi	r2,r2,-1
    90e8:	30c01426 	beq	r6,r3,913c <memchr+0x84>
    90ec:	21000044 	addi	r4,r4,1
    90f0:	20c000cc 	andi	r3,r4,3
    90f4:	183ff91e 	bne	r3,zero,90dc <__alt_mem_Onchip_SRAM+0xf80090dc>
    90f8:	020000c4 	movi	r8,3
    90fc:	40801136 	bltu	r8,r2,9144 <memchr+0x8c>
    9100:	10000c26 	beq	r2,zero,9134 <memchr+0x7c>
    9104:	20c00003 	ldbu	r3,0(r4)
    9108:	29403fcc 	andi	r5,r5,255
    910c:	28c00b26 	beq	r5,r3,913c <memchr+0x84>
    9110:	20c00044 	addi	r3,r4,1
    9114:	39803fcc 	andi	r6,r7,255
    9118:	2089883a 	add	r4,r4,r2
    911c:	00000306 	br	912c <memchr+0x74>
    9120:	18c00044 	addi	r3,r3,1
    9124:	197fffc3 	ldbu	r5,-1(r3)
    9128:	31400526 	beq	r6,r5,9140 <memchr+0x88>
    912c:	1805883a 	mov	r2,r3
    9130:	20fffb1e 	bne	r4,r3,9120 <__alt_mem_Onchip_SRAM+0xf8009120>
    9134:	0005883a 	mov	r2,zero
    9138:	f800283a 	ret
    913c:	2005883a 	mov	r2,r4
    9140:	f800283a 	ret
    9144:	28c03fcc 	andi	r3,r5,255
    9148:	1812923a 	slli	r9,r3,8
    914c:	02ffbff4 	movhi	r11,65279
    9150:	02a02074 	movhi	r10,32897
    9154:	48d2b03a 	or	r9,r9,r3
    9158:	4806943a 	slli	r3,r9,16
    915c:	5affbfc4 	addi	r11,r11,-257
    9160:	52a02004 	addi	r10,r10,-32640
    9164:	48d2b03a 	or	r9,r9,r3
    9168:	20c00017 	ldw	r3,0(r4)
    916c:	48c6f03a 	xor	r3,r9,r3
    9170:	1acd883a 	add	r6,r3,r11
    9174:	00c6303a 	nor	r3,zero,r3
    9178:	30c6703a 	and	r3,r6,r3
    917c:	1a86703a 	and	r3,r3,r10
    9180:	183fe01e 	bne	r3,zero,9104 <__alt_mem_Onchip_SRAM+0xf8009104>
    9184:	10bfff04 	addi	r2,r2,-4
    9188:	21000104 	addi	r4,r4,4
    918c:	40bff636 	bltu	r8,r2,9168 <__alt_mem_Onchip_SRAM+0xf8009168>
    9190:	003fdb06 	br	9100 <__alt_mem_Onchip_SRAM+0xf8009100>
    9194:	3005883a 	mov	r2,r6
    9198:	003fd706 	br	90f8 <__alt_mem_Onchip_SRAM+0xf80090f8>

0000919c <memcpy>:
    919c:	defffd04 	addi	sp,sp,-12
    91a0:	dfc00215 	stw	ra,8(sp)
    91a4:	dc400115 	stw	r17,4(sp)
    91a8:	dc000015 	stw	r16,0(sp)
    91ac:	00c003c4 	movi	r3,15
    91b0:	2005883a 	mov	r2,r4
    91b4:	1980452e 	bgeu	r3,r6,92cc <memcpy+0x130>
    91b8:	2906b03a 	or	r3,r5,r4
    91bc:	18c000cc 	andi	r3,r3,3
    91c0:	1800441e 	bne	r3,zero,92d4 <memcpy+0x138>
    91c4:	347ffc04 	addi	r17,r6,-16
    91c8:	8822d13a 	srli	r17,r17,4
    91cc:	28c00104 	addi	r3,r5,4
    91d0:	23400104 	addi	r13,r4,4
    91d4:	8820913a 	slli	r16,r17,4
    91d8:	2b000204 	addi	r12,r5,8
    91dc:	22c00204 	addi	r11,r4,8
    91e0:	84000504 	addi	r16,r16,20
    91e4:	2a800304 	addi	r10,r5,12
    91e8:	22400304 	addi	r9,r4,12
    91ec:	2c21883a 	add	r16,r5,r16
    91f0:	2811883a 	mov	r8,r5
    91f4:	200f883a 	mov	r7,r4
    91f8:	41000017 	ldw	r4,0(r8)
    91fc:	1fc00017 	ldw	ra,0(r3)
    9200:	63c00017 	ldw	r15,0(r12)
    9204:	39000015 	stw	r4,0(r7)
    9208:	53800017 	ldw	r14,0(r10)
    920c:	6fc00015 	stw	ra,0(r13)
    9210:	5bc00015 	stw	r15,0(r11)
    9214:	4b800015 	stw	r14,0(r9)
    9218:	18c00404 	addi	r3,r3,16
    921c:	39c00404 	addi	r7,r7,16
    9220:	42000404 	addi	r8,r8,16
    9224:	6b400404 	addi	r13,r13,16
    9228:	63000404 	addi	r12,r12,16
    922c:	5ac00404 	addi	r11,r11,16
    9230:	52800404 	addi	r10,r10,16
    9234:	4a400404 	addi	r9,r9,16
    9238:	1c3fef1e 	bne	r3,r16,91f8 <__alt_mem_Onchip_SRAM+0xf80091f8>
    923c:	89c00044 	addi	r7,r17,1
    9240:	380e913a 	slli	r7,r7,4
    9244:	310003cc 	andi	r4,r6,15
    9248:	02c000c4 	movi	r11,3
    924c:	11c7883a 	add	r3,r2,r7
    9250:	29cb883a 	add	r5,r5,r7
    9254:	5900212e 	bgeu	r11,r4,92dc <memcpy+0x140>
    9258:	1813883a 	mov	r9,r3
    925c:	2811883a 	mov	r8,r5
    9260:	200f883a 	mov	r7,r4
    9264:	42800017 	ldw	r10,0(r8)
    9268:	4a400104 	addi	r9,r9,4
    926c:	39ffff04 	addi	r7,r7,-4
    9270:	4abfff15 	stw	r10,-4(r9)
    9274:	42000104 	addi	r8,r8,4
    9278:	59fffa36 	bltu	r11,r7,9264 <__alt_mem_Onchip_SRAM+0xf8009264>
    927c:	213fff04 	addi	r4,r4,-4
    9280:	2008d0ba 	srli	r4,r4,2
    9284:	318000cc 	andi	r6,r6,3
    9288:	21000044 	addi	r4,r4,1
    928c:	2109883a 	add	r4,r4,r4
    9290:	2109883a 	add	r4,r4,r4
    9294:	1907883a 	add	r3,r3,r4
    9298:	290b883a 	add	r5,r5,r4
    929c:	30000626 	beq	r6,zero,92b8 <memcpy+0x11c>
    92a0:	198d883a 	add	r6,r3,r6
    92a4:	29c00003 	ldbu	r7,0(r5)
    92a8:	18c00044 	addi	r3,r3,1
    92ac:	29400044 	addi	r5,r5,1
    92b0:	19ffffc5 	stb	r7,-1(r3)
    92b4:	19bffb1e 	bne	r3,r6,92a4 <__alt_mem_Onchip_SRAM+0xf80092a4>
    92b8:	dfc00217 	ldw	ra,8(sp)
    92bc:	dc400117 	ldw	r17,4(sp)
    92c0:	dc000017 	ldw	r16,0(sp)
    92c4:	dec00304 	addi	sp,sp,12
    92c8:	f800283a 	ret
    92cc:	2007883a 	mov	r3,r4
    92d0:	003ff206 	br	929c <__alt_mem_Onchip_SRAM+0xf800929c>
    92d4:	2007883a 	mov	r3,r4
    92d8:	003ff106 	br	92a0 <__alt_mem_Onchip_SRAM+0xf80092a0>
    92dc:	200d883a 	mov	r6,r4
    92e0:	003fee06 	br	929c <__alt_mem_Onchip_SRAM+0xf800929c>

000092e4 <memset>:
    92e4:	20c000cc 	andi	r3,r4,3
    92e8:	2005883a 	mov	r2,r4
    92ec:	18004426 	beq	r3,zero,9400 <memset+0x11c>
    92f0:	31ffffc4 	addi	r7,r6,-1
    92f4:	30004026 	beq	r6,zero,93f8 <memset+0x114>
    92f8:	2813883a 	mov	r9,r5
    92fc:	200d883a 	mov	r6,r4
    9300:	2007883a 	mov	r3,r4
    9304:	00000406 	br	9318 <memset+0x34>
    9308:	3a3fffc4 	addi	r8,r7,-1
    930c:	31800044 	addi	r6,r6,1
    9310:	38003926 	beq	r7,zero,93f8 <memset+0x114>
    9314:	400f883a 	mov	r7,r8
    9318:	18c00044 	addi	r3,r3,1
    931c:	32400005 	stb	r9,0(r6)
    9320:	1a0000cc 	andi	r8,r3,3
    9324:	403ff81e 	bne	r8,zero,9308 <__alt_mem_Onchip_SRAM+0xf8009308>
    9328:	010000c4 	movi	r4,3
    932c:	21c02d2e 	bgeu	r4,r7,93e4 <memset+0x100>
    9330:	29003fcc 	andi	r4,r5,255
    9334:	200c923a 	slli	r6,r4,8
    9338:	3108b03a 	or	r4,r6,r4
    933c:	200c943a 	slli	r6,r4,16
    9340:	218cb03a 	or	r6,r4,r6
    9344:	010003c4 	movi	r4,15
    9348:	21c0182e 	bgeu	r4,r7,93ac <memset+0xc8>
    934c:	3b3ffc04 	addi	r12,r7,-16
    9350:	6018d13a 	srli	r12,r12,4
    9354:	1a000104 	addi	r8,r3,4
    9358:	1ac00204 	addi	r11,r3,8
    935c:	6008913a 	slli	r4,r12,4
    9360:	1a800304 	addi	r10,r3,12
    9364:	1813883a 	mov	r9,r3
    9368:	21000504 	addi	r4,r4,20
    936c:	1909883a 	add	r4,r3,r4
    9370:	49800015 	stw	r6,0(r9)
    9374:	41800015 	stw	r6,0(r8)
    9378:	59800015 	stw	r6,0(r11)
    937c:	51800015 	stw	r6,0(r10)
    9380:	42000404 	addi	r8,r8,16
    9384:	4a400404 	addi	r9,r9,16
    9388:	5ac00404 	addi	r11,r11,16
    938c:	52800404 	addi	r10,r10,16
    9390:	413ff71e 	bne	r8,r4,9370 <__alt_mem_Onchip_SRAM+0xf8009370>
    9394:	63000044 	addi	r12,r12,1
    9398:	6018913a 	slli	r12,r12,4
    939c:	39c003cc 	andi	r7,r7,15
    93a0:	010000c4 	movi	r4,3
    93a4:	1b07883a 	add	r3,r3,r12
    93a8:	21c00e2e 	bgeu	r4,r7,93e4 <memset+0x100>
    93ac:	1813883a 	mov	r9,r3
    93b0:	3811883a 	mov	r8,r7
    93b4:	010000c4 	movi	r4,3
    93b8:	49800015 	stw	r6,0(r9)
    93bc:	423fff04 	addi	r8,r8,-4
    93c0:	4a400104 	addi	r9,r9,4
    93c4:	223ffc36 	bltu	r4,r8,93b8 <__alt_mem_Onchip_SRAM+0xf80093b8>
    93c8:	393fff04 	addi	r4,r7,-4
    93cc:	2008d0ba 	srli	r4,r4,2
    93d0:	39c000cc 	andi	r7,r7,3
    93d4:	21000044 	addi	r4,r4,1
    93d8:	2109883a 	add	r4,r4,r4
    93dc:	2109883a 	add	r4,r4,r4
    93e0:	1907883a 	add	r3,r3,r4
    93e4:	38000526 	beq	r7,zero,93fc <memset+0x118>
    93e8:	19cf883a 	add	r7,r3,r7
    93ec:	19400005 	stb	r5,0(r3)
    93f0:	18c00044 	addi	r3,r3,1
    93f4:	38fffd1e 	bne	r7,r3,93ec <__alt_mem_Onchip_SRAM+0xf80093ec>
    93f8:	f800283a 	ret
    93fc:	f800283a 	ret
    9400:	2007883a 	mov	r3,r4
    9404:	300f883a 	mov	r7,r6
    9408:	003fc706 	br	9328 <__alt_mem_Onchip_SRAM+0xf8009328>

0000940c <_Balloc>:
    940c:	20801317 	ldw	r2,76(r4)
    9410:	defffc04 	addi	sp,sp,-16
    9414:	dc400115 	stw	r17,4(sp)
    9418:	dc000015 	stw	r16,0(sp)
    941c:	dfc00315 	stw	ra,12(sp)
    9420:	dc800215 	stw	r18,8(sp)
    9424:	2023883a 	mov	r17,r4
    9428:	2821883a 	mov	r16,r5
    942c:	10000f26 	beq	r2,zero,946c <_Balloc+0x60>
    9430:	8407883a 	add	r3,r16,r16
    9434:	18c7883a 	add	r3,r3,r3
    9438:	10c7883a 	add	r3,r2,r3
    943c:	18800017 	ldw	r2,0(r3)
    9440:	10001126 	beq	r2,zero,9488 <_Balloc+0x7c>
    9444:	11000017 	ldw	r4,0(r2)
    9448:	19000015 	stw	r4,0(r3)
    944c:	10000415 	stw	zero,16(r2)
    9450:	10000315 	stw	zero,12(r2)
    9454:	dfc00317 	ldw	ra,12(sp)
    9458:	dc800217 	ldw	r18,8(sp)
    945c:	dc400117 	ldw	r17,4(sp)
    9460:	dc000017 	ldw	r16,0(sp)
    9464:	dec00404 	addi	sp,sp,16
    9468:	f800283a 	ret
    946c:	01800844 	movi	r6,33
    9470:	01400104 	movi	r5,4
    9474:	000d46c0 	call	d46c <_calloc_r>
    9478:	88801315 	stw	r2,76(r17)
    947c:	103fec1e 	bne	r2,zero,9430 <__alt_mem_Onchip_SRAM+0xf8009430>
    9480:	0005883a 	mov	r2,zero
    9484:	003ff306 	br	9454 <__alt_mem_Onchip_SRAM+0xf8009454>
    9488:	01400044 	movi	r5,1
    948c:	2c24983a 	sll	r18,r5,r16
    9490:	8809883a 	mov	r4,r17
    9494:	91800144 	addi	r6,r18,5
    9498:	318d883a 	add	r6,r6,r6
    949c:	318d883a 	add	r6,r6,r6
    94a0:	000d46c0 	call	d46c <_calloc_r>
    94a4:	103ff626 	beq	r2,zero,9480 <__alt_mem_Onchip_SRAM+0xf8009480>
    94a8:	14000115 	stw	r16,4(r2)
    94ac:	14800215 	stw	r18,8(r2)
    94b0:	003fe606 	br	944c <__alt_mem_Onchip_SRAM+0xf800944c>

000094b4 <_Bfree>:
    94b4:	28000826 	beq	r5,zero,94d8 <_Bfree+0x24>
    94b8:	28c00117 	ldw	r3,4(r5)
    94bc:	20801317 	ldw	r2,76(r4)
    94c0:	18c7883a 	add	r3,r3,r3
    94c4:	18c7883a 	add	r3,r3,r3
    94c8:	10c5883a 	add	r2,r2,r3
    94cc:	10c00017 	ldw	r3,0(r2)
    94d0:	28c00015 	stw	r3,0(r5)
    94d4:	11400015 	stw	r5,0(r2)
    94d8:	f800283a 	ret

000094dc <__multadd>:
    94dc:	defff704 	addi	sp,sp,-36
    94e0:	dc800215 	stw	r18,8(sp)
    94e4:	2c800417 	ldw	r18,16(r5)
    94e8:	dd800615 	stw	r22,24(sp)
    94ec:	dd400515 	stw	r21,20(sp)
    94f0:	dd000415 	stw	r20,16(sp)
    94f4:	dcc00315 	stw	r19,12(sp)
    94f8:	dc400115 	stw	r17,4(sp)
    94fc:	dc000015 	stw	r16,0(sp)
    9500:	dfc00815 	stw	ra,32(sp)
    9504:	ddc00715 	stw	r23,28(sp)
    9508:	2827883a 	mov	r19,r5
    950c:	2029883a 	mov	r20,r4
    9510:	3023883a 	mov	r17,r6
    9514:	3821883a 	mov	r16,r7
    9518:	2d400504 	addi	r21,r5,20
    951c:	002d883a 	mov	r22,zero
    9520:	adc00017 	ldw	r23,0(r21)
    9524:	880b883a 	mov	r5,r17
    9528:	ad400104 	addi	r21,r21,4
    952c:	b93fffcc 	andi	r4,r23,65535
    9530:	00015680 	call	1568 <__mulsi3>
    9534:	b808d43a 	srli	r4,r23,16
    9538:	880b883a 	mov	r5,r17
    953c:	1421883a 	add	r16,r2,r16
    9540:	00015680 	call	1568 <__mulsi3>
    9544:	800ed43a 	srli	r7,r16,16
    9548:	80ffffcc 	andi	r3,r16,65535
    954c:	b5800044 	addi	r22,r22,1
    9550:	11c5883a 	add	r2,r2,r7
    9554:	100e943a 	slli	r7,r2,16
    9558:	1020d43a 	srli	r16,r2,16
    955c:	38c7883a 	add	r3,r7,r3
    9560:	a8ffff15 	stw	r3,-4(r21)
    9564:	b4bfee16 	blt	r22,r18,9520 <__alt_mem_Onchip_SRAM+0xf8009520>
    9568:	80000926 	beq	r16,zero,9590 <__multadd+0xb4>
    956c:	98800217 	ldw	r2,8(r19)
    9570:	9080130e 	bge	r18,r2,95c0 <__multadd+0xe4>
    9574:	90800144 	addi	r2,r18,5
    9578:	1085883a 	add	r2,r2,r2
    957c:	1085883a 	add	r2,r2,r2
    9580:	9885883a 	add	r2,r19,r2
    9584:	14000015 	stw	r16,0(r2)
    9588:	94800044 	addi	r18,r18,1
    958c:	9c800415 	stw	r18,16(r19)
    9590:	9805883a 	mov	r2,r19
    9594:	dfc00817 	ldw	ra,32(sp)
    9598:	ddc00717 	ldw	r23,28(sp)
    959c:	dd800617 	ldw	r22,24(sp)
    95a0:	dd400517 	ldw	r21,20(sp)
    95a4:	dd000417 	ldw	r20,16(sp)
    95a8:	dcc00317 	ldw	r19,12(sp)
    95ac:	dc800217 	ldw	r18,8(sp)
    95b0:	dc400117 	ldw	r17,4(sp)
    95b4:	dc000017 	ldw	r16,0(sp)
    95b8:	dec00904 	addi	sp,sp,36
    95bc:	f800283a 	ret
    95c0:	99400117 	ldw	r5,4(r19)
    95c4:	a009883a 	mov	r4,r20
    95c8:	29400044 	addi	r5,r5,1
    95cc:	000940c0 	call	940c <_Balloc>
    95d0:	99800417 	ldw	r6,16(r19)
    95d4:	99400304 	addi	r5,r19,12
    95d8:	11000304 	addi	r4,r2,12
    95dc:	31800084 	addi	r6,r6,2
    95e0:	318d883a 	add	r6,r6,r6
    95e4:	318d883a 	add	r6,r6,r6
    95e8:	1023883a 	mov	r17,r2
    95ec:	000919c0 	call	919c <memcpy>
    95f0:	98000a26 	beq	r19,zero,961c <__multadd+0x140>
    95f4:	98c00117 	ldw	r3,4(r19)
    95f8:	a0801317 	ldw	r2,76(r20)
    95fc:	18c7883a 	add	r3,r3,r3
    9600:	18c7883a 	add	r3,r3,r3
    9604:	10c5883a 	add	r2,r2,r3
    9608:	10c00017 	ldw	r3,0(r2)
    960c:	98c00015 	stw	r3,0(r19)
    9610:	14c00015 	stw	r19,0(r2)
    9614:	8827883a 	mov	r19,r17
    9618:	003fd606 	br	9574 <__alt_mem_Onchip_SRAM+0xf8009574>
    961c:	8827883a 	mov	r19,r17
    9620:	003fd406 	br	9574 <__alt_mem_Onchip_SRAM+0xf8009574>

00009624 <__s2b>:
    9624:	defff904 	addi	sp,sp,-28
    9628:	dc400115 	stw	r17,4(sp)
    962c:	dc000015 	stw	r16,0(sp)
    9630:	2023883a 	mov	r17,r4
    9634:	2821883a 	mov	r16,r5
    9638:	39000204 	addi	r4,r7,8
    963c:	01400244 	movi	r5,9
    9640:	dcc00315 	stw	r19,12(sp)
    9644:	dc800215 	stw	r18,8(sp)
    9648:	dfc00615 	stw	ra,24(sp)
    964c:	dd400515 	stw	r21,20(sp)
    9650:	dd000415 	stw	r20,16(sp)
    9654:	3825883a 	mov	r18,r7
    9658:	3027883a 	mov	r19,r6
    965c:	00013b40 	call	13b4 <__divsi3>
    9660:	00c00044 	movi	r3,1
    9664:	000b883a 	mov	r5,zero
    9668:	1880030e 	bge	r3,r2,9678 <__s2b+0x54>
    966c:	18c7883a 	add	r3,r3,r3
    9670:	29400044 	addi	r5,r5,1
    9674:	18bffd16 	blt	r3,r2,966c <__alt_mem_Onchip_SRAM+0xf800966c>
    9678:	8809883a 	mov	r4,r17
    967c:	000940c0 	call	940c <_Balloc>
    9680:	d8c00717 	ldw	r3,28(sp)
    9684:	10c00515 	stw	r3,20(r2)
    9688:	00c00044 	movi	r3,1
    968c:	10c00415 	stw	r3,16(r2)
    9690:	00c00244 	movi	r3,9
    9694:	1cc0210e 	bge	r3,r19,971c <__s2b+0xf8>
    9698:	80eb883a 	add	r21,r16,r3
    969c:	a829883a 	mov	r20,r21
    96a0:	84e1883a 	add	r16,r16,r19
    96a4:	a1c00007 	ldb	r7,0(r20)
    96a8:	01800284 	movi	r6,10
    96ac:	a5000044 	addi	r20,r20,1
    96b0:	100b883a 	mov	r5,r2
    96b4:	39fff404 	addi	r7,r7,-48
    96b8:	8809883a 	mov	r4,r17
    96bc:	00094dc0 	call	94dc <__multadd>
    96c0:	a43ff81e 	bne	r20,r16,96a4 <__alt_mem_Onchip_SRAM+0xf80096a4>
    96c4:	ace1883a 	add	r16,r21,r19
    96c8:	843ffe04 	addi	r16,r16,-8
    96cc:	9c800a0e 	bge	r19,r18,96f8 <__s2b+0xd4>
    96d0:	94e5c83a 	sub	r18,r18,r19
    96d4:	84a5883a 	add	r18,r16,r18
    96d8:	81c00007 	ldb	r7,0(r16)
    96dc:	01800284 	movi	r6,10
    96e0:	84000044 	addi	r16,r16,1
    96e4:	100b883a 	mov	r5,r2
    96e8:	39fff404 	addi	r7,r7,-48
    96ec:	8809883a 	mov	r4,r17
    96f0:	00094dc0 	call	94dc <__multadd>
    96f4:	84bff81e 	bne	r16,r18,96d8 <__alt_mem_Onchip_SRAM+0xf80096d8>
    96f8:	dfc00617 	ldw	ra,24(sp)
    96fc:	dd400517 	ldw	r21,20(sp)
    9700:	dd000417 	ldw	r20,16(sp)
    9704:	dcc00317 	ldw	r19,12(sp)
    9708:	dc800217 	ldw	r18,8(sp)
    970c:	dc400117 	ldw	r17,4(sp)
    9710:	dc000017 	ldw	r16,0(sp)
    9714:	dec00704 	addi	sp,sp,28
    9718:	f800283a 	ret
    971c:	84000284 	addi	r16,r16,10
    9720:	1827883a 	mov	r19,r3
    9724:	003fe906 	br	96cc <__alt_mem_Onchip_SRAM+0xf80096cc>

00009728 <__hi0bits>:
    9728:	20bfffec 	andhi	r2,r4,65535
    972c:	1000141e 	bne	r2,zero,9780 <__hi0bits+0x58>
    9730:	2008943a 	slli	r4,r4,16
    9734:	00800404 	movi	r2,16
    9738:	20ffc02c 	andhi	r3,r4,65280
    973c:	1800021e 	bne	r3,zero,9748 <__hi0bits+0x20>
    9740:	2008923a 	slli	r4,r4,8
    9744:	10800204 	addi	r2,r2,8
    9748:	20fc002c 	andhi	r3,r4,61440
    974c:	1800021e 	bne	r3,zero,9758 <__hi0bits+0x30>
    9750:	2008913a 	slli	r4,r4,4
    9754:	10800104 	addi	r2,r2,4
    9758:	20f0002c 	andhi	r3,r4,49152
    975c:	1800031e 	bne	r3,zero,976c <__hi0bits+0x44>
    9760:	2109883a 	add	r4,r4,r4
    9764:	10800084 	addi	r2,r2,2
    9768:	2109883a 	add	r4,r4,r4
    976c:	20000316 	blt	r4,zero,977c <__hi0bits+0x54>
    9770:	2110002c 	andhi	r4,r4,16384
    9774:	2000041e 	bne	r4,zero,9788 <__hi0bits+0x60>
    9778:	00800804 	movi	r2,32
    977c:	f800283a 	ret
    9780:	0005883a 	mov	r2,zero
    9784:	003fec06 	br	9738 <__alt_mem_Onchip_SRAM+0xf8009738>
    9788:	10800044 	addi	r2,r2,1
    978c:	f800283a 	ret

00009790 <__lo0bits>:
    9790:	20c00017 	ldw	r3,0(r4)
    9794:	188001cc 	andi	r2,r3,7
    9798:	10000826 	beq	r2,zero,97bc <__lo0bits+0x2c>
    979c:	1880004c 	andi	r2,r3,1
    97a0:	1000211e 	bne	r2,zero,9828 <__lo0bits+0x98>
    97a4:	1880008c 	andi	r2,r3,2
    97a8:	1000211e 	bne	r2,zero,9830 <__lo0bits+0xa0>
    97ac:	1806d0ba 	srli	r3,r3,2
    97b0:	00800084 	movi	r2,2
    97b4:	20c00015 	stw	r3,0(r4)
    97b8:	f800283a 	ret
    97bc:	18bfffcc 	andi	r2,r3,65535
    97c0:	10001326 	beq	r2,zero,9810 <__lo0bits+0x80>
    97c4:	0005883a 	mov	r2,zero
    97c8:	19403fcc 	andi	r5,r3,255
    97cc:	2800021e 	bne	r5,zero,97d8 <__lo0bits+0x48>
    97d0:	1806d23a 	srli	r3,r3,8
    97d4:	10800204 	addi	r2,r2,8
    97d8:	194003cc 	andi	r5,r3,15
    97dc:	2800021e 	bne	r5,zero,97e8 <__lo0bits+0x58>
    97e0:	1806d13a 	srli	r3,r3,4
    97e4:	10800104 	addi	r2,r2,4
    97e8:	194000cc 	andi	r5,r3,3
    97ec:	2800021e 	bne	r5,zero,97f8 <__lo0bits+0x68>
    97f0:	1806d0ba 	srli	r3,r3,2
    97f4:	10800084 	addi	r2,r2,2
    97f8:	1940004c 	andi	r5,r3,1
    97fc:	2800081e 	bne	r5,zero,9820 <__lo0bits+0x90>
    9800:	1806d07a 	srli	r3,r3,1
    9804:	1800051e 	bne	r3,zero,981c <__lo0bits+0x8c>
    9808:	00800804 	movi	r2,32
    980c:	f800283a 	ret
    9810:	1806d43a 	srli	r3,r3,16
    9814:	00800404 	movi	r2,16
    9818:	003feb06 	br	97c8 <__alt_mem_Onchip_SRAM+0xf80097c8>
    981c:	10800044 	addi	r2,r2,1
    9820:	20c00015 	stw	r3,0(r4)
    9824:	f800283a 	ret
    9828:	0005883a 	mov	r2,zero
    982c:	f800283a 	ret
    9830:	1806d07a 	srli	r3,r3,1
    9834:	00800044 	movi	r2,1
    9838:	20c00015 	stw	r3,0(r4)
    983c:	f800283a 	ret

00009840 <__i2b>:
    9840:	defffd04 	addi	sp,sp,-12
    9844:	dc000015 	stw	r16,0(sp)
    9848:	04000044 	movi	r16,1
    984c:	dc400115 	stw	r17,4(sp)
    9850:	2823883a 	mov	r17,r5
    9854:	800b883a 	mov	r5,r16
    9858:	dfc00215 	stw	ra,8(sp)
    985c:	000940c0 	call	940c <_Balloc>
    9860:	14400515 	stw	r17,20(r2)
    9864:	14000415 	stw	r16,16(r2)
    9868:	dfc00217 	ldw	ra,8(sp)
    986c:	dc400117 	ldw	r17,4(sp)
    9870:	dc000017 	ldw	r16,0(sp)
    9874:	dec00304 	addi	sp,sp,12
    9878:	f800283a 	ret

0000987c <__multiply>:
    987c:	deffef04 	addi	sp,sp,-68
    9880:	dc400815 	stw	r17,32(sp)
    9884:	dc000715 	stw	r16,28(sp)
    9888:	34400417 	ldw	r17,16(r6)
    988c:	2c000417 	ldw	r16,16(r5)
    9890:	dd800d15 	stw	r22,52(sp)
    9894:	dc800915 	stw	r18,36(sp)
    9898:	dfc01015 	stw	ra,64(sp)
    989c:	df000f15 	stw	fp,60(sp)
    98a0:	ddc00e15 	stw	r23,56(sp)
    98a4:	dd400c15 	stw	r21,48(sp)
    98a8:	dd000b15 	stw	r20,44(sp)
    98ac:	dcc00a15 	stw	r19,40(sp)
    98b0:	2825883a 	mov	r18,r5
    98b4:	302d883a 	mov	r22,r6
    98b8:	8440050e 	bge	r16,r17,98d0 <__multiply+0x54>
    98bc:	8007883a 	mov	r3,r16
    98c0:	3025883a 	mov	r18,r6
    98c4:	8821883a 	mov	r16,r17
    98c8:	282d883a 	mov	r22,r5
    98cc:	1823883a 	mov	r17,r3
    98d0:	90800217 	ldw	r2,8(r18)
    98d4:	8447883a 	add	r3,r16,r17
    98d8:	d8c00215 	stw	r3,8(sp)
    98dc:	91400117 	ldw	r5,4(r18)
    98e0:	10c0010e 	bge	r2,r3,98e8 <__multiply+0x6c>
    98e4:	29400044 	addi	r5,r5,1
    98e8:	000940c0 	call	940c <_Balloc>
    98ec:	d8c00217 	ldw	r3,8(sp)
    98f0:	d8800615 	stw	r2,24(sp)
    98f4:	18eb883a 	add	r21,r3,r3
    98f8:	ad6b883a 	add	r21,r21,r21
    98fc:	10c00504 	addi	r3,r2,20
    9900:	1d6b883a 	add	r21,r3,r21
    9904:	d8c00115 	stw	r3,4(sp)
    9908:	dd400315 	stw	r21,12(sp)
    990c:	1805883a 	mov	r2,r3
    9910:	1d40042e 	bgeu	r3,r21,9924 <__multiply+0xa8>
    9914:	d8c00317 	ldw	r3,12(sp)
    9918:	10000015 	stw	zero,0(r2)
    991c:	10800104 	addi	r2,r2,4
    9920:	10fffc36 	bltu	r2,r3,9914 <__alt_mem_Onchip_SRAM+0xf8009914>
    9924:	8c63883a 	add	r17,r17,r17
    9928:	b5800504 	addi	r22,r22,20
    992c:	8c63883a 	add	r17,r17,r17
    9930:	94800504 	addi	r18,r18,20
    9934:	8421883a 	add	r16,r16,r16
    9938:	b463883a 	add	r17,r22,r17
    993c:	8421883a 	add	r16,r16,r16
    9940:	dd800015 	stw	r22,0(sp)
    9944:	dc800415 	stw	r18,16(sp)
    9948:	dc400515 	stw	r17,20(sp)
    994c:	9429883a 	add	r20,r18,r16
    9950:	b4404f2e 	bgeu	r22,r17,9a90 <__multiply+0x214>
    9954:	d8c00017 	ldw	r3,0(sp)
    9958:	1c800017 	ldw	r18,0(r3)
    995c:	947fffcc 	andi	r17,r18,65535
    9960:	88001e26 	beq	r17,zero,99dc <__multiply+0x160>
    9964:	dd800117 	ldw	r22,4(sp)
    9968:	dd400417 	ldw	r21,16(sp)
    996c:	0027883a 	mov	r19,zero
    9970:	ac800017 	ldw	r18,0(r21)
    9974:	b4000017 	ldw	r16,0(r22)
    9978:	880b883a 	mov	r5,r17
    997c:	913fffcc 	andi	r4,r18,65535
    9980:	00015680 	call	1568 <__mulsi3>
    9984:	9008d43a 	srli	r4,r18,16
    9988:	84bfffcc 	andi	r18,r16,65535
    998c:	1485883a 	add	r2,r2,r18
    9990:	14e5883a 	add	r18,r2,r19
    9994:	8020d43a 	srli	r16,r16,16
    9998:	9026d43a 	srli	r19,r18,16
    999c:	880b883a 	mov	r5,r17
    99a0:	00015680 	call	1568 <__mulsi3>
    99a4:	1405883a 	add	r2,r2,r16
    99a8:	14e1883a 	add	r16,r2,r19
    99ac:	90ffffcc 	andi	r3,r18,65535
    99b0:	8024943a 	slli	r18,r16,16
    99b4:	ad400104 	addi	r21,r21,4
    99b8:	b005883a 	mov	r2,r22
    99bc:	90c6b03a 	or	r3,r18,r3
    99c0:	b0c00015 	stw	r3,0(r22)
    99c4:	8026d43a 	srli	r19,r16,16
    99c8:	b5800104 	addi	r22,r22,4
    99cc:	ad3fe836 	bltu	r21,r20,9970 <__alt_mem_Onchip_SRAM+0xf8009970>
    99d0:	d8c00017 	ldw	r3,0(sp)
    99d4:	14c00115 	stw	r19,4(r2)
    99d8:	1c800017 	ldw	r18,0(r3)
    99dc:	9024d43a 	srli	r18,r18,16
    99e0:	90002226 	beq	r18,zero,9a6c <__multiply+0x1f0>
    99e4:	d8c00117 	ldw	r3,4(sp)
    99e8:	dd800417 	ldw	r22,16(sp)
    99ec:	002f883a 	mov	r23,zero
    99f0:	1f000017 	ldw	fp,0(r3)
    99f4:	1823883a 	mov	r17,r3
    99f8:	182b883a 	mov	r21,r3
    99fc:	e021883a 	mov	r16,fp
    9a00:	00000106 	br	9a08 <__multiply+0x18c>
    9a04:	982b883a 	mov	r21,r19
    9a08:	b100000b 	ldhu	r4,0(r22)
    9a0c:	8020d43a 	srli	r16,r16,16
    9a10:	900b883a 	mov	r5,r18
    9a14:	00015680 	call	1568 <__mulsi3>
    9a18:	1405883a 	add	r2,r2,r16
    9a1c:	15ef883a 	add	r23,r2,r23
    9a20:	b804943a 	slli	r2,r23,16
    9a24:	e0ffffcc 	andi	r3,fp,65535
    9a28:	8c400104 	addi	r17,r17,4
    9a2c:	10c6b03a 	or	r3,r2,r3
    9a30:	88ffff15 	stw	r3,-4(r17)
    9a34:	b5800104 	addi	r22,r22,4
    9a38:	b13fff17 	ldw	r4,-4(r22)
    9a3c:	acc00104 	addi	r19,r21,4
    9a40:	900b883a 	mov	r5,r18
    9a44:	2008d43a 	srli	r4,r4,16
    9a48:	9c000017 	ldw	r16,0(r19)
    9a4c:	00015680 	call	1568 <__mulsi3>
    9a50:	b806d43a 	srli	r3,r23,16
    9a54:	813fffcc 	andi	r4,r16,65535
    9a58:	1105883a 	add	r2,r2,r4
    9a5c:	10f9883a 	add	fp,r2,r3
    9a60:	e02ed43a 	srli	r23,fp,16
    9a64:	b53fe736 	bltu	r22,r20,9a04 <__alt_mem_Onchip_SRAM+0xf8009a04>
    9a68:	af000115 	stw	fp,4(r21)
    9a6c:	d8c00017 	ldw	r3,0(sp)
    9a70:	d9000517 	ldw	r4,20(sp)
    9a74:	18c00104 	addi	r3,r3,4
    9a78:	d8c00015 	stw	r3,0(sp)
    9a7c:	d8c00117 	ldw	r3,4(sp)
    9a80:	18c00104 	addi	r3,r3,4
    9a84:	d8c00115 	stw	r3,4(sp)
    9a88:	d8c00017 	ldw	r3,0(sp)
    9a8c:	193fb136 	bltu	r3,r4,9954 <__alt_mem_Onchip_SRAM+0xf8009954>
    9a90:	d8c00217 	ldw	r3,8(sp)
    9a94:	00c00c0e 	bge	zero,r3,9ac8 <__multiply+0x24c>
    9a98:	d8c00317 	ldw	r3,12(sp)
    9a9c:	18bfff17 	ldw	r2,-4(r3)
    9aa0:	1d7fff04 	addi	r21,r3,-4
    9aa4:	10000326 	beq	r2,zero,9ab4 <__multiply+0x238>
    9aa8:	00000706 	br	9ac8 <__multiply+0x24c>
    9aac:	a8800017 	ldw	r2,0(r21)
    9ab0:	1000051e 	bne	r2,zero,9ac8 <__multiply+0x24c>
    9ab4:	d8c00217 	ldw	r3,8(sp)
    9ab8:	ad7fff04 	addi	r21,r21,-4
    9abc:	18ffffc4 	addi	r3,r3,-1
    9ac0:	d8c00215 	stw	r3,8(sp)
    9ac4:	183ff91e 	bne	r3,zero,9aac <__alt_mem_Onchip_SRAM+0xf8009aac>
    9ac8:	d8c00617 	ldw	r3,24(sp)
    9acc:	d9000217 	ldw	r4,8(sp)
    9ad0:	1805883a 	mov	r2,r3
    9ad4:	19000415 	stw	r4,16(r3)
    9ad8:	dfc01017 	ldw	ra,64(sp)
    9adc:	df000f17 	ldw	fp,60(sp)
    9ae0:	ddc00e17 	ldw	r23,56(sp)
    9ae4:	dd800d17 	ldw	r22,52(sp)
    9ae8:	dd400c17 	ldw	r21,48(sp)
    9aec:	dd000b17 	ldw	r20,44(sp)
    9af0:	dcc00a17 	ldw	r19,40(sp)
    9af4:	dc800917 	ldw	r18,36(sp)
    9af8:	dc400817 	ldw	r17,32(sp)
    9afc:	dc000717 	ldw	r16,28(sp)
    9b00:	dec01104 	addi	sp,sp,68
    9b04:	f800283a 	ret

00009b08 <__pow5mult>:
    9b08:	defffa04 	addi	sp,sp,-24
    9b0c:	dcc00315 	stw	r19,12(sp)
    9b10:	dc000015 	stw	r16,0(sp)
    9b14:	dfc00515 	stw	ra,20(sp)
    9b18:	dd000415 	stw	r20,16(sp)
    9b1c:	dc800215 	stw	r18,8(sp)
    9b20:	dc400115 	stw	r17,4(sp)
    9b24:	308000cc 	andi	r2,r6,3
    9b28:	3021883a 	mov	r16,r6
    9b2c:	2027883a 	mov	r19,r4
    9b30:	10002f1e 	bne	r2,zero,9bf0 <__pow5mult+0xe8>
    9b34:	2825883a 	mov	r18,r5
    9b38:	8021d0ba 	srai	r16,r16,2
    9b3c:	80001a26 	beq	r16,zero,9ba8 <__pow5mult+0xa0>
    9b40:	9c401217 	ldw	r17,72(r19)
    9b44:	8800061e 	bne	r17,zero,9b60 <__pow5mult+0x58>
    9b48:	00003406 	br	9c1c <__pow5mult+0x114>
    9b4c:	8021d07a 	srai	r16,r16,1
    9b50:	80001526 	beq	r16,zero,9ba8 <__pow5mult+0xa0>
    9b54:	88800017 	ldw	r2,0(r17)
    9b58:	10001c26 	beq	r2,zero,9bcc <__pow5mult+0xc4>
    9b5c:	1023883a 	mov	r17,r2
    9b60:	8080004c 	andi	r2,r16,1
    9b64:	103ff926 	beq	r2,zero,9b4c <__alt_mem_Onchip_SRAM+0xf8009b4c>
    9b68:	880d883a 	mov	r6,r17
    9b6c:	900b883a 	mov	r5,r18
    9b70:	9809883a 	mov	r4,r19
    9b74:	000987c0 	call	987c <__multiply>
    9b78:	90001b26 	beq	r18,zero,9be8 <__pow5mult+0xe0>
    9b7c:	91000117 	ldw	r4,4(r18)
    9b80:	98c01317 	ldw	r3,76(r19)
    9b84:	8021d07a 	srai	r16,r16,1
    9b88:	2109883a 	add	r4,r4,r4
    9b8c:	2109883a 	add	r4,r4,r4
    9b90:	1907883a 	add	r3,r3,r4
    9b94:	19000017 	ldw	r4,0(r3)
    9b98:	91000015 	stw	r4,0(r18)
    9b9c:	1c800015 	stw	r18,0(r3)
    9ba0:	1025883a 	mov	r18,r2
    9ba4:	803feb1e 	bne	r16,zero,9b54 <__alt_mem_Onchip_SRAM+0xf8009b54>
    9ba8:	9005883a 	mov	r2,r18
    9bac:	dfc00517 	ldw	ra,20(sp)
    9bb0:	dd000417 	ldw	r20,16(sp)
    9bb4:	dcc00317 	ldw	r19,12(sp)
    9bb8:	dc800217 	ldw	r18,8(sp)
    9bbc:	dc400117 	ldw	r17,4(sp)
    9bc0:	dc000017 	ldw	r16,0(sp)
    9bc4:	dec00604 	addi	sp,sp,24
    9bc8:	f800283a 	ret
    9bcc:	880d883a 	mov	r6,r17
    9bd0:	880b883a 	mov	r5,r17
    9bd4:	9809883a 	mov	r4,r19
    9bd8:	000987c0 	call	987c <__multiply>
    9bdc:	88800015 	stw	r2,0(r17)
    9be0:	10000015 	stw	zero,0(r2)
    9be4:	003fdd06 	br	9b5c <__alt_mem_Onchip_SRAM+0xf8009b5c>
    9be8:	1025883a 	mov	r18,r2
    9bec:	003fd706 	br	9b4c <__alt_mem_Onchip_SRAM+0xf8009b4c>
    9bf0:	10bfffc4 	addi	r2,r2,-1
    9bf4:	1085883a 	add	r2,r2,r2
    9bf8:	00c000b4 	movhi	r3,2
    9bfc:	18e0c404 	addi	r3,r3,-31984
    9c00:	1085883a 	add	r2,r2,r2
    9c04:	1885883a 	add	r2,r3,r2
    9c08:	11800017 	ldw	r6,0(r2)
    9c0c:	000f883a 	mov	r7,zero
    9c10:	00094dc0 	call	94dc <__multadd>
    9c14:	1025883a 	mov	r18,r2
    9c18:	003fc706 	br	9b38 <__alt_mem_Onchip_SRAM+0xf8009b38>
    9c1c:	05000044 	movi	r20,1
    9c20:	a00b883a 	mov	r5,r20
    9c24:	9809883a 	mov	r4,r19
    9c28:	000940c0 	call	940c <_Balloc>
    9c2c:	1023883a 	mov	r17,r2
    9c30:	00809c44 	movi	r2,625
    9c34:	88800515 	stw	r2,20(r17)
    9c38:	8d000415 	stw	r20,16(r17)
    9c3c:	9c401215 	stw	r17,72(r19)
    9c40:	88000015 	stw	zero,0(r17)
    9c44:	003fc606 	br	9b60 <__alt_mem_Onchip_SRAM+0xf8009b60>

00009c48 <__lshift>:
    9c48:	defff904 	addi	sp,sp,-28
    9c4c:	dd400515 	stw	r21,20(sp)
    9c50:	dcc00315 	stw	r19,12(sp)
    9c54:	302bd17a 	srai	r21,r6,5
    9c58:	2cc00417 	ldw	r19,16(r5)
    9c5c:	28800217 	ldw	r2,8(r5)
    9c60:	dd000415 	stw	r20,16(sp)
    9c64:	ace7883a 	add	r19,r21,r19
    9c68:	dc800215 	stw	r18,8(sp)
    9c6c:	dc400115 	stw	r17,4(sp)
    9c70:	dc000015 	stw	r16,0(sp)
    9c74:	dfc00615 	stw	ra,24(sp)
    9c78:	9c000044 	addi	r16,r19,1
    9c7c:	2823883a 	mov	r17,r5
    9c80:	3029883a 	mov	r20,r6
    9c84:	2025883a 	mov	r18,r4
    9c88:	29400117 	ldw	r5,4(r5)
    9c8c:	1400030e 	bge	r2,r16,9c9c <__lshift+0x54>
    9c90:	1085883a 	add	r2,r2,r2
    9c94:	29400044 	addi	r5,r5,1
    9c98:	143ffd16 	blt	r2,r16,9c90 <__alt_mem_Onchip_SRAM+0xf8009c90>
    9c9c:	9009883a 	mov	r4,r18
    9ca0:	000940c0 	call	940c <_Balloc>
    9ca4:	10c00504 	addi	r3,r2,20
    9ca8:	0540070e 	bge	zero,r21,9cc8 <__lshift+0x80>
    9cac:	ad6b883a 	add	r21,r21,r21
    9cb0:	ad6b883a 	add	r21,r21,r21
    9cb4:	1809883a 	mov	r4,r3
    9cb8:	1d47883a 	add	r3,r3,r21
    9cbc:	20000015 	stw	zero,0(r4)
    9cc0:	21000104 	addi	r4,r4,4
    9cc4:	193ffd1e 	bne	r3,r4,9cbc <__alt_mem_Onchip_SRAM+0xf8009cbc>
    9cc8:	8a000417 	ldw	r8,16(r17)
    9ccc:	89000504 	addi	r4,r17,20
    9cd0:	a18007cc 	andi	r6,r20,31
    9cd4:	4211883a 	add	r8,r8,r8
    9cd8:	4211883a 	add	r8,r8,r8
    9cdc:	2211883a 	add	r8,r4,r8
    9ce0:	30002326 	beq	r6,zero,9d70 <__lshift+0x128>
    9ce4:	02400804 	movi	r9,32
    9ce8:	4993c83a 	sub	r9,r9,r6
    9cec:	000b883a 	mov	r5,zero
    9cf0:	21c00017 	ldw	r7,0(r4)
    9cf4:	1815883a 	mov	r10,r3
    9cf8:	18c00104 	addi	r3,r3,4
    9cfc:	398e983a 	sll	r7,r7,r6
    9d00:	21000104 	addi	r4,r4,4
    9d04:	394ab03a 	or	r5,r7,r5
    9d08:	197fff15 	stw	r5,-4(r3)
    9d0c:	217fff17 	ldw	r5,-4(r4)
    9d10:	2a4ad83a 	srl	r5,r5,r9
    9d14:	223ff636 	bltu	r4,r8,9cf0 <__alt_mem_Onchip_SRAM+0xf8009cf0>
    9d18:	51400115 	stw	r5,4(r10)
    9d1c:	28001a1e 	bne	r5,zero,9d88 <__lshift+0x140>
    9d20:	843fffc4 	addi	r16,r16,-1
    9d24:	14000415 	stw	r16,16(r2)
    9d28:	88000826 	beq	r17,zero,9d4c <__lshift+0x104>
    9d2c:	89000117 	ldw	r4,4(r17)
    9d30:	90c01317 	ldw	r3,76(r18)
    9d34:	2109883a 	add	r4,r4,r4
    9d38:	2109883a 	add	r4,r4,r4
    9d3c:	1907883a 	add	r3,r3,r4
    9d40:	19000017 	ldw	r4,0(r3)
    9d44:	89000015 	stw	r4,0(r17)
    9d48:	1c400015 	stw	r17,0(r3)
    9d4c:	dfc00617 	ldw	ra,24(sp)
    9d50:	dd400517 	ldw	r21,20(sp)
    9d54:	dd000417 	ldw	r20,16(sp)
    9d58:	dcc00317 	ldw	r19,12(sp)
    9d5c:	dc800217 	ldw	r18,8(sp)
    9d60:	dc400117 	ldw	r17,4(sp)
    9d64:	dc000017 	ldw	r16,0(sp)
    9d68:	dec00704 	addi	sp,sp,28
    9d6c:	f800283a 	ret
    9d70:	21400017 	ldw	r5,0(r4)
    9d74:	18c00104 	addi	r3,r3,4
    9d78:	21000104 	addi	r4,r4,4
    9d7c:	197fff15 	stw	r5,-4(r3)
    9d80:	223ffb36 	bltu	r4,r8,9d70 <__alt_mem_Onchip_SRAM+0xf8009d70>
    9d84:	003fe606 	br	9d20 <__alt_mem_Onchip_SRAM+0xf8009d20>
    9d88:	9c000084 	addi	r16,r19,2
    9d8c:	003fe406 	br	9d20 <__alt_mem_Onchip_SRAM+0xf8009d20>

00009d90 <__mcmp>:
    9d90:	20800417 	ldw	r2,16(r4)
    9d94:	28c00417 	ldw	r3,16(r5)
    9d98:	10c5c83a 	sub	r2,r2,r3
    9d9c:	1000111e 	bne	r2,zero,9de4 <__mcmp+0x54>
    9da0:	18c7883a 	add	r3,r3,r3
    9da4:	18c7883a 	add	r3,r3,r3
    9da8:	21000504 	addi	r4,r4,20
    9dac:	29400504 	addi	r5,r5,20
    9db0:	20c5883a 	add	r2,r4,r3
    9db4:	28cb883a 	add	r5,r5,r3
    9db8:	00000106 	br	9dc0 <__mcmp+0x30>
    9dbc:	20800a2e 	bgeu	r4,r2,9de8 <__mcmp+0x58>
    9dc0:	10bfff04 	addi	r2,r2,-4
    9dc4:	297fff04 	addi	r5,r5,-4
    9dc8:	11800017 	ldw	r6,0(r2)
    9dcc:	28c00017 	ldw	r3,0(r5)
    9dd0:	30fffa26 	beq	r6,r3,9dbc <__alt_mem_Onchip_SRAM+0xf8009dbc>
    9dd4:	30c00236 	bltu	r6,r3,9de0 <__mcmp+0x50>
    9dd8:	00800044 	movi	r2,1
    9ddc:	f800283a 	ret
    9de0:	00bfffc4 	movi	r2,-1
    9de4:	f800283a 	ret
    9de8:	0005883a 	mov	r2,zero
    9dec:	f800283a 	ret

00009df0 <__mdiff>:
    9df0:	28c00417 	ldw	r3,16(r5)
    9df4:	30800417 	ldw	r2,16(r6)
    9df8:	defffa04 	addi	sp,sp,-24
    9dfc:	dcc00315 	stw	r19,12(sp)
    9e00:	dc800215 	stw	r18,8(sp)
    9e04:	dfc00515 	stw	ra,20(sp)
    9e08:	dd000415 	stw	r20,16(sp)
    9e0c:	dc400115 	stw	r17,4(sp)
    9e10:	dc000015 	stw	r16,0(sp)
    9e14:	1887c83a 	sub	r3,r3,r2
    9e18:	2825883a 	mov	r18,r5
    9e1c:	3027883a 	mov	r19,r6
    9e20:	1800141e 	bne	r3,zero,9e74 <__mdiff+0x84>
    9e24:	1085883a 	add	r2,r2,r2
    9e28:	1085883a 	add	r2,r2,r2
    9e2c:	2a000504 	addi	r8,r5,20
    9e30:	34000504 	addi	r16,r6,20
    9e34:	4087883a 	add	r3,r8,r2
    9e38:	8085883a 	add	r2,r16,r2
    9e3c:	00000106 	br	9e44 <__mdiff+0x54>
    9e40:	40c0592e 	bgeu	r8,r3,9fa8 <__mdiff+0x1b8>
    9e44:	18ffff04 	addi	r3,r3,-4
    9e48:	10bfff04 	addi	r2,r2,-4
    9e4c:	19c00017 	ldw	r7,0(r3)
    9e50:	11400017 	ldw	r5,0(r2)
    9e54:	397ffa26 	beq	r7,r5,9e40 <__alt_mem_Onchip_SRAM+0xf8009e40>
    9e58:	3940592e 	bgeu	r7,r5,9fc0 <__mdiff+0x1d0>
    9e5c:	9005883a 	mov	r2,r18
    9e60:	4023883a 	mov	r17,r8
    9e64:	9825883a 	mov	r18,r19
    9e68:	05000044 	movi	r20,1
    9e6c:	1027883a 	mov	r19,r2
    9e70:	00000406 	br	9e84 <__mdiff+0x94>
    9e74:	18005616 	blt	r3,zero,9fd0 <__mdiff+0x1e0>
    9e78:	34400504 	addi	r17,r6,20
    9e7c:	2c000504 	addi	r16,r5,20
    9e80:	0029883a 	mov	r20,zero
    9e84:	91400117 	ldw	r5,4(r18)
    9e88:	000940c0 	call	940c <_Balloc>
    9e8c:	92400417 	ldw	r9,16(r18)
    9e90:	9b000417 	ldw	r12,16(r19)
    9e94:	12c00504 	addi	r11,r2,20
    9e98:	4a51883a 	add	r8,r9,r9
    9e9c:	6319883a 	add	r12,r12,r12
    9ea0:	4211883a 	add	r8,r8,r8
    9ea4:	6319883a 	add	r12,r12,r12
    9ea8:	15000315 	stw	r20,12(r2)
    9eac:	8211883a 	add	r8,r16,r8
    9eb0:	8b19883a 	add	r12,r17,r12
    9eb4:	0007883a 	mov	r3,zero
    9eb8:	81400017 	ldw	r5,0(r16)
    9ebc:	89c00017 	ldw	r7,0(r17)
    9ec0:	59800104 	addi	r6,r11,4
    9ec4:	293fffcc 	andi	r4,r5,65535
    9ec8:	20c7883a 	add	r3,r4,r3
    9ecc:	393fffcc 	andi	r4,r7,65535
    9ed0:	1909c83a 	sub	r4,r3,r4
    9ed4:	280ad43a 	srli	r5,r5,16
    9ed8:	380ed43a 	srli	r7,r7,16
    9edc:	2007d43a 	srai	r3,r4,16
    9ee0:	213fffcc 	andi	r4,r4,65535
    9ee4:	29cbc83a 	sub	r5,r5,r7
    9ee8:	28c7883a 	add	r3,r5,r3
    9eec:	180a943a 	slli	r5,r3,16
    9ef0:	8c400104 	addi	r17,r17,4
    9ef4:	84000104 	addi	r16,r16,4
    9ef8:	2908b03a 	or	r4,r5,r4
    9efc:	59000015 	stw	r4,0(r11)
    9f00:	1807d43a 	srai	r3,r3,16
    9f04:	3015883a 	mov	r10,r6
    9f08:	3017883a 	mov	r11,r6
    9f0c:	8b3fea36 	bltu	r17,r12,9eb8 <__alt_mem_Onchip_SRAM+0xf8009eb8>
    9f10:	8200162e 	bgeu	r16,r8,9f6c <__mdiff+0x17c>
    9f14:	8017883a 	mov	r11,r16
    9f18:	59400017 	ldw	r5,0(r11)
    9f1c:	31800104 	addi	r6,r6,4
    9f20:	5ac00104 	addi	r11,r11,4
    9f24:	293fffcc 	andi	r4,r5,65535
    9f28:	20c7883a 	add	r3,r4,r3
    9f2c:	280ed43a 	srli	r7,r5,16
    9f30:	180bd43a 	srai	r5,r3,16
    9f34:	193fffcc 	andi	r4,r3,65535
    9f38:	3947883a 	add	r3,r7,r5
    9f3c:	180a943a 	slli	r5,r3,16
    9f40:	1807d43a 	srai	r3,r3,16
    9f44:	2908b03a 	or	r4,r5,r4
    9f48:	313fff15 	stw	r4,-4(r6)
    9f4c:	5a3ff236 	bltu	r11,r8,9f18 <__alt_mem_Onchip_SRAM+0xf8009f18>
    9f50:	0406303a 	nor	r3,zero,r16
    9f54:	1a07883a 	add	r3,r3,r8
    9f58:	1806d0ba 	srli	r3,r3,2
    9f5c:	18c00044 	addi	r3,r3,1
    9f60:	18c7883a 	add	r3,r3,r3
    9f64:	18c7883a 	add	r3,r3,r3
    9f68:	50d5883a 	add	r10,r10,r3
    9f6c:	50ffff04 	addi	r3,r10,-4
    9f70:	2000041e 	bne	r4,zero,9f84 <__mdiff+0x194>
    9f74:	18ffff04 	addi	r3,r3,-4
    9f78:	19000017 	ldw	r4,0(r3)
    9f7c:	4a7fffc4 	addi	r9,r9,-1
    9f80:	203ffc26 	beq	r4,zero,9f74 <__alt_mem_Onchip_SRAM+0xf8009f74>
    9f84:	12400415 	stw	r9,16(r2)
    9f88:	dfc00517 	ldw	ra,20(sp)
    9f8c:	dd000417 	ldw	r20,16(sp)
    9f90:	dcc00317 	ldw	r19,12(sp)
    9f94:	dc800217 	ldw	r18,8(sp)
    9f98:	dc400117 	ldw	r17,4(sp)
    9f9c:	dc000017 	ldw	r16,0(sp)
    9fa0:	dec00604 	addi	sp,sp,24
    9fa4:	f800283a 	ret
    9fa8:	000b883a 	mov	r5,zero
    9fac:	000940c0 	call	940c <_Balloc>
    9fb0:	00c00044 	movi	r3,1
    9fb4:	10c00415 	stw	r3,16(r2)
    9fb8:	10000515 	stw	zero,20(r2)
    9fbc:	003ff206 	br	9f88 <__alt_mem_Onchip_SRAM+0xf8009f88>
    9fc0:	8023883a 	mov	r17,r16
    9fc4:	0029883a 	mov	r20,zero
    9fc8:	4021883a 	mov	r16,r8
    9fcc:	003fad06 	br	9e84 <__alt_mem_Onchip_SRAM+0xf8009e84>
    9fd0:	9005883a 	mov	r2,r18
    9fd4:	94400504 	addi	r17,r18,20
    9fd8:	9c000504 	addi	r16,r19,20
    9fdc:	9825883a 	mov	r18,r19
    9fe0:	05000044 	movi	r20,1
    9fe4:	1027883a 	mov	r19,r2
    9fe8:	003fa606 	br	9e84 <__alt_mem_Onchip_SRAM+0xf8009e84>

00009fec <__ulp>:
    9fec:	295ffc2c 	andhi	r5,r5,32752
    9ff0:	00bf3034 	movhi	r2,64704
    9ff4:	2887883a 	add	r3,r5,r2
    9ff8:	00c0020e 	bge	zero,r3,a004 <__ulp+0x18>
    9ffc:	0005883a 	mov	r2,zero
    a000:	f800283a 	ret
    a004:	00c7c83a 	sub	r3,zero,r3
    a008:	1807d53a 	srai	r3,r3,20
    a00c:	008004c4 	movi	r2,19
    a010:	10c00b0e 	bge	r2,r3,a040 <__ulp+0x54>
    a014:	18bffb04 	addi	r2,r3,-20
    a018:	01000784 	movi	r4,30
    a01c:	0007883a 	mov	r3,zero
    a020:	20800516 	blt	r4,r2,a038 <__ulp+0x4c>
    a024:	010007c4 	movi	r4,31
    a028:	2089c83a 	sub	r4,r4,r2
    a02c:	00800044 	movi	r2,1
    a030:	1104983a 	sll	r2,r2,r4
    a034:	f800283a 	ret
    a038:	00800044 	movi	r2,1
    a03c:	f800283a 	ret
    a040:	01400234 	movhi	r5,8
    a044:	28c7d83a 	sra	r3,r5,r3
    a048:	0005883a 	mov	r2,zero
    a04c:	f800283a 	ret

0000a050 <__b2d>:
    a050:	defffa04 	addi	sp,sp,-24
    a054:	dc000015 	stw	r16,0(sp)
    a058:	24000417 	ldw	r16,16(r4)
    a05c:	dc400115 	stw	r17,4(sp)
    a060:	24400504 	addi	r17,r4,20
    a064:	8421883a 	add	r16,r16,r16
    a068:	8421883a 	add	r16,r16,r16
    a06c:	8c21883a 	add	r16,r17,r16
    a070:	dc800215 	stw	r18,8(sp)
    a074:	84bfff17 	ldw	r18,-4(r16)
    a078:	dd000415 	stw	r20,16(sp)
    a07c:	dcc00315 	stw	r19,12(sp)
    a080:	9009883a 	mov	r4,r18
    a084:	2829883a 	mov	r20,r5
    a088:	dfc00515 	stw	ra,20(sp)
    a08c:	00097280 	call	9728 <__hi0bits>
    a090:	00c00804 	movi	r3,32
    a094:	1889c83a 	sub	r4,r3,r2
    a098:	a1000015 	stw	r4,0(r20)
    a09c:	01000284 	movi	r4,10
    a0a0:	84ffff04 	addi	r19,r16,-4
    a0a4:	20801216 	blt	r4,r2,a0f0 <__b2d+0xa0>
    a0a8:	018002c4 	movi	r6,11
    a0ac:	308dc83a 	sub	r6,r6,r2
    a0b0:	9186d83a 	srl	r3,r18,r6
    a0b4:	18cffc34 	orhi	r3,r3,16368
    a0b8:	8cc0212e 	bgeu	r17,r19,a140 <__b2d+0xf0>
    a0bc:	813ffe17 	ldw	r4,-8(r16)
    a0c0:	218cd83a 	srl	r6,r4,r6
    a0c4:	10800544 	addi	r2,r2,21
    a0c8:	9084983a 	sll	r2,r18,r2
    a0cc:	1184b03a 	or	r2,r2,r6
    a0d0:	dfc00517 	ldw	ra,20(sp)
    a0d4:	dd000417 	ldw	r20,16(sp)
    a0d8:	dcc00317 	ldw	r19,12(sp)
    a0dc:	dc800217 	ldw	r18,8(sp)
    a0e0:	dc400117 	ldw	r17,4(sp)
    a0e4:	dc000017 	ldw	r16,0(sp)
    a0e8:	dec00604 	addi	sp,sp,24
    a0ec:	f800283a 	ret
    a0f0:	8cc00f2e 	bgeu	r17,r19,a130 <__b2d+0xe0>
    a0f4:	117ffd44 	addi	r5,r2,-11
    a0f8:	80bffe17 	ldw	r2,-8(r16)
    a0fc:	28000e26 	beq	r5,zero,a138 <__b2d+0xe8>
    a100:	1949c83a 	sub	r4,r3,r5
    a104:	9164983a 	sll	r18,r18,r5
    a108:	1106d83a 	srl	r3,r2,r4
    a10c:	81bffe04 	addi	r6,r16,-8
    a110:	948ffc34 	orhi	r18,r18,16368
    a114:	90c6b03a 	or	r3,r18,r3
    a118:	89800e2e 	bgeu	r17,r6,a154 <__b2d+0x104>
    a11c:	81bffd17 	ldw	r6,-12(r16)
    a120:	1144983a 	sll	r2,r2,r5
    a124:	310ad83a 	srl	r5,r6,r4
    a128:	2884b03a 	or	r2,r5,r2
    a12c:	003fe806 	br	a0d0 <__alt_mem_Onchip_SRAM+0xf800a0d0>
    a130:	10bffd44 	addi	r2,r2,-11
    a134:	1000041e 	bne	r2,zero,a148 <__b2d+0xf8>
    a138:	90cffc34 	orhi	r3,r18,16368
    a13c:	003fe406 	br	a0d0 <__alt_mem_Onchip_SRAM+0xf800a0d0>
    a140:	000d883a 	mov	r6,zero
    a144:	003fdf06 	br	a0c4 <__alt_mem_Onchip_SRAM+0xf800a0c4>
    a148:	90a4983a 	sll	r18,r18,r2
    a14c:	0005883a 	mov	r2,zero
    a150:	003ff906 	br	a138 <__alt_mem_Onchip_SRAM+0xf800a138>
    a154:	1144983a 	sll	r2,r2,r5
    a158:	003fdd06 	br	a0d0 <__alt_mem_Onchip_SRAM+0xf800a0d0>

0000a15c <__d2b>:
    a15c:	defff804 	addi	sp,sp,-32
    a160:	dc000215 	stw	r16,8(sp)
    a164:	3021883a 	mov	r16,r6
    a168:	dc400315 	stw	r17,12(sp)
    a16c:	8022907a 	slli	r17,r16,1
    a170:	dd000615 	stw	r20,24(sp)
    a174:	2829883a 	mov	r20,r5
    a178:	01400044 	movi	r5,1
    a17c:	dcc00515 	stw	r19,20(sp)
    a180:	dc800415 	stw	r18,16(sp)
    a184:	dfc00715 	stw	ra,28(sp)
    a188:	3825883a 	mov	r18,r7
    a18c:	8822d57a 	srli	r17,r17,21
    a190:	000940c0 	call	940c <_Balloc>
    a194:	1027883a 	mov	r19,r2
    a198:	00800434 	movhi	r2,16
    a19c:	10bfffc4 	addi	r2,r2,-1
    a1a0:	808c703a 	and	r6,r16,r2
    a1a4:	88000126 	beq	r17,zero,a1ac <__d2b+0x50>
    a1a8:	31800434 	orhi	r6,r6,16
    a1ac:	d9800015 	stw	r6,0(sp)
    a1b0:	a0002426 	beq	r20,zero,a244 <__d2b+0xe8>
    a1b4:	d9000104 	addi	r4,sp,4
    a1b8:	dd000115 	stw	r20,4(sp)
    a1bc:	00097900 	call	9790 <__lo0bits>
    a1c0:	d8c00017 	ldw	r3,0(sp)
    a1c4:	10002f1e 	bne	r2,zero,a284 <__d2b+0x128>
    a1c8:	d9000117 	ldw	r4,4(sp)
    a1cc:	99000515 	stw	r4,20(r19)
    a1d0:	1821003a 	cmpeq	r16,r3,zero
    a1d4:	01000084 	movi	r4,2
    a1d8:	2421c83a 	sub	r16,r4,r16
    a1dc:	98c00615 	stw	r3,24(r19)
    a1e0:	9c000415 	stw	r16,16(r19)
    a1e4:	88001f1e 	bne	r17,zero,a264 <__d2b+0x108>
    a1e8:	10bef384 	addi	r2,r2,-1074
    a1ec:	90800015 	stw	r2,0(r18)
    a1f0:	00900034 	movhi	r2,16384
    a1f4:	10bfffc4 	addi	r2,r2,-1
    a1f8:	8085883a 	add	r2,r16,r2
    a1fc:	1085883a 	add	r2,r2,r2
    a200:	1085883a 	add	r2,r2,r2
    a204:	9885883a 	add	r2,r19,r2
    a208:	11000517 	ldw	r4,20(r2)
    a20c:	8020917a 	slli	r16,r16,5
    a210:	00097280 	call	9728 <__hi0bits>
    a214:	d8c00817 	ldw	r3,32(sp)
    a218:	8085c83a 	sub	r2,r16,r2
    a21c:	18800015 	stw	r2,0(r3)
    a220:	9805883a 	mov	r2,r19
    a224:	dfc00717 	ldw	ra,28(sp)
    a228:	dd000617 	ldw	r20,24(sp)
    a22c:	dcc00517 	ldw	r19,20(sp)
    a230:	dc800417 	ldw	r18,16(sp)
    a234:	dc400317 	ldw	r17,12(sp)
    a238:	dc000217 	ldw	r16,8(sp)
    a23c:	dec00804 	addi	sp,sp,32
    a240:	f800283a 	ret
    a244:	d809883a 	mov	r4,sp
    a248:	00097900 	call	9790 <__lo0bits>
    a24c:	d8c00017 	ldw	r3,0(sp)
    a250:	04000044 	movi	r16,1
    a254:	9c000415 	stw	r16,16(r19)
    a258:	98c00515 	stw	r3,20(r19)
    a25c:	10800804 	addi	r2,r2,32
    a260:	883fe126 	beq	r17,zero,a1e8 <__alt_mem_Onchip_SRAM+0xf800a1e8>
    a264:	00c00d44 	movi	r3,53
    a268:	8c7ef344 	addi	r17,r17,-1075
    a26c:	88a3883a 	add	r17,r17,r2
    a270:	1885c83a 	sub	r2,r3,r2
    a274:	d8c00817 	ldw	r3,32(sp)
    a278:	94400015 	stw	r17,0(r18)
    a27c:	18800015 	stw	r2,0(r3)
    a280:	003fe706 	br	a220 <__alt_mem_Onchip_SRAM+0xf800a220>
    a284:	01000804 	movi	r4,32
    a288:	2089c83a 	sub	r4,r4,r2
    a28c:	1908983a 	sll	r4,r3,r4
    a290:	d9400117 	ldw	r5,4(sp)
    a294:	1886d83a 	srl	r3,r3,r2
    a298:	2148b03a 	or	r4,r4,r5
    a29c:	99000515 	stw	r4,20(r19)
    a2a0:	d8c00015 	stw	r3,0(sp)
    a2a4:	003fca06 	br	a1d0 <__alt_mem_Onchip_SRAM+0xf800a1d0>

0000a2a8 <__ratio>:
    a2a8:	defff904 	addi	sp,sp,-28
    a2ac:	dc400315 	stw	r17,12(sp)
    a2b0:	2823883a 	mov	r17,r5
    a2b4:	d9400104 	addi	r5,sp,4
    a2b8:	dfc00615 	stw	ra,24(sp)
    a2bc:	dcc00515 	stw	r19,20(sp)
    a2c0:	dc800415 	stw	r18,16(sp)
    a2c4:	2027883a 	mov	r19,r4
    a2c8:	dc000215 	stw	r16,8(sp)
    a2cc:	000a0500 	call	a050 <__b2d>
    a2d0:	d80b883a 	mov	r5,sp
    a2d4:	8809883a 	mov	r4,r17
    a2d8:	1025883a 	mov	r18,r2
    a2dc:	1821883a 	mov	r16,r3
    a2e0:	000a0500 	call	a050 <__b2d>
    a2e4:	8a000417 	ldw	r8,16(r17)
    a2e8:	99000417 	ldw	r4,16(r19)
    a2ec:	d9400117 	ldw	r5,4(sp)
    a2f0:	2209c83a 	sub	r4,r4,r8
    a2f4:	2010917a 	slli	r8,r4,5
    a2f8:	d9000017 	ldw	r4,0(sp)
    a2fc:	2909c83a 	sub	r4,r5,r4
    a300:	4109883a 	add	r4,r8,r4
    a304:	01000e0e 	bge	zero,r4,a340 <__ratio+0x98>
    a308:	2008953a 	slli	r4,r4,20
    a30c:	2421883a 	add	r16,r4,r16
    a310:	100d883a 	mov	r6,r2
    a314:	180f883a 	mov	r7,r3
    a318:	9009883a 	mov	r4,r18
    a31c:	800b883a 	mov	r5,r16
    a320:	000fe040 	call	fe04 <__divdf3>
    a324:	dfc00617 	ldw	ra,24(sp)
    a328:	dcc00517 	ldw	r19,20(sp)
    a32c:	dc800417 	ldw	r18,16(sp)
    a330:	dc400317 	ldw	r17,12(sp)
    a334:	dc000217 	ldw	r16,8(sp)
    a338:	dec00704 	addi	sp,sp,28
    a33c:	f800283a 	ret
    a340:	2008953a 	slli	r4,r4,20
    a344:	1907c83a 	sub	r3,r3,r4
    a348:	003ff106 	br	a310 <__alt_mem_Onchip_SRAM+0xf800a310>

0000a34c <_mprec_log10>:
    a34c:	defffe04 	addi	sp,sp,-8
    a350:	dc000015 	stw	r16,0(sp)
    a354:	dfc00115 	stw	ra,4(sp)
    a358:	008005c4 	movi	r2,23
    a35c:	2021883a 	mov	r16,r4
    a360:	11000d0e 	bge	r2,r4,a398 <_mprec_log10+0x4c>
    a364:	0005883a 	mov	r2,zero
    a368:	00cffc34 	movhi	r3,16368
    a36c:	843fffc4 	addi	r16,r16,-1
    a370:	000d883a 	mov	r6,zero
    a374:	01d00934 	movhi	r7,16420
    a378:	1009883a 	mov	r4,r2
    a37c:	180b883a 	mov	r5,r3
    a380:	0010a2c0 	call	10a2c <__muldf3>
    a384:	803ff91e 	bne	r16,zero,a36c <__alt_mem_Onchip_SRAM+0xf800a36c>
    a388:	dfc00117 	ldw	ra,4(sp)
    a38c:	dc000017 	ldw	r16,0(sp)
    a390:	dec00204 	addi	sp,sp,8
    a394:	f800283a 	ret
    a398:	202090fa 	slli	r16,r4,3
    a39c:	008000b4 	movhi	r2,2
    a3a0:	10a0db04 	addi	r2,r2,-31892
    a3a4:	1421883a 	add	r16,r2,r16
    a3a8:	80800017 	ldw	r2,0(r16)
    a3ac:	80c00117 	ldw	r3,4(r16)
    a3b0:	dfc00117 	ldw	ra,4(sp)
    a3b4:	dc000017 	ldw	r16,0(sp)
    a3b8:	dec00204 	addi	sp,sp,8
    a3bc:	f800283a 	ret

0000a3c0 <__copybits>:
    a3c0:	297fffc4 	addi	r5,r5,-1
    a3c4:	280fd17a 	srai	r7,r5,5
    a3c8:	30c00417 	ldw	r3,16(r6)
    a3cc:	30800504 	addi	r2,r6,20
    a3d0:	39c00044 	addi	r7,r7,1
    a3d4:	18c7883a 	add	r3,r3,r3
    a3d8:	39cf883a 	add	r7,r7,r7
    a3dc:	18c7883a 	add	r3,r3,r3
    a3e0:	39cf883a 	add	r7,r7,r7
    a3e4:	10c7883a 	add	r3,r2,r3
    a3e8:	21cf883a 	add	r7,r4,r7
    a3ec:	10c00d2e 	bgeu	r2,r3,a424 <__copybits+0x64>
    a3f0:	200b883a 	mov	r5,r4
    a3f4:	12000017 	ldw	r8,0(r2)
    a3f8:	29400104 	addi	r5,r5,4
    a3fc:	10800104 	addi	r2,r2,4
    a400:	2a3fff15 	stw	r8,-4(r5)
    a404:	10fffb36 	bltu	r2,r3,a3f4 <__alt_mem_Onchip_SRAM+0xf800a3f4>
    a408:	1985c83a 	sub	r2,r3,r6
    a40c:	10bffac4 	addi	r2,r2,-21
    a410:	1004d0ba 	srli	r2,r2,2
    a414:	10800044 	addi	r2,r2,1
    a418:	1085883a 	add	r2,r2,r2
    a41c:	1085883a 	add	r2,r2,r2
    a420:	2089883a 	add	r4,r4,r2
    a424:	21c0032e 	bgeu	r4,r7,a434 <__copybits+0x74>
    a428:	20000015 	stw	zero,0(r4)
    a42c:	21000104 	addi	r4,r4,4
    a430:	21fffd36 	bltu	r4,r7,a428 <__alt_mem_Onchip_SRAM+0xf800a428>
    a434:	f800283a 	ret

0000a438 <__any_on>:
    a438:	20c00417 	ldw	r3,16(r4)
    a43c:	2805d17a 	srai	r2,r5,5
    a440:	21000504 	addi	r4,r4,20
    a444:	18800d0e 	bge	r3,r2,a47c <__any_on+0x44>
    a448:	18c7883a 	add	r3,r3,r3
    a44c:	18c7883a 	add	r3,r3,r3
    a450:	20c7883a 	add	r3,r4,r3
    a454:	20c0192e 	bgeu	r4,r3,a4bc <__any_on+0x84>
    a458:	18bfff17 	ldw	r2,-4(r3)
    a45c:	18ffff04 	addi	r3,r3,-4
    a460:	1000041e 	bne	r2,zero,a474 <__any_on+0x3c>
    a464:	20c0142e 	bgeu	r4,r3,a4b8 <__any_on+0x80>
    a468:	18ffff04 	addi	r3,r3,-4
    a46c:	19400017 	ldw	r5,0(r3)
    a470:	283ffc26 	beq	r5,zero,a464 <__alt_mem_Onchip_SRAM+0xf800a464>
    a474:	00800044 	movi	r2,1
    a478:	f800283a 	ret
    a47c:	10c00a0e 	bge	r2,r3,a4a8 <__any_on+0x70>
    a480:	1085883a 	add	r2,r2,r2
    a484:	1085883a 	add	r2,r2,r2
    a488:	294007cc 	andi	r5,r5,31
    a48c:	2087883a 	add	r3,r4,r2
    a490:	283ff026 	beq	r5,zero,a454 <__alt_mem_Onchip_SRAM+0xf800a454>
    a494:	19800017 	ldw	r6,0(r3)
    a498:	3144d83a 	srl	r2,r6,r5
    a49c:	114a983a 	sll	r5,r2,r5
    a4a0:	317ff41e 	bne	r6,r5,a474 <__alt_mem_Onchip_SRAM+0xf800a474>
    a4a4:	003feb06 	br	a454 <__alt_mem_Onchip_SRAM+0xf800a454>
    a4a8:	1085883a 	add	r2,r2,r2
    a4ac:	1085883a 	add	r2,r2,r2
    a4b0:	2087883a 	add	r3,r4,r2
    a4b4:	003fe706 	br	a454 <__alt_mem_Onchip_SRAM+0xf800a454>
    a4b8:	f800283a 	ret
    a4bc:	0005883a 	mov	r2,zero
    a4c0:	f800283a 	ret

0000a4c4 <__fpclassifyd>:
    a4c4:	00a00034 	movhi	r2,32768
    a4c8:	10bfffc4 	addi	r2,r2,-1
    a4cc:	2884703a 	and	r2,r5,r2
    a4d0:	10000726 	beq	r2,zero,a4f0 <__fpclassifyd+0x2c>
    a4d4:	00fffc34 	movhi	r3,65520
    a4d8:	019ff834 	movhi	r6,32736
    a4dc:	28c7883a 	add	r3,r5,r3
    a4e0:	31bfffc4 	addi	r6,r6,-1
    a4e4:	30c00536 	bltu	r6,r3,a4fc <__fpclassifyd+0x38>
    a4e8:	00800104 	movi	r2,4
    a4ec:	f800283a 	ret
    a4f0:	2000021e 	bne	r4,zero,a4fc <__fpclassifyd+0x38>
    a4f4:	00800084 	movi	r2,2
    a4f8:	f800283a 	ret
    a4fc:	00dffc34 	movhi	r3,32752
    a500:	019ff834 	movhi	r6,32736
    a504:	28cb883a 	add	r5,r5,r3
    a508:	31bfffc4 	addi	r6,r6,-1
    a50c:	317ff62e 	bgeu	r6,r5,a4e8 <__alt_mem_Onchip_SRAM+0xf800a4e8>
    a510:	01400434 	movhi	r5,16
    a514:	297fffc4 	addi	r5,r5,-1
    a518:	28800236 	bltu	r5,r2,a524 <__fpclassifyd+0x60>
    a51c:	008000c4 	movi	r2,3
    a520:	f800283a 	ret
    a524:	10c00226 	beq	r2,r3,a530 <__fpclassifyd+0x6c>
    a528:	0005883a 	mov	r2,zero
    a52c:	f800283a 	ret
    a530:	2005003a 	cmpeq	r2,r4,zero
    a534:	f800283a 	ret

0000a538 <__sread>:
    a538:	defffe04 	addi	sp,sp,-8
    a53c:	dc000015 	stw	r16,0(sp)
    a540:	2821883a 	mov	r16,r5
    a544:	2940038f 	ldh	r5,14(r5)
    a548:	dfc00115 	stw	ra,4(sp)
    a54c:	000df880 	call	df88 <_read_r>
    a550:	10000716 	blt	r2,zero,a570 <__sread+0x38>
    a554:	80c01417 	ldw	r3,80(r16)
    a558:	1887883a 	add	r3,r3,r2
    a55c:	80c01415 	stw	r3,80(r16)
    a560:	dfc00117 	ldw	ra,4(sp)
    a564:	dc000017 	ldw	r16,0(sp)
    a568:	dec00204 	addi	sp,sp,8
    a56c:	f800283a 	ret
    a570:	80c0030b 	ldhu	r3,12(r16)
    a574:	18fbffcc 	andi	r3,r3,61439
    a578:	80c0030d 	sth	r3,12(r16)
    a57c:	dfc00117 	ldw	ra,4(sp)
    a580:	dc000017 	ldw	r16,0(sp)
    a584:	dec00204 	addi	sp,sp,8
    a588:	f800283a 	ret

0000a58c <__seofread>:
    a58c:	0005883a 	mov	r2,zero
    a590:	f800283a 	ret

0000a594 <__swrite>:
    a594:	2880030b 	ldhu	r2,12(r5)
    a598:	defffb04 	addi	sp,sp,-20
    a59c:	dcc00315 	stw	r19,12(sp)
    a5a0:	dc800215 	stw	r18,8(sp)
    a5a4:	dc400115 	stw	r17,4(sp)
    a5a8:	dc000015 	stw	r16,0(sp)
    a5ac:	dfc00415 	stw	ra,16(sp)
    a5b0:	10c0400c 	andi	r3,r2,256
    a5b4:	2821883a 	mov	r16,r5
    a5b8:	2023883a 	mov	r17,r4
    a5bc:	3025883a 	mov	r18,r6
    a5c0:	3827883a 	mov	r19,r7
    a5c4:	18000526 	beq	r3,zero,a5dc <__swrite+0x48>
    a5c8:	2940038f 	ldh	r5,14(r5)
    a5cc:	01c00084 	movi	r7,2
    a5d0:	000d883a 	mov	r6,zero
    a5d4:	000ddcc0 	call	ddcc <_lseek_r>
    a5d8:	8080030b 	ldhu	r2,12(r16)
    a5dc:	8140038f 	ldh	r5,14(r16)
    a5e0:	10bbffcc 	andi	r2,r2,61439
    a5e4:	980f883a 	mov	r7,r19
    a5e8:	900d883a 	mov	r6,r18
    a5ec:	8809883a 	mov	r4,r17
    a5f0:	8080030d 	sth	r2,12(r16)
    a5f4:	dfc00417 	ldw	ra,16(sp)
    a5f8:	dcc00317 	ldw	r19,12(sp)
    a5fc:	dc800217 	ldw	r18,8(sp)
    a600:	dc400117 	ldw	r17,4(sp)
    a604:	dc000017 	ldw	r16,0(sp)
    a608:	dec00504 	addi	sp,sp,20
    a60c:	000d3b81 	jmpi	d3b8 <_write_r>

0000a610 <__sseek>:
    a610:	defffe04 	addi	sp,sp,-8
    a614:	dc000015 	stw	r16,0(sp)
    a618:	2821883a 	mov	r16,r5
    a61c:	2940038f 	ldh	r5,14(r5)
    a620:	dfc00115 	stw	ra,4(sp)
    a624:	000ddcc0 	call	ddcc <_lseek_r>
    a628:	00ffffc4 	movi	r3,-1
    a62c:	10c00826 	beq	r2,r3,a650 <__sseek+0x40>
    a630:	80c0030b 	ldhu	r3,12(r16)
    a634:	80801415 	stw	r2,80(r16)
    a638:	18c40014 	ori	r3,r3,4096
    a63c:	80c0030d 	sth	r3,12(r16)
    a640:	dfc00117 	ldw	ra,4(sp)
    a644:	dc000017 	ldw	r16,0(sp)
    a648:	dec00204 	addi	sp,sp,8
    a64c:	f800283a 	ret
    a650:	80c0030b 	ldhu	r3,12(r16)
    a654:	18fbffcc 	andi	r3,r3,61439
    a658:	80c0030d 	sth	r3,12(r16)
    a65c:	dfc00117 	ldw	ra,4(sp)
    a660:	dc000017 	ldw	r16,0(sp)
    a664:	dec00204 	addi	sp,sp,8
    a668:	f800283a 	ret

0000a66c <__sclose>:
    a66c:	2940038f 	ldh	r5,14(r5)
    a670:	000d4181 	jmpi	d418 <_close_r>

0000a674 <strcmp>:
    a674:	2144b03a 	or	r2,r4,r5
    a678:	108000cc 	andi	r2,r2,3
    a67c:	1000171e 	bne	r2,zero,a6dc <strcmp+0x68>
    a680:	20800017 	ldw	r2,0(r4)
    a684:	28c00017 	ldw	r3,0(r5)
    a688:	10c0141e 	bne	r2,r3,a6dc <strcmp+0x68>
    a68c:	027fbff4 	movhi	r9,65279
    a690:	4a7fbfc4 	addi	r9,r9,-257
    a694:	0086303a 	nor	r3,zero,r2
    a698:	02202074 	movhi	r8,32897
    a69c:	1245883a 	add	r2,r2,r9
    a6a0:	42202004 	addi	r8,r8,-32640
    a6a4:	10c4703a 	and	r2,r2,r3
    a6a8:	1204703a 	and	r2,r2,r8
    a6ac:	10000226 	beq	r2,zero,a6b8 <strcmp+0x44>
    a6b0:	00002306 	br	a740 <strcmp+0xcc>
    a6b4:	1000221e 	bne	r2,zero,a740 <strcmp+0xcc>
    a6b8:	21000104 	addi	r4,r4,4
    a6bc:	20c00017 	ldw	r3,0(r4)
    a6c0:	29400104 	addi	r5,r5,4
    a6c4:	29800017 	ldw	r6,0(r5)
    a6c8:	1a4f883a 	add	r7,r3,r9
    a6cc:	00c4303a 	nor	r2,zero,r3
    a6d0:	3884703a 	and	r2,r7,r2
    a6d4:	1204703a 	and	r2,r2,r8
    a6d8:	19bff626 	beq	r3,r6,a6b4 <__alt_mem_Onchip_SRAM+0xf800a6b4>
    a6dc:	20800003 	ldbu	r2,0(r4)
    a6e0:	10c03fcc 	andi	r3,r2,255
    a6e4:	18c0201c 	xori	r3,r3,128
    a6e8:	18ffe004 	addi	r3,r3,-128
    a6ec:	18000c26 	beq	r3,zero,a720 <strcmp+0xac>
    a6f0:	29800007 	ldb	r6,0(r5)
    a6f4:	19800326 	beq	r3,r6,a704 <strcmp+0x90>
    a6f8:	00001306 	br	a748 <strcmp+0xd4>
    a6fc:	29800007 	ldb	r6,0(r5)
    a700:	11800b1e 	bne	r2,r6,a730 <strcmp+0xbc>
    a704:	21000044 	addi	r4,r4,1
    a708:	20c00003 	ldbu	r3,0(r4)
    a70c:	29400044 	addi	r5,r5,1
    a710:	18803fcc 	andi	r2,r3,255
    a714:	1080201c 	xori	r2,r2,128
    a718:	10bfe004 	addi	r2,r2,-128
    a71c:	103ff71e 	bne	r2,zero,a6fc <__alt_mem_Onchip_SRAM+0xf800a6fc>
    a720:	0007883a 	mov	r3,zero
    a724:	28800003 	ldbu	r2,0(r5)
    a728:	1885c83a 	sub	r2,r3,r2
    a72c:	f800283a 	ret
    a730:	28800003 	ldbu	r2,0(r5)
    a734:	18c03fcc 	andi	r3,r3,255
    a738:	1885c83a 	sub	r2,r3,r2
    a73c:	f800283a 	ret
    a740:	0005883a 	mov	r2,zero
    a744:	f800283a 	ret
    a748:	10c03fcc 	andi	r3,r2,255
    a74c:	003ff506 	br	a724 <__alt_mem_Onchip_SRAM+0xf800a724>

0000a750 <__ssprint_r>:
    a750:	30800217 	ldw	r2,8(r6)
    a754:	defff604 	addi	sp,sp,-40
    a758:	dc800215 	stw	r18,8(sp)
    a75c:	dfc00915 	stw	ra,36(sp)
    a760:	df000815 	stw	fp,32(sp)
    a764:	ddc00715 	stw	r23,28(sp)
    a768:	dd800615 	stw	r22,24(sp)
    a76c:	dd400515 	stw	r21,20(sp)
    a770:	dd000415 	stw	r20,16(sp)
    a774:	dcc00315 	stw	r19,12(sp)
    a778:	dc400115 	stw	r17,4(sp)
    a77c:	dc000015 	stw	r16,0(sp)
    a780:	3025883a 	mov	r18,r6
    a784:	10005826 	beq	r2,zero,a8e8 <__ssprint_r+0x198>
    a788:	2027883a 	mov	r19,r4
    a78c:	35c00017 	ldw	r23,0(r6)
    a790:	29000017 	ldw	r4,0(r5)
    a794:	28800217 	ldw	r2,8(r5)
    a798:	2823883a 	mov	r17,r5
    a79c:	0039883a 	mov	fp,zero
    a7a0:	0021883a 	mov	r16,zero
    a7a4:	80003926 	beq	r16,zero,a88c <__ssprint_r+0x13c>
    a7a8:	102b883a 	mov	r21,r2
    a7ac:	102d883a 	mov	r22,r2
    a7b0:	80803a36 	bltu	r16,r2,a89c <__ssprint_r+0x14c>
    a7b4:	88c0030b 	ldhu	r3,12(r17)
    a7b8:	1881200c 	andi	r2,r3,1152
    a7bc:	10002626 	beq	r2,zero,a858 <__ssprint_r+0x108>
    a7c0:	88800517 	ldw	r2,20(r17)
    a7c4:	89400417 	ldw	r5,16(r17)
    a7c8:	81800044 	addi	r6,r16,1
    a7cc:	108f883a 	add	r7,r2,r2
    a7d0:	3885883a 	add	r2,r7,r2
    a7d4:	100ed7fa 	srli	r7,r2,31
    a7d8:	216dc83a 	sub	r22,r4,r5
    a7dc:	3589883a 	add	r4,r6,r22
    a7e0:	3885883a 	add	r2,r7,r2
    a7e4:	102bd07a 	srai	r21,r2,1
    a7e8:	a80d883a 	mov	r6,r21
    a7ec:	a900022e 	bgeu	r21,r4,a7f8 <__ssprint_r+0xa8>
    a7f0:	202b883a 	mov	r21,r4
    a7f4:	200d883a 	mov	r6,r4
    a7f8:	18c1000c 	andi	r3,r3,1024
    a7fc:	18002a26 	beq	r3,zero,a8a8 <__ssprint_r+0x158>
    a800:	300b883a 	mov	r5,r6
    a804:	9809883a 	mov	r4,r19
    a808:	00015b80 	call	15b8 <_malloc_r>
    a80c:	1029883a 	mov	r20,r2
    a810:	10002c26 	beq	r2,zero,a8c4 <__ssprint_r+0x174>
    a814:	89400417 	ldw	r5,16(r17)
    a818:	b00d883a 	mov	r6,r22
    a81c:	1009883a 	mov	r4,r2
    a820:	000919c0 	call	919c <memcpy>
    a824:	8880030b 	ldhu	r2,12(r17)
    a828:	00fedfc4 	movi	r3,-1153
    a82c:	10c4703a 	and	r2,r2,r3
    a830:	10802014 	ori	r2,r2,128
    a834:	8880030d 	sth	r2,12(r17)
    a838:	a589883a 	add	r4,r20,r22
    a83c:	adadc83a 	sub	r22,r21,r22
    a840:	8d400515 	stw	r21,20(r17)
    a844:	8d800215 	stw	r22,8(r17)
    a848:	8d000415 	stw	r20,16(r17)
    a84c:	89000015 	stw	r4,0(r17)
    a850:	802b883a 	mov	r21,r16
    a854:	802d883a 	mov	r22,r16
    a858:	b00d883a 	mov	r6,r22
    a85c:	e00b883a 	mov	r5,fp
    a860:	000de2c0 	call	de2c <memmove>
    a864:	88800217 	ldw	r2,8(r17)
    a868:	89000017 	ldw	r4,0(r17)
    a86c:	90c00217 	ldw	r3,8(r18)
    a870:	1545c83a 	sub	r2,r2,r21
    a874:	2589883a 	add	r4,r4,r22
    a878:	88800215 	stw	r2,8(r17)
    a87c:	89000015 	stw	r4,0(r17)
    a880:	1c21c83a 	sub	r16,r3,r16
    a884:	94000215 	stw	r16,8(r18)
    a888:	80001726 	beq	r16,zero,a8e8 <__ssprint_r+0x198>
    a88c:	bf000017 	ldw	fp,0(r23)
    a890:	bc000117 	ldw	r16,4(r23)
    a894:	bdc00204 	addi	r23,r23,8
    a898:	003fc206 	br	a7a4 <__alt_mem_Onchip_SRAM+0xf800a7a4>
    a89c:	802b883a 	mov	r21,r16
    a8a0:	802d883a 	mov	r22,r16
    a8a4:	003fec06 	br	a858 <__alt_mem_Onchip_SRAM+0xf800a858>
    a8a8:	9809883a 	mov	r4,r19
    a8ac:	000dfe80 	call	dfe8 <_realloc_r>
    a8b0:	1029883a 	mov	r20,r2
    a8b4:	103fe01e 	bne	r2,zero,a838 <__alt_mem_Onchip_SRAM+0xf800a838>
    a8b8:	89400417 	ldw	r5,16(r17)
    a8bc:	9809883a 	mov	r4,r19
    a8c0:	000892c0 	call	892c <_free_r>
    a8c4:	88c0030b 	ldhu	r3,12(r17)
    a8c8:	00800304 	movi	r2,12
    a8cc:	98800015 	stw	r2,0(r19)
    a8d0:	18c01014 	ori	r3,r3,64
    a8d4:	88c0030d 	sth	r3,12(r17)
    a8d8:	00bfffc4 	movi	r2,-1
    a8dc:	90000215 	stw	zero,8(r18)
    a8e0:	90000115 	stw	zero,4(r18)
    a8e4:	00000206 	br	a8f0 <__ssprint_r+0x1a0>
    a8e8:	90000115 	stw	zero,4(r18)
    a8ec:	0005883a 	mov	r2,zero
    a8f0:	dfc00917 	ldw	ra,36(sp)
    a8f4:	df000817 	ldw	fp,32(sp)
    a8f8:	ddc00717 	ldw	r23,28(sp)
    a8fc:	dd800617 	ldw	r22,24(sp)
    a900:	dd400517 	ldw	r21,20(sp)
    a904:	dd000417 	ldw	r20,16(sp)
    a908:	dcc00317 	ldw	r19,12(sp)
    a90c:	dc800217 	ldw	r18,8(sp)
    a910:	dc400117 	ldw	r17,4(sp)
    a914:	dc000017 	ldw	r16,0(sp)
    a918:	dec00a04 	addi	sp,sp,40
    a91c:	f800283a 	ret

0000a920 <___svfiprintf_internal_r>:
    a920:	2880030b 	ldhu	r2,12(r5)
    a924:	deffc804 	addi	sp,sp,-224
    a928:	dcc03115 	stw	r19,196(sp)
    a92c:	dfc03715 	stw	ra,220(sp)
    a930:	df003615 	stw	fp,216(sp)
    a934:	ddc03515 	stw	r23,212(sp)
    a938:	dd803415 	stw	r22,208(sp)
    a93c:	dd403315 	stw	r21,204(sp)
    a940:	dd003215 	stw	r20,200(sp)
    a944:	dc803015 	stw	r18,192(sp)
    a948:	dc402f15 	stw	r17,188(sp)
    a94c:	dc002e15 	stw	r16,184(sp)
    a950:	d9402315 	stw	r5,140(sp)
    a954:	d9002715 	stw	r4,156(sp)
    a958:	1080200c 	andi	r2,r2,128
    a95c:	d9c02415 	stw	r7,144(sp)
    a960:	3027883a 	mov	r19,r6
    a964:	10000226 	beq	r2,zero,a970 <___svfiprintf_internal_r+0x50>
    a968:	28800417 	ldw	r2,16(r5)
    a96c:	10046d26 	beq	r2,zero,bb24 <___svfiprintf_internal_r+0x1204>
    a970:	d8801a04 	addi	r2,sp,104
    a974:	d8c019c4 	addi	r3,sp,103
    a978:	058000b4 	movhi	r22,2
    a97c:	10c9c83a 	sub	r4,r2,r3
    a980:	b5a10d04 	addi	r22,r22,-31692
    a984:	d8801e15 	stw	r2,120(sp)
    a988:	d8c01f15 	stw	r3,124(sp)
    a98c:	dec01a15 	stw	sp,104(sp)
    a990:	d8001c15 	stw	zero,112(sp)
    a994:	d8001b15 	stw	zero,108(sp)
    a998:	d811883a 	mov	r8,sp
    a99c:	d8002915 	stw	zero,164(sp)
    a9a0:	d8002615 	stw	zero,152(sp)
    a9a4:	d9002c15 	stw	r4,176(sp)
    a9a8:	98800007 	ldb	r2,0(r19)
    a9ac:	10031426 	beq	r2,zero,b600 <___svfiprintf_internal_r+0xce0>
    a9b0:	00c00944 	movi	r3,37
    a9b4:	9825883a 	mov	r18,r19
    a9b8:	10c0021e 	bne	r2,r3,a9c4 <___svfiprintf_internal_r+0xa4>
    a9bc:	00001406 	br	aa10 <___svfiprintf_internal_r+0xf0>
    a9c0:	10c00326 	beq	r2,r3,a9d0 <___svfiprintf_internal_r+0xb0>
    a9c4:	94800044 	addi	r18,r18,1
    a9c8:	90800007 	ldb	r2,0(r18)
    a9cc:	103ffc1e 	bne	r2,zero,a9c0 <__alt_mem_Onchip_SRAM+0xf800a9c0>
    a9d0:	94e1c83a 	sub	r16,r18,r19
    a9d4:	80000e26 	beq	r16,zero,aa10 <___svfiprintf_internal_r+0xf0>
    a9d8:	d8c01c17 	ldw	r3,112(sp)
    a9dc:	d8801b17 	ldw	r2,108(sp)
    a9e0:	44c00015 	stw	r19,0(r8)
    a9e4:	1c07883a 	add	r3,r3,r16
    a9e8:	10800044 	addi	r2,r2,1
    a9ec:	d8c01c15 	stw	r3,112(sp)
    a9f0:	44000115 	stw	r16,4(r8)
    a9f4:	d8801b15 	stw	r2,108(sp)
    a9f8:	00c001c4 	movi	r3,7
    a9fc:	18835c16 	blt	r3,r2,b770 <___svfiprintf_internal_r+0xe50>
    aa00:	42000204 	addi	r8,r8,8
    aa04:	d9402617 	ldw	r5,152(sp)
    aa08:	2c0b883a 	add	r5,r5,r16
    aa0c:	d9402615 	stw	r5,152(sp)
    aa10:	90800007 	ldb	r2,0(r18)
    aa14:	1002fc26 	beq	r2,zero,b608 <___svfiprintf_internal_r+0xce8>
    aa18:	0023883a 	mov	r17,zero
    aa1c:	00bfffc4 	movi	r2,-1
    aa20:	0021883a 	mov	r16,zero
    aa24:	94c00044 	addi	r19,r18,1
    aa28:	90c00047 	ldb	r3,1(r18)
    aa2c:	dc402105 	stb	r17,132(sp)
    aa30:	d8001d85 	stb	zero,118(sp)
    aa34:	002b883a 	mov	r21,zero
    aa38:	d8802015 	stw	r2,128(sp)
    aa3c:	d8002515 	stw	zero,148(sp)
    aa40:	04801604 	movi	r18,88
    aa44:	05000244 	movi	r20,9
    aa48:	402f883a 	mov	r23,r8
    aa4c:	8023883a 	mov	r17,r16
    aa50:	9cc00044 	addi	r19,r19,1
    aa54:	18bff804 	addi	r2,r3,-32
    aa58:	9081fb36 	bltu	r18,r2,b248 <___svfiprintf_internal_r+0x928>
    aa5c:	100490ba 	slli	r2,r2,2
    aa60:	01000074 	movhi	r4,1
    aa64:	212a9d04 	addi	r4,r4,-21900
    aa68:	1105883a 	add	r2,r2,r4
    aa6c:	10800017 	ldw	r2,0(r2)
    aa70:	1000683a 	jmp	r2
    aa74:	0000ac74 	movhi	zero,689
    aa78:	0000b248 	cmpgei	zero,zero,713
    aa7c:	0000b248 	cmpgei	zero,zero,713
    aa80:	0000ac68 	cmpgeui	zero,zero,689
    aa84:	0000b248 	cmpgei	zero,zero,713
    aa88:	0000b248 	cmpgei	zero,zero,713
    aa8c:	0000b248 	cmpgei	zero,zero,713
    aa90:	0000b248 	cmpgei	zero,zero,713
    aa94:	0000b248 	cmpgei	zero,zero,713
    aa98:	0000b248 	cmpgei	zero,zero,713
    aa9c:	0000abd8 	cmpnei	zero,zero,687
    aaa0:	0000add4 	movui	zero,695
    aaa4:	0000b248 	cmpgei	zero,zero,713
    aaa8:	0000ac00 	call	ac0 <hex_message+0x14>
    aaac:	0000b284 	movi	zero,714
    aab0:	0000b248 	cmpgei	zero,zero,713
    aab4:	0000b278 	rdprs	zero,zero,713
    aab8:	0000b20c 	andi	zero,zero,712
    aabc:	0000b20c 	andi	zero,zero,712
    aac0:	0000b20c 	andi	zero,zero,712
    aac4:	0000b20c 	andi	zero,zero,712
    aac8:	0000b20c 	andi	zero,zero,712
    aacc:	0000b20c 	andi	zero,zero,712
    aad0:	0000b20c 	andi	zero,zero,712
    aad4:	0000b20c 	andi	zero,zero,712
    aad8:	0000b20c 	andi	zero,zero,712
    aadc:	0000b248 	cmpgei	zero,zero,713
    aae0:	0000b248 	cmpgei	zero,zero,713
    aae4:	0000b248 	cmpgei	zero,zero,713
    aae8:	0000b248 	cmpgei	zero,zero,713
    aaec:	0000b248 	cmpgei	zero,zero,713
    aaf0:	0000b248 	cmpgei	zero,zero,713
    aaf4:	0000b248 	cmpgei	zero,zero,713
    aaf8:	0000b248 	cmpgei	zero,zero,713
    aafc:	0000b248 	cmpgei	zero,zero,713
    ab00:	0000b248 	cmpgei	zero,zero,713
    ab04:	0000b190 	cmplti	zero,zero,710
    ab08:	0000b248 	cmpgei	zero,zero,713
    ab0c:	0000b248 	cmpgei	zero,zero,713
    ab10:	0000b248 	cmpgei	zero,zero,713
    ab14:	0000b248 	cmpgei	zero,zero,713
    ab18:	0000b248 	cmpgei	zero,zero,713
    ab1c:	0000b248 	cmpgei	zero,zero,713
    ab20:	0000b248 	cmpgei	zero,zero,713
    ab24:	0000b248 	cmpgei	zero,zero,713
    ab28:	0000b248 	cmpgei	zero,zero,713
    ab2c:	0000b248 	cmpgei	zero,zero,713
    ab30:	0000b340 	call	b34 <hex_message+0x88>
    ab34:	0000b248 	cmpgei	zero,zero,713
    ab38:	0000b248 	cmpgei	zero,zero,713
    ab3c:	0000b248 	cmpgei	zero,zero,713
    ab40:	0000b248 	cmpgei	zero,zero,713
    ab44:	0000b248 	cmpgei	zero,zero,713
    ab48:	0000b2cc 	andi	zero,zero,715
    ab4c:	0000b248 	cmpgei	zero,zero,713
    ab50:	0000b248 	cmpgei	zero,zero,713
    ab54:	0000afcc 	andi	zero,zero,703
    ab58:	0000b248 	cmpgei	zero,zero,713
    ab5c:	0000b248 	cmpgei	zero,zero,713
    ab60:	0000b248 	cmpgei	zero,zero,713
    ab64:	0000b248 	cmpgei	zero,zero,713
    ab68:	0000b248 	cmpgei	zero,zero,713
    ab6c:	0000b248 	cmpgei	zero,zero,713
    ab70:	0000b248 	cmpgei	zero,zero,713
    ab74:	0000b248 	cmpgei	zero,zero,713
    ab78:	0000b248 	cmpgei	zero,zero,713
    ab7c:	0000b248 	cmpgei	zero,zero,713
    ab80:	0000ae98 	cmpnei	zero,zero,698
    ab84:	0000b07c 	xorhi	zero,zero,705
    ab88:	0000b248 	cmpgei	zero,zero,713
    ab8c:	0000b248 	cmpgei	zero,zero,713
    ab90:	0000b248 	cmpgei	zero,zero,713
    ab94:	0000b070 	cmpltui	zero,zero,705
    ab98:	0000b07c 	xorhi	zero,zero,705
    ab9c:	0000b248 	cmpgei	zero,zero,713
    aba0:	0000b248 	cmpgei	zero,zero,713
    aba4:	0000b05c 	xori	zero,zero,705
    aba8:	0000b248 	cmpgei	zero,zero,713
    abac:	0000b01c 	xori	zero,zero,704
    abb0:	0000ade8 	cmpgeui	zero,zero,695
    abb4:	0000ac0c 	andi	zero,zero,688
    abb8:	0000b184 	movi	zero,710
    abbc:	0000b248 	cmpgei	zero,zero,713
    abc0:	0000b130 	cmpltui	zero,zero,708
    abc4:	0000b248 	cmpgei	zero,zero,713
    abc8:	0000ad4c 	andi	zero,zero,693
    abcc:	0000b248 	cmpgei	zero,zero,713
    abd0:	0000b248 	cmpgei	zero,zero,713
    abd4:	0000ac98 	cmpnei	zero,zero,690
    abd8:	d9002417 	ldw	r4,144(sp)
    abdc:	d9402417 	ldw	r5,144(sp)
    abe0:	21000017 	ldw	r4,0(r4)
    abe4:	28800104 	addi	r2,r5,4
    abe8:	d9002515 	stw	r4,148(sp)
    abec:	20032b0e 	bge	r4,zero,b89c <___svfiprintf_internal_r+0xf7c>
    abf0:	d8c02517 	ldw	r3,148(sp)
    abf4:	d8802415 	stw	r2,144(sp)
    abf8:	00c7c83a 	sub	r3,zero,r3
    abfc:	d8c02515 	stw	r3,148(sp)
    ac00:	8c400114 	ori	r17,r17,4
    ac04:	98c00007 	ldb	r3,0(r19)
    ac08:	003f9106 	br	aa50 <__alt_mem_Onchip_SRAM+0xf800aa50>
    ac0c:	00800c04 	movi	r2,48
    ac10:	d9402417 	ldw	r5,144(sp)
    ac14:	d9002017 	ldw	r4,128(sp)
    ac18:	d8801d05 	stb	r2,116(sp)
    ac1c:	00801e04 	movi	r2,120
    ac20:	d8801d45 	stb	r2,117(sp)
    ac24:	d8001d85 	stb	zero,118(sp)
    ac28:	b811883a 	mov	r8,r23
    ac2c:	28c00104 	addi	r3,r5,4
    ac30:	2c800017 	ldw	r18,0(r5)
    ac34:	0029883a 	mov	r20,zero
    ac38:	88800094 	ori	r2,r17,2
    ac3c:	20036316 	blt	r4,zero,b9cc <___svfiprintf_internal_r+0x10ac>
    ac40:	00bfdfc4 	movi	r2,-129
    ac44:	88a0703a 	and	r16,r17,r2
    ac48:	d8c02415 	stw	r3,144(sp)
    ac4c:	84000094 	ori	r16,r16,2
    ac50:	90031c26 	beq	r18,zero,b8c4 <___svfiprintf_internal_r+0xfa4>
    ac54:	014000b4 	movhi	r5,2
    ac58:	2960a404 	addi	r5,r5,-32112
    ac5c:	002b883a 	mov	r21,zero
    ac60:	d9402915 	stw	r5,164(sp)
    ac64:	00002906 	br	ad0c <___svfiprintf_internal_r+0x3ec>
    ac68:	8c400054 	ori	r17,r17,1
    ac6c:	98c00007 	ldb	r3,0(r19)
    ac70:	003f7706 	br	aa50 <__alt_mem_Onchip_SRAM+0xf800aa50>
    ac74:	a8803fcc 	andi	r2,r21,255
    ac78:	1080201c 	xori	r2,r2,128
    ac7c:	10bfe004 	addi	r2,r2,-128
    ac80:	10032a1e 	bne	r2,zero,b92c <___svfiprintf_internal_r+0x100c>
    ac84:	00c00044 	movi	r3,1
    ac88:	d8c02105 	stb	r3,132(sp)
    ac8c:	05400804 	movi	r21,32
    ac90:	98c00007 	ldb	r3,0(r19)
    ac94:	003f6e06 	br	aa50 <__alt_mem_Onchip_SRAM+0xf800aa50>
    ac98:	8821883a 	mov	r16,r17
    ac9c:	dc402103 	ldbu	r17,132(sp)
    aca0:	b811883a 	mov	r8,r23
    aca4:	8c403fcc 	andi	r17,r17,255
    aca8:	8803f01e 	bne	r17,zero,bc6c <___svfiprintf_internal_r+0x134c>
    acac:	008000b4 	movhi	r2,2
    acb0:	10a0a404 	addi	r2,r2,-32112
    acb4:	d8802915 	stw	r2,164(sp)
    acb8:	8080080c 	andi	r2,r16,32
    acbc:	1000cd26 	beq	r2,zero,aff4 <___svfiprintf_internal_r+0x6d4>
    acc0:	d9002417 	ldw	r4,144(sp)
    acc4:	24800017 	ldw	r18,0(r4)
    acc8:	25000117 	ldw	r20,4(r4)
    accc:	21000204 	addi	r4,r4,8
    acd0:	d9002415 	stw	r4,144(sp)
    acd4:	8080004c 	andi	r2,r16,1
    acd8:	1002c726 	beq	r2,zero,b7f8 <___svfiprintf_internal_r+0xed8>
    acdc:	9504b03a 	or	r2,r18,r20
    ace0:	1003061e 	bne	r2,zero,b8fc <___svfiprintf_internal_r+0xfdc>
    ace4:	d9002017 	ldw	r4,128(sp)
    ace8:	d8001d85 	stb	zero,118(sp)
    acec:	20033e16 	blt	r4,zero,b9e8 <___svfiprintf_internal_r+0x10c8>
    acf0:	00bfdfc4 	movi	r2,-129
    acf4:	80a0703a 	and	r16,r16,r2
    acf8:	d9402017 	ldw	r5,128(sp)
    acfc:	002b883a 	mov	r21,zero
    ad00:	28002826 	beq	r5,zero,ada4 <___svfiprintf_internal_r+0x484>
    ad04:	0025883a 	mov	r18,zero
    ad08:	0029883a 	mov	r20,zero
    ad0c:	d9002917 	ldw	r4,164(sp)
    ad10:	dc401a04 	addi	r17,sp,104
    ad14:	908003cc 	andi	r2,r18,15
    ad18:	a006973a 	slli	r3,r20,28
    ad1c:	2085883a 	add	r2,r4,r2
    ad20:	9024d13a 	srli	r18,r18,4
    ad24:	10800003 	ldbu	r2,0(r2)
    ad28:	a028d13a 	srli	r20,r20,4
    ad2c:	8c7fffc4 	addi	r17,r17,-1
    ad30:	1ca4b03a 	or	r18,r3,r18
    ad34:	88800005 	stb	r2,0(r17)
    ad38:	9504b03a 	or	r2,r18,r20
    ad3c:	103ff51e 	bne	r2,zero,ad14 <__alt_mem_Onchip_SRAM+0xf800ad14>
    ad40:	d8801e17 	ldw	r2,120(sp)
    ad44:	1469c83a 	sub	r20,r2,r17
    ad48:	00001906 	br	adb0 <___svfiprintf_internal_r+0x490>
    ad4c:	8821883a 	mov	r16,r17
    ad50:	dc402103 	ldbu	r17,132(sp)
    ad54:	b811883a 	mov	r8,r23
    ad58:	8c403fcc 	andi	r17,r17,255
    ad5c:	8803d01e 	bne	r17,zero,bca0 <___svfiprintf_internal_r+0x1380>
    ad60:	8080080c 	andi	r2,r16,32
    ad64:	10016126 	beq	r2,zero,b2ec <___svfiprintf_internal_r+0x9cc>
    ad68:	d9002417 	ldw	r4,144(sp)
    ad6c:	d9402017 	ldw	r5,128(sp)
    ad70:	d8001d85 	stb	zero,118(sp)
    ad74:	20c00204 	addi	r3,r4,8
    ad78:	24800017 	ldw	r18,0(r4)
    ad7c:	25000117 	ldw	r20,4(r4)
    ad80:	28030f16 	blt	r5,zero,b9c0 <___svfiprintf_internal_r+0x10a0>
    ad84:	013fdfc4 	movi	r4,-129
    ad88:	9504b03a 	or	r2,r18,r20
    ad8c:	d8c02415 	stw	r3,144(sp)
    ad90:	8120703a 	and	r16,r16,r4
    ad94:	002b883a 	mov	r21,zero
    ad98:	1000cd1e 	bne	r2,zero,b0d0 <___svfiprintf_internal_r+0x7b0>
    ad9c:	d8c02017 	ldw	r3,128(sp)
    ada0:	1803141e 	bne	r3,zero,b9f4 <___svfiprintf_internal_r+0x10d4>
    ada4:	d8002015 	stw	zero,128(sp)
    ada8:	0029883a 	mov	r20,zero
    adac:	dc401a04 	addi	r17,sp,104
    adb0:	dc802017 	ldw	r18,128(sp)
    adb4:	9500010e 	bge	r18,r20,adbc <___svfiprintf_internal_r+0x49c>
    adb8:	a025883a 	mov	r18,r20
    adbc:	ad403fcc 	andi	r21,r21,255
    adc0:	ad40201c 	xori	r21,r21,128
    adc4:	ad7fe004 	addi	r21,r21,-128
    adc8:	a8003f26 	beq	r21,zero,aec8 <___svfiprintf_internal_r+0x5a8>
    adcc:	94800044 	addi	r18,r18,1
    add0:	00003d06 	br	aec8 <___svfiprintf_internal_r+0x5a8>
    add4:	00c00044 	movi	r3,1
    add8:	d8c02105 	stb	r3,132(sp)
    addc:	05400ac4 	movi	r21,43
    ade0:	98c00007 	ldb	r3,0(r19)
    ade4:	003f1a06 	br	aa50 <__alt_mem_Onchip_SRAM+0xf800aa50>
    ade8:	8821883a 	mov	r16,r17
    adec:	dc402103 	ldbu	r17,132(sp)
    adf0:	b811883a 	mov	r8,r23
    adf4:	8c403fcc 	andi	r17,r17,255
    adf8:	8803a71e 	bne	r17,zero,bc98 <___svfiprintf_internal_r+0x1378>
    adfc:	8080080c 	andi	r2,r16,32
    ae00:	10015726 	beq	r2,zero,b360 <___svfiprintf_internal_r+0xa40>
    ae04:	d8c02417 	ldw	r3,144(sp)
    ae08:	d9002017 	ldw	r4,128(sp)
    ae0c:	d8001d85 	stb	zero,118(sp)
    ae10:	18800204 	addi	r2,r3,8
    ae14:	1c800017 	ldw	r18,0(r3)
    ae18:	1d000117 	ldw	r20,4(r3)
    ae1c:	2002db16 	blt	r4,zero,b98c <___svfiprintf_internal_r+0x106c>
    ae20:	013fdfc4 	movi	r4,-129
    ae24:	9506b03a 	or	r3,r18,r20
    ae28:	d8802415 	stw	r2,144(sp)
    ae2c:	8120703a 	and	r16,r16,r4
    ae30:	18015826 	beq	r3,zero,b394 <___svfiprintf_internal_r+0xa74>
    ae34:	002b883a 	mov	r21,zero
    ae38:	dc401a04 	addi	r17,sp,104
    ae3c:	9006d0fa 	srli	r3,r18,3
    ae40:	a008977a 	slli	r4,r20,29
    ae44:	a028d0fa 	srli	r20,r20,3
    ae48:	948001cc 	andi	r18,r18,7
    ae4c:	90800c04 	addi	r2,r18,48
    ae50:	8c7fffc4 	addi	r17,r17,-1
    ae54:	20e4b03a 	or	r18,r4,r3
    ae58:	88800005 	stb	r2,0(r17)
    ae5c:	9506b03a 	or	r3,r18,r20
    ae60:	183ff61e 	bne	r3,zero,ae3c <__alt_mem_Onchip_SRAM+0xf800ae3c>
    ae64:	80c0004c 	andi	r3,r16,1
    ae68:	18028926 	beq	r3,zero,b890 <___svfiprintf_internal_r+0xf70>
    ae6c:	10803fcc 	andi	r2,r2,255
    ae70:	1080201c 	xori	r2,r2,128
    ae74:	10bfe004 	addi	r2,r2,-128
    ae78:	00c00c04 	movi	r3,48
    ae7c:	10ffb026 	beq	r2,r3,ad40 <__alt_mem_Onchip_SRAM+0xf800ad40>
    ae80:	88ffffc5 	stb	r3,-1(r17)
    ae84:	d8c01e17 	ldw	r3,120(sp)
    ae88:	88bfffc4 	addi	r2,r17,-1
    ae8c:	1023883a 	mov	r17,r2
    ae90:	18a9c83a 	sub	r20,r3,r2
    ae94:	003fc606 	br	adb0 <__alt_mem_Onchip_SRAM+0xf800adb0>
    ae98:	d8c02417 	ldw	r3,144(sp)
    ae9c:	04800044 	movi	r18,1
    aea0:	8821883a 	mov	r16,r17
    aea4:	18800017 	ldw	r2,0(r3)
    aea8:	18c00104 	addi	r3,r3,4
    aeac:	b811883a 	mov	r8,r23
    aeb0:	d8001d85 	stb	zero,118(sp)
    aeb4:	d8801005 	stb	r2,64(sp)
    aeb8:	d8c02415 	stw	r3,144(sp)
    aebc:	9029883a 	mov	r20,r18
    aec0:	dc401004 	addi	r17,sp,64
    aec4:	d8002015 	stw	zero,128(sp)
    aec8:	80c0008c 	andi	r3,r16,2
    aecc:	d8c02115 	stw	r3,132(sp)
    aed0:	18000126 	beq	r3,zero,aed8 <___svfiprintf_internal_r+0x5b8>
    aed4:	94800084 	addi	r18,r18,2
    aed8:	80c0210c 	andi	r3,r16,132
    aedc:	d8c02215 	stw	r3,136(sp)
    aee0:	1801321e 	bne	r3,zero,b3ac <___svfiprintf_internal_r+0xa8c>
    aee4:	d9002517 	ldw	r4,148(sp)
    aee8:	24b9c83a 	sub	fp,r4,r18
    aeec:	07012f0e 	bge	zero,fp,b3ac <___svfiprintf_internal_r+0xa8c>
    aef0:	02400404 	movi	r9,16
    aef4:	d8c01c17 	ldw	r3,112(sp)
    aef8:	d8801b17 	ldw	r2,108(sp)
    aefc:	4f03250e 	bge	r9,fp,bb94 <___svfiprintf_internal_r+0x1274>
    af00:	010000b4 	movhi	r4,2
    af04:	21211104 	addi	r4,r4,-31676
    af08:	dc002a15 	stw	r16,168(sp)
    af0c:	dc402b15 	stw	r17,172(sp)
    af10:	d9002815 	stw	r4,160(sp)
    af14:	e023883a 	mov	r17,fp
    af18:	482f883a 	mov	r23,r9
    af1c:	9839883a 	mov	fp,r19
    af20:	054001c4 	movi	r21,7
    af24:	9027883a 	mov	r19,r18
    af28:	dc002717 	ldw	r16,156(sp)
    af2c:	dc802317 	ldw	r18,140(sp)
    af30:	00000306 	br	af40 <___svfiprintf_internal_r+0x620>
    af34:	8c7ffc04 	addi	r17,r17,-16
    af38:	42000204 	addi	r8,r8,8
    af3c:	bc40130e 	bge	r23,r17,af8c <___svfiprintf_internal_r+0x66c>
    af40:	014000b4 	movhi	r5,2
    af44:	18c00404 	addi	r3,r3,16
    af48:	10800044 	addi	r2,r2,1
    af4c:	29611104 	addi	r5,r5,-31676
    af50:	41400015 	stw	r5,0(r8)
    af54:	45c00115 	stw	r23,4(r8)
    af58:	d8c01c15 	stw	r3,112(sp)
    af5c:	d8801b15 	stw	r2,108(sp)
    af60:	a8bff40e 	bge	r21,r2,af34 <__alt_mem_Onchip_SRAM+0xf800af34>
    af64:	d9801a04 	addi	r6,sp,104
    af68:	900b883a 	mov	r5,r18
    af6c:	8009883a 	mov	r4,r16
    af70:	000a7500 	call	a750 <__ssprint_r>
    af74:	1001aa1e 	bne	r2,zero,b620 <___svfiprintf_internal_r+0xd00>
    af78:	8c7ffc04 	addi	r17,r17,-16
    af7c:	d8c01c17 	ldw	r3,112(sp)
    af80:	d8801b17 	ldw	r2,108(sp)
    af84:	d811883a 	mov	r8,sp
    af88:	bc7fed16 	blt	r23,r17,af40 <__alt_mem_Onchip_SRAM+0xf800af40>
    af8c:	9825883a 	mov	r18,r19
    af90:	dc002a17 	ldw	r16,168(sp)
    af94:	e027883a 	mov	r19,fp
    af98:	8839883a 	mov	fp,r17
    af9c:	dc402b17 	ldw	r17,172(sp)
    afa0:	d9002817 	ldw	r4,160(sp)
    afa4:	e0c7883a 	add	r3,fp,r3
    afa8:	10800044 	addi	r2,r2,1
    afac:	41000015 	stw	r4,0(r8)
    afb0:	47000115 	stw	fp,4(r8)
    afb4:	d8c01c15 	stw	r3,112(sp)
    afb8:	d8801b15 	stw	r2,108(sp)
    afbc:	010001c4 	movi	r4,7
    afc0:	20821616 	blt	r4,r2,b81c <___svfiprintf_internal_r+0xefc>
    afc4:	42000204 	addi	r8,r8,8
    afc8:	0000fa06 	br	b3b4 <___svfiprintf_internal_r+0xa94>
    afcc:	8821883a 	mov	r16,r17
    afd0:	dc402103 	ldbu	r17,132(sp)
    afd4:	b811883a 	mov	r8,r23
    afd8:	8c403fcc 	andi	r17,r17,255
    afdc:	8803361e 	bne	r17,zero,bcb8 <___svfiprintf_internal_r+0x1398>
    afe0:	014000b4 	movhi	r5,2
    afe4:	29609f04 	addi	r5,r5,-32132
    afe8:	d9402915 	stw	r5,164(sp)
    afec:	8080080c 	andi	r2,r16,32
    aff0:	103f331e 	bne	r2,zero,acc0 <__alt_mem_Onchip_SRAM+0xf800acc0>
    aff4:	8080040c 	andi	r2,r16,16
    aff8:	1002551e 	bne	r2,zero,b950 <___svfiprintf_internal_r+0x1030>
    affc:	8080100c 	andi	r2,r16,64
    b000:	1002a626 	beq	r2,zero,ba9c <___svfiprintf_internal_r+0x117c>
    b004:	d8802417 	ldw	r2,144(sp)
    b008:	0029883a 	mov	r20,zero
    b00c:	1480000b 	ldhu	r18,0(r2)
    b010:	10800104 	addi	r2,r2,4
    b014:	d8802415 	stw	r2,144(sp)
    b018:	003f2e06 	br	acd4 <__alt_mem_Onchip_SRAM+0xf800acd4>
    b01c:	8821883a 	mov	r16,r17
    b020:	dc402103 	ldbu	r17,132(sp)
    b024:	b811883a 	mov	r8,r23
    b028:	8c403fcc 	andi	r17,r17,255
    b02c:	88030b1e 	bne	r17,zero,bc5c <___svfiprintf_internal_r+0x133c>
    b030:	8080080c 	andi	r2,r16,32
    b034:	1002271e 	bne	r2,zero,b8d4 <___svfiprintf_internal_r+0xfb4>
    b038:	8080040c 	andi	r2,r16,16
    b03c:	10028e26 	beq	r2,zero,ba78 <___svfiprintf_internal_r+0x1158>
    b040:	d8c02417 	ldw	r3,144(sp)
    b044:	d9002617 	ldw	r4,152(sp)
    b048:	18800017 	ldw	r2,0(r3)
    b04c:	18c00104 	addi	r3,r3,4
    b050:	d8c02415 	stw	r3,144(sp)
    b054:	11000015 	stw	r4,0(r2)
    b058:	003e5306 	br	a9a8 <__alt_mem_Onchip_SRAM+0xf800a9a8>
    b05c:	98c00007 	ldb	r3,0(r19)
    b060:	01401b04 	movi	r5,108
    b064:	19424f26 	beq	r3,r5,b9a4 <___svfiprintf_internal_r+0x1084>
    b068:	8c400414 	ori	r17,r17,16
    b06c:	003e7806 	br	aa50 <__alt_mem_Onchip_SRAM+0xf800aa50>
    b070:	8c401014 	ori	r17,r17,64
    b074:	98c00007 	ldb	r3,0(r19)
    b078:	003e7506 	br	aa50 <__alt_mem_Onchip_SRAM+0xf800aa50>
    b07c:	8821883a 	mov	r16,r17
    b080:	dc402103 	ldbu	r17,132(sp)
    b084:	b811883a 	mov	r8,r23
    b088:	8c403fcc 	andi	r17,r17,255
    b08c:	8802fe1e 	bne	r17,zero,bc88 <___svfiprintf_internal_r+0x1368>
    b090:	8080080c 	andi	r2,r16,32
    b094:	10004626 	beq	r2,zero,b1b0 <___svfiprintf_internal_r+0x890>
    b098:	d9002417 	ldw	r4,144(sp)
    b09c:	20800117 	ldw	r2,4(r4)
    b0a0:	24800017 	ldw	r18,0(r4)
    b0a4:	21000204 	addi	r4,r4,8
    b0a8:	d9002415 	stw	r4,144(sp)
    b0ac:	1029883a 	mov	r20,r2
    b0b0:	10004a16 	blt	r2,zero,b1dc <___svfiprintf_internal_r+0x8bc>
    b0b4:	d9002017 	ldw	r4,128(sp)
    b0b8:	dd401d83 	ldbu	r21,118(sp)
    b0bc:	2001eb16 	blt	r4,zero,b86c <___svfiprintf_internal_r+0xf4c>
    b0c0:	00ffdfc4 	movi	r3,-129
    b0c4:	9504b03a 	or	r2,r18,r20
    b0c8:	80e0703a 	and	r16,r16,r3
    b0cc:	103f3326 	beq	r2,zero,ad9c <__alt_mem_Onchip_SRAM+0xf800ad9c>
    b0d0:	a0009426 	beq	r20,zero,b324 <___svfiprintf_internal_r+0xa04>
    b0d4:	dc401a04 	addi	r17,sp,104
    b0d8:	402f883a 	mov	r23,r8
    b0dc:	9009883a 	mov	r4,r18
    b0e0:	a00b883a 	mov	r5,r20
    b0e4:	01800284 	movi	r6,10
    b0e8:	000f883a 	mov	r7,zero
    b0ec:	000ef940 	call	ef94 <__umoddi3>
    b0f0:	10800c04 	addi	r2,r2,48
    b0f4:	8c7fffc4 	addi	r17,r17,-1
    b0f8:	9009883a 	mov	r4,r18
    b0fc:	a00b883a 	mov	r5,r20
    b100:	88800005 	stb	r2,0(r17)
    b104:	01800284 	movi	r6,10
    b108:	000f883a 	mov	r7,zero
    b10c:	000e9980 	call	e998 <__udivdi3>
    b110:	1025883a 	mov	r18,r2
    b114:	10c4b03a 	or	r2,r2,r3
    b118:	1829883a 	mov	r20,r3
    b11c:	103fef1e 	bne	r2,zero,b0dc <__alt_mem_Onchip_SRAM+0xf800b0dc>
    b120:	d9001e17 	ldw	r4,120(sp)
    b124:	b811883a 	mov	r8,r23
    b128:	2469c83a 	sub	r20,r4,r17
    b12c:	003f2006 	br	adb0 <__alt_mem_Onchip_SRAM+0xf800adb0>
    b130:	d8802417 	ldw	r2,144(sp)
    b134:	8821883a 	mov	r16,r17
    b138:	d8001d85 	stb	zero,118(sp)
    b13c:	14400017 	ldw	r17,0(r2)
    b140:	b811883a 	mov	r8,r23
    b144:	15c00104 	addi	r23,r2,4
    b148:	88026c26 	beq	r17,zero,bafc <___svfiprintf_internal_r+0x11dc>
    b14c:	d8c02017 	ldw	r3,128(sp)
    b150:	18025f16 	blt	r3,zero,bad0 <___svfiprintf_internal_r+0x11b0>
    b154:	180d883a 	mov	r6,r3
    b158:	000b883a 	mov	r5,zero
    b15c:	8809883a 	mov	r4,r17
    b160:	da002d15 	stw	r8,180(sp)
    b164:	00090b80 	call	90b8 <memchr>
    b168:	da002d17 	ldw	r8,180(sp)
    b16c:	1002a526 	beq	r2,zero,bc04 <___svfiprintf_internal_r+0x12e4>
    b170:	1469c83a 	sub	r20,r2,r17
    b174:	dd401d83 	ldbu	r21,118(sp)
    b178:	ddc02415 	stw	r23,144(sp)
    b17c:	d8002015 	stw	zero,128(sp)
    b180:	003f0b06 	br	adb0 <__alt_mem_Onchip_SRAM+0xf800adb0>
    b184:	8c400814 	ori	r17,r17,32
    b188:	98c00007 	ldb	r3,0(r19)
    b18c:	003e3006 	br	aa50 <__alt_mem_Onchip_SRAM+0xf800aa50>
    b190:	8821883a 	mov	r16,r17
    b194:	dc402103 	ldbu	r17,132(sp)
    b198:	b811883a 	mov	r8,r23
    b19c:	8c403fcc 	andi	r17,r17,255
    b1a0:	8802b01e 	bne	r17,zero,bc64 <___svfiprintf_internal_r+0x1344>
    b1a4:	84000414 	ori	r16,r16,16
    b1a8:	8080080c 	andi	r2,r16,32
    b1ac:	103fba1e 	bne	r2,zero,b098 <__alt_mem_Onchip_SRAM+0xf800b098>
    b1b0:	8080040c 	andi	r2,r16,16
    b1b4:	1001df1e 	bne	r2,zero,b934 <___svfiprintf_internal_r+0x1014>
    b1b8:	8080100c 	andi	r2,r16,64
    b1bc:	10023d26 	beq	r2,zero,bab4 <___svfiprintf_internal_r+0x1194>
    b1c0:	d8802417 	ldw	r2,144(sp)
    b1c4:	1480000f 	ldh	r18,0(r2)
    b1c8:	10800104 	addi	r2,r2,4
    b1cc:	d8802415 	stw	r2,144(sp)
    b1d0:	9029d7fa 	srai	r20,r18,31
    b1d4:	a005883a 	mov	r2,r20
    b1d8:	103fb60e 	bge	r2,zero,b0b4 <__alt_mem_Onchip_SRAM+0xf800b0b4>
    b1dc:	d9402017 	ldw	r5,128(sp)
    b1e0:	04a5c83a 	sub	r18,zero,r18
    b1e4:	05400b44 	movi	r21,45
    b1e8:	9004c03a 	cmpne	r2,r18,zero
    b1ec:	0529c83a 	sub	r20,zero,r20
    b1f0:	dd401d85 	stb	r21,118(sp)
    b1f4:	a0a9c83a 	sub	r20,r20,r2
    b1f8:	28026c16 	blt	r5,zero,bbac <___svfiprintf_internal_r+0x128c>
    b1fc:	00bfdfc4 	movi	r2,-129
    b200:	80a0703a 	and	r16,r16,r2
    b204:	a03fb31e 	bne	r20,zero,b0d4 <__alt_mem_Onchip_SRAM+0xf800b0d4>
    b208:	00004606 	br	b324 <___svfiprintf_internal_r+0xa04>
    b20c:	9839883a 	mov	fp,r19
    b210:	d8002515 	stw	zero,148(sp)
    b214:	1c3ff404 	addi	r16,r3,-48
    b218:	0009883a 	mov	r4,zero
    b21c:	01400284 	movi	r5,10
    b220:	00015680 	call	1568 <__mulsi3>
    b224:	e0c00007 	ldb	r3,0(fp)
    b228:	8089883a 	add	r4,r16,r2
    b22c:	9cc00044 	addi	r19,r19,1
    b230:	1c3ff404 	addi	r16,r3,-48
    b234:	9839883a 	mov	fp,r19
    b238:	a43ff82e 	bgeu	r20,r16,b21c <__alt_mem_Onchip_SRAM+0xf800b21c>
    b23c:	d9002515 	stw	r4,148(sp)
    b240:	18bff804 	addi	r2,r3,-32
    b244:	90be052e 	bgeu	r18,r2,aa5c <__alt_mem_Onchip_SRAM+0xf800aa5c>
    b248:	8821883a 	mov	r16,r17
    b24c:	dc402103 	ldbu	r17,132(sp)
    b250:	b811883a 	mov	r8,r23
    b254:	8c403fcc 	andi	r17,r17,255
    b258:	88028d1e 	bne	r17,zero,bc90 <___svfiprintf_internal_r+0x1370>
    b25c:	1800ea26 	beq	r3,zero,b608 <___svfiprintf_internal_r+0xce8>
    b260:	04800044 	movi	r18,1
    b264:	d8c01005 	stb	r3,64(sp)
    b268:	d8001d85 	stb	zero,118(sp)
    b26c:	9029883a 	mov	r20,r18
    b270:	dc401004 	addi	r17,sp,64
    b274:	003f1306 	br	aec4 <__alt_mem_Onchip_SRAM+0xf800aec4>
    b278:	8c402014 	ori	r17,r17,128
    b27c:	98c00007 	ldb	r3,0(r19)
    b280:	003df306 	br	aa50 <__alt_mem_Onchip_SRAM+0xf800aa50>
    b284:	98c00007 	ldb	r3,0(r19)
    b288:	01000a84 	movi	r4,42
    b28c:	9f000044 	addi	fp,r19,1
    b290:	19026326 	beq	r3,r4,bc20 <___svfiprintf_internal_r+0x1300>
    b294:	1c3ff404 	addi	r16,r3,-48
    b298:	0009883a 	mov	r4,zero
    b29c:	a4025636 	bltu	r20,r16,bbf8 <___svfiprintf_internal_r+0x12d8>
    b2a0:	01400284 	movi	r5,10
    b2a4:	00015680 	call	1568 <__mulsi3>
    b2a8:	e0c00007 	ldb	r3,0(fp)
    b2ac:	1409883a 	add	r4,r2,r16
    b2b0:	e4c00044 	addi	r19,fp,1
    b2b4:	1c3ff404 	addi	r16,r3,-48
    b2b8:	9839883a 	mov	fp,r19
    b2bc:	a43ff82e 	bgeu	r20,r16,b2a0 <__alt_mem_Onchip_SRAM+0xf800b2a0>
    b2c0:	20020c16 	blt	r4,zero,baf4 <___svfiprintf_internal_r+0x11d4>
    b2c4:	d9002015 	stw	r4,128(sp)
    b2c8:	003de206 	br	aa54 <__alt_mem_Onchip_SRAM+0xf800aa54>
    b2cc:	8821883a 	mov	r16,r17
    b2d0:	dc402103 	ldbu	r17,132(sp)
    b2d4:	b811883a 	mov	r8,r23
    b2d8:	8c403fcc 	andi	r17,r17,255
    b2dc:	8802721e 	bne	r17,zero,bca8 <___svfiprintf_internal_r+0x1388>
    b2e0:	84000414 	ori	r16,r16,16
    b2e4:	8080080c 	andi	r2,r16,32
    b2e8:	103e9f1e 	bne	r2,zero,ad68 <__alt_mem_Onchip_SRAM+0xf800ad68>
    b2ec:	8080040c 	andi	r2,r16,16
    b2f0:	10015326 	beq	r2,zero,b840 <___svfiprintf_internal_r+0xf20>
    b2f4:	d8c02417 	ldw	r3,144(sp)
    b2f8:	d9002017 	ldw	r4,128(sp)
    b2fc:	d8001d85 	stb	zero,118(sp)
    b300:	18800104 	addi	r2,r3,4
    b304:	1c800017 	ldw	r18,0(r3)
    b308:	0029883a 	mov	r20,zero
    b30c:	20015516 	blt	r4,zero,b864 <___svfiprintf_internal_r+0xf44>
    b310:	00ffdfc4 	movi	r3,-129
    b314:	d8802415 	stw	r2,144(sp)
    b318:	80e0703a 	and	r16,r16,r3
    b31c:	002b883a 	mov	r21,zero
    b320:	903e9e26 	beq	r18,zero,ad9c <__alt_mem_Onchip_SRAM+0xf800ad9c>
    b324:	00800244 	movi	r2,9
    b328:	14bf6a36 	bltu	r2,r18,b0d4 <__alt_mem_Onchip_SRAM+0xf800b0d4>
    b32c:	94800c04 	addi	r18,r18,48
    b330:	dc8019c5 	stb	r18,103(sp)
    b334:	dd002c17 	ldw	r20,176(sp)
    b338:	dc4019c4 	addi	r17,sp,103
    b33c:	003e9c06 	br	adb0 <__alt_mem_Onchip_SRAM+0xf800adb0>
    b340:	8821883a 	mov	r16,r17
    b344:	dc402103 	ldbu	r17,132(sp)
    b348:	b811883a 	mov	r8,r23
    b34c:	8c403fcc 	andi	r17,r17,255
    b350:	8802571e 	bne	r17,zero,bcb0 <___svfiprintf_internal_r+0x1390>
    b354:	84000414 	ori	r16,r16,16
    b358:	8080080c 	andi	r2,r16,32
    b35c:	103ea91e 	bne	r2,zero,ae04 <__alt_mem_Onchip_SRAM+0xf800ae04>
    b360:	8080040c 	andi	r2,r16,16
    b364:	10018026 	beq	r2,zero,b968 <___svfiprintf_internal_r+0x1048>
    b368:	d9402417 	ldw	r5,144(sp)
    b36c:	d8c02017 	ldw	r3,128(sp)
    b370:	d8001d85 	stb	zero,118(sp)
    b374:	28800104 	addi	r2,r5,4
    b378:	2c800017 	ldw	r18,0(r5)
    b37c:	0029883a 	mov	r20,zero
    b380:	18018216 	blt	r3,zero,b98c <___svfiprintf_internal_r+0x106c>
    b384:	00ffdfc4 	movi	r3,-129
    b388:	d8802415 	stw	r2,144(sp)
    b38c:	80e0703a 	and	r16,r16,r3
    b390:	903ea81e 	bne	r18,zero,ae34 <__alt_mem_Onchip_SRAM+0xf800ae34>
    b394:	d8802017 	ldw	r2,128(sp)
    b398:	002b883a 	mov	r21,zero
    b39c:	1001f226 	beq	r2,zero,bb68 <___svfiprintf_internal_r+0x1248>
    b3a0:	0025883a 	mov	r18,zero
    b3a4:	0029883a 	mov	r20,zero
    b3a8:	003ea306 	br	ae38 <__alt_mem_Onchip_SRAM+0xf800ae38>
    b3ac:	d8c01c17 	ldw	r3,112(sp)
    b3b0:	d8801b17 	ldw	r2,108(sp)
    b3b4:	d9001d87 	ldb	r4,118(sp)
    b3b8:	20000b26 	beq	r4,zero,b3e8 <___svfiprintf_internal_r+0xac8>
    b3bc:	d9001d84 	addi	r4,sp,118
    b3c0:	18c00044 	addi	r3,r3,1
    b3c4:	10800044 	addi	r2,r2,1
    b3c8:	41000015 	stw	r4,0(r8)
    b3cc:	01000044 	movi	r4,1
    b3d0:	41000115 	stw	r4,4(r8)
    b3d4:	d8c01c15 	stw	r3,112(sp)
    b3d8:	d8801b15 	stw	r2,108(sp)
    b3dc:	010001c4 	movi	r4,7
    b3e0:	2080f316 	blt	r4,r2,b7b0 <___svfiprintf_internal_r+0xe90>
    b3e4:	42000204 	addi	r8,r8,8
    b3e8:	d9402117 	ldw	r5,132(sp)
    b3ec:	28000b26 	beq	r5,zero,b41c <___svfiprintf_internal_r+0xafc>
    b3f0:	d9001d04 	addi	r4,sp,116
    b3f4:	18c00084 	addi	r3,r3,2
    b3f8:	10800044 	addi	r2,r2,1
    b3fc:	41000015 	stw	r4,0(r8)
    b400:	01000084 	movi	r4,2
    b404:	41000115 	stw	r4,4(r8)
    b408:	d8c01c15 	stw	r3,112(sp)
    b40c:	d8801b15 	stw	r2,108(sp)
    b410:	010001c4 	movi	r4,7
    b414:	2080ef16 	blt	r4,r2,b7d4 <___svfiprintf_internal_r+0xeb4>
    b418:	42000204 	addi	r8,r8,8
    b41c:	d9402217 	ldw	r5,136(sp)
    b420:	01002004 	movi	r4,128
    b424:	29008f26 	beq	r5,r4,b664 <___svfiprintf_internal_r+0xd44>
    b428:	d9002017 	ldw	r4,128(sp)
    b42c:	252fc83a 	sub	r23,r4,r20
    b430:	05c0310e 	bge	zero,r23,b4f8 <___svfiprintf_internal_r+0xbd8>
    b434:	07000404 	movi	fp,16
    b438:	e5c17d0e 	bge	fp,r23,ba30 <___svfiprintf_internal_r+0x1110>
    b43c:	010000b4 	movhi	r4,2
    b440:	21210d04 	addi	r4,r4,-31692
    b444:	dc002015 	stw	r16,128(sp)
    b448:	dc402215 	stw	r17,136(sp)
    b44c:	d9002115 	stw	r4,132(sp)
    b450:	b823883a 	mov	r17,r23
    b454:	054001c4 	movi	r21,7
    b458:	982f883a 	mov	r23,r19
    b45c:	dc002717 	ldw	r16,156(sp)
    b460:	9027883a 	mov	r19,r18
    b464:	dc802317 	ldw	r18,140(sp)
    b468:	00000306 	br	b478 <___svfiprintf_internal_r+0xb58>
    b46c:	8c7ffc04 	addi	r17,r17,-16
    b470:	42000204 	addi	r8,r8,8
    b474:	e440110e 	bge	fp,r17,b4bc <___svfiprintf_internal_r+0xb9c>
    b478:	18c00404 	addi	r3,r3,16
    b47c:	10800044 	addi	r2,r2,1
    b480:	45800015 	stw	r22,0(r8)
    b484:	47000115 	stw	fp,4(r8)
    b488:	d8c01c15 	stw	r3,112(sp)
    b48c:	d8801b15 	stw	r2,108(sp)
    b490:	a8bff60e 	bge	r21,r2,b46c <__alt_mem_Onchip_SRAM+0xf800b46c>
    b494:	d9801a04 	addi	r6,sp,104
    b498:	900b883a 	mov	r5,r18
    b49c:	8009883a 	mov	r4,r16
    b4a0:	000a7500 	call	a750 <__ssprint_r>
    b4a4:	10005e1e 	bne	r2,zero,b620 <___svfiprintf_internal_r+0xd00>
    b4a8:	8c7ffc04 	addi	r17,r17,-16
    b4ac:	d8c01c17 	ldw	r3,112(sp)
    b4b0:	d8801b17 	ldw	r2,108(sp)
    b4b4:	d811883a 	mov	r8,sp
    b4b8:	e47fef16 	blt	fp,r17,b478 <__alt_mem_Onchip_SRAM+0xf800b478>
    b4bc:	9825883a 	mov	r18,r19
    b4c0:	dc002017 	ldw	r16,128(sp)
    b4c4:	b827883a 	mov	r19,r23
    b4c8:	882f883a 	mov	r23,r17
    b4cc:	dc402217 	ldw	r17,136(sp)
    b4d0:	d9402117 	ldw	r5,132(sp)
    b4d4:	1dc7883a 	add	r3,r3,r23
    b4d8:	10800044 	addi	r2,r2,1
    b4dc:	41400015 	stw	r5,0(r8)
    b4e0:	45c00115 	stw	r23,4(r8)
    b4e4:	d8c01c15 	stw	r3,112(sp)
    b4e8:	d8801b15 	stw	r2,108(sp)
    b4ec:	010001c4 	movi	r4,7
    b4f0:	2080a616 	blt	r4,r2,b78c <___svfiprintf_internal_r+0xe6c>
    b4f4:	42000204 	addi	r8,r8,8
    b4f8:	a0c7883a 	add	r3,r20,r3
    b4fc:	10800044 	addi	r2,r2,1
    b500:	44400015 	stw	r17,0(r8)
    b504:	45000115 	stw	r20,4(r8)
    b508:	d8c01c15 	stw	r3,112(sp)
    b50c:	d8801b15 	stw	r2,108(sp)
    b510:	010001c4 	movi	r4,7
    b514:	20808816 	blt	r4,r2,b738 <___svfiprintf_internal_r+0xe18>
    b518:	42000204 	addi	r8,r8,8
    b51c:	8400010c 	andi	r16,r16,4
    b520:	80002c26 	beq	r16,zero,b5d4 <___svfiprintf_internal_r+0xcb4>
    b524:	d8802517 	ldw	r2,148(sp)
    b528:	14a1c83a 	sub	r16,r2,r18
    b52c:	0400290e 	bge	zero,r16,b5d4 <___svfiprintf_internal_r+0xcb4>
    b530:	04400404 	movi	r17,16
    b534:	d8801b17 	ldw	r2,108(sp)
    b538:	8c01a70e 	bge	r17,r16,bbd8 <___svfiprintf_internal_r+0x12b8>
    b53c:	014000b4 	movhi	r5,2
    b540:	29611104 	addi	r5,r5,-31676
    b544:	d9402815 	stw	r5,160(sp)
    b548:	050001c4 	movi	r20,7
    b54c:	dd402717 	ldw	r21,156(sp)
    b550:	ddc02317 	ldw	r23,140(sp)
    b554:	00000306 	br	b564 <___svfiprintf_internal_r+0xc44>
    b558:	843ffc04 	addi	r16,r16,-16
    b55c:	42000204 	addi	r8,r8,8
    b560:	8c00130e 	bge	r17,r16,b5b0 <___svfiprintf_internal_r+0xc90>
    b564:	010000b4 	movhi	r4,2
    b568:	18c00404 	addi	r3,r3,16
    b56c:	10800044 	addi	r2,r2,1
    b570:	21211104 	addi	r4,r4,-31676
    b574:	41000015 	stw	r4,0(r8)
    b578:	44400115 	stw	r17,4(r8)
    b57c:	d8c01c15 	stw	r3,112(sp)
    b580:	d8801b15 	stw	r2,108(sp)
    b584:	a0bff40e 	bge	r20,r2,b558 <__alt_mem_Onchip_SRAM+0xf800b558>
    b588:	d9801a04 	addi	r6,sp,104
    b58c:	b80b883a 	mov	r5,r23
    b590:	a809883a 	mov	r4,r21
    b594:	000a7500 	call	a750 <__ssprint_r>
    b598:	1000211e 	bne	r2,zero,b620 <___svfiprintf_internal_r+0xd00>
    b59c:	843ffc04 	addi	r16,r16,-16
    b5a0:	d8c01c17 	ldw	r3,112(sp)
    b5a4:	d8801b17 	ldw	r2,108(sp)
    b5a8:	d811883a 	mov	r8,sp
    b5ac:	8c3fed16 	blt	r17,r16,b564 <__alt_mem_Onchip_SRAM+0xf800b564>
    b5b0:	d9402817 	ldw	r5,160(sp)
    b5b4:	1c07883a 	add	r3,r3,r16
    b5b8:	10800044 	addi	r2,r2,1
    b5bc:	41400015 	stw	r5,0(r8)
    b5c0:	44000115 	stw	r16,4(r8)
    b5c4:	d8c01c15 	stw	r3,112(sp)
    b5c8:	d8801b15 	stw	r2,108(sp)
    b5cc:	010001c4 	movi	r4,7
    b5d0:	2080b516 	blt	r4,r2,b8a8 <___svfiprintf_internal_r+0xf88>
    b5d4:	d8802517 	ldw	r2,148(sp)
    b5d8:	1480010e 	bge	r2,r18,b5e0 <___svfiprintf_internal_r+0xcc0>
    b5dc:	9005883a 	mov	r2,r18
    b5e0:	d9002617 	ldw	r4,152(sp)
    b5e4:	2089883a 	add	r4,r4,r2
    b5e8:	d9002615 	stw	r4,152(sp)
    b5ec:	18005a1e 	bne	r3,zero,b758 <___svfiprintf_internal_r+0xe38>
    b5f0:	98800007 	ldb	r2,0(r19)
    b5f4:	d8001b15 	stw	zero,108(sp)
    b5f8:	d811883a 	mov	r8,sp
    b5fc:	103cec1e 	bne	r2,zero,a9b0 <__alt_mem_Onchip_SRAM+0xf800a9b0>
    b600:	9825883a 	mov	r18,r19
    b604:	003d0206 	br	aa10 <__alt_mem_Onchip_SRAM+0xf800aa10>
    b608:	d8801c17 	ldw	r2,112(sp)
    b60c:	10000426 	beq	r2,zero,b620 <___svfiprintf_internal_r+0xd00>
    b610:	d9402317 	ldw	r5,140(sp)
    b614:	d9002717 	ldw	r4,156(sp)
    b618:	d9801a04 	addi	r6,sp,104
    b61c:	000a7500 	call	a750 <__ssprint_r>
    b620:	d9402317 	ldw	r5,140(sp)
    b624:	d8802617 	ldw	r2,152(sp)
    b628:	28c0030b 	ldhu	r3,12(r5)
    b62c:	18c0100c 	andi	r3,r3,64
    b630:	18015c1e 	bne	r3,zero,bba4 <___svfiprintf_internal_r+0x1284>
    b634:	dfc03717 	ldw	ra,220(sp)
    b638:	df003617 	ldw	fp,216(sp)
    b63c:	ddc03517 	ldw	r23,212(sp)
    b640:	dd803417 	ldw	r22,208(sp)
    b644:	dd403317 	ldw	r21,204(sp)
    b648:	dd003217 	ldw	r20,200(sp)
    b64c:	dcc03117 	ldw	r19,196(sp)
    b650:	dc803017 	ldw	r18,192(sp)
    b654:	dc402f17 	ldw	r17,188(sp)
    b658:	dc002e17 	ldw	r16,184(sp)
    b65c:	dec03804 	addi	sp,sp,224
    b660:	f800283a 	ret
    b664:	d9002517 	ldw	r4,148(sp)
    b668:	24afc83a 	sub	r23,r4,r18
    b66c:	05ff6e0e 	bge	zero,r23,b428 <__alt_mem_Onchip_SRAM+0xf800b428>
    b670:	07000404 	movi	fp,16
    b674:	e5c15c0e 	bge	fp,r23,bbe8 <___svfiprintf_internal_r+0x12c8>
    b678:	010000b4 	movhi	r4,2
    b67c:	21210d04 	addi	r4,r4,-31692
    b680:	dc002215 	stw	r16,136(sp)
    b684:	dc402815 	stw	r17,160(sp)
    b688:	d9002115 	stw	r4,132(sp)
    b68c:	b823883a 	mov	r17,r23
    b690:	054001c4 	movi	r21,7
    b694:	982f883a 	mov	r23,r19
    b698:	dc002717 	ldw	r16,156(sp)
    b69c:	9027883a 	mov	r19,r18
    b6a0:	dc802317 	ldw	r18,140(sp)
    b6a4:	00000306 	br	b6b4 <___svfiprintf_internal_r+0xd94>
    b6a8:	8c7ffc04 	addi	r17,r17,-16
    b6ac:	42000204 	addi	r8,r8,8
    b6b0:	e440110e 	bge	fp,r17,b6f8 <___svfiprintf_internal_r+0xdd8>
    b6b4:	18c00404 	addi	r3,r3,16
    b6b8:	10800044 	addi	r2,r2,1
    b6bc:	45800015 	stw	r22,0(r8)
    b6c0:	47000115 	stw	fp,4(r8)
    b6c4:	d8c01c15 	stw	r3,112(sp)
    b6c8:	d8801b15 	stw	r2,108(sp)
    b6cc:	a8bff60e 	bge	r21,r2,b6a8 <__alt_mem_Onchip_SRAM+0xf800b6a8>
    b6d0:	d9801a04 	addi	r6,sp,104
    b6d4:	900b883a 	mov	r5,r18
    b6d8:	8009883a 	mov	r4,r16
    b6dc:	000a7500 	call	a750 <__ssprint_r>
    b6e0:	103fcf1e 	bne	r2,zero,b620 <__alt_mem_Onchip_SRAM+0xf800b620>
    b6e4:	8c7ffc04 	addi	r17,r17,-16
    b6e8:	d8c01c17 	ldw	r3,112(sp)
    b6ec:	d8801b17 	ldw	r2,108(sp)
    b6f0:	d811883a 	mov	r8,sp
    b6f4:	e47fef16 	blt	fp,r17,b6b4 <__alt_mem_Onchip_SRAM+0xf800b6b4>
    b6f8:	9825883a 	mov	r18,r19
    b6fc:	dc002217 	ldw	r16,136(sp)
    b700:	b827883a 	mov	r19,r23
    b704:	882f883a 	mov	r23,r17
    b708:	dc402817 	ldw	r17,160(sp)
    b70c:	d9402117 	ldw	r5,132(sp)
    b710:	1dc7883a 	add	r3,r3,r23
    b714:	10800044 	addi	r2,r2,1
    b718:	41400015 	stw	r5,0(r8)
    b71c:	45c00115 	stw	r23,4(r8)
    b720:	d8c01c15 	stw	r3,112(sp)
    b724:	d8801b15 	stw	r2,108(sp)
    b728:	010001c4 	movi	r4,7
    b72c:	2080b716 	blt	r4,r2,ba0c <___svfiprintf_internal_r+0x10ec>
    b730:	42000204 	addi	r8,r8,8
    b734:	003f3c06 	br	b428 <__alt_mem_Onchip_SRAM+0xf800b428>
    b738:	d9402317 	ldw	r5,140(sp)
    b73c:	d9002717 	ldw	r4,156(sp)
    b740:	d9801a04 	addi	r6,sp,104
    b744:	000a7500 	call	a750 <__ssprint_r>
    b748:	103fb51e 	bne	r2,zero,b620 <__alt_mem_Onchip_SRAM+0xf800b620>
    b74c:	d8c01c17 	ldw	r3,112(sp)
    b750:	d811883a 	mov	r8,sp
    b754:	003f7106 	br	b51c <__alt_mem_Onchip_SRAM+0xf800b51c>
    b758:	d9402317 	ldw	r5,140(sp)
    b75c:	d9002717 	ldw	r4,156(sp)
    b760:	d9801a04 	addi	r6,sp,104
    b764:	000a7500 	call	a750 <__ssprint_r>
    b768:	103fa126 	beq	r2,zero,b5f0 <__alt_mem_Onchip_SRAM+0xf800b5f0>
    b76c:	003fac06 	br	b620 <__alt_mem_Onchip_SRAM+0xf800b620>
    b770:	d9402317 	ldw	r5,140(sp)
    b774:	d9002717 	ldw	r4,156(sp)
    b778:	d9801a04 	addi	r6,sp,104
    b77c:	000a7500 	call	a750 <__ssprint_r>
    b780:	103fa71e 	bne	r2,zero,b620 <__alt_mem_Onchip_SRAM+0xf800b620>
    b784:	d811883a 	mov	r8,sp
    b788:	003c9e06 	br	aa04 <__alt_mem_Onchip_SRAM+0xf800aa04>
    b78c:	d9402317 	ldw	r5,140(sp)
    b790:	d9002717 	ldw	r4,156(sp)
    b794:	d9801a04 	addi	r6,sp,104
    b798:	000a7500 	call	a750 <__ssprint_r>
    b79c:	103fa01e 	bne	r2,zero,b620 <__alt_mem_Onchip_SRAM+0xf800b620>
    b7a0:	d8c01c17 	ldw	r3,112(sp)
    b7a4:	d8801b17 	ldw	r2,108(sp)
    b7a8:	d811883a 	mov	r8,sp
    b7ac:	003f5206 	br	b4f8 <__alt_mem_Onchip_SRAM+0xf800b4f8>
    b7b0:	d9402317 	ldw	r5,140(sp)
    b7b4:	d9002717 	ldw	r4,156(sp)
    b7b8:	d9801a04 	addi	r6,sp,104
    b7bc:	000a7500 	call	a750 <__ssprint_r>
    b7c0:	103f971e 	bne	r2,zero,b620 <__alt_mem_Onchip_SRAM+0xf800b620>
    b7c4:	d8c01c17 	ldw	r3,112(sp)
    b7c8:	d8801b17 	ldw	r2,108(sp)
    b7cc:	d811883a 	mov	r8,sp
    b7d0:	003f0506 	br	b3e8 <__alt_mem_Onchip_SRAM+0xf800b3e8>
    b7d4:	d9402317 	ldw	r5,140(sp)
    b7d8:	d9002717 	ldw	r4,156(sp)
    b7dc:	d9801a04 	addi	r6,sp,104
    b7e0:	000a7500 	call	a750 <__ssprint_r>
    b7e4:	103f8e1e 	bne	r2,zero,b620 <__alt_mem_Onchip_SRAM+0xf800b620>
    b7e8:	d8c01c17 	ldw	r3,112(sp)
    b7ec:	d8801b17 	ldw	r2,108(sp)
    b7f0:	d811883a 	mov	r8,sp
    b7f4:	003f0906 	br	b41c <__alt_mem_Onchip_SRAM+0xf800b41c>
    b7f8:	d9402017 	ldw	r5,128(sp)
    b7fc:	d8001d85 	stb	zero,118(sp)
    b800:	28007716 	blt	r5,zero,b9e0 <___svfiprintf_internal_r+0x10c0>
    b804:	00ffdfc4 	movi	r3,-129
    b808:	9504b03a 	or	r2,r18,r20
    b80c:	80e0703a 	and	r16,r16,r3
    b810:	103d3926 	beq	r2,zero,acf8 <__alt_mem_Onchip_SRAM+0xf800acf8>
    b814:	002b883a 	mov	r21,zero
    b818:	003d3c06 	br	ad0c <__alt_mem_Onchip_SRAM+0xf800ad0c>
    b81c:	d9402317 	ldw	r5,140(sp)
    b820:	d9002717 	ldw	r4,156(sp)
    b824:	d9801a04 	addi	r6,sp,104
    b828:	000a7500 	call	a750 <__ssprint_r>
    b82c:	103f7c1e 	bne	r2,zero,b620 <__alt_mem_Onchip_SRAM+0xf800b620>
    b830:	d8c01c17 	ldw	r3,112(sp)
    b834:	d8801b17 	ldw	r2,108(sp)
    b838:	d811883a 	mov	r8,sp
    b83c:	003edd06 	br	b3b4 <__alt_mem_Onchip_SRAM+0xf800b3b4>
    b840:	8080100c 	andi	r2,r16,64
    b844:	d8001d85 	stb	zero,118(sp)
    b848:	10008426 	beq	r2,zero,ba5c <___svfiprintf_internal_r+0x113c>
    b84c:	d9402417 	ldw	r5,144(sp)
    b850:	d8c02017 	ldw	r3,128(sp)
    b854:	0029883a 	mov	r20,zero
    b858:	28800104 	addi	r2,r5,4
    b85c:	2c80000b 	ldhu	r18,0(r5)
    b860:	183eab0e 	bge	r3,zero,b310 <__alt_mem_Onchip_SRAM+0xf800b310>
    b864:	d8802415 	stw	r2,144(sp)
    b868:	002b883a 	mov	r21,zero
    b86c:	9504b03a 	or	r2,r18,r20
    b870:	103e171e 	bne	r2,zero,b0d0 <__alt_mem_Onchip_SRAM+0xf800b0d0>
    b874:	00800044 	movi	r2,1
    b878:	10803fcc 	andi	r2,r2,255
    b87c:	00c00044 	movi	r3,1
    b880:	10c05c26 	beq	r2,r3,b9f4 <___svfiprintf_internal_r+0x10d4>
    b884:	00c00084 	movi	r3,2
    b888:	10fd1e26 	beq	r2,r3,ad04 <__alt_mem_Onchip_SRAM+0xf800ad04>
    b88c:	003ec406 	br	b3a0 <__alt_mem_Onchip_SRAM+0xf800b3a0>
    b890:	d9401e17 	ldw	r5,120(sp)
    b894:	2c69c83a 	sub	r20,r5,r17
    b898:	003d4506 	br	adb0 <__alt_mem_Onchip_SRAM+0xf800adb0>
    b89c:	d8802415 	stw	r2,144(sp)
    b8a0:	98c00007 	ldb	r3,0(r19)
    b8a4:	003c6a06 	br	aa50 <__alt_mem_Onchip_SRAM+0xf800aa50>
    b8a8:	d9402317 	ldw	r5,140(sp)
    b8ac:	d9002717 	ldw	r4,156(sp)
    b8b0:	d9801a04 	addi	r6,sp,104
    b8b4:	000a7500 	call	a750 <__ssprint_r>
    b8b8:	103f591e 	bne	r2,zero,b620 <__alt_mem_Onchip_SRAM+0xf800b620>
    b8bc:	d8c01c17 	ldw	r3,112(sp)
    b8c0:	003f4406 	br	b5d4 <__alt_mem_Onchip_SRAM+0xf800b5d4>
    b8c4:	014000b4 	movhi	r5,2
    b8c8:	2960a404 	addi	r5,r5,-32112
    b8cc:	d9402915 	stw	r5,164(sp)
    b8d0:	003d0906 	br	acf8 <__alt_mem_Onchip_SRAM+0xf800acf8>
    b8d4:	d8c02417 	ldw	r3,144(sp)
    b8d8:	d9002617 	ldw	r4,152(sp)
    b8dc:	d9402417 	ldw	r5,144(sp)
    b8e0:	18800017 	ldw	r2,0(r3)
    b8e4:	2007d7fa 	srai	r3,r4,31
    b8e8:	29400104 	addi	r5,r5,4
    b8ec:	d9402415 	stw	r5,144(sp)
    b8f0:	11000015 	stw	r4,0(r2)
    b8f4:	10c00115 	stw	r3,4(r2)
    b8f8:	003c2b06 	br	a9a8 <__alt_mem_Onchip_SRAM+0xf800a9a8>
    b8fc:	d8c01d45 	stb	r3,117(sp)
    b900:	d8c02017 	ldw	r3,128(sp)
    b904:	00800c04 	movi	r2,48
    b908:	d8801d05 	stb	r2,116(sp)
    b90c:	d8001d85 	stb	zero,118(sp)
    b910:	80800094 	ori	r2,r16,2
    b914:	1800ac16 	blt	r3,zero,bbc8 <___svfiprintf_internal_r+0x12a8>
    b918:	00bfdfc4 	movi	r2,-129
    b91c:	80a0703a 	and	r16,r16,r2
    b920:	84000094 	ori	r16,r16,2
    b924:	002b883a 	mov	r21,zero
    b928:	003cf806 	br	ad0c <__alt_mem_Onchip_SRAM+0xf800ad0c>
    b92c:	98c00007 	ldb	r3,0(r19)
    b930:	003c4706 	br	aa50 <__alt_mem_Onchip_SRAM+0xf800aa50>
    b934:	d9402417 	ldw	r5,144(sp)
    b938:	2c800017 	ldw	r18,0(r5)
    b93c:	29400104 	addi	r5,r5,4
    b940:	d9402415 	stw	r5,144(sp)
    b944:	9029d7fa 	srai	r20,r18,31
    b948:	a005883a 	mov	r2,r20
    b94c:	003dd806 	br	b0b0 <__alt_mem_Onchip_SRAM+0xf800b0b0>
    b950:	d9402417 	ldw	r5,144(sp)
    b954:	0029883a 	mov	r20,zero
    b958:	2c800017 	ldw	r18,0(r5)
    b95c:	29400104 	addi	r5,r5,4
    b960:	d9402415 	stw	r5,144(sp)
    b964:	003cdb06 	br	acd4 <__alt_mem_Onchip_SRAM+0xf800acd4>
    b968:	8080100c 	andi	r2,r16,64
    b96c:	d8001d85 	stb	zero,118(sp)
    b970:	10003326 	beq	r2,zero,ba40 <___svfiprintf_internal_r+0x1120>
    b974:	d9002417 	ldw	r4,144(sp)
    b978:	d9402017 	ldw	r5,128(sp)
    b97c:	0029883a 	mov	r20,zero
    b980:	20800104 	addi	r2,r4,4
    b984:	2480000b 	ldhu	r18,0(r4)
    b988:	283e7e0e 	bge	r5,zero,b384 <__alt_mem_Onchip_SRAM+0xf800b384>
    b98c:	9506b03a 	or	r3,r18,r20
    b990:	d8802415 	stw	r2,144(sp)
    b994:	183d271e 	bne	r3,zero,ae34 <__alt_mem_Onchip_SRAM+0xf800ae34>
    b998:	002b883a 	mov	r21,zero
    b99c:	0005883a 	mov	r2,zero
    b9a0:	003fb506 	br	b878 <__alt_mem_Onchip_SRAM+0xf800b878>
    b9a4:	98c00043 	ldbu	r3,1(r19)
    b9a8:	8c400814 	ori	r17,r17,32
    b9ac:	9cc00044 	addi	r19,r19,1
    b9b0:	18c03fcc 	andi	r3,r3,255
    b9b4:	18c0201c 	xori	r3,r3,128
    b9b8:	18ffe004 	addi	r3,r3,-128
    b9bc:	003c2406 	br	aa50 <__alt_mem_Onchip_SRAM+0xf800aa50>
    b9c0:	d8c02415 	stw	r3,144(sp)
    b9c4:	002b883a 	mov	r21,zero
    b9c8:	003fa806 	br	b86c <__alt_mem_Onchip_SRAM+0xf800b86c>
    b9cc:	010000b4 	movhi	r4,2
    b9d0:	2120a404 	addi	r4,r4,-32112
    b9d4:	d9002915 	stw	r4,164(sp)
    b9d8:	d8c02415 	stw	r3,144(sp)
    b9dc:	1021883a 	mov	r16,r2
    b9e0:	9504b03a 	or	r2,r18,r20
    b9e4:	103f8b1e 	bne	r2,zero,b814 <__alt_mem_Onchip_SRAM+0xf800b814>
    b9e8:	002b883a 	mov	r21,zero
    b9ec:	00800084 	movi	r2,2
    b9f0:	003fa106 	br	b878 <__alt_mem_Onchip_SRAM+0xf800b878>
    b9f4:	0025883a 	mov	r18,zero
    b9f8:	94800c04 	addi	r18,r18,48
    b9fc:	dc8019c5 	stb	r18,103(sp)
    ba00:	dd002c17 	ldw	r20,176(sp)
    ba04:	dc4019c4 	addi	r17,sp,103
    ba08:	003ce906 	br	adb0 <__alt_mem_Onchip_SRAM+0xf800adb0>
    ba0c:	d9402317 	ldw	r5,140(sp)
    ba10:	d9002717 	ldw	r4,156(sp)
    ba14:	d9801a04 	addi	r6,sp,104
    ba18:	000a7500 	call	a750 <__ssprint_r>
    ba1c:	103f001e 	bne	r2,zero,b620 <__alt_mem_Onchip_SRAM+0xf800b620>
    ba20:	d8c01c17 	ldw	r3,112(sp)
    ba24:	d8801b17 	ldw	r2,108(sp)
    ba28:	d811883a 	mov	r8,sp
    ba2c:	003e7e06 	br	b428 <__alt_mem_Onchip_SRAM+0xf800b428>
    ba30:	014000b4 	movhi	r5,2
    ba34:	29610d04 	addi	r5,r5,-31692
    ba38:	d9402115 	stw	r5,132(sp)
    ba3c:	003ea406 	br	b4d0 <__alt_mem_Onchip_SRAM+0xf800b4d0>
    ba40:	d8c02417 	ldw	r3,144(sp)
    ba44:	d9002017 	ldw	r4,128(sp)
    ba48:	0029883a 	mov	r20,zero
    ba4c:	18800104 	addi	r2,r3,4
    ba50:	1c800017 	ldw	r18,0(r3)
    ba54:	203e4b0e 	bge	r4,zero,b384 <__alt_mem_Onchip_SRAM+0xf800b384>
    ba58:	003fcc06 	br	b98c <__alt_mem_Onchip_SRAM+0xf800b98c>
    ba5c:	d9002417 	ldw	r4,144(sp)
    ba60:	d9402017 	ldw	r5,128(sp)
    ba64:	0029883a 	mov	r20,zero
    ba68:	20800104 	addi	r2,r4,4
    ba6c:	24800017 	ldw	r18,0(r4)
    ba70:	283e270e 	bge	r5,zero,b310 <__alt_mem_Onchip_SRAM+0xf800b310>
    ba74:	003f7b06 	br	b864 <__alt_mem_Onchip_SRAM+0xf800b864>
    ba78:	8400100c 	andi	r16,r16,64
    ba7c:	80003326 	beq	r16,zero,bb4c <___svfiprintf_internal_r+0x122c>
    ba80:	d9402417 	ldw	r5,144(sp)
    ba84:	d8c02617 	ldw	r3,152(sp)
    ba88:	28800017 	ldw	r2,0(r5)
    ba8c:	29400104 	addi	r5,r5,4
    ba90:	d9402415 	stw	r5,144(sp)
    ba94:	10c0000d 	sth	r3,0(r2)
    ba98:	003bc306 	br	a9a8 <__alt_mem_Onchip_SRAM+0xf800a9a8>
    ba9c:	d9002417 	ldw	r4,144(sp)
    baa0:	0029883a 	mov	r20,zero
    baa4:	24800017 	ldw	r18,0(r4)
    baa8:	21000104 	addi	r4,r4,4
    baac:	d9002415 	stw	r4,144(sp)
    bab0:	003c8806 	br	acd4 <__alt_mem_Onchip_SRAM+0xf800acd4>
    bab4:	d8c02417 	ldw	r3,144(sp)
    bab8:	1c800017 	ldw	r18,0(r3)
    babc:	18c00104 	addi	r3,r3,4
    bac0:	d8c02415 	stw	r3,144(sp)
    bac4:	9029d7fa 	srai	r20,r18,31
    bac8:	a005883a 	mov	r2,r20
    bacc:	003d7806 	br	b0b0 <__alt_mem_Onchip_SRAM+0xf800b0b0>
    bad0:	8809883a 	mov	r4,r17
    bad4:	da002d15 	stw	r8,180(sp)
    bad8:	00020540 	call	2054 <strlen>
    badc:	1029883a 	mov	r20,r2
    bae0:	dd401d83 	ldbu	r21,118(sp)
    bae4:	ddc02415 	stw	r23,144(sp)
    bae8:	d8002015 	stw	zero,128(sp)
    baec:	da002d17 	ldw	r8,180(sp)
    baf0:	003caf06 	br	adb0 <__alt_mem_Onchip_SRAM+0xf800adb0>
    baf4:	013fffc4 	movi	r4,-1
    baf8:	003df206 	br	b2c4 <__alt_mem_Onchip_SRAM+0xf800b2c4>
    bafc:	dd002017 	ldw	r20,128(sp)
    bb00:	00800184 	movi	r2,6
    bb04:	1500012e 	bgeu	r2,r20,bb0c <___svfiprintf_internal_r+0x11ec>
    bb08:	1029883a 	mov	r20,r2
    bb0c:	a025883a 	mov	r18,r20
    bb10:	a0004116 	blt	r20,zero,bc18 <___svfiprintf_internal_r+0x12f8>
    bb14:	044000b4 	movhi	r17,2
    bb18:	ddc02415 	stw	r23,144(sp)
    bb1c:	8c60a904 	addi	r17,r17,-32092
    bb20:	003ce806 	br	aec4 <__alt_mem_Onchip_SRAM+0xf800aec4>
    bb24:	04001004 	movi	r16,64
    bb28:	800b883a 	mov	r5,r16
    bb2c:	00015b80 	call	15b8 <_malloc_r>
    bb30:	d8c02317 	ldw	r3,140(sp)
    bb34:	18800015 	stw	r2,0(r3)
    bb38:	18800415 	stw	r2,16(r3)
    bb3c:	10004d26 	beq	r2,zero,bc74 <___svfiprintf_internal_r+0x1354>
    bb40:	d9402317 	ldw	r5,140(sp)
    bb44:	2c000515 	stw	r16,20(r5)
    bb48:	003b8906 	br	a970 <__alt_mem_Onchip_SRAM+0xf800a970>
    bb4c:	d9002417 	ldw	r4,144(sp)
    bb50:	d9402617 	ldw	r5,152(sp)
    bb54:	20800017 	ldw	r2,0(r4)
    bb58:	21000104 	addi	r4,r4,4
    bb5c:	d9002415 	stw	r4,144(sp)
    bb60:	11400015 	stw	r5,0(r2)
    bb64:	003b9006 	br	a9a8 <__alt_mem_Onchip_SRAM+0xf800a9a8>
    bb68:	8080004c 	andi	r2,r16,1
    bb6c:	002b883a 	mov	r21,zero
    bb70:	10000526 	beq	r2,zero,bb88 <___svfiprintf_internal_r+0x1268>
    bb74:	00800c04 	movi	r2,48
    bb78:	d88019c5 	stb	r2,103(sp)
    bb7c:	dd002c17 	ldw	r20,176(sp)
    bb80:	dc4019c4 	addi	r17,sp,103
    bb84:	003c8a06 	br	adb0 <__alt_mem_Onchip_SRAM+0xf800adb0>
    bb88:	0029883a 	mov	r20,zero
    bb8c:	dc401a04 	addi	r17,sp,104
    bb90:	003c8706 	br	adb0 <__alt_mem_Onchip_SRAM+0xf800adb0>
    bb94:	014000b4 	movhi	r5,2
    bb98:	29611104 	addi	r5,r5,-31676
    bb9c:	d9402815 	stw	r5,160(sp)
    bba0:	003cff06 	br	afa0 <__alt_mem_Onchip_SRAM+0xf800afa0>
    bba4:	00bfffc4 	movi	r2,-1
    bba8:	003ea206 	br	b634 <__alt_mem_Onchip_SRAM+0xf800b634>
    bbac:	00800044 	movi	r2,1
    bbb0:	10803fcc 	andi	r2,r2,255
    bbb4:	00c00044 	movi	r3,1
    bbb8:	10fd4526 	beq	r2,r3,b0d0 <__alt_mem_Onchip_SRAM+0xf800b0d0>
    bbbc:	00c00084 	movi	r3,2
    bbc0:	10fc5226 	beq	r2,r3,ad0c <__alt_mem_Onchip_SRAM+0xf800ad0c>
    bbc4:	003c9c06 	br	ae38 <__alt_mem_Onchip_SRAM+0xf800ae38>
    bbc8:	1021883a 	mov	r16,r2
    bbcc:	002b883a 	mov	r21,zero
    bbd0:	00800084 	movi	r2,2
    bbd4:	003ff606 	br	bbb0 <__alt_mem_Onchip_SRAM+0xf800bbb0>
    bbd8:	010000b4 	movhi	r4,2
    bbdc:	21211104 	addi	r4,r4,-31676
    bbe0:	d9002815 	stw	r4,160(sp)
    bbe4:	003e7206 	br	b5b0 <__alt_mem_Onchip_SRAM+0xf800b5b0>
    bbe8:	014000b4 	movhi	r5,2
    bbec:	29610d04 	addi	r5,r5,-31692
    bbf0:	d9402115 	stw	r5,132(sp)
    bbf4:	003ec506 	br	b70c <__alt_mem_Onchip_SRAM+0xf800b70c>
    bbf8:	e027883a 	mov	r19,fp
    bbfc:	d8002015 	stw	zero,128(sp)
    bc00:	003b9406 	br	aa54 <__alt_mem_Onchip_SRAM+0xf800aa54>
    bc04:	dd002017 	ldw	r20,128(sp)
    bc08:	dd401d83 	ldbu	r21,118(sp)
    bc0c:	ddc02415 	stw	r23,144(sp)
    bc10:	d8002015 	stw	zero,128(sp)
    bc14:	003c6606 	br	adb0 <__alt_mem_Onchip_SRAM+0xf800adb0>
    bc18:	0025883a 	mov	r18,zero
    bc1c:	003fbd06 	br	bb14 <__alt_mem_Onchip_SRAM+0xf800bb14>
    bc20:	d9402417 	ldw	r5,144(sp)
    bc24:	d8c02417 	ldw	r3,144(sp)
    bc28:	29400017 	ldw	r5,0(r5)
    bc2c:	19000104 	addi	r4,r3,4
    bc30:	d9002415 	stw	r4,144(sp)
    bc34:	d9402015 	stw	r5,128(sp)
    bc38:	98c00043 	ldbu	r3,1(r19)
    bc3c:	e027883a 	mov	r19,fp
    bc40:	283f5b0e 	bge	r5,zero,b9b0 <__alt_mem_Onchip_SRAM+0xf800b9b0>
    bc44:	18c03fcc 	andi	r3,r3,255
    bc48:	013fffc4 	movi	r4,-1
    bc4c:	18c0201c 	xori	r3,r3,128
    bc50:	d9002015 	stw	r4,128(sp)
    bc54:	18ffe004 	addi	r3,r3,-128
    bc58:	003b7d06 	br	aa50 <__alt_mem_Onchip_SRAM+0xf800aa50>
    bc5c:	dd401d85 	stb	r21,118(sp)
    bc60:	003cf306 	br	b030 <__alt_mem_Onchip_SRAM+0xf800b030>
    bc64:	dd401d85 	stb	r21,118(sp)
    bc68:	003d4e06 	br	b1a4 <__alt_mem_Onchip_SRAM+0xf800b1a4>
    bc6c:	dd401d85 	stb	r21,118(sp)
    bc70:	003c0e06 	br	acac <__alt_mem_Onchip_SRAM+0xf800acac>
    bc74:	d9002717 	ldw	r4,156(sp)
    bc78:	00800304 	movi	r2,12
    bc7c:	20800015 	stw	r2,0(r4)
    bc80:	00bfffc4 	movi	r2,-1
    bc84:	003e6b06 	br	b634 <__alt_mem_Onchip_SRAM+0xf800b634>
    bc88:	dd401d85 	stb	r21,118(sp)
    bc8c:	003d0006 	br	b090 <__alt_mem_Onchip_SRAM+0xf800b090>
    bc90:	dd401d85 	stb	r21,118(sp)
    bc94:	003d7106 	br	b25c <__alt_mem_Onchip_SRAM+0xf800b25c>
    bc98:	dd401d85 	stb	r21,118(sp)
    bc9c:	003c5706 	br	adfc <__alt_mem_Onchip_SRAM+0xf800adfc>
    bca0:	dd401d85 	stb	r21,118(sp)
    bca4:	003c2e06 	br	ad60 <__alt_mem_Onchip_SRAM+0xf800ad60>
    bca8:	dd401d85 	stb	r21,118(sp)
    bcac:	003d8c06 	br	b2e0 <__alt_mem_Onchip_SRAM+0xf800b2e0>
    bcb0:	dd401d85 	stb	r21,118(sp)
    bcb4:	003da706 	br	b354 <__alt_mem_Onchip_SRAM+0xf800b354>
    bcb8:	dd401d85 	stb	r21,118(sp)
    bcbc:	003cc806 	br	afe0 <__alt_mem_Onchip_SRAM+0xf800afe0>

0000bcc0 <__sprint_r.part.0>:
    bcc0:	28801917 	ldw	r2,100(r5)
    bcc4:	defff604 	addi	sp,sp,-40
    bcc8:	dd400515 	stw	r21,20(sp)
    bccc:	dfc00915 	stw	ra,36(sp)
    bcd0:	df000815 	stw	fp,32(sp)
    bcd4:	ddc00715 	stw	r23,28(sp)
    bcd8:	dd800615 	stw	r22,24(sp)
    bcdc:	dd000415 	stw	r20,16(sp)
    bce0:	dcc00315 	stw	r19,12(sp)
    bce4:	dc800215 	stw	r18,8(sp)
    bce8:	dc400115 	stw	r17,4(sp)
    bcec:	dc000015 	stw	r16,0(sp)
    bcf0:	1088000c 	andi	r2,r2,8192
    bcf4:	302b883a 	mov	r21,r6
    bcf8:	10002e26 	beq	r2,zero,bdb4 <__sprint_r.part.0+0xf4>
    bcfc:	30800217 	ldw	r2,8(r6)
    bd00:	35800017 	ldw	r22,0(r6)
    bd04:	10002926 	beq	r2,zero,bdac <__sprint_r.part.0+0xec>
    bd08:	2827883a 	mov	r19,r5
    bd0c:	2029883a 	mov	r20,r4
    bd10:	b5c00104 	addi	r23,r22,4
    bd14:	04bfffc4 	movi	r18,-1
    bd18:	bc400017 	ldw	r17,0(r23)
    bd1c:	b4000017 	ldw	r16,0(r22)
    bd20:	0039883a 	mov	fp,zero
    bd24:	8822d0ba 	srli	r17,r17,2
    bd28:	8800031e 	bne	r17,zero,bd38 <__sprint_r.part.0+0x78>
    bd2c:	00001806 	br	bd90 <__sprint_r.part.0+0xd0>
    bd30:	84000104 	addi	r16,r16,4
    bd34:	8f001526 	beq	r17,fp,bd8c <__sprint_r.part.0+0xcc>
    bd38:	81400017 	ldw	r5,0(r16)
    bd3c:	980d883a 	mov	r6,r19
    bd40:	a009883a 	mov	r4,r20
    bd44:	000d7b00 	call	d7b0 <_fputwc_r>
    bd48:	e7000044 	addi	fp,fp,1
    bd4c:	14bff81e 	bne	r2,r18,bd30 <__alt_mem_Onchip_SRAM+0xf800bd30>
    bd50:	9005883a 	mov	r2,r18
    bd54:	a8000215 	stw	zero,8(r21)
    bd58:	a8000115 	stw	zero,4(r21)
    bd5c:	dfc00917 	ldw	ra,36(sp)
    bd60:	df000817 	ldw	fp,32(sp)
    bd64:	ddc00717 	ldw	r23,28(sp)
    bd68:	dd800617 	ldw	r22,24(sp)
    bd6c:	dd400517 	ldw	r21,20(sp)
    bd70:	dd000417 	ldw	r20,16(sp)
    bd74:	dcc00317 	ldw	r19,12(sp)
    bd78:	dc800217 	ldw	r18,8(sp)
    bd7c:	dc400117 	ldw	r17,4(sp)
    bd80:	dc000017 	ldw	r16,0(sp)
    bd84:	dec00a04 	addi	sp,sp,40
    bd88:	f800283a 	ret
    bd8c:	a8800217 	ldw	r2,8(r21)
    bd90:	8c63883a 	add	r17,r17,r17
    bd94:	8c63883a 	add	r17,r17,r17
    bd98:	1445c83a 	sub	r2,r2,r17
    bd9c:	a8800215 	stw	r2,8(r21)
    bda0:	b5800204 	addi	r22,r22,8
    bda4:	bdc00204 	addi	r23,r23,8
    bda8:	103fdb1e 	bne	r2,zero,bd18 <__alt_mem_Onchip_SRAM+0xf800bd18>
    bdac:	0005883a 	mov	r2,zero
    bdb0:	003fe806 	br	bd54 <__alt_mem_Onchip_SRAM+0xf800bd54>
    bdb4:	000d8b00 	call	d8b0 <__sfvwrite_r>
    bdb8:	003fe606 	br	bd54 <__alt_mem_Onchip_SRAM+0xf800bd54>

0000bdbc <__sprint_r>:
    bdbc:	30c00217 	ldw	r3,8(r6)
    bdc0:	18000126 	beq	r3,zero,bdc8 <__sprint_r+0xc>
    bdc4:	000bcc01 	jmpi	bcc0 <__sprint_r.part.0>
    bdc8:	30000115 	stw	zero,4(r6)
    bdcc:	0005883a 	mov	r2,zero
    bdd0:	f800283a 	ret

0000bdd4 <___vfiprintf_internal_r>:
    bdd4:	deffca04 	addi	sp,sp,-216
    bdd8:	dd403115 	stw	r21,196(sp)
    bddc:	dfc03515 	stw	ra,212(sp)
    bde0:	df003415 	stw	fp,208(sp)
    bde4:	ddc03315 	stw	r23,204(sp)
    bde8:	dd803215 	stw	r22,200(sp)
    bdec:	dd003015 	stw	r20,192(sp)
    bdf0:	dcc02f15 	stw	r19,188(sp)
    bdf4:	dc802e15 	stw	r18,184(sp)
    bdf8:	dc402d15 	stw	r17,180(sp)
    bdfc:	dc002c15 	stw	r16,176(sp)
    be00:	d9002115 	stw	r4,132(sp)
    be04:	d9402015 	stw	r5,128(sp)
    be08:	d9c02215 	stw	r7,136(sp)
    be0c:	302b883a 	mov	r21,r6
    be10:	20000226 	beq	r4,zero,be1c <___vfiprintf_internal_r+0x48>
    be14:	20800e17 	ldw	r2,56(r4)
    be18:	1000cf26 	beq	r2,zero,c158 <___vfiprintf_internal_r+0x384>
    be1c:	d8c02017 	ldw	r3,128(sp)
    be20:	1880030b 	ldhu	r2,12(r3)
    be24:	10c8000c 	andi	r3,r2,8192
    be28:	1800071e 	bne	r3,zero,be48 <___vfiprintf_internal_r+0x74>
    be2c:	d9402017 	ldw	r5,128(sp)
    be30:	00f7ffc4 	movi	r3,-8193
    be34:	10880014 	ori	r2,r2,8192
    be38:	29001917 	ldw	r4,100(r5)
    be3c:	2880030d 	sth	r2,12(r5)
    be40:	20c6703a 	and	r3,r4,r3
    be44:	28c01915 	stw	r3,100(r5)
    be48:	10c0020c 	andi	r3,r2,8
    be4c:	1800a526 	beq	r3,zero,c0e4 <___vfiprintf_internal_r+0x310>
    be50:	d9002017 	ldw	r4,128(sp)
    be54:	20c00417 	ldw	r3,16(r4)
    be58:	1800a226 	beq	r3,zero,c0e4 <___vfiprintf_internal_r+0x310>
    be5c:	1080068c 	andi	r2,r2,26
    be60:	00c00284 	movi	r3,10
    be64:	10c0a826 	beq	r2,r3,c108 <___vfiprintf_internal_r+0x334>
    be68:	d9001a04 	addi	r4,sp,104
    be6c:	d94019c4 	addi	r5,sp,103
    be70:	048000b4 	movhi	r18,2
    be74:	2145c83a 	sub	r2,r4,r5
    be78:	94a11504 	addi	r18,r18,-31660
    be7c:	d9001e15 	stw	r4,120(sp)
    be80:	d9401f15 	stw	r5,124(sp)
    be84:	dec01a15 	stw	sp,104(sp)
    be88:	d8001c15 	stw	zero,112(sp)
    be8c:	d8001b15 	stw	zero,108(sp)
    be90:	d811883a 	mov	r8,sp
    be94:	d8002615 	stw	zero,152(sp)
    be98:	d8002415 	stw	zero,144(sp)
    be9c:	d8802815 	stw	r2,160(sp)
    bea0:	a82d883a 	mov	r22,r21
    bea4:	b0800007 	ldb	r2,0(r22)
    bea8:	10040d26 	beq	r2,zero,cee0 <___vfiprintf_internal_r+0x110c>
    beac:	00c00944 	movi	r3,37
    beb0:	b029883a 	mov	r20,r22
    beb4:	10c0021e 	bne	r2,r3,bec0 <___vfiprintf_internal_r+0xec>
    beb8:	00001606 	br	bf14 <___vfiprintf_internal_r+0x140>
    bebc:	10c00326 	beq	r2,r3,becc <___vfiprintf_internal_r+0xf8>
    bec0:	a5000044 	addi	r20,r20,1
    bec4:	a0800007 	ldb	r2,0(r20)
    bec8:	103ffc1e 	bne	r2,zero,bebc <__alt_mem_Onchip_SRAM+0xf800bebc>
    becc:	a5a1c83a 	sub	r16,r20,r22
    bed0:	80001026 	beq	r16,zero,bf14 <___vfiprintf_internal_r+0x140>
    bed4:	d8c01c17 	ldw	r3,112(sp)
    bed8:	d8801b17 	ldw	r2,108(sp)
    bedc:	45800015 	stw	r22,0(r8)
    bee0:	80c7883a 	add	r3,r16,r3
    bee4:	10800044 	addi	r2,r2,1
    bee8:	44000115 	stw	r16,4(r8)
    beec:	d8c01c15 	stw	r3,112(sp)
    bef0:	d8801b15 	stw	r2,108(sp)
    bef4:	010001c4 	movi	r4,7
    bef8:	2080750e 	bge	r4,r2,c0d0 <___vfiprintf_internal_r+0x2fc>
    befc:	1803951e 	bne	r3,zero,cd54 <___vfiprintf_internal_r+0xf80>
    bf00:	d8c02417 	ldw	r3,144(sp)
    bf04:	d8001b15 	stw	zero,108(sp)
    bf08:	d811883a 	mov	r8,sp
    bf0c:	1c07883a 	add	r3,r3,r16
    bf10:	d8c02415 	stw	r3,144(sp)
    bf14:	a0800007 	ldb	r2,0(r20)
    bf18:	1002e026 	beq	r2,zero,ca9c <___vfiprintf_internal_r+0xcc8>
    bf1c:	a5800044 	addi	r22,r20,1
    bf20:	a0c00047 	ldb	r3,1(r20)
    bf24:	d8001d85 	stb	zero,118(sp)
    bf28:	0027883a 	mov	r19,zero
    bf2c:	d8002305 	stb	zero,140(sp)
    bf30:	043fffc4 	movi	r16,-1
    bf34:	d8002515 	stw	zero,148(sp)
    bf38:	0023883a 	mov	r17,zero
    bf3c:	05001604 	movi	r20,88
    bf40:	05400244 	movi	r21,9
    bf44:	402f883a 	mov	r23,r8
    bf48:	b5800044 	addi	r22,r22,1
    bf4c:	18bff804 	addi	r2,r3,-32
    bf50:	a0827736 	bltu	r20,r2,c930 <___vfiprintf_internal_r+0xb5c>
    bf54:	100490ba 	slli	r2,r2,2
    bf58:	01000074 	movhi	r4,1
    bf5c:	212fdb04 	addi	r4,r4,-16532
    bf60:	1105883a 	add	r2,r2,r4
    bf64:	10800017 	ldw	r2,0(r2)
    bf68:	1000683a 	jmp	r2
    bf6c:	0000c630 	cmpltui	zero,zero,792
    bf70:	0000c930 	cmpltui	zero,zero,804
    bf74:	0000c930 	cmpltui	zero,zero,804
    bf78:	0000c64c 	andi	zero,zero,793
    bf7c:	0000c930 	cmpltui	zero,zero,804
    bf80:	0000c930 	cmpltui	zero,zero,804
    bf84:	0000c930 	cmpltui	zero,zero,804
    bf88:	0000c930 	cmpltui	zero,zero,804
    bf8c:	0000c930 	cmpltui	zero,zero,804
    bf90:	0000c930 	cmpltui	zero,zero,804
    bf94:	0000c854 	movui	zero,801
    bf98:	0000c878 	rdprs	zero,zero,801
    bf9c:	0000c930 	cmpltui	zero,zero,804
    bfa0:	0000c170 	cmpltui	zero,zero,773
    bfa4:	0000c88c 	andi	zero,zero,802
    bfa8:	0000c930 	cmpltui	zero,zero,804
    bfac:	0000c658 	cmpnei	zero,zero,793
    bfb0:	0000c664 	muli	zero,zero,793
    bfb4:	0000c664 	muli	zero,zero,793
    bfb8:	0000c664 	muli	zero,zero,793
    bfbc:	0000c664 	muli	zero,zero,793
    bfc0:	0000c664 	muli	zero,zero,793
    bfc4:	0000c664 	muli	zero,zero,793
    bfc8:	0000c664 	muli	zero,zero,793
    bfcc:	0000c664 	muli	zero,zero,793
    bfd0:	0000c664 	muli	zero,zero,793
    bfd4:	0000c930 	cmpltui	zero,zero,804
    bfd8:	0000c930 	cmpltui	zero,zero,804
    bfdc:	0000c930 	cmpltui	zero,zero,804
    bfe0:	0000c930 	cmpltui	zero,zero,804
    bfe4:	0000c930 	cmpltui	zero,zero,804
    bfe8:	0000c930 	cmpltui	zero,zero,804
    bfec:	0000c930 	cmpltui	zero,zero,804
    bff0:	0000c930 	cmpltui	zero,zero,804
    bff4:	0000c930 	cmpltui	zero,zero,804
    bff8:	0000c930 	cmpltui	zero,zero,804
    bffc:	0000c6a4 	muli	zero,zero,794
    c000:	0000c930 	cmpltui	zero,zero,804
    c004:	0000c930 	cmpltui	zero,zero,804
    c008:	0000c930 	cmpltui	zero,zero,804
    c00c:	0000c930 	cmpltui	zero,zero,804
    c010:	0000c930 	cmpltui	zero,zero,804
    c014:	0000c930 	cmpltui	zero,zero,804
    c018:	0000c930 	cmpltui	zero,zero,804
    c01c:	0000c930 	cmpltui	zero,zero,804
    c020:	0000c930 	cmpltui	zero,zero,804
    c024:	0000c930 	cmpltui	zero,zero,804
    c028:	0000c6e0 	cmpeqi	zero,zero,795
    c02c:	0000c930 	cmpltui	zero,zero,804
    c030:	0000c930 	cmpltui	zero,zero,804
    c034:	0000c930 	cmpltui	zero,zero,804
    c038:	0000c930 	cmpltui	zero,zero,804
    c03c:	0000c930 	cmpltui	zero,zero,804
    c040:	0000c73c 	xorhi	zero,zero,796
    c044:	0000c930 	cmpltui	zero,zero,804
    c048:	0000c930 	cmpltui	zero,zero,804
    c04c:	0000c7b0 	cmpltui	zero,zero,798
    c050:	0000c930 	cmpltui	zero,zero,804
    c054:	0000c930 	cmpltui	zero,zero,804
    c058:	0000c930 	cmpltui	zero,zero,804
    c05c:	0000c930 	cmpltui	zero,zero,804
    c060:	0000c930 	cmpltui	zero,zero,804
    c064:	0000c930 	cmpltui	zero,zero,804
    c068:	0000c930 	cmpltui	zero,zero,804
    c06c:	0000c930 	cmpltui	zero,zero,804
    c070:	0000c930 	cmpltui	zero,zero,804
    c074:	0000c930 	cmpltui	zero,zero,804
    c078:	0000c558 	cmpnei	zero,zero,789
    c07c:	0000c588 	cmpgei	zero,zero,790
    c080:	0000c930 	cmpltui	zero,zero,804
    c084:	0000c930 	cmpltui	zero,zero,804
    c088:	0000c930 	cmpltui	zero,zero,804
    c08c:	0000c8d8 	cmpnei	zero,zero,803
    c090:	0000c588 	cmpgei	zero,zero,790
    c094:	0000c930 	cmpltui	zero,zero,804
    c098:	0000c930 	cmpltui	zero,zero,804
    c09c:	0000c430 	cmpltui	zero,zero,784
    c0a0:	0000c930 	cmpltui	zero,zero,804
    c0a4:	0000c444 	movi	zero,785
    c0a8:	0000c47c 	xorhi	zero,zero,785
    c0ac:	0000c17c 	xorhi	zero,zero,773
    c0b0:	0000c424 	muli	zero,zero,784
    c0b4:	0000c930 	cmpltui	zero,zero,804
    c0b8:	0000c7f0 	cmpltui	zero,zero,799
    c0bc:	0000c930 	cmpltui	zero,zero,804
    c0c0:	0000c83c 	xorhi	zero,zero,800
    c0c4:	0000c930 	cmpltui	zero,zero,804
    c0c8:	0000c930 	cmpltui	zero,zero,804
    c0cc:	0000c500 	call	c50 <hex_message+0x1a4>
    c0d0:	42000204 	addi	r8,r8,8
    c0d4:	d8c02417 	ldw	r3,144(sp)
    c0d8:	1c07883a 	add	r3,r3,r16
    c0dc:	d8c02415 	stw	r3,144(sp)
    c0e0:	003f8c06 	br	bf14 <__alt_mem_Onchip_SRAM+0xf800bf14>
    c0e4:	d9402017 	ldw	r5,128(sp)
    c0e8:	d9002117 	ldw	r4,132(sp)
    c0ec:	00067ac0 	call	67ac <__swsetup_r>
    c0f0:	1003c11e 	bne	r2,zero,cff8 <___vfiprintf_internal_r+0x1224>
    c0f4:	d9402017 	ldw	r5,128(sp)
    c0f8:	00c00284 	movi	r3,10
    c0fc:	2880030b 	ldhu	r2,12(r5)
    c100:	1080068c 	andi	r2,r2,26
    c104:	10ff581e 	bne	r2,r3,be68 <__alt_mem_Onchip_SRAM+0xf800be68>
    c108:	d8c02017 	ldw	r3,128(sp)
    c10c:	1880038f 	ldh	r2,14(r3)
    c110:	103f5516 	blt	r2,zero,be68 <__alt_mem_Onchip_SRAM+0xf800be68>
    c114:	d9c02217 	ldw	r7,136(sp)
    c118:	d9002117 	ldw	r4,132(sp)
    c11c:	a80d883a 	mov	r6,r21
    c120:	180b883a 	mov	r5,r3
    c124:	000d2fc0 	call	d2fc <__sbprintf>
    c128:	dfc03517 	ldw	ra,212(sp)
    c12c:	df003417 	ldw	fp,208(sp)
    c130:	ddc03317 	ldw	r23,204(sp)
    c134:	dd803217 	ldw	r22,200(sp)
    c138:	dd403117 	ldw	r21,196(sp)
    c13c:	dd003017 	ldw	r20,192(sp)
    c140:	dcc02f17 	ldw	r19,188(sp)
    c144:	dc802e17 	ldw	r18,184(sp)
    c148:	dc402d17 	ldw	r17,180(sp)
    c14c:	dc002c17 	ldw	r16,176(sp)
    c150:	dec03604 	addi	sp,sp,216
    c154:	f800283a 	ret
    c158:	00087b80 	call	87b8 <__sinit>
    c15c:	003f2f06 	br	be1c <__alt_mem_Onchip_SRAM+0xf800be1c>
    c160:	d8c02517 	ldw	r3,148(sp)
    c164:	d8802215 	stw	r2,136(sp)
    c168:	00c7c83a 	sub	r3,zero,r3
    c16c:	d8c02515 	stw	r3,148(sp)
    c170:	8c400114 	ori	r17,r17,4
    c174:	b0c00007 	ldb	r3,0(r22)
    c178:	003f7306 	br	bf48 <__alt_mem_Onchip_SRAM+0xf800bf48>
    c17c:	00800c04 	movi	r2,48
    c180:	d9402217 	ldw	r5,136(sp)
    c184:	d8801d05 	stb	r2,116(sp)
    c188:	00801e04 	movi	r2,120
    c18c:	d8801d45 	stb	r2,117(sp)
    c190:	d8001d85 	stb	zero,118(sp)
    c194:	b811883a 	mov	r8,r23
    c198:	28c00104 	addi	r3,r5,4
    c19c:	2cc00017 	ldw	r19,0(r5)
    c1a0:	0029883a 	mov	r20,zero
    c1a4:	88800094 	ori	r2,r17,2
    c1a8:	80032516 	blt	r16,zero,ce40 <___vfiprintf_internal_r+0x106c>
    c1ac:	00bfdfc4 	movi	r2,-129
    c1b0:	88a2703a 	and	r17,r17,r2
    c1b4:	d8c02215 	stw	r3,136(sp)
    c1b8:	8c400094 	ori	r17,r17,2
    c1bc:	98032a1e 	bne	r19,zero,ce68 <___vfiprintf_internal_r+0x1094>
    c1c0:	008000b4 	movhi	r2,2
    c1c4:	10a0a404 	addi	r2,r2,-32112
    c1c8:	d8802615 	stw	r2,152(sp)
    c1cc:	002b883a 	mov	r21,zero
    c1d0:	8001741e 	bne	r16,zero,c7a4 <___vfiprintf_internal_r+0x9d0>
    c1d4:	0021883a 	mov	r16,zero
    c1d8:	0029883a 	mov	r20,zero
    c1dc:	ddc01a04 	addi	r23,sp,104
    c1e0:	8027883a 	mov	r19,r16
    c1e4:	8500010e 	bge	r16,r20,c1ec <___vfiprintf_internal_r+0x418>
    c1e8:	a027883a 	mov	r19,r20
    c1ec:	ad403fcc 	andi	r21,r21,255
    c1f0:	ad40201c 	xori	r21,r21,128
    c1f4:	ad7fe004 	addi	r21,r21,-128
    c1f8:	a8000126 	beq	r21,zero,c200 <___vfiprintf_internal_r+0x42c>
    c1fc:	9cc00044 	addi	r19,r19,1
    c200:	89c0008c 	andi	r7,r17,2
    c204:	38000126 	beq	r7,zero,c20c <___vfiprintf_internal_r+0x438>
    c208:	9cc00084 	addi	r19,r19,2
    c20c:	88c0210c 	andi	r3,r17,132
    c210:	1801dd1e 	bne	r3,zero,c988 <___vfiprintf_internal_r+0xbb4>
    c214:	d9402517 	ldw	r5,148(sp)
    c218:	2cebc83a 	sub	r21,r5,r19
    c21c:	0541da0e 	bge	zero,r21,c988 <___vfiprintf_internal_r+0xbb4>
    c220:	07000404 	movi	fp,16
    c224:	d8801c17 	ldw	r2,112(sp)
    c228:	e543be0e 	bge	fp,r21,d124 <___vfiprintf_internal_r+0x1350>
    c22c:	014000b4 	movhi	r5,2
    c230:	29611904 	addi	r5,r5,-31644
    c234:	dc002715 	stw	r16,156(sp)
    c238:	d9801b17 	ldw	r6,108(sp)
    c23c:	a821883a 	mov	r16,r21
    c240:	d9402315 	stw	r5,140(sp)
    c244:	028001c4 	movi	r10,7
    c248:	d9c02915 	stw	r7,164(sp)
    c24c:	182b883a 	mov	r21,r3
    c250:	00000506 	br	c268 <___vfiprintf_internal_r+0x494>
    c254:	31000084 	addi	r4,r6,2
    c258:	42000204 	addi	r8,r8,8
    c25c:	180d883a 	mov	r6,r3
    c260:	843ffc04 	addi	r16,r16,-16
    c264:	e4000f0e 	bge	fp,r16,c2a4 <___vfiprintf_internal_r+0x4d0>
    c268:	010000b4 	movhi	r4,2
    c26c:	10800404 	addi	r2,r2,16
    c270:	30c00044 	addi	r3,r6,1
    c274:	21211904 	addi	r4,r4,-31644
    c278:	41000015 	stw	r4,0(r8)
    c27c:	47000115 	stw	fp,4(r8)
    c280:	d8801c15 	stw	r2,112(sp)
    c284:	d8c01b15 	stw	r3,108(sp)
    c288:	50fff20e 	bge	r10,r3,c254 <__alt_mem_Onchip_SRAM+0xf800c254>
    c28c:	1001b21e 	bne	r2,zero,c958 <___vfiprintf_internal_r+0xb84>
    c290:	843ffc04 	addi	r16,r16,-16
    c294:	000d883a 	mov	r6,zero
    c298:	01000044 	movi	r4,1
    c29c:	d811883a 	mov	r8,sp
    c2a0:	e43ff116 	blt	fp,r16,c268 <__alt_mem_Onchip_SRAM+0xf800c268>
    c2a4:	a807883a 	mov	r3,r21
    c2a8:	d9c02917 	ldw	r7,164(sp)
    c2ac:	802b883a 	mov	r21,r16
    c2b0:	dc002717 	ldw	r16,156(sp)
    c2b4:	d9402317 	ldw	r5,140(sp)
    c2b8:	a885883a 	add	r2,r21,r2
    c2bc:	45400115 	stw	r21,4(r8)
    c2c0:	41400015 	stw	r5,0(r8)
    c2c4:	d8801c15 	stw	r2,112(sp)
    c2c8:	d9001b15 	stw	r4,108(sp)
    c2cc:	014001c4 	movi	r5,7
    c2d0:	29026216 	blt	r5,r4,cc5c <___vfiprintf_internal_r+0xe88>
    c2d4:	d9801d87 	ldb	r6,118(sp)
    c2d8:	42000204 	addi	r8,r8,8
    c2dc:	21400044 	addi	r5,r4,1
    c2e0:	3001ae1e 	bne	r6,zero,c99c <___vfiprintf_internal_r+0xbc8>
    c2e4:	3801bb26 	beq	r7,zero,c9d4 <___vfiprintf_internal_r+0xc00>
    c2e8:	d9001d04 	addi	r4,sp,116
    c2ec:	10800084 	addi	r2,r2,2
    c2f0:	41000015 	stw	r4,0(r8)
    c2f4:	01000084 	movi	r4,2
    c2f8:	41000115 	stw	r4,4(r8)
    c2fc:	d8801c15 	stw	r2,112(sp)
    c300:	d9401b15 	stw	r5,108(sp)
    c304:	010001c4 	movi	r4,7
    c308:	2142680e 	bge	r4,r5,ccac <___vfiprintf_internal_r+0xed8>
    c30c:	1002b11e 	bne	r2,zero,cdd4 <___vfiprintf_internal_r+0x1000>
    c310:	01802004 	movi	r6,128
    c314:	01400044 	movi	r5,1
    c318:	0009883a 	mov	r4,zero
    c31c:	d811883a 	mov	r8,sp
    c320:	1981ae1e 	bne	r3,r6,c9dc <___vfiprintf_internal_r+0xc08>
    c324:	d8c02517 	ldw	r3,148(sp)
    c328:	1cf9c83a 	sub	fp,r3,r19
    c32c:	0701ab0e 	bge	zero,fp,c9dc <___vfiprintf_internal_r+0xc08>
    c330:	05400404 	movi	r21,16
    c334:	af03a90e 	bge	r21,fp,d1dc <___vfiprintf_internal_r+0x1408>
    c338:	014000b4 	movhi	r5,2
    c33c:	29611504 	addi	r5,r5,-31660
    c340:	d9402315 	stw	r5,140(sp)
    c344:	01c001c4 	movi	r7,7
    c348:	00000506 	br	c360 <___vfiprintf_internal_r+0x58c>
    c34c:	21800084 	addi	r6,r4,2
    c350:	42000204 	addi	r8,r8,8
    c354:	1809883a 	mov	r4,r3
    c358:	e73ffc04 	addi	fp,fp,-16
    c35c:	af000d0e 	bge	r21,fp,c394 <___vfiprintf_internal_r+0x5c0>
    c360:	10800404 	addi	r2,r2,16
    c364:	20c00044 	addi	r3,r4,1
    c368:	44800015 	stw	r18,0(r8)
    c36c:	45400115 	stw	r21,4(r8)
    c370:	d8801c15 	stw	r2,112(sp)
    c374:	d8c01b15 	stw	r3,108(sp)
    c378:	38fff40e 	bge	r7,r3,c34c <__alt_mem_Onchip_SRAM+0xf800c34c>
    c37c:	10022b1e 	bne	r2,zero,cc2c <___vfiprintf_internal_r+0xe58>
    c380:	e73ffc04 	addi	fp,fp,-16
    c384:	01800044 	movi	r6,1
    c388:	0009883a 	mov	r4,zero
    c38c:	d811883a 	mov	r8,sp
    c390:	af3ff316 	blt	r21,fp,c360 <__alt_mem_Onchip_SRAM+0xf800c360>
    c394:	d8c02317 	ldw	r3,140(sp)
    c398:	1705883a 	add	r2,r2,fp
    c39c:	47000115 	stw	fp,4(r8)
    c3a0:	40c00015 	stw	r3,0(r8)
    c3a4:	d8801c15 	stw	r2,112(sp)
    c3a8:	d9801b15 	stw	r6,108(sp)
    c3ac:	00c001c4 	movi	r3,7
    c3b0:	19829416 	blt	r3,r6,ce04 <___vfiprintf_internal_r+0x1030>
    c3b4:	8521c83a 	sub	r16,r16,r20
    c3b8:	42000204 	addi	r8,r8,8
    c3bc:	31400044 	addi	r5,r6,1
    c3c0:	3009883a 	mov	r4,r6
    c3c4:	04018716 	blt	zero,r16,c9e4 <___vfiprintf_internal_r+0xc10>
    c3c8:	a085883a 	add	r2,r20,r2
    c3cc:	45c00015 	stw	r23,0(r8)
    c3d0:	45000115 	stw	r20,4(r8)
    c3d4:	d8801c15 	stw	r2,112(sp)
    c3d8:	d9401b15 	stw	r5,108(sp)
    c3dc:	00c001c4 	movi	r3,7
    c3e0:	1941c20e 	bge	r3,r5,caec <___vfiprintf_internal_r+0xd18>
    c3e4:	1002531e 	bne	r2,zero,cd34 <___vfiprintf_internal_r+0xf60>
    c3e8:	d8001b15 	stw	zero,108(sp)
    c3ec:	8c40010c 	andi	r17,r17,4
    c3f0:	88023226 	beq	r17,zero,ccbc <___vfiprintf_internal_r+0xee8>
    c3f4:	d9002517 	ldw	r4,148(sp)
    c3f8:	24e3c83a 	sub	r17,r4,r19
    c3fc:	04432916 	blt	zero,r17,d0a4 <___vfiprintf_internal_r+0x12d0>
    c400:	d8802517 	ldw	r2,148(sp)
    c404:	14c0010e 	bge	r2,r19,c40c <___vfiprintf_internal_r+0x638>
    c408:	9805883a 	mov	r2,r19
    c40c:	d8c02417 	ldw	r3,144(sp)
    c410:	1887883a 	add	r3,r3,r2
    c414:	d8c02415 	stw	r3,144(sp)
    c418:	d8001b15 	stw	zero,108(sp)
    c41c:	d811883a 	mov	r8,sp
    c420:	003ea006 	br	bea4 <__alt_mem_Onchip_SRAM+0xf800bea4>
    c424:	8c400814 	ori	r17,r17,32
    c428:	b0c00007 	ldb	r3,0(r22)
    c42c:	003ec606 	br	bf48 <__alt_mem_Onchip_SRAM+0xf800bf48>
    c430:	b0c00007 	ldb	r3,0(r22)
    c434:	00801b04 	movi	r2,108
    c438:	18832026 	beq	r3,r2,d0bc <___vfiprintf_internal_r+0x12e8>
    c43c:	8c400414 	ori	r17,r17,16
    c440:	003ec106 	br	bf48 <__alt_mem_Onchip_SRAM+0xf800bf48>
    c444:	9cc03fcc 	andi	r19,r19,255
    c448:	b811883a 	mov	r8,r23
    c44c:	9803981e 	bne	r19,zero,d2b0 <___vfiprintf_internal_r+0x14dc>
    c450:	8880080c 	andi	r2,r17,32
    c454:	1002be26 	beq	r2,zero,cf50 <___vfiprintf_internal_r+0x117c>
    c458:	d9002217 	ldw	r4,136(sp)
    c45c:	d9402417 	ldw	r5,144(sp)
    c460:	20800017 	ldw	r2,0(r4)
    c464:	2807d7fa 	srai	r3,r5,31
    c468:	21000104 	addi	r4,r4,4
    c46c:	d9002215 	stw	r4,136(sp)
    c470:	11400015 	stw	r5,0(r2)
    c474:	10c00115 	stw	r3,4(r2)
    c478:	003e8a06 	br	bea4 <__alt_mem_Onchip_SRAM+0xf800bea4>
    c47c:	9cc03fcc 	andi	r19,r19,255
    c480:	b811883a 	mov	r8,r23
    c484:	9803871e 	bne	r19,zero,d2a4 <___vfiprintf_internal_r+0x14d0>
    c488:	8880080c 	andi	r2,r17,32
    c48c:	10009a26 	beq	r2,zero,c6f8 <___vfiprintf_internal_r+0x924>
    c490:	d9002217 	ldw	r4,136(sp)
    c494:	d8001d85 	stb	zero,118(sp)
    c498:	20800204 	addi	r2,r4,8
    c49c:	24c00017 	ldw	r19,0(r4)
    c4a0:	25000117 	ldw	r20,4(r4)
    c4a4:	8002a416 	blt	r16,zero,cf38 <___vfiprintf_internal_r+0x1164>
    c4a8:	013fdfc4 	movi	r4,-129
    c4ac:	9d06b03a 	or	r3,r19,r20
    c4b0:	d8802215 	stw	r2,136(sp)
    c4b4:	8922703a 	and	r17,r17,r4
    c4b8:	18009b26 	beq	r3,zero,c728 <___vfiprintf_internal_r+0x954>
    c4bc:	002b883a 	mov	r21,zero
    c4c0:	ddc01a04 	addi	r23,sp,104
    c4c4:	9806d0fa 	srli	r3,r19,3
    c4c8:	a008977a 	slli	r4,r20,29
    c4cc:	a028d0fa 	srli	r20,r20,3
    c4d0:	9cc001cc 	andi	r19,r19,7
    c4d4:	98800c04 	addi	r2,r19,48
    c4d8:	bdffffc4 	addi	r23,r23,-1
    c4dc:	20e6b03a 	or	r19,r4,r3
    c4e0:	b8800005 	stb	r2,0(r23)
    c4e4:	9d06b03a 	or	r3,r19,r20
    c4e8:	183ff61e 	bne	r3,zero,c4c4 <__alt_mem_Onchip_SRAM+0xf800c4c4>
    c4ec:	88c0004c 	andi	r3,r17,1
    c4f0:	18021f1e 	bne	r3,zero,cd70 <___vfiprintf_internal_r+0xf9c>
    c4f4:	d9401e17 	ldw	r5,120(sp)
    c4f8:	2de9c83a 	sub	r20,r5,r23
    c4fc:	003f3806 	br	c1e0 <__alt_mem_Onchip_SRAM+0xf800c1e0>
    c500:	9cc03fcc 	andi	r19,r19,255
    c504:	b811883a 	mov	r8,r23
    c508:	98034f1e 	bne	r19,zero,d248 <___vfiprintf_internal_r+0x1474>
    c50c:	008000b4 	movhi	r2,2
    c510:	10a0a404 	addi	r2,r2,-32112
    c514:	d8802615 	stw	r2,152(sp)
    c518:	8880080c 	andi	r2,r17,32
    c51c:	1000ac26 	beq	r2,zero,c7d0 <___vfiprintf_internal_r+0x9fc>
    c520:	d9002217 	ldw	r4,136(sp)
    c524:	24c00017 	ldw	r19,0(r4)
    c528:	25000117 	ldw	r20,4(r4)
    c52c:	21000204 	addi	r4,r4,8
    c530:	d9002215 	stw	r4,136(sp)
    c534:	8880004c 	andi	r2,r17,1
    c538:	1001e726 	beq	r2,zero,ccd8 <___vfiprintf_internal_r+0xf04>
    c53c:	9d04b03a 	or	r2,r19,r20
    c540:	10025c1e 	bne	r2,zero,ceb4 <___vfiprintf_internal_r+0x10e0>
    c544:	d8001d85 	stb	zero,118(sp)
    c548:	80024416 	blt	r16,zero,ce5c <___vfiprintf_internal_r+0x1088>
    c54c:	00bfdfc4 	movi	r2,-129
    c550:	88a2703a 	and	r17,r17,r2
    c554:	003f1d06 	br	c1cc <__alt_mem_Onchip_SRAM+0xf800c1cc>
    c558:	d8c02217 	ldw	r3,136(sp)
    c55c:	04c00044 	movi	r19,1
    c560:	b811883a 	mov	r8,r23
    c564:	18800017 	ldw	r2,0(r3)
    c568:	18c00104 	addi	r3,r3,4
    c56c:	d8001d85 	stb	zero,118(sp)
    c570:	d8801005 	stb	r2,64(sp)
    c574:	d8c02215 	stw	r3,136(sp)
    c578:	9829883a 	mov	r20,r19
    c57c:	ddc01004 	addi	r23,sp,64
    c580:	0021883a 	mov	r16,zero
    c584:	003f1e06 	br	c200 <__alt_mem_Onchip_SRAM+0xf800c200>
    c588:	9cc03fcc 	andi	r19,r19,255
    c58c:	b811883a 	mov	r8,r23
    c590:	9803331e 	bne	r19,zero,d260 <___vfiprintf_internal_r+0x148c>
    c594:	8880080c 	andi	r2,r17,32
    c598:	10004826 	beq	r2,zero,c6bc <___vfiprintf_internal_r+0x8e8>
    c59c:	d9002217 	ldw	r4,136(sp)
    c5a0:	20800117 	ldw	r2,4(r4)
    c5a4:	24c00017 	ldw	r19,0(r4)
    c5a8:	21000204 	addi	r4,r4,8
    c5ac:	d9002215 	stw	r4,136(sp)
    c5b0:	1029883a 	mov	r20,r2
    c5b4:	10024c16 	blt	r2,zero,cee8 <___vfiprintf_internal_r+0x1114>
    c5b8:	dd401d83 	ldbu	r21,118(sp)
    c5bc:	80007116 	blt	r16,zero,c784 <___vfiprintf_internal_r+0x9b0>
    c5c0:	00ffdfc4 	movi	r3,-129
    c5c4:	9d04b03a 	or	r2,r19,r20
    c5c8:	88e2703a 	and	r17,r17,r3
    c5cc:	1000d126 	beq	r2,zero,c914 <___vfiprintf_internal_r+0xb40>
    c5d0:	a0023526 	beq	r20,zero,cea8 <___vfiprintf_internal_r+0x10d4>
    c5d4:	ddc01a04 	addi	r23,sp,104
    c5d8:	4039883a 	mov	fp,r8
    c5dc:	9809883a 	mov	r4,r19
    c5e0:	a00b883a 	mov	r5,r20
    c5e4:	01800284 	movi	r6,10
    c5e8:	000f883a 	mov	r7,zero
    c5ec:	000ef940 	call	ef94 <__umoddi3>
    c5f0:	10800c04 	addi	r2,r2,48
    c5f4:	bdffffc4 	addi	r23,r23,-1
    c5f8:	9809883a 	mov	r4,r19
    c5fc:	a00b883a 	mov	r5,r20
    c600:	b8800005 	stb	r2,0(r23)
    c604:	01800284 	movi	r6,10
    c608:	000f883a 	mov	r7,zero
    c60c:	000e9980 	call	e998 <__udivdi3>
    c610:	1027883a 	mov	r19,r2
    c614:	10c4b03a 	or	r2,r2,r3
    c618:	1829883a 	mov	r20,r3
    c61c:	103fef1e 	bne	r2,zero,c5dc <__alt_mem_Onchip_SRAM+0xf800c5dc>
    c620:	d9001e17 	ldw	r4,120(sp)
    c624:	e011883a 	mov	r8,fp
    c628:	25e9c83a 	sub	r20,r4,r23
    c62c:	003eec06 	br	c1e0 <__alt_mem_Onchip_SRAM+0xf800c1e0>
    c630:	d8802307 	ldb	r2,140(sp)
    c634:	1002361e 	bne	r2,zero,cf10 <___vfiprintf_internal_r+0x113c>
    c638:	00c00804 	movi	r3,32
    c63c:	d8c02305 	stb	r3,140(sp)
    c640:	04c00044 	movi	r19,1
    c644:	b0c00007 	ldb	r3,0(r22)
    c648:	003e3f06 	br	bf48 <__alt_mem_Onchip_SRAM+0xf800bf48>
    c64c:	8c400054 	ori	r17,r17,1
    c650:	b0c00007 	ldb	r3,0(r22)
    c654:	003e3c06 	br	bf48 <__alt_mem_Onchip_SRAM+0xf800bf48>
    c658:	8c402014 	ori	r17,r17,128
    c65c:	b0c00007 	ldb	r3,0(r22)
    c660:	003e3906 	br	bf48 <__alt_mem_Onchip_SRAM+0xf800bf48>
    c664:	dc002715 	stw	r16,156(sp)
    c668:	d8002515 	stw	zero,148(sp)
    c66c:	1f3ff404 	addi	fp,r3,-48
    c670:	0009883a 	mov	r4,zero
    c674:	b021883a 	mov	r16,r22
    c678:	01400284 	movi	r5,10
    c67c:	00015680 	call	1568 <__mulsi3>
    c680:	80c00007 	ldb	r3,0(r16)
    c684:	e089883a 	add	r4,fp,r2
    c688:	b5800044 	addi	r22,r22,1
    c68c:	1f3ff404 	addi	fp,r3,-48
    c690:	b021883a 	mov	r16,r22
    c694:	af3ff82e 	bgeu	r21,fp,c678 <__alt_mem_Onchip_SRAM+0xf800c678>
    c698:	d9002515 	stw	r4,148(sp)
    c69c:	dc002717 	ldw	r16,156(sp)
    c6a0:	003e2a06 	br	bf4c <__alt_mem_Onchip_SRAM+0xf800bf4c>
    c6a4:	9cc03fcc 	andi	r19,r19,255
    c6a8:	b811883a 	mov	r8,r23
    c6ac:	9802e91e 	bne	r19,zero,d254 <___vfiprintf_internal_r+0x1480>
    c6b0:	8c400414 	ori	r17,r17,16
    c6b4:	8880080c 	andi	r2,r17,32
    c6b8:	103fb81e 	bne	r2,zero,c59c <__alt_mem_Onchip_SRAM+0xf800c59c>
    c6bc:	8880040c 	andi	r2,r17,16
    c6c0:	10022e26 	beq	r2,zero,cf7c <___vfiprintf_internal_r+0x11a8>
    c6c4:	d9402217 	ldw	r5,136(sp)
    c6c8:	2cc00017 	ldw	r19,0(r5)
    c6cc:	29400104 	addi	r5,r5,4
    c6d0:	d9402215 	stw	r5,136(sp)
    c6d4:	9829d7fa 	srai	r20,r19,31
    c6d8:	a005883a 	mov	r2,r20
    c6dc:	003fb506 	br	c5b4 <__alt_mem_Onchip_SRAM+0xf800c5b4>
    c6e0:	9cc03fcc 	andi	r19,r19,255
    c6e4:	b811883a 	mov	r8,r23
    c6e8:	9802fa1e 	bne	r19,zero,d2d4 <___vfiprintf_internal_r+0x1500>
    c6ec:	8c400414 	ori	r17,r17,16
    c6f0:	8880080c 	andi	r2,r17,32
    c6f4:	103f661e 	bne	r2,zero,c490 <__alt_mem_Onchip_SRAM+0xf800c490>
    c6f8:	8880040c 	andi	r2,r17,16
    c6fc:	10020626 	beq	r2,zero,cf18 <___vfiprintf_internal_r+0x1144>
    c700:	d9402217 	ldw	r5,136(sp)
    c704:	d8001d85 	stb	zero,118(sp)
    c708:	0029883a 	mov	r20,zero
    c70c:	28800104 	addi	r2,r5,4
    c710:	2cc00017 	ldw	r19,0(r5)
    c714:	80020816 	blt	r16,zero,cf38 <___vfiprintf_internal_r+0x1164>
    c718:	00ffdfc4 	movi	r3,-129
    c71c:	d8802215 	stw	r2,136(sp)
    c720:	88e2703a 	and	r17,r17,r3
    c724:	983f651e 	bne	r19,zero,c4bc <__alt_mem_Onchip_SRAM+0xf800c4bc>
    c728:	002b883a 	mov	r21,zero
    c72c:	8002cf26 	beq	r16,zero,d26c <___vfiprintf_internal_r+0x1498>
    c730:	0027883a 	mov	r19,zero
    c734:	0029883a 	mov	r20,zero
    c738:	003f6106 	br	c4c0 <__alt_mem_Onchip_SRAM+0xf800c4c0>
    c73c:	9cc03fcc 	andi	r19,r19,255
    c740:	b811883a 	mov	r8,r23
    c744:	9802e01e 	bne	r19,zero,d2c8 <___vfiprintf_internal_r+0x14f4>
    c748:	8c400414 	ori	r17,r17,16
    c74c:	8880080c 	andi	r2,r17,32
    c750:	1000641e 	bne	r2,zero,c8e4 <___vfiprintf_internal_r+0xb10>
    c754:	8880040c 	andi	r2,r17,16
    c758:	1001c81e 	bne	r2,zero,ce7c <___vfiprintf_internal_r+0x10a8>
    c75c:	8880100c 	andi	r2,r17,64
    c760:	d8001d85 	stb	zero,118(sp)
    c764:	1002281e 	bne	r2,zero,d008 <___vfiprintf_internal_r+0x1234>
    c768:	d9002217 	ldw	r4,136(sp)
    c76c:	0029883a 	mov	r20,zero
    c770:	20800104 	addi	r2,r4,4
    c774:	24c00017 	ldw	r19,0(r4)
    c778:	8001c60e 	bge	r16,zero,ce94 <___vfiprintf_internal_r+0x10c0>
    c77c:	d8802215 	stw	r2,136(sp)
    c780:	002b883a 	mov	r21,zero
    c784:	9d04b03a 	or	r2,r19,r20
    c788:	103f911e 	bne	r2,zero,c5d0 <__alt_mem_Onchip_SRAM+0xf800c5d0>
    c78c:	00800044 	movi	r2,1
    c790:	10803fcc 	andi	r2,r2,255
    c794:	00c00044 	movi	r3,1
    c798:	10c05f26 	beq	r2,r3,c918 <___vfiprintf_internal_r+0xb44>
    c79c:	00c00084 	movi	r3,2
    c7a0:	10ffe31e 	bne	r2,r3,c730 <__alt_mem_Onchip_SRAM+0xf800c730>
    c7a4:	0027883a 	mov	r19,zero
    c7a8:	0029883a 	mov	r20,zero
    c7ac:	00015106 	br	ccf4 <___vfiprintf_internal_r+0xf20>
    c7b0:	9cc03fcc 	andi	r19,r19,255
    c7b4:	b811883a 	mov	r8,r23
    c7b8:	9802c01e 	bne	r19,zero,d2bc <___vfiprintf_internal_r+0x14e8>
    c7bc:	014000b4 	movhi	r5,2
    c7c0:	29609f04 	addi	r5,r5,-32132
    c7c4:	d9402615 	stw	r5,152(sp)
    c7c8:	8880080c 	andi	r2,r17,32
    c7cc:	103f541e 	bne	r2,zero,c520 <__alt_mem_Onchip_SRAM+0xf800c520>
    c7d0:	8880040c 	andi	r2,r17,16
    c7d4:	1001f226 	beq	r2,zero,cfa0 <___vfiprintf_internal_r+0x11cc>
    c7d8:	d9402217 	ldw	r5,136(sp)
    c7dc:	0029883a 	mov	r20,zero
    c7e0:	2cc00017 	ldw	r19,0(r5)
    c7e4:	29400104 	addi	r5,r5,4
    c7e8:	d9402215 	stw	r5,136(sp)
    c7ec:	003f5106 	br	c534 <__alt_mem_Onchip_SRAM+0xf800c534>
    c7f0:	d8c02217 	ldw	r3,136(sp)
    c7f4:	b811883a 	mov	r8,r23
    c7f8:	d8001d85 	stb	zero,118(sp)
    c7fc:	1dc00017 	ldw	r23,0(r3)
    c800:	1f000104 	addi	fp,r3,4
    c804:	b8025926 	beq	r23,zero,d16c <___vfiprintf_internal_r+0x1398>
    c808:	80023316 	blt	r16,zero,d0d8 <___vfiprintf_internal_r+0x1304>
    c80c:	800d883a 	mov	r6,r16
    c810:	000b883a 	mov	r5,zero
    c814:	b809883a 	mov	r4,r23
    c818:	da002a15 	stw	r8,168(sp)
    c81c:	00090b80 	call	90b8 <memchr>
    c820:	da002a17 	ldw	r8,168(sp)
    c824:	10026826 	beq	r2,zero,d1c8 <___vfiprintf_internal_r+0x13f4>
    c828:	15e9c83a 	sub	r20,r2,r23
    c82c:	dd401d83 	ldbu	r21,118(sp)
    c830:	df002215 	stw	fp,136(sp)
    c834:	0021883a 	mov	r16,zero
    c838:	003e6906 	br	c1e0 <__alt_mem_Onchip_SRAM+0xf800c1e0>
    c83c:	9cc03fcc 	andi	r19,r19,255
    c840:	b811883a 	mov	r8,r23
    c844:	983fc126 	beq	r19,zero,c74c <__alt_mem_Onchip_SRAM+0xf800c74c>
    c848:	d8c02303 	ldbu	r3,140(sp)
    c84c:	d8c01d85 	stb	r3,118(sp)
    c850:	003fbe06 	br	c74c <__alt_mem_Onchip_SRAM+0xf800c74c>
    c854:	d9002217 	ldw	r4,136(sp)
    c858:	d9402217 	ldw	r5,136(sp)
    c85c:	21000017 	ldw	r4,0(r4)
    c860:	28800104 	addi	r2,r5,4
    c864:	d9002515 	stw	r4,148(sp)
    c868:	203e3d16 	blt	r4,zero,c160 <__alt_mem_Onchip_SRAM+0xf800c160>
    c86c:	d8802215 	stw	r2,136(sp)
    c870:	b0c00007 	ldb	r3,0(r22)
    c874:	003db406 	br	bf48 <__alt_mem_Onchip_SRAM+0xf800bf48>
    c878:	00c00ac4 	movi	r3,43
    c87c:	d8c02305 	stb	r3,140(sp)
    c880:	04c00044 	movi	r19,1
    c884:	b0c00007 	ldb	r3,0(r22)
    c888:	003daf06 	br	bf48 <__alt_mem_Onchip_SRAM+0xf800bf48>
    c88c:	b0c00007 	ldb	r3,0(r22)
    c890:	01000a84 	movi	r4,42
    c894:	b4000044 	addi	r16,r22,1
    c898:	19025e26 	beq	r3,r4,d214 <___vfiprintf_internal_r+0x1440>
    c89c:	1f3ff404 	addi	fp,r3,-48
    c8a0:	0009883a 	mov	r4,zero
    c8a4:	af025236 	bltu	r21,fp,d1f0 <___vfiprintf_internal_r+0x141c>
    c8a8:	01400284 	movi	r5,10
    c8ac:	00015680 	call	1568 <__mulsi3>
    c8b0:	80c00007 	ldb	r3,0(r16)
    c8b4:	1709883a 	add	r4,r2,fp
    c8b8:	85800044 	addi	r22,r16,1
    c8bc:	1f3ff404 	addi	fp,r3,-48
    c8c0:	b021883a 	mov	r16,r22
    c8c4:	af3ff82e 	bgeu	r21,fp,c8a8 <__alt_mem_Onchip_SRAM+0xf800c8a8>
    c8c8:	2021883a 	mov	r16,r4
    c8cc:	203d9f0e 	bge	r4,zero,bf4c <__alt_mem_Onchip_SRAM+0xf800bf4c>
    c8d0:	043fffc4 	movi	r16,-1
    c8d4:	003d9d06 	br	bf4c <__alt_mem_Onchip_SRAM+0xf800bf4c>
    c8d8:	8c401014 	ori	r17,r17,64
    c8dc:	b0c00007 	ldb	r3,0(r22)
    c8e0:	003d9906 	br	bf48 <__alt_mem_Onchip_SRAM+0xf800bf48>
    c8e4:	d9002217 	ldw	r4,136(sp)
    c8e8:	d8001d85 	stb	zero,118(sp)
    c8ec:	20c00204 	addi	r3,r4,8
    c8f0:	24c00017 	ldw	r19,0(r4)
    c8f4:	25000117 	ldw	r20,4(r4)
    c8f8:	8001e716 	blt	r16,zero,d098 <___vfiprintf_internal_r+0x12c4>
    c8fc:	013fdfc4 	movi	r4,-129
    c900:	9d04b03a 	or	r2,r19,r20
    c904:	d8c02215 	stw	r3,136(sp)
    c908:	8922703a 	and	r17,r17,r4
    c90c:	002b883a 	mov	r21,zero
    c910:	103f2f1e 	bne	r2,zero,c5d0 <__alt_mem_Onchip_SRAM+0xf800c5d0>
    c914:	803e2f26 	beq	r16,zero,c1d4 <__alt_mem_Onchip_SRAM+0xf800c1d4>
    c918:	0027883a 	mov	r19,zero
    c91c:	9cc00c04 	addi	r19,r19,48
    c920:	dcc019c5 	stb	r19,103(sp)
    c924:	dd002817 	ldw	r20,160(sp)
    c928:	ddc019c4 	addi	r23,sp,103
    c92c:	003e2c06 	br	c1e0 <__alt_mem_Onchip_SRAM+0xf800c1e0>
    c930:	9cc03fcc 	andi	r19,r19,255
    c934:	b811883a 	mov	r8,r23
    c938:	9802571e 	bne	r19,zero,d298 <___vfiprintf_internal_r+0x14c4>
    c93c:	18005726 	beq	r3,zero,ca9c <___vfiprintf_internal_r+0xcc8>
    c940:	04c00044 	movi	r19,1
    c944:	d8c01005 	stb	r3,64(sp)
    c948:	d8001d85 	stb	zero,118(sp)
    c94c:	9829883a 	mov	r20,r19
    c950:	ddc01004 	addi	r23,sp,64
    c954:	003f0a06 	br	c580 <__alt_mem_Onchip_SRAM+0xf800c580>
    c958:	d9402017 	ldw	r5,128(sp)
    c95c:	d9002117 	ldw	r4,132(sp)
    c960:	d9801a04 	addi	r6,sp,104
    c964:	da802a15 	stw	r10,168(sp)
    c968:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    c96c:	da802a17 	ldw	r10,168(sp)
    c970:	1000501e 	bne	r2,zero,cab4 <___vfiprintf_internal_r+0xce0>
    c974:	d9801b17 	ldw	r6,108(sp)
    c978:	d8801c17 	ldw	r2,112(sp)
    c97c:	d811883a 	mov	r8,sp
    c980:	31000044 	addi	r4,r6,1
    c984:	003e3606 	br	c260 <__alt_mem_Onchip_SRAM+0xf800c260>
    c988:	d9001b17 	ldw	r4,108(sp)
    c98c:	d8801c17 	ldw	r2,112(sp)
    c990:	21400044 	addi	r5,r4,1
    c994:	d9801d87 	ldb	r6,118(sp)
    c998:	303e5226 	beq	r6,zero,c2e4 <__alt_mem_Onchip_SRAM+0xf800c2e4>
    c99c:	01800044 	movi	r6,1
    c9a0:	d9001d84 	addi	r4,sp,118
    c9a4:	1185883a 	add	r2,r2,r6
    c9a8:	41000015 	stw	r4,0(r8)
    c9ac:	41800115 	stw	r6,4(r8)
    c9b0:	d8801c15 	stw	r2,112(sp)
    c9b4:	d9401b15 	stw	r5,108(sp)
    c9b8:	010001c4 	movi	r4,7
    c9bc:	2140b00e 	bge	r4,r5,cc80 <___vfiprintf_internal_r+0xeac>
    c9c0:	1000f61e 	bne	r2,zero,cd9c <___vfiprintf_internal_r+0xfc8>
    c9c4:	3800b31e 	bne	r7,zero,cc94 <___vfiprintf_internal_r+0xec0>
    c9c8:	0009883a 	mov	r4,zero
    c9cc:	300b883a 	mov	r5,r6
    c9d0:	d811883a 	mov	r8,sp
    c9d4:	01802004 	movi	r6,128
    c9d8:	19be5226 	beq	r3,r6,c324 <__alt_mem_Onchip_SRAM+0xf800c324>
    c9dc:	8521c83a 	sub	r16,r16,r20
    c9e0:	043e790e 	bge	zero,r16,c3c8 <__alt_mem_Onchip_SRAM+0xf800c3c8>
    c9e4:	05400404 	movi	r21,16
    c9e8:	ac01b00e 	bge	r21,r16,d0ac <___vfiprintf_internal_r+0x12d8>
    c9ec:	014000b4 	movhi	r5,2
    c9f0:	29611504 	addi	r5,r5,-31660
    c9f4:	d9402315 	stw	r5,140(sp)
    c9f8:	070001c4 	movi	fp,7
    c9fc:	00000506 	br	ca14 <___vfiprintf_internal_r+0xc40>
    ca00:	21400084 	addi	r5,r4,2
    ca04:	42000204 	addi	r8,r8,8
    ca08:	1809883a 	mov	r4,r3
    ca0c:	843ffc04 	addi	r16,r16,-16
    ca10:	ac000d0e 	bge	r21,r16,ca48 <___vfiprintf_internal_r+0xc74>
    ca14:	10800404 	addi	r2,r2,16
    ca18:	20c00044 	addi	r3,r4,1
    ca1c:	44800015 	stw	r18,0(r8)
    ca20:	45400115 	stw	r21,4(r8)
    ca24:	d8801c15 	stw	r2,112(sp)
    ca28:	d8c01b15 	stw	r3,108(sp)
    ca2c:	e0fff40e 	bge	fp,r3,ca00 <__alt_mem_Onchip_SRAM+0xf800ca00>
    ca30:	1000101e 	bne	r2,zero,ca74 <___vfiprintf_internal_r+0xca0>
    ca34:	843ffc04 	addi	r16,r16,-16
    ca38:	01400044 	movi	r5,1
    ca3c:	0009883a 	mov	r4,zero
    ca40:	d811883a 	mov	r8,sp
    ca44:	ac3ff316 	blt	r21,r16,ca14 <__alt_mem_Onchip_SRAM+0xf800ca14>
    ca48:	d8c02317 	ldw	r3,140(sp)
    ca4c:	1405883a 	add	r2,r2,r16
    ca50:	44000115 	stw	r16,4(r8)
    ca54:	40c00015 	stw	r3,0(r8)
    ca58:	d8801c15 	stw	r2,112(sp)
    ca5c:	d9401b15 	stw	r5,108(sp)
    ca60:	00c001c4 	movi	r3,7
    ca64:	19401916 	blt	r3,r5,cacc <___vfiprintf_internal_r+0xcf8>
    ca68:	42000204 	addi	r8,r8,8
    ca6c:	29400044 	addi	r5,r5,1
    ca70:	003e5506 	br	c3c8 <__alt_mem_Onchip_SRAM+0xf800c3c8>
    ca74:	d9402017 	ldw	r5,128(sp)
    ca78:	d9002117 	ldw	r4,132(sp)
    ca7c:	d9801a04 	addi	r6,sp,104
    ca80:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    ca84:	10000b1e 	bne	r2,zero,cab4 <___vfiprintf_internal_r+0xce0>
    ca88:	d9001b17 	ldw	r4,108(sp)
    ca8c:	d8801c17 	ldw	r2,112(sp)
    ca90:	d811883a 	mov	r8,sp
    ca94:	21400044 	addi	r5,r4,1
    ca98:	003fdc06 	br	ca0c <__alt_mem_Onchip_SRAM+0xf800ca0c>
    ca9c:	d8801c17 	ldw	r2,112(sp)
    caa0:	10000426 	beq	r2,zero,cab4 <___vfiprintf_internal_r+0xce0>
    caa4:	d9402017 	ldw	r5,128(sp)
    caa8:	d9002117 	ldw	r4,132(sp)
    caac:	d9801a04 	addi	r6,sp,104
    cab0:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    cab4:	d9402017 	ldw	r5,128(sp)
    cab8:	2880030b 	ldhu	r2,12(r5)
    cabc:	1080100c 	andi	r2,r2,64
    cac0:	10014d1e 	bne	r2,zero,cff8 <___vfiprintf_internal_r+0x1224>
    cac4:	d8802417 	ldw	r2,144(sp)
    cac8:	003d9706 	br	c128 <__alt_mem_Onchip_SRAM+0xf800c128>
    cacc:	1000d21e 	bne	r2,zero,ce18 <___vfiprintf_internal_r+0x1044>
    cad0:	00c00044 	movi	r3,1
    cad4:	a005883a 	mov	r2,r20
    cad8:	ddc00015 	stw	r23,0(sp)
    cadc:	dd000115 	stw	r20,4(sp)
    cae0:	dd001c15 	stw	r20,112(sp)
    cae4:	d8c01b15 	stw	r3,108(sp)
    cae8:	d811883a 	mov	r8,sp
    caec:	42000204 	addi	r8,r8,8
    caf0:	8c40010c 	andi	r17,r17,4
    caf4:	88004026 	beq	r17,zero,cbf8 <___vfiprintf_internal_r+0xe24>
    caf8:	d9002517 	ldw	r4,148(sp)
    cafc:	24e3c83a 	sub	r17,r4,r19
    cb00:	04403d0e 	bge	zero,r17,cbf8 <___vfiprintf_internal_r+0xe24>
    cb04:	04000404 	movi	r16,16
    cb08:	8441a90e 	bge	r16,r17,d1b0 <___vfiprintf_internal_r+0x13dc>
    cb0c:	00c000b4 	movhi	r3,2
    cb10:	18e11904 	addi	r3,r3,-31644
    cb14:	d9001b17 	ldw	r4,108(sp)
    cb18:	d8c02315 	stw	r3,140(sp)
    cb1c:	050001c4 	movi	r20,7
    cb20:	dd402117 	ldw	r21,132(sp)
    cb24:	ddc02017 	ldw	r23,128(sp)
    cb28:	00000506 	br	cb40 <___vfiprintf_internal_r+0xd6c>
    cb2c:	21400084 	addi	r5,r4,2
    cb30:	42000204 	addi	r8,r8,8
    cb34:	1809883a 	mov	r4,r3
    cb38:	8c7ffc04 	addi	r17,r17,-16
    cb3c:	84400f0e 	bge	r16,r17,cb7c <___vfiprintf_internal_r+0xda8>
    cb40:	014000b4 	movhi	r5,2
    cb44:	10800404 	addi	r2,r2,16
    cb48:	20c00044 	addi	r3,r4,1
    cb4c:	29611904 	addi	r5,r5,-31644
    cb50:	41400015 	stw	r5,0(r8)
    cb54:	44000115 	stw	r16,4(r8)
    cb58:	d8801c15 	stw	r2,112(sp)
    cb5c:	d8c01b15 	stw	r3,108(sp)
    cb60:	a0fff20e 	bge	r20,r3,cb2c <__alt_mem_Onchip_SRAM+0xf800cb2c>
    cb64:	1000141e 	bne	r2,zero,cbb8 <___vfiprintf_internal_r+0xde4>
    cb68:	8c7ffc04 	addi	r17,r17,-16
    cb6c:	01400044 	movi	r5,1
    cb70:	0009883a 	mov	r4,zero
    cb74:	d811883a 	mov	r8,sp
    cb78:	847ff116 	blt	r16,r17,cb40 <__alt_mem_Onchip_SRAM+0xf800cb40>
    cb7c:	d8c02317 	ldw	r3,140(sp)
    cb80:	1445883a 	add	r2,r2,r17
    cb84:	44400115 	stw	r17,4(r8)
    cb88:	40c00015 	stw	r3,0(r8)
    cb8c:	d8801c15 	stw	r2,112(sp)
    cb90:	d9401b15 	stw	r5,108(sp)
    cb94:	00c001c4 	movi	r3,7
    cb98:	1940170e 	bge	r3,r5,cbf8 <___vfiprintf_internal_r+0xe24>
    cb9c:	1000101e 	bne	r2,zero,cbe0 <___vfiprintf_internal_r+0xe0c>
    cba0:	d8802517 	ldw	r2,148(sp)
    cba4:	14c11616 	blt	r2,r19,d000 <___vfiprintf_internal_r+0x122c>
    cba8:	d9002417 	ldw	r4,144(sp)
    cbac:	2089883a 	add	r4,r4,r2
    cbb0:	d9002415 	stw	r4,144(sp)
    cbb4:	003e1806 	br	c418 <__alt_mem_Onchip_SRAM+0xf800c418>
    cbb8:	d9801a04 	addi	r6,sp,104
    cbbc:	b80b883a 	mov	r5,r23
    cbc0:	a809883a 	mov	r4,r21
    cbc4:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    cbc8:	103fba1e 	bne	r2,zero,cab4 <__alt_mem_Onchip_SRAM+0xf800cab4>
    cbcc:	d9001b17 	ldw	r4,108(sp)
    cbd0:	d8801c17 	ldw	r2,112(sp)
    cbd4:	d811883a 	mov	r8,sp
    cbd8:	21400044 	addi	r5,r4,1
    cbdc:	003fd606 	br	cb38 <__alt_mem_Onchip_SRAM+0xf800cb38>
    cbe0:	d9402017 	ldw	r5,128(sp)
    cbe4:	d9002117 	ldw	r4,132(sp)
    cbe8:	d9801a04 	addi	r6,sp,104
    cbec:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    cbf0:	103fb01e 	bne	r2,zero,cab4 <__alt_mem_Onchip_SRAM+0xf800cab4>
    cbf4:	d8801c17 	ldw	r2,112(sp)
    cbf8:	d8c02517 	ldw	r3,148(sp)
    cbfc:	1cc0010e 	bge	r3,r19,cc04 <___vfiprintf_internal_r+0xe30>
    cc00:	9807883a 	mov	r3,r19
    cc04:	d9002417 	ldw	r4,144(sp)
    cc08:	20c9883a 	add	r4,r4,r3
    cc0c:	d9002415 	stw	r4,144(sp)
    cc10:	103e0126 	beq	r2,zero,c418 <__alt_mem_Onchip_SRAM+0xf800c418>
    cc14:	d9402017 	ldw	r5,128(sp)
    cc18:	d9002117 	ldw	r4,132(sp)
    cc1c:	d9801a04 	addi	r6,sp,104
    cc20:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    cc24:	103dfc26 	beq	r2,zero,c418 <__alt_mem_Onchip_SRAM+0xf800c418>
    cc28:	003fa206 	br	cab4 <__alt_mem_Onchip_SRAM+0xf800cab4>
    cc2c:	d9402017 	ldw	r5,128(sp)
    cc30:	d9002117 	ldw	r4,132(sp)
    cc34:	d9801a04 	addi	r6,sp,104
    cc38:	d9c02b15 	stw	r7,172(sp)
    cc3c:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    cc40:	d9c02b17 	ldw	r7,172(sp)
    cc44:	103f9b1e 	bne	r2,zero,cab4 <__alt_mem_Onchip_SRAM+0xf800cab4>
    cc48:	d9001b17 	ldw	r4,108(sp)
    cc4c:	d8801c17 	ldw	r2,112(sp)
    cc50:	d811883a 	mov	r8,sp
    cc54:	21800044 	addi	r6,r4,1
    cc58:	003dbf06 	br	c358 <__alt_mem_Onchip_SRAM+0xf800c358>
    cc5c:	1000d81e 	bne	r2,zero,cfc0 <___vfiprintf_internal_r+0x11ec>
    cc60:	d9001d87 	ldb	r4,118(sp)
    cc64:	20000a26 	beq	r4,zero,cc90 <___vfiprintf_internal_r+0xebc>
    cc68:	00800044 	movi	r2,1
    cc6c:	d9001d84 	addi	r4,sp,118
    cc70:	100b883a 	mov	r5,r2
    cc74:	d9000015 	stw	r4,0(sp)
    cc78:	d8800115 	stw	r2,4(sp)
    cc7c:	d811883a 	mov	r8,sp
    cc80:	2809883a 	mov	r4,r5
    cc84:	42000204 	addi	r8,r8,8
    cc88:	29400044 	addi	r5,r5,1
    cc8c:	003d9506 	br	c2e4 <__alt_mem_Onchip_SRAM+0xf800c2e4>
    cc90:	3800fd26 	beq	r7,zero,d088 <___vfiprintf_internal_r+0x12b4>
    cc94:	00800084 	movi	r2,2
    cc98:	d9001d04 	addi	r4,sp,116
    cc9c:	d9000015 	stw	r4,0(sp)
    cca0:	d8800115 	stw	r2,4(sp)
    cca4:	01400044 	movi	r5,1
    cca8:	d811883a 	mov	r8,sp
    ccac:	2809883a 	mov	r4,r5
    ccb0:	42000204 	addi	r8,r8,8
    ccb4:	29400044 	addi	r5,r5,1
    ccb8:	003f4606 	br	c9d4 <__alt_mem_Onchip_SRAM+0xf800c9d4>
    ccbc:	d8802517 	ldw	r2,148(sp)
    ccc0:	14c0010e 	bge	r2,r19,ccc8 <___vfiprintf_internal_r+0xef4>
    ccc4:	9805883a 	mov	r2,r19
    ccc8:	d9402417 	ldw	r5,144(sp)
    cccc:	288b883a 	add	r5,r5,r2
    ccd0:	d9402415 	stw	r5,144(sp)
    ccd4:	003dd006 	br	c418 <__alt_mem_Onchip_SRAM+0xf800c418>
    ccd8:	d8001d85 	stb	zero,118(sp)
    ccdc:	80005d16 	blt	r16,zero,ce54 <___vfiprintf_internal_r+0x1080>
    cce0:	00ffdfc4 	movi	r3,-129
    cce4:	9d04b03a 	or	r2,r19,r20
    cce8:	88e2703a 	and	r17,r17,r3
    ccec:	103d3726 	beq	r2,zero,c1cc <__alt_mem_Onchip_SRAM+0xf800c1cc>
    ccf0:	002b883a 	mov	r21,zero
    ccf4:	d9002617 	ldw	r4,152(sp)
    ccf8:	ddc01a04 	addi	r23,sp,104
    ccfc:	988003cc 	andi	r2,r19,15
    cd00:	a006973a 	slli	r3,r20,28
    cd04:	2085883a 	add	r2,r4,r2
    cd08:	9826d13a 	srli	r19,r19,4
    cd0c:	10800003 	ldbu	r2,0(r2)
    cd10:	a028d13a 	srli	r20,r20,4
    cd14:	bdffffc4 	addi	r23,r23,-1
    cd18:	1ce6b03a 	or	r19,r3,r19
    cd1c:	b8800005 	stb	r2,0(r23)
    cd20:	9d04b03a 	or	r2,r19,r20
    cd24:	103ff51e 	bne	r2,zero,ccfc <__alt_mem_Onchip_SRAM+0xf800ccfc>
    cd28:	d8801e17 	ldw	r2,120(sp)
    cd2c:	15e9c83a 	sub	r20,r2,r23
    cd30:	003d2b06 	br	c1e0 <__alt_mem_Onchip_SRAM+0xf800c1e0>
    cd34:	d9402017 	ldw	r5,128(sp)
    cd38:	d9002117 	ldw	r4,132(sp)
    cd3c:	d9801a04 	addi	r6,sp,104
    cd40:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    cd44:	103f5b1e 	bne	r2,zero,cab4 <__alt_mem_Onchip_SRAM+0xf800cab4>
    cd48:	d8801c17 	ldw	r2,112(sp)
    cd4c:	d811883a 	mov	r8,sp
    cd50:	003f6706 	br	caf0 <__alt_mem_Onchip_SRAM+0xf800caf0>
    cd54:	d9402017 	ldw	r5,128(sp)
    cd58:	d9002117 	ldw	r4,132(sp)
    cd5c:	d9801a04 	addi	r6,sp,104
    cd60:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    cd64:	103f531e 	bne	r2,zero,cab4 <__alt_mem_Onchip_SRAM+0xf800cab4>
    cd68:	d811883a 	mov	r8,sp
    cd6c:	003cd906 	br	c0d4 <__alt_mem_Onchip_SRAM+0xf800c0d4>
    cd70:	10803fcc 	andi	r2,r2,255
    cd74:	1080201c 	xori	r2,r2,128
    cd78:	10bfe004 	addi	r2,r2,-128
    cd7c:	00c00c04 	movi	r3,48
    cd80:	10ffe926 	beq	r2,r3,cd28 <__alt_mem_Onchip_SRAM+0xf800cd28>
    cd84:	b8ffffc5 	stb	r3,-1(r23)
    cd88:	d8c01e17 	ldw	r3,120(sp)
    cd8c:	b8bfffc4 	addi	r2,r23,-1
    cd90:	102f883a 	mov	r23,r2
    cd94:	18a9c83a 	sub	r20,r3,r2
    cd98:	003d1106 	br	c1e0 <__alt_mem_Onchip_SRAM+0xf800c1e0>
    cd9c:	d9402017 	ldw	r5,128(sp)
    cda0:	d9002117 	ldw	r4,132(sp)
    cda4:	d9801a04 	addi	r6,sp,104
    cda8:	d8c02a15 	stw	r3,168(sp)
    cdac:	d9c02b15 	stw	r7,172(sp)
    cdb0:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    cdb4:	d8c02a17 	ldw	r3,168(sp)
    cdb8:	d9c02b17 	ldw	r7,172(sp)
    cdbc:	103f3d1e 	bne	r2,zero,cab4 <__alt_mem_Onchip_SRAM+0xf800cab4>
    cdc0:	d9001b17 	ldw	r4,108(sp)
    cdc4:	d8801c17 	ldw	r2,112(sp)
    cdc8:	d811883a 	mov	r8,sp
    cdcc:	21400044 	addi	r5,r4,1
    cdd0:	003d4406 	br	c2e4 <__alt_mem_Onchip_SRAM+0xf800c2e4>
    cdd4:	d9402017 	ldw	r5,128(sp)
    cdd8:	d9002117 	ldw	r4,132(sp)
    cddc:	d9801a04 	addi	r6,sp,104
    cde0:	d8c02a15 	stw	r3,168(sp)
    cde4:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    cde8:	d8c02a17 	ldw	r3,168(sp)
    cdec:	103f311e 	bne	r2,zero,cab4 <__alt_mem_Onchip_SRAM+0xf800cab4>
    cdf0:	d9001b17 	ldw	r4,108(sp)
    cdf4:	d8801c17 	ldw	r2,112(sp)
    cdf8:	d811883a 	mov	r8,sp
    cdfc:	21400044 	addi	r5,r4,1
    ce00:	003ef406 	br	c9d4 <__alt_mem_Onchip_SRAM+0xf800c9d4>
    ce04:	1000bd1e 	bne	r2,zero,d0fc <___vfiprintf_internal_r+0x1328>
    ce08:	01400044 	movi	r5,1
    ce0c:	0009883a 	mov	r4,zero
    ce10:	d811883a 	mov	r8,sp
    ce14:	003ef106 	br	c9dc <__alt_mem_Onchip_SRAM+0xf800c9dc>
    ce18:	d9402017 	ldw	r5,128(sp)
    ce1c:	d9002117 	ldw	r4,132(sp)
    ce20:	d9801a04 	addi	r6,sp,104
    ce24:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    ce28:	103f221e 	bne	r2,zero,cab4 <__alt_mem_Onchip_SRAM+0xf800cab4>
    ce2c:	d9401b17 	ldw	r5,108(sp)
    ce30:	d8801c17 	ldw	r2,112(sp)
    ce34:	d811883a 	mov	r8,sp
    ce38:	29400044 	addi	r5,r5,1
    ce3c:	003d6206 	br	c3c8 <__alt_mem_Onchip_SRAM+0xf800c3c8>
    ce40:	014000b4 	movhi	r5,2
    ce44:	2960a404 	addi	r5,r5,-32112
    ce48:	d9402615 	stw	r5,152(sp)
    ce4c:	d8c02215 	stw	r3,136(sp)
    ce50:	1023883a 	mov	r17,r2
    ce54:	9d04b03a 	or	r2,r19,r20
    ce58:	103fa51e 	bne	r2,zero,ccf0 <__alt_mem_Onchip_SRAM+0xf800ccf0>
    ce5c:	002b883a 	mov	r21,zero
    ce60:	00800084 	movi	r2,2
    ce64:	003e4a06 	br	c790 <__alt_mem_Onchip_SRAM+0xf800c790>
    ce68:	014000b4 	movhi	r5,2
    ce6c:	2960a404 	addi	r5,r5,-32112
    ce70:	002b883a 	mov	r21,zero
    ce74:	d9402615 	stw	r5,152(sp)
    ce78:	003f9e06 	br	ccf4 <__alt_mem_Onchip_SRAM+0xf800ccf4>
    ce7c:	d9402217 	ldw	r5,136(sp)
    ce80:	d8001d85 	stb	zero,118(sp)
    ce84:	0029883a 	mov	r20,zero
    ce88:	28800104 	addi	r2,r5,4
    ce8c:	2cc00017 	ldw	r19,0(r5)
    ce90:	803e3a16 	blt	r16,zero,c77c <__alt_mem_Onchip_SRAM+0xf800c77c>
    ce94:	00ffdfc4 	movi	r3,-129
    ce98:	d8802215 	stw	r2,136(sp)
    ce9c:	88e2703a 	and	r17,r17,r3
    cea0:	002b883a 	mov	r21,zero
    cea4:	983e9b26 	beq	r19,zero,c914 <__alt_mem_Onchip_SRAM+0xf800c914>
    cea8:	00800244 	movi	r2,9
    ceac:	14fdc936 	bltu	r2,r19,c5d4 <__alt_mem_Onchip_SRAM+0xf800c5d4>
    ceb0:	003e9a06 	br	c91c <__alt_mem_Onchip_SRAM+0xf800c91c>
    ceb4:	00800c04 	movi	r2,48
    ceb8:	d8c01d45 	stb	r3,117(sp)
    cebc:	d8801d05 	stb	r2,116(sp)
    cec0:	d8001d85 	stb	zero,118(sp)
    cec4:	88c00094 	ori	r3,r17,2
    cec8:	80009c16 	blt	r16,zero,d13c <___vfiprintf_internal_r+0x1368>
    cecc:	00bfdfc4 	movi	r2,-129
    ced0:	88a2703a 	and	r17,r17,r2
    ced4:	8c400094 	ori	r17,r17,2
    ced8:	002b883a 	mov	r21,zero
    cedc:	003f8506 	br	ccf4 <__alt_mem_Onchip_SRAM+0xf800ccf4>
    cee0:	b029883a 	mov	r20,r22
    cee4:	003c0b06 	br	bf14 <__alt_mem_Onchip_SRAM+0xf800bf14>
    cee8:	04e7c83a 	sub	r19,zero,r19
    ceec:	05400b44 	movi	r21,45
    cef0:	9804c03a 	cmpne	r2,r19,zero
    cef4:	0529c83a 	sub	r20,zero,r20
    cef8:	dd401d85 	stb	r21,118(sp)
    cefc:	a0a9c83a 	sub	r20,r20,r2
    cf00:	80009716 	blt	r16,zero,d160 <___vfiprintf_internal_r+0x138c>
    cf04:	00bfdfc4 	movi	r2,-129
    cf08:	88a2703a 	and	r17,r17,r2
    cf0c:	003db006 	br	c5d0 <__alt_mem_Onchip_SRAM+0xf800c5d0>
    cf10:	b0c00007 	ldb	r3,0(r22)
    cf14:	003c0c06 	br	bf48 <__alt_mem_Onchip_SRAM+0xf800bf48>
    cf18:	8880100c 	andi	r2,r17,64
    cf1c:	d8001d85 	stb	zero,118(sp)
    cf20:	1000461e 	bne	r2,zero,d03c <___vfiprintf_internal_r+0x1268>
    cf24:	d9002217 	ldw	r4,136(sp)
    cf28:	0029883a 	mov	r20,zero
    cf2c:	20800104 	addi	r2,r4,4
    cf30:	24c00017 	ldw	r19,0(r4)
    cf34:	803df80e 	bge	r16,zero,c718 <__alt_mem_Onchip_SRAM+0xf800c718>
    cf38:	9d06b03a 	or	r3,r19,r20
    cf3c:	d8802215 	stw	r2,136(sp)
    cf40:	183d5e1e 	bne	r3,zero,c4bc <__alt_mem_Onchip_SRAM+0xf800c4bc>
    cf44:	002b883a 	mov	r21,zero
    cf48:	0005883a 	mov	r2,zero
    cf4c:	003e1006 	br	c790 <__alt_mem_Onchip_SRAM+0xf800c790>
    cf50:	8880040c 	andi	r2,r17,16
    cf54:	1000321e 	bne	r2,zero,d020 <___vfiprintf_internal_r+0x124c>
    cf58:	8c40100c 	andi	r17,r17,64
    cf5c:	88008d26 	beq	r17,zero,d194 <___vfiprintf_internal_r+0x13c0>
    cf60:	d9402217 	ldw	r5,136(sp)
    cf64:	d8c02417 	ldw	r3,144(sp)
    cf68:	28800017 	ldw	r2,0(r5)
    cf6c:	29400104 	addi	r5,r5,4
    cf70:	d9402215 	stw	r5,136(sp)
    cf74:	10c0000d 	sth	r3,0(r2)
    cf78:	003bca06 	br	bea4 <__alt_mem_Onchip_SRAM+0xf800bea4>
    cf7c:	8880100c 	andi	r2,r17,64
    cf80:	10003a26 	beq	r2,zero,d06c <___vfiprintf_internal_r+0x1298>
    cf84:	d8802217 	ldw	r2,136(sp)
    cf88:	14c0000f 	ldh	r19,0(r2)
    cf8c:	10800104 	addi	r2,r2,4
    cf90:	d8802215 	stw	r2,136(sp)
    cf94:	9829d7fa 	srai	r20,r19,31
    cf98:	a005883a 	mov	r2,r20
    cf9c:	003d8506 	br	c5b4 <__alt_mem_Onchip_SRAM+0xf800c5b4>
    cfa0:	8880100c 	andi	r2,r17,64
    cfa4:	10002b26 	beq	r2,zero,d054 <___vfiprintf_internal_r+0x1280>
    cfa8:	d8802217 	ldw	r2,136(sp)
    cfac:	0029883a 	mov	r20,zero
    cfb0:	14c0000b 	ldhu	r19,0(r2)
    cfb4:	10800104 	addi	r2,r2,4
    cfb8:	d8802215 	stw	r2,136(sp)
    cfbc:	003d5d06 	br	c534 <__alt_mem_Onchip_SRAM+0xf800c534>
    cfc0:	d9402017 	ldw	r5,128(sp)
    cfc4:	d9002117 	ldw	r4,132(sp)
    cfc8:	d9801a04 	addi	r6,sp,104
    cfcc:	d8c02a15 	stw	r3,168(sp)
    cfd0:	d9c02b15 	stw	r7,172(sp)
    cfd4:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    cfd8:	d8c02a17 	ldw	r3,168(sp)
    cfdc:	d9c02b17 	ldw	r7,172(sp)
    cfe0:	103eb41e 	bne	r2,zero,cab4 <__alt_mem_Onchip_SRAM+0xf800cab4>
    cfe4:	d9001b17 	ldw	r4,108(sp)
    cfe8:	d8801c17 	ldw	r2,112(sp)
    cfec:	d811883a 	mov	r8,sp
    cff0:	21400044 	addi	r5,r4,1
    cff4:	003e6706 	br	c994 <__alt_mem_Onchip_SRAM+0xf800c994>
    cff8:	00bfffc4 	movi	r2,-1
    cffc:	003c4a06 	br	c128 <__alt_mem_Onchip_SRAM+0xf800c128>
    d000:	9805883a 	mov	r2,r19
    d004:	003ee806 	br	cba8 <__alt_mem_Onchip_SRAM+0xf800cba8>
    d008:	d8c02217 	ldw	r3,136(sp)
    d00c:	0029883a 	mov	r20,zero
    d010:	18800104 	addi	r2,r3,4
    d014:	1cc0000b 	ldhu	r19,0(r3)
    d018:	803f9e0e 	bge	r16,zero,ce94 <__alt_mem_Onchip_SRAM+0xf800ce94>
    d01c:	003dd706 	br	c77c <__alt_mem_Onchip_SRAM+0xf800c77c>
    d020:	d8c02217 	ldw	r3,136(sp)
    d024:	d9002417 	ldw	r4,144(sp)
    d028:	18800017 	ldw	r2,0(r3)
    d02c:	18c00104 	addi	r3,r3,4
    d030:	d8c02215 	stw	r3,136(sp)
    d034:	11000015 	stw	r4,0(r2)
    d038:	003b9a06 	br	bea4 <__alt_mem_Onchip_SRAM+0xf800bea4>
    d03c:	d8c02217 	ldw	r3,136(sp)
    d040:	0029883a 	mov	r20,zero
    d044:	18800104 	addi	r2,r3,4
    d048:	1cc0000b 	ldhu	r19,0(r3)
    d04c:	803db20e 	bge	r16,zero,c718 <__alt_mem_Onchip_SRAM+0xf800c718>
    d050:	003fb906 	br	cf38 <__alt_mem_Onchip_SRAM+0xf800cf38>
    d054:	d9002217 	ldw	r4,136(sp)
    d058:	0029883a 	mov	r20,zero
    d05c:	24c00017 	ldw	r19,0(r4)
    d060:	21000104 	addi	r4,r4,4
    d064:	d9002215 	stw	r4,136(sp)
    d068:	003d3206 	br	c534 <__alt_mem_Onchip_SRAM+0xf800c534>
    d06c:	d8c02217 	ldw	r3,136(sp)
    d070:	1cc00017 	ldw	r19,0(r3)
    d074:	18c00104 	addi	r3,r3,4
    d078:	d8c02215 	stw	r3,136(sp)
    d07c:	9829d7fa 	srai	r20,r19,31
    d080:	a005883a 	mov	r2,r20
    d084:	003d4b06 	br	c5b4 <__alt_mem_Onchip_SRAM+0xf800c5b4>
    d088:	0009883a 	mov	r4,zero
    d08c:	01400044 	movi	r5,1
    d090:	d811883a 	mov	r8,sp
    d094:	003e4f06 	br	c9d4 <__alt_mem_Onchip_SRAM+0xf800c9d4>
    d098:	d8c02215 	stw	r3,136(sp)
    d09c:	002b883a 	mov	r21,zero
    d0a0:	003db806 	br	c784 <__alt_mem_Onchip_SRAM+0xf800c784>
    d0a4:	d811883a 	mov	r8,sp
    d0a8:	003e9606 	br	cb04 <__alt_mem_Onchip_SRAM+0xf800cb04>
    d0ac:	010000b4 	movhi	r4,2
    d0b0:	21211504 	addi	r4,r4,-31660
    d0b4:	d9002315 	stw	r4,140(sp)
    d0b8:	003e6306 	br	ca48 <__alt_mem_Onchip_SRAM+0xf800ca48>
    d0bc:	b0c00043 	ldbu	r3,1(r22)
    d0c0:	8c400814 	ori	r17,r17,32
    d0c4:	b5800044 	addi	r22,r22,1
    d0c8:	18c03fcc 	andi	r3,r3,255
    d0cc:	18c0201c 	xori	r3,r3,128
    d0d0:	18ffe004 	addi	r3,r3,-128
    d0d4:	003b9c06 	br	bf48 <__alt_mem_Onchip_SRAM+0xf800bf48>
    d0d8:	b809883a 	mov	r4,r23
    d0dc:	da002a15 	stw	r8,168(sp)
    d0e0:	00020540 	call	2054 <strlen>
    d0e4:	1029883a 	mov	r20,r2
    d0e8:	dd401d83 	ldbu	r21,118(sp)
    d0ec:	df002215 	stw	fp,136(sp)
    d0f0:	0021883a 	mov	r16,zero
    d0f4:	da002a17 	ldw	r8,168(sp)
    d0f8:	003c3906 	br	c1e0 <__alt_mem_Onchip_SRAM+0xf800c1e0>
    d0fc:	d9402017 	ldw	r5,128(sp)
    d100:	d9002117 	ldw	r4,132(sp)
    d104:	d9801a04 	addi	r6,sp,104
    d108:	000bcc00 	call	bcc0 <__sprint_r.part.0>
    d10c:	103e691e 	bne	r2,zero,cab4 <__alt_mem_Onchip_SRAM+0xf800cab4>
    d110:	d9001b17 	ldw	r4,108(sp)
    d114:	d8801c17 	ldw	r2,112(sp)
    d118:	d811883a 	mov	r8,sp
    d11c:	21400044 	addi	r5,r4,1
    d120:	003e2e06 	br	c9dc <__alt_mem_Onchip_SRAM+0xf800c9dc>
    d124:	010000b4 	movhi	r4,2
    d128:	21211904 	addi	r4,r4,-31644
    d12c:	d9002315 	stw	r4,140(sp)
    d130:	d9001b17 	ldw	r4,108(sp)
    d134:	21000044 	addi	r4,r4,1
    d138:	003c5e06 	br	c2b4 <__alt_mem_Onchip_SRAM+0xf800c2b4>
    d13c:	002b883a 	mov	r21,zero
    d140:	00800084 	movi	r2,2
    d144:	10803fcc 	andi	r2,r2,255
    d148:	01000044 	movi	r4,1
    d14c:	11002b26 	beq	r2,r4,d1fc <___vfiprintf_internal_r+0x1428>
    d150:	01000084 	movi	r4,2
    d154:	11002b1e 	bne	r2,r4,d204 <___vfiprintf_internal_r+0x1430>
    d158:	1823883a 	mov	r17,r3
    d15c:	003ee506 	br	ccf4 <__alt_mem_Onchip_SRAM+0xf800ccf4>
    d160:	8807883a 	mov	r3,r17
    d164:	00800044 	movi	r2,1
    d168:	003ff606 	br	d144 <__alt_mem_Onchip_SRAM+0xf800d144>
    d16c:	00800184 	movi	r2,6
    d170:	1400012e 	bgeu	r2,r16,d178 <___vfiprintf_internal_r+0x13a4>
    d174:	1021883a 	mov	r16,r2
    d178:	8029883a 	mov	r20,r16
    d17c:	8027883a 	mov	r19,r16
    d180:	80002216 	blt	r16,zero,d20c <___vfiprintf_internal_r+0x1438>
    d184:	05c000b4 	movhi	r23,2
    d188:	df002215 	stw	fp,136(sp)
    d18c:	bde0a904 	addi	r23,r23,-32092
    d190:	003cfb06 	br	c580 <__alt_mem_Onchip_SRAM+0xf800c580>
    d194:	d9002217 	ldw	r4,136(sp)
    d198:	d9402417 	ldw	r5,144(sp)
    d19c:	20800017 	ldw	r2,0(r4)
    d1a0:	21000104 	addi	r4,r4,4
    d1a4:	d9002215 	stw	r4,136(sp)
    d1a8:	11400015 	stw	r5,0(r2)
    d1ac:	003b3d06 	br	bea4 <__alt_mem_Onchip_SRAM+0xf800bea4>
    d1b0:	014000b4 	movhi	r5,2
    d1b4:	29611904 	addi	r5,r5,-31644
    d1b8:	d9402315 	stw	r5,140(sp)
    d1bc:	d9401b17 	ldw	r5,108(sp)
    d1c0:	29400044 	addi	r5,r5,1
    d1c4:	003e6d06 	br	cb7c <__alt_mem_Onchip_SRAM+0xf800cb7c>
    d1c8:	8029883a 	mov	r20,r16
    d1cc:	dd401d83 	ldbu	r21,118(sp)
    d1d0:	df002215 	stw	fp,136(sp)
    d1d4:	0021883a 	mov	r16,zero
    d1d8:	003c0106 	br	c1e0 <__alt_mem_Onchip_SRAM+0xf800c1e0>
    d1dc:	00c000b4 	movhi	r3,2
    d1e0:	18e11504 	addi	r3,r3,-31660
    d1e4:	d8c02315 	stw	r3,140(sp)
    d1e8:	280d883a 	mov	r6,r5
    d1ec:	003c6906 	br	c394 <__alt_mem_Onchip_SRAM+0xf800c394>
    d1f0:	802d883a 	mov	r22,r16
    d1f4:	0021883a 	mov	r16,zero
    d1f8:	003b5406 	br	bf4c <__alt_mem_Onchip_SRAM+0xf800bf4c>
    d1fc:	1823883a 	mov	r17,r3
    d200:	003cf306 	br	c5d0 <__alt_mem_Onchip_SRAM+0xf800c5d0>
    d204:	1823883a 	mov	r17,r3
    d208:	003cad06 	br	c4c0 <__alt_mem_Onchip_SRAM+0xf800c4c0>
    d20c:	0027883a 	mov	r19,zero
    d210:	003fdc06 	br	d184 <__alt_mem_Onchip_SRAM+0xf800d184>
    d214:	d9402217 	ldw	r5,136(sp)
    d218:	8005883a 	mov	r2,r16
    d21c:	b0c00043 	ldbu	r3,1(r22)
    d220:	2c000017 	ldw	r16,0(r5)
    d224:	29000104 	addi	r4,r5,4
    d228:	d9002215 	stw	r4,136(sp)
    d22c:	102d883a 	mov	r22,r2
    d230:	803fa50e 	bge	r16,zero,d0c8 <__alt_mem_Onchip_SRAM+0xf800d0c8>
    d234:	18c03fcc 	andi	r3,r3,255
    d238:	18c0201c 	xori	r3,r3,128
    d23c:	043fffc4 	movi	r16,-1
    d240:	18ffe004 	addi	r3,r3,-128
    d244:	003b4006 	br	bf48 <__alt_mem_Onchip_SRAM+0xf800bf48>
    d248:	d9402303 	ldbu	r5,140(sp)
    d24c:	d9401d85 	stb	r5,118(sp)
    d250:	003cae06 	br	c50c <__alt_mem_Onchip_SRAM+0xf800c50c>
    d254:	d8c02303 	ldbu	r3,140(sp)
    d258:	d8c01d85 	stb	r3,118(sp)
    d25c:	003d1406 	br	c6b0 <__alt_mem_Onchip_SRAM+0xf800c6b0>
    d260:	d8c02303 	ldbu	r3,140(sp)
    d264:	d8c01d85 	stb	r3,118(sp)
    d268:	003cca06 	br	c594 <__alt_mem_Onchip_SRAM+0xf800c594>
    d26c:	8880004c 	andi	r2,r17,1
    d270:	002b883a 	mov	r21,zero
    d274:	10000526 	beq	r2,zero,d28c <___vfiprintf_internal_r+0x14b8>
    d278:	00800c04 	movi	r2,48
    d27c:	d88019c5 	stb	r2,103(sp)
    d280:	dd002817 	ldw	r20,160(sp)
    d284:	ddc019c4 	addi	r23,sp,103
    d288:	003bd506 	br	c1e0 <__alt_mem_Onchip_SRAM+0xf800c1e0>
    d28c:	0029883a 	mov	r20,zero
    d290:	ddc01a04 	addi	r23,sp,104
    d294:	003bd206 	br	c1e0 <__alt_mem_Onchip_SRAM+0xf800c1e0>
    d298:	d9002303 	ldbu	r4,140(sp)
    d29c:	d9001d85 	stb	r4,118(sp)
    d2a0:	003da606 	br	c93c <__alt_mem_Onchip_SRAM+0xf800c93c>
    d2a4:	d8c02303 	ldbu	r3,140(sp)
    d2a8:	d8c01d85 	stb	r3,118(sp)
    d2ac:	003c7606 	br	c488 <__alt_mem_Onchip_SRAM+0xf800c488>
    d2b0:	d8c02303 	ldbu	r3,140(sp)
    d2b4:	d8c01d85 	stb	r3,118(sp)
    d2b8:	003c6506 	br	c450 <__alt_mem_Onchip_SRAM+0xf800c450>
    d2bc:	d9002303 	ldbu	r4,140(sp)
    d2c0:	d9001d85 	stb	r4,118(sp)
    d2c4:	003d3d06 	br	c7bc <__alt_mem_Onchip_SRAM+0xf800c7bc>
    d2c8:	d8c02303 	ldbu	r3,140(sp)
    d2cc:	d8c01d85 	stb	r3,118(sp)
    d2d0:	003d1d06 	br	c748 <__alt_mem_Onchip_SRAM+0xf800c748>
    d2d4:	d8c02303 	ldbu	r3,140(sp)
    d2d8:	d8c01d85 	stb	r3,118(sp)
    d2dc:	003d0306 	br	c6ec <__alt_mem_Onchip_SRAM+0xf800c6ec>

0000d2e0 <__vfiprintf_internal>:
    d2e0:	008000b4 	movhi	r2,2
    d2e4:	10a88304 	addi	r2,r2,-24052
    d2e8:	300f883a 	mov	r7,r6
    d2ec:	280d883a 	mov	r6,r5
    d2f0:	200b883a 	mov	r5,r4
    d2f4:	11000017 	ldw	r4,0(r2)
    d2f8:	000bdd41 	jmpi	bdd4 <___vfiprintf_internal_r>

0000d2fc <__sbprintf>:
    d2fc:	2880030b 	ldhu	r2,12(r5)
    d300:	2ac01917 	ldw	r11,100(r5)
    d304:	2a80038b 	ldhu	r10,14(r5)
    d308:	2a400717 	ldw	r9,28(r5)
    d30c:	2a000917 	ldw	r8,36(r5)
    d310:	defee204 	addi	sp,sp,-1144
    d314:	00c10004 	movi	r3,1024
    d318:	dc011a15 	stw	r16,1128(sp)
    d31c:	10bfff4c 	andi	r2,r2,65533
    d320:	2821883a 	mov	r16,r5
    d324:	d8cb883a 	add	r5,sp,r3
    d328:	dc811c15 	stw	r18,1136(sp)
    d32c:	dc411b15 	stw	r17,1132(sp)
    d330:	dfc11d15 	stw	ra,1140(sp)
    d334:	2025883a 	mov	r18,r4
    d338:	d881030d 	sth	r2,1036(sp)
    d33c:	dac11915 	stw	r11,1124(sp)
    d340:	da81038d 	sth	r10,1038(sp)
    d344:	da410715 	stw	r9,1052(sp)
    d348:	da010915 	stw	r8,1060(sp)
    d34c:	dec10015 	stw	sp,1024(sp)
    d350:	dec10415 	stw	sp,1040(sp)
    d354:	d8c10215 	stw	r3,1032(sp)
    d358:	d8c10515 	stw	r3,1044(sp)
    d35c:	d8010615 	stw	zero,1048(sp)
    d360:	000bdd40 	call	bdd4 <___vfiprintf_internal_r>
    d364:	1023883a 	mov	r17,r2
    d368:	10000416 	blt	r2,zero,d37c <__sbprintf+0x80>
    d36c:	d9410004 	addi	r5,sp,1024
    d370:	9009883a 	mov	r4,r18
    d374:	00083cc0 	call	83cc <_fflush_r>
    d378:	10000d1e 	bne	r2,zero,d3b0 <__sbprintf+0xb4>
    d37c:	d881030b 	ldhu	r2,1036(sp)
    d380:	1080100c 	andi	r2,r2,64
    d384:	10000326 	beq	r2,zero,d394 <__sbprintf+0x98>
    d388:	8080030b 	ldhu	r2,12(r16)
    d38c:	10801014 	ori	r2,r2,64
    d390:	8080030d 	sth	r2,12(r16)
    d394:	8805883a 	mov	r2,r17
    d398:	dfc11d17 	ldw	ra,1140(sp)
    d39c:	dc811c17 	ldw	r18,1136(sp)
    d3a0:	dc411b17 	ldw	r17,1132(sp)
    d3a4:	dc011a17 	ldw	r16,1128(sp)
    d3a8:	dec11e04 	addi	sp,sp,1144
    d3ac:	f800283a 	ret
    d3b0:	047fffc4 	movi	r17,-1
    d3b4:	003ff106 	br	d37c <__alt_mem_Onchip_SRAM+0xf800d37c>

0000d3b8 <_write_r>:
    d3b8:	defffd04 	addi	sp,sp,-12
    d3bc:	2805883a 	mov	r2,r5
    d3c0:	dc000015 	stw	r16,0(sp)
    d3c4:	040000b4 	movhi	r16,2
    d3c8:	dc400115 	stw	r17,4(sp)
    d3cc:	300b883a 	mov	r5,r6
    d3d0:	842fb404 	addi	r16,r16,-16688
    d3d4:	2023883a 	mov	r17,r4
    d3d8:	380d883a 	mov	r6,r7
    d3dc:	1009883a 	mov	r4,r2
    d3e0:	dfc00215 	stw	ra,8(sp)
    d3e4:	80000015 	stw	zero,0(r16)
    d3e8:	0012a580 	call	12a58 <write>
    d3ec:	00ffffc4 	movi	r3,-1
    d3f0:	10c00526 	beq	r2,r3,d408 <_write_r+0x50>
    d3f4:	dfc00217 	ldw	ra,8(sp)
    d3f8:	dc400117 	ldw	r17,4(sp)
    d3fc:	dc000017 	ldw	r16,0(sp)
    d400:	dec00304 	addi	sp,sp,12
    d404:	f800283a 	ret
    d408:	80c00017 	ldw	r3,0(r16)
    d40c:	183ff926 	beq	r3,zero,d3f4 <__alt_mem_Onchip_SRAM+0xf800d3f4>
    d410:	88c00015 	stw	r3,0(r17)
    d414:	003ff706 	br	d3f4 <__alt_mem_Onchip_SRAM+0xf800d3f4>

0000d418 <_close_r>:
    d418:	defffd04 	addi	sp,sp,-12
    d41c:	dc000015 	stw	r16,0(sp)
    d420:	040000b4 	movhi	r16,2
    d424:	dc400115 	stw	r17,4(sp)
    d428:	842fb404 	addi	r16,r16,-16688
    d42c:	2023883a 	mov	r17,r4
    d430:	2809883a 	mov	r4,r5
    d434:	dfc00215 	stw	ra,8(sp)
    d438:	80000015 	stw	zero,0(r16)
    d43c:	0011e380 	call	11e38 <close>
    d440:	00ffffc4 	movi	r3,-1
    d444:	10c00526 	beq	r2,r3,d45c <_close_r+0x44>
    d448:	dfc00217 	ldw	ra,8(sp)
    d44c:	dc400117 	ldw	r17,4(sp)
    d450:	dc000017 	ldw	r16,0(sp)
    d454:	dec00304 	addi	sp,sp,12
    d458:	f800283a 	ret
    d45c:	80c00017 	ldw	r3,0(r16)
    d460:	183ff926 	beq	r3,zero,d448 <__alt_mem_Onchip_SRAM+0xf800d448>
    d464:	88c00015 	stw	r3,0(r17)
    d468:	003ff706 	br	d448 <__alt_mem_Onchip_SRAM+0xf800d448>

0000d46c <_calloc_r>:
    d46c:	defffe04 	addi	sp,sp,-8
    d470:	2805883a 	mov	r2,r5
    d474:	dc000015 	stw	r16,0(sp)
    d478:	300b883a 	mov	r5,r6
    d47c:	2021883a 	mov	r16,r4
    d480:	1009883a 	mov	r4,r2
    d484:	dfc00115 	stw	ra,4(sp)
    d488:	00015680 	call	1568 <__mulsi3>
    d48c:	100b883a 	mov	r5,r2
    d490:	8009883a 	mov	r4,r16
    d494:	00015b80 	call	15b8 <_malloc_r>
    d498:	10002926 	beq	r2,zero,d540 <_calloc_r+0xd4>
    d49c:	11bfff17 	ldw	r6,-4(r2)
    d4a0:	1021883a 	mov	r16,r2
    d4a4:	00bfff04 	movi	r2,-4
    d4a8:	308c703a 	and	r6,r6,r2
    d4ac:	00c00904 	movi	r3,36
    d4b0:	308d883a 	add	r6,r6,r2
    d4b4:	19801636 	bltu	r3,r6,d510 <_calloc_r+0xa4>
    d4b8:	008004c4 	movi	r2,19
    d4bc:	11800b2e 	bgeu	r2,r6,d4ec <_calloc_r+0x80>
    d4c0:	80000015 	stw	zero,0(r16)
    d4c4:	80000115 	stw	zero,4(r16)
    d4c8:	008006c4 	movi	r2,27
    d4cc:	11801a2e 	bgeu	r2,r6,d538 <_calloc_r+0xcc>
    d4d0:	80000215 	stw	zero,8(r16)
    d4d4:	80000315 	stw	zero,12(r16)
    d4d8:	30c0151e 	bne	r6,r3,d530 <_calloc_r+0xc4>
    d4dc:	80000415 	stw	zero,16(r16)
    d4e0:	80800604 	addi	r2,r16,24
    d4e4:	80000515 	stw	zero,20(r16)
    d4e8:	00000106 	br	d4f0 <_calloc_r+0x84>
    d4ec:	8005883a 	mov	r2,r16
    d4f0:	10000015 	stw	zero,0(r2)
    d4f4:	10000115 	stw	zero,4(r2)
    d4f8:	10000215 	stw	zero,8(r2)
    d4fc:	8005883a 	mov	r2,r16
    d500:	dfc00117 	ldw	ra,4(sp)
    d504:	dc000017 	ldw	r16,0(sp)
    d508:	dec00204 	addi	sp,sp,8
    d50c:	f800283a 	ret
    d510:	000b883a 	mov	r5,zero
    d514:	8009883a 	mov	r4,r16
    d518:	00092e40 	call	92e4 <memset>
    d51c:	8005883a 	mov	r2,r16
    d520:	dfc00117 	ldw	ra,4(sp)
    d524:	dc000017 	ldw	r16,0(sp)
    d528:	dec00204 	addi	sp,sp,8
    d52c:	f800283a 	ret
    d530:	80800404 	addi	r2,r16,16
    d534:	003fee06 	br	d4f0 <__alt_mem_Onchip_SRAM+0xf800d4f0>
    d538:	80800204 	addi	r2,r16,8
    d53c:	003fec06 	br	d4f0 <__alt_mem_Onchip_SRAM+0xf800d4f0>
    d540:	0005883a 	mov	r2,zero
    d544:	003fee06 	br	d500 <__alt_mem_Onchip_SRAM+0xf800d500>

0000d548 <_fclose_r>:
    d548:	28003926 	beq	r5,zero,d630 <_fclose_r+0xe8>
    d54c:	defffc04 	addi	sp,sp,-16
    d550:	dc400115 	stw	r17,4(sp)
    d554:	dc000015 	stw	r16,0(sp)
    d558:	dfc00315 	stw	ra,12(sp)
    d55c:	dc800215 	stw	r18,8(sp)
    d560:	2023883a 	mov	r17,r4
    d564:	2821883a 	mov	r16,r5
    d568:	20000226 	beq	r4,zero,d574 <_fclose_r+0x2c>
    d56c:	20800e17 	ldw	r2,56(r4)
    d570:	10002726 	beq	r2,zero,d610 <_fclose_r+0xc8>
    d574:	8080030f 	ldh	r2,12(r16)
    d578:	1000071e 	bne	r2,zero,d598 <_fclose_r+0x50>
    d57c:	0005883a 	mov	r2,zero
    d580:	dfc00317 	ldw	ra,12(sp)
    d584:	dc800217 	ldw	r18,8(sp)
    d588:	dc400117 	ldw	r17,4(sp)
    d58c:	dc000017 	ldw	r16,0(sp)
    d590:	dec00404 	addi	sp,sp,16
    d594:	f800283a 	ret
    d598:	800b883a 	mov	r5,r16
    d59c:	8809883a 	mov	r4,r17
    d5a0:	00081b00 	call	81b0 <__sflush_r>
    d5a4:	1025883a 	mov	r18,r2
    d5a8:	80800b17 	ldw	r2,44(r16)
    d5ac:	10000426 	beq	r2,zero,d5c0 <_fclose_r+0x78>
    d5b0:	81400717 	ldw	r5,28(r16)
    d5b4:	8809883a 	mov	r4,r17
    d5b8:	103ee83a 	callr	r2
    d5bc:	10001616 	blt	r2,zero,d618 <_fclose_r+0xd0>
    d5c0:	8080030b 	ldhu	r2,12(r16)
    d5c4:	1080200c 	andi	r2,r2,128
    d5c8:	1000151e 	bne	r2,zero,d620 <_fclose_r+0xd8>
    d5cc:	81400c17 	ldw	r5,48(r16)
    d5d0:	28000526 	beq	r5,zero,d5e8 <_fclose_r+0xa0>
    d5d4:	80801004 	addi	r2,r16,64
    d5d8:	28800226 	beq	r5,r2,d5e4 <_fclose_r+0x9c>
    d5dc:	8809883a 	mov	r4,r17
    d5e0:	000892c0 	call	892c <_free_r>
    d5e4:	80000c15 	stw	zero,48(r16)
    d5e8:	81401117 	ldw	r5,68(r16)
    d5ec:	28000326 	beq	r5,zero,d5fc <_fclose_r+0xb4>
    d5f0:	8809883a 	mov	r4,r17
    d5f4:	000892c0 	call	892c <_free_r>
    d5f8:	80001115 	stw	zero,68(r16)
    d5fc:	00087c80 	call	87c8 <__sfp_lock_acquire>
    d600:	8000030d 	sth	zero,12(r16)
    d604:	00087cc0 	call	87cc <__sfp_lock_release>
    d608:	9005883a 	mov	r2,r18
    d60c:	003fdc06 	br	d580 <__alt_mem_Onchip_SRAM+0xf800d580>
    d610:	00087b80 	call	87b8 <__sinit>
    d614:	003fd706 	br	d574 <__alt_mem_Onchip_SRAM+0xf800d574>
    d618:	04bfffc4 	movi	r18,-1
    d61c:	003fe806 	br	d5c0 <__alt_mem_Onchip_SRAM+0xf800d5c0>
    d620:	81400417 	ldw	r5,16(r16)
    d624:	8809883a 	mov	r4,r17
    d628:	000892c0 	call	892c <_free_r>
    d62c:	003fe706 	br	d5cc <__alt_mem_Onchip_SRAM+0xf800d5cc>
    d630:	0005883a 	mov	r2,zero
    d634:	f800283a 	ret

0000d638 <fclose>:
    d638:	008000b4 	movhi	r2,2
    d63c:	10a88304 	addi	r2,r2,-24052
    d640:	200b883a 	mov	r5,r4
    d644:	11000017 	ldw	r4,0(r2)
    d648:	000d5481 	jmpi	d548 <_fclose_r>

0000d64c <__fputwc>:
    d64c:	defff804 	addi	sp,sp,-32
    d650:	dcc00415 	stw	r19,16(sp)
    d654:	dc800315 	stw	r18,12(sp)
    d658:	dc000115 	stw	r16,4(sp)
    d65c:	dfc00715 	stw	ra,28(sp)
    d660:	dd400615 	stw	r21,24(sp)
    d664:	dd000515 	stw	r20,20(sp)
    d668:	dc400215 	stw	r17,8(sp)
    d66c:	2027883a 	mov	r19,r4
    d670:	2825883a 	mov	r18,r5
    d674:	3021883a 	mov	r16,r6
    d678:	0008ea80 	call	8ea8 <__locale_mb_cur_max>
    d67c:	00c00044 	movi	r3,1
    d680:	10c03e26 	beq	r2,r3,d77c <__fputwc+0x130>
    d684:	81c01704 	addi	r7,r16,92
    d688:	900d883a 	mov	r6,r18
    d68c:	d80b883a 	mov	r5,sp
    d690:	9809883a 	mov	r4,r19
    d694:	000e6a40 	call	e6a4 <_wcrtomb_r>
    d698:	1029883a 	mov	r20,r2
    d69c:	00bfffc4 	movi	r2,-1
    d6a0:	a0802026 	beq	r20,r2,d724 <__fputwc+0xd8>
    d6a4:	d9400003 	ldbu	r5,0(sp)
    d6a8:	a0001c26 	beq	r20,zero,d71c <__fputwc+0xd0>
    d6ac:	0023883a 	mov	r17,zero
    d6b0:	05400284 	movi	r21,10
    d6b4:	00000906 	br	d6dc <__fputwc+0x90>
    d6b8:	80800017 	ldw	r2,0(r16)
    d6bc:	11400005 	stb	r5,0(r2)
    d6c0:	80c00017 	ldw	r3,0(r16)
    d6c4:	18c00044 	addi	r3,r3,1
    d6c8:	80c00015 	stw	r3,0(r16)
    d6cc:	8c400044 	addi	r17,r17,1
    d6d0:	dc45883a 	add	r2,sp,r17
    d6d4:	8d00112e 	bgeu	r17,r20,d71c <__fputwc+0xd0>
    d6d8:	11400003 	ldbu	r5,0(r2)
    d6dc:	80c00217 	ldw	r3,8(r16)
    d6e0:	18ffffc4 	addi	r3,r3,-1
    d6e4:	80c00215 	stw	r3,8(r16)
    d6e8:	183ff30e 	bge	r3,zero,d6b8 <__alt_mem_Onchip_SRAM+0xf800d6b8>
    d6ec:	80800617 	ldw	r2,24(r16)
    d6f0:	18801916 	blt	r3,r2,d758 <__fputwc+0x10c>
    d6f4:	80800017 	ldw	r2,0(r16)
    d6f8:	11400005 	stb	r5,0(r2)
    d6fc:	80800017 	ldw	r2,0(r16)
    d700:	10c00003 	ldbu	r3,0(r2)
    d704:	10800044 	addi	r2,r2,1
    d708:	1d402326 	beq	r3,r21,d798 <__fputwc+0x14c>
    d70c:	80800015 	stw	r2,0(r16)
    d710:	8c400044 	addi	r17,r17,1
    d714:	dc45883a 	add	r2,sp,r17
    d718:	8d3fef36 	bltu	r17,r20,d6d8 <__alt_mem_Onchip_SRAM+0xf800d6d8>
    d71c:	9005883a 	mov	r2,r18
    d720:	00000406 	br	d734 <__fputwc+0xe8>
    d724:	80c0030b 	ldhu	r3,12(r16)
    d728:	a005883a 	mov	r2,r20
    d72c:	18c01014 	ori	r3,r3,64
    d730:	80c0030d 	sth	r3,12(r16)
    d734:	dfc00717 	ldw	ra,28(sp)
    d738:	dd400617 	ldw	r21,24(sp)
    d73c:	dd000517 	ldw	r20,20(sp)
    d740:	dcc00417 	ldw	r19,16(sp)
    d744:	dc800317 	ldw	r18,12(sp)
    d748:	dc400217 	ldw	r17,8(sp)
    d74c:	dc000117 	ldw	r16,4(sp)
    d750:	dec00804 	addi	sp,sp,32
    d754:	f800283a 	ret
    d758:	800d883a 	mov	r6,r16
    d75c:	29403fcc 	andi	r5,r5,255
    d760:	9809883a 	mov	r4,r19
    d764:	000e54c0 	call	e54c <__swbuf_r>
    d768:	10bfffe0 	cmpeqi	r2,r2,-1
    d76c:	10803fcc 	andi	r2,r2,255
    d770:	103fd626 	beq	r2,zero,d6cc <__alt_mem_Onchip_SRAM+0xf800d6cc>
    d774:	00bfffc4 	movi	r2,-1
    d778:	003fee06 	br	d734 <__alt_mem_Onchip_SRAM+0xf800d734>
    d77c:	90ffffc4 	addi	r3,r18,-1
    d780:	01003f84 	movi	r4,254
    d784:	20ffbf36 	bltu	r4,r3,d684 <__alt_mem_Onchip_SRAM+0xf800d684>
    d788:	900b883a 	mov	r5,r18
    d78c:	dc800005 	stb	r18,0(sp)
    d790:	1029883a 	mov	r20,r2
    d794:	003fc506 	br	d6ac <__alt_mem_Onchip_SRAM+0xf800d6ac>
    d798:	800d883a 	mov	r6,r16
    d79c:	a80b883a 	mov	r5,r21
    d7a0:	9809883a 	mov	r4,r19
    d7a4:	000e54c0 	call	e54c <__swbuf_r>
    d7a8:	10bfffe0 	cmpeqi	r2,r2,-1
    d7ac:	003fef06 	br	d76c <__alt_mem_Onchip_SRAM+0xf800d76c>

0000d7b0 <_fputwc_r>:
    d7b0:	3080030b 	ldhu	r2,12(r6)
    d7b4:	10c8000c 	andi	r3,r2,8192
    d7b8:	1800051e 	bne	r3,zero,d7d0 <_fputwc_r+0x20>
    d7bc:	30c01917 	ldw	r3,100(r6)
    d7c0:	10880014 	ori	r2,r2,8192
    d7c4:	3080030d 	sth	r2,12(r6)
    d7c8:	18880014 	ori	r2,r3,8192
    d7cc:	30801915 	stw	r2,100(r6)
    d7d0:	000d64c1 	jmpi	d64c <__fputwc>

0000d7d4 <fputwc>:
    d7d4:	008000b4 	movhi	r2,2
    d7d8:	defffc04 	addi	sp,sp,-16
    d7dc:	10a88304 	addi	r2,r2,-24052
    d7e0:	dc000115 	stw	r16,4(sp)
    d7e4:	14000017 	ldw	r16,0(r2)
    d7e8:	dc400215 	stw	r17,8(sp)
    d7ec:	dfc00315 	stw	ra,12(sp)
    d7f0:	2023883a 	mov	r17,r4
    d7f4:	80000226 	beq	r16,zero,d800 <fputwc+0x2c>
    d7f8:	80800e17 	ldw	r2,56(r16)
    d7fc:	10001026 	beq	r2,zero,d840 <fputwc+0x6c>
    d800:	2880030b 	ldhu	r2,12(r5)
    d804:	10c8000c 	andi	r3,r2,8192
    d808:	1800051e 	bne	r3,zero,d820 <fputwc+0x4c>
    d80c:	28c01917 	ldw	r3,100(r5)
    d810:	10880014 	ori	r2,r2,8192
    d814:	2880030d 	sth	r2,12(r5)
    d818:	18880014 	ori	r2,r3,8192
    d81c:	28801915 	stw	r2,100(r5)
    d820:	280d883a 	mov	r6,r5
    d824:	8009883a 	mov	r4,r16
    d828:	880b883a 	mov	r5,r17
    d82c:	dfc00317 	ldw	ra,12(sp)
    d830:	dc400217 	ldw	r17,8(sp)
    d834:	dc000117 	ldw	r16,4(sp)
    d838:	dec00404 	addi	sp,sp,16
    d83c:	000d64c1 	jmpi	d64c <__fputwc>
    d840:	8009883a 	mov	r4,r16
    d844:	d9400015 	stw	r5,0(sp)
    d848:	00087b80 	call	87b8 <__sinit>
    d84c:	d9400017 	ldw	r5,0(sp)
    d850:	003feb06 	br	d800 <__alt_mem_Onchip_SRAM+0xf800d800>

0000d854 <_fstat_r>:
    d854:	defffd04 	addi	sp,sp,-12
    d858:	2805883a 	mov	r2,r5
    d85c:	dc000015 	stw	r16,0(sp)
    d860:	040000b4 	movhi	r16,2
    d864:	dc400115 	stw	r17,4(sp)
    d868:	842fb404 	addi	r16,r16,-16688
    d86c:	2023883a 	mov	r17,r4
    d870:	300b883a 	mov	r5,r6
    d874:	1009883a 	mov	r4,r2
    d878:	dfc00215 	stw	ra,8(sp)
    d87c:	80000015 	stw	zero,0(r16)
    d880:	0011f780 	call	11f78 <fstat>
    d884:	00ffffc4 	movi	r3,-1
    d888:	10c00526 	beq	r2,r3,d8a0 <_fstat_r+0x4c>
    d88c:	dfc00217 	ldw	ra,8(sp)
    d890:	dc400117 	ldw	r17,4(sp)
    d894:	dc000017 	ldw	r16,0(sp)
    d898:	dec00304 	addi	sp,sp,12
    d89c:	f800283a 	ret
    d8a0:	80c00017 	ldw	r3,0(r16)
    d8a4:	183ff926 	beq	r3,zero,d88c <__alt_mem_Onchip_SRAM+0xf800d88c>
    d8a8:	88c00015 	stw	r3,0(r17)
    d8ac:	003ff706 	br	d88c <__alt_mem_Onchip_SRAM+0xf800d88c>

0000d8b0 <__sfvwrite_r>:
    d8b0:	30800217 	ldw	r2,8(r6)
    d8b4:	10006726 	beq	r2,zero,da54 <__sfvwrite_r+0x1a4>
    d8b8:	28c0030b 	ldhu	r3,12(r5)
    d8bc:	defff404 	addi	sp,sp,-48
    d8c0:	dd400715 	stw	r21,28(sp)
    d8c4:	dd000615 	stw	r20,24(sp)
    d8c8:	dc000215 	stw	r16,8(sp)
    d8cc:	dfc00b15 	stw	ra,44(sp)
    d8d0:	df000a15 	stw	fp,40(sp)
    d8d4:	ddc00915 	stw	r23,36(sp)
    d8d8:	dd800815 	stw	r22,32(sp)
    d8dc:	dcc00515 	stw	r19,20(sp)
    d8e0:	dc800415 	stw	r18,16(sp)
    d8e4:	dc400315 	stw	r17,12(sp)
    d8e8:	1880020c 	andi	r2,r3,8
    d8ec:	2821883a 	mov	r16,r5
    d8f0:	202b883a 	mov	r21,r4
    d8f4:	3029883a 	mov	r20,r6
    d8f8:	10002726 	beq	r2,zero,d998 <__sfvwrite_r+0xe8>
    d8fc:	28800417 	ldw	r2,16(r5)
    d900:	10002526 	beq	r2,zero,d998 <__sfvwrite_r+0xe8>
    d904:	1880008c 	andi	r2,r3,2
    d908:	a4400017 	ldw	r17,0(r20)
    d90c:	10002a26 	beq	r2,zero,d9b8 <__sfvwrite_r+0x108>
    d910:	05a00034 	movhi	r22,32768
    d914:	0027883a 	mov	r19,zero
    d918:	0025883a 	mov	r18,zero
    d91c:	b5bf0004 	addi	r22,r22,-1024
    d920:	980d883a 	mov	r6,r19
    d924:	a809883a 	mov	r4,r21
    d928:	90004626 	beq	r18,zero,da44 <__sfvwrite_r+0x194>
    d92c:	900f883a 	mov	r7,r18
    d930:	b480022e 	bgeu	r22,r18,d93c <__sfvwrite_r+0x8c>
    d934:	01e00034 	movhi	r7,32768
    d938:	39ff0004 	addi	r7,r7,-1024
    d93c:	80800917 	ldw	r2,36(r16)
    d940:	81400717 	ldw	r5,28(r16)
    d944:	103ee83a 	callr	r2
    d948:	00805a0e 	bge	zero,r2,dab4 <__sfvwrite_r+0x204>
    d94c:	a0c00217 	ldw	r3,8(r20)
    d950:	98a7883a 	add	r19,r19,r2
    d954:	90a5c83a 	sub	r18,r18,r2
    d958:	1885c83a 	sub	r2,r3,r2
    d95c:	a0800215 	stw	r2,8(r20)
    d960:	103fef1e 	bne	r2,zero,d920 <__alt_mem_Onchip_SRAM+0xf800d920>
    d964:	0005883a 	mov	r2,zero
    d968:	dfc00b17 	ldw	ra,44(sp)
    d96c:	df000a17 	ldw	fp,40(sp)
    d970:	ddc00917 	ldw	r23,36(sp)
    d974:	dd800817 	ldw	r22,32(sp)
    d978:	dd400717 	ldw	r21,28(sp)
    d97c:	dd000617 	ldw	r20,24(sp)
    d980:	dcc00517 	ldw	r19,20(sp)
    d984:	dc800417 	ldw	r18,16(sp)
    d988:	dc400317 	ldw	r17,12(sp)
    d98c:	dc000217 	ldw	r16,8(sp)
    d990:	dec00c04 	addi	sp,sp,48
    d994:	f800283a 	ret
    d998:	800b883a 	mov	r5,r16
    d99c:	a809883a 	mov	r4,r21
    d9a0:	00067ac0 	call	67ac <__swsetup_r>
    d9a4:	1000ee1e 	bne	r2,zero,dd60 <__sfvwrite_r+0x4b0>
    d9a8:	80c0030b 	ldhu	r3,12(r16)
    d9ac:	a4400017 	ldw	r17,0(r20)
    d9b0:	1880008c 	andi	r2,r3,2
    d9b4:	103fd61e 	bne	r2,zero,d910 <__alt_mem_Onchip_SRAM+0xf800d910>
    d9b8:	1880004c 	andi	r2,r3,1
    d9bc:	1000421e 	bne	r2,zero,dac8 <__sfvwrite_r+0x218>
    d9c0:	0039883a 	mov	fp,zero
    d9c4:	0025883a 	mov	r18,zero
    d9c8:	90001a26 	beq	r18,zero,da34 <__sfvwrite_r+0x184>
    d9cc:	1880800c 	andi	r2,r3,512
    d9d0:	84c00217 	ldw	r19,8(r16)
    d9d4:	10002126 	beq	r2,zero,da5c <__sfvwrite_r+0x1ac>
    d9d8:	982f883a 	mov	r23,r19
    d9dc:	94c09636 	bltu	r18,r19,dc38 <__sfvwrite_r+0x388>
    d9e0:	1881200c 	andi	r2,r3,1152
    d9e4:	1000a11e 	bne	r2,zero,dc6c <__sfvwrite_r+0x3bc>
    d9e8:	81000017 	ldw	r4,0(r16)
    d9ec:	b80d883a 	mov	r6,r23
    d9f0:	e00b883a 	mov	r5,fp
    d9f4:	000de2c0 	call	de2c <memmove>
    d9f8:	80c00217 	ldw	r3,8(r16)
    d9fc:	81000017 	ldw	r4,0(r16)
    da00:	9005883a 	mov	r2,r18
    da04:	1ce7c83a 	sub	r19,r3,r19
    da08:	25cf883a 	add	r7,r4,r23
    da0c:	84c00215 	stw	r19,8(r16)
    da10:	81c00015 	stw	r7,0(r16)
    da14:	a0c00217 	ldw	r3,8(r20)
    da18:	e0b9883a 	add	fp,fp,r2
    da1c:	90a5c83a 	sub	r18,r18,r2
    da20:	18a7c83a 	sub	r19,r3,r2
    da24:	a4c00215 	stw	r19,8(r20)
    da28:	983fce26 	beq	r19,zero,d964 <__alt_mem_Onchip_SRAM+0xf800d964>
    da2c:	80c0030b 	ldhu	r3,12(r16)
    da30:	903fe61e 	bne	r18,zero,d9cc <__alt_mem_Onchip_SRAM+0xf800d9cc>
    da34:	8f000017 	ldw	fp,0(r17)
    da38:	8c800117 	ldw	r18,4(r17)
    da3c:	8c400204 	addi	r17,r17,8
    da40:	003fe106 	br	d9c8 <__alt_mem_Onchip_SRAM+0xf800d9c8>
    da44:	8cc00017 	ldw	r19,0(r17)
    da48:	8c800117 	ldw	r18,4(r17)
    da4c:	8c400204 	addi	r17,r17,8
    da50:	003fb306 	br	d920 <__alt_mem_Onchip_SRAM+0xf800d920>
    da54:	0005883a 	mov	r2,zero
    da58:	f800283a 	ret
    da5c:	81000017 	ldw	r4,0(r16)
    da60:	80800417 	ldw	r2,16(r16)
    da64:	11005a36 	bltu	r2,r4,dbd0 <__sfvwrite_r+0x320>
    da68:	85c00517 	ldw	r23,20(r16)
    da6c:	95c05836 	bltu	r18,r23,dbd0 <__sfvwrite_r+0x320>
    da70:	00a00034 	movhi	r2,32768
    da74:	10bfffc4 	addi	r2,r2,-1
    da78:	9009883a 	mov	r4,r18
    da7c:	1480012e 	bgeu	r2,r18,da84 <__sfvwrite_r+0x1d4>
    da80:	1009883a 	mov	r4,r2
    da84:	b80b883a 	mov	r5,r23
    da88:	00013b40 	call	13b4 <__divsi3>
    da8c:	b80b883a 	mov	r5,r23
    da90:	1009883a 	mov	r4,r2
    da94:	00015680 	call	1568 <__mulsi3>
    da98:	81400717 	ldw	r5,28(r16)
    da9c:	80c00917 	ldw	r3,36(r16)
    daa0:	100f883a 	mov	r7,r2
    daa4:	e00d883a 	mov	r6,fp
    daa8:	a809883a 	mov	r4,r21
    daac:	183ee83a 	callr	r3
    dab0:	00bfd816 	blt	zero,r2,da14 <__alt_mem_Onchip_SRAM+0xf800da14>
    dab4:	8080030b 	ldhu	r2,12(r16)
    dab8:	10801014 	ori	r2,r2,64
    dabc:	8080030d 	sth	r2,12(r16)
    dac0:	00bfffc4 	movi	r2,-1
    dac4:	003fa806 	br	d968 <__alt_mem_Onchip_SRAM+0xf800d968>
    dac8:	0027883a 	mov	r19,zero
    dacc:	0011883a 	mov	r8,zero
    dad0:	0039883a 	mov	fp,zero
    dad4:	0025883a 	mov	r18,zero
    dad8:	90001f26 	beq	r18,zero,db58 <__sfvwrite_r+0x2a8>
    dadc:	40005a26 	beq	r8,zero,dc48 <__sfvwrite_r+0x398>
    dae0:	982d883a 	mov	r22,r19
    dae4:	94c0012e 	bgeu	r18,r19,daec <__sfvwrite_r+0x23c>
    dae8:	902d883a 	mov	r22,r18
    daec:	81000017 	ldw	r4,0(r16)
    daf0:	80800417 	ldw	r2,16(r16)
    daf4:	b02f883a 	mov	r23,r22
    daf8:	81c00517 	ldw	r7,20(r16)
    dafc:	1100032e 	bgeu	r2,r4,db0c <__sfvwrite_r+0x25c>
    db00:	80c00217 	ldw	r3,8(r16)
    db04:	38c7883a 	add	r3,r7,r3
    db08:	1d801816 	blt	r3,r22,db6c <__sfvwrite_r+0x2bc>
    db0c:	b1c03e16 	blt	r22,r7,dc08 <__sfvwrite_r+0x358>
    db10:	80800917 	ldw	r2,36(r16)
    db14:	81400717 	ldw	r5,28(r16)
    db18:	e00d883a 	mov	r6,fp
    db1c:	da000115 	stw	r8,4(sp)
    db20:	a809883a 	mov	r4,r21
    db24:	103ee83a 	callr	r2
    db28:	102f883a 	mov	r23,r2
    db2c:	da000117 	ldw	r8,4(sp)
    db30:	00bfe00e 	bge	zero,r2,dab4 <__alt_mem_Onchip_SRAM+0xf800dab4>
    db34:	9de7c83a 	sub	r19,r19,r23
    db38:	98001f26 	beq	r19,zero,dbb8 <__sfvwrite_r+0x308>
    db3c:	a0800217 	ldw	r2,8(r20)
    db40:	e5f9883a 	add	fp,fp,r23
    db44:	95e5c83a 	sub	r18,r18,r23
    db48:	15efc83a 	sub	r23,r2,r23
    db4c:	a5c00215 	stw	r23,8(r20)
    db50:	b83f8426 	beq	r23,zero,d964 <__alt_mem_Onchip_SRAM+0xf800d964>
    db54:	903fe11e 	bne	r18,zero,dadc <__alt_mem_Onchip_SRAM+0xf800dadc>
    db58:	8f000017 	ldw	fp,0(r17)
    db5c:	8c800117 	ldw	r18,4(r17)
    db60:	0011883a 	mov	r8,zero
    db64:	8c400204 	addi	r17,r17,8
    db68:	003fdb06 	br	dad8 <__alt_mem_Onchip_SRAM+0xf800dad8>
    db6c:	180d883a 	mov	r6,r3
    db70:	e00b883a 	mov	r5,fp
    db74:	da000115 	stw	r8,4(sp)
    db78:	d8c00015 	stw	r3,0(sp)
    db7c:	000de2c0 	call	de2c <memmove>
    db80:	d8c00017 	ldw	r3,0(sp)
    db84:	80800017 	ldw	r2,0(r16)
    db88:	800b883a 	mov	r5,r16
    db8c:	a809883a 	mov	r4,r21
    db90:	10c5883a 	add	r2,r2,r3
    db94:	80800015 	stw	r2,0(r16)
    db98:	d8c00015 	stw	r3,0(sp)
    db9c:	00083cc0 	call	83cc <_fflush_r>
    dba0:	d8c00017 	ldw	r3,0(sp)
    dba4:	da000117 	ldw	r8,4(sp)
    dba8:	103fc21e 	bne	r2,zero,dab4 <__alt_mem_Onchip_SRAM+0xf800dab4>
    dbac:	182f883a 	mov	r23,r3
    dbb0:	9de7c83a 	sub	r19,r19,r23
    dbb4:	983fe11e 	bne	r19,zero,db3c <__alt_mem_Onchip_SRAM+0xf800db3c>
    dbb8:	800b883a 	mov	r5,r16
    dbbc:	a809883a 	mov	r4,r21
    dbc0:	00083cc0 	call	83cc <_fflush_r>
    dbc4:	103fbb1e 	bne	r2,zero,dab4 <__alt_mem_Onchip_SRAM+0xf800dab4>
    dbc8:	0011883a 	mov	r8,zero
    dbcc:	003fdb06 	br	db3c <__alt_mem_Onchip_SRAM+0xf800db3c>
    dbd0:	94c0012e 	bgeu	r18,r19,dbd8 <__sfvwrite_r+0x328>
    dbd4:	9027883a 	mov	r19,r18
    dbd8:	980d883a 	mov	r6,r19
    dbdc:	e00b883a 	mov	r5,fp
    dbe0:	000de2c0 	call	de2c <memmove>
    dbe4:	80800217 	ldw	r2,8(r16)
    dbe8:	80c00017 	ldw	r3,0(r16)
    dbec:	14c5c83a 	sub	r2,r2,r19
    dbf0:	1cc7883a 	add	r3,r3,r19
    dbf4:	80800215 	stw	r2,8(r16)
    dbf8:	80c00015 	stw	r3,0(r16)
    dbfc:	10004326 	beq	r2,zero,dd0c <__sfvwrite_r+0x45c>
    dc00:	9805883a 	mov	r2,r19
    dc04:	003f8306 	br	da14 <__alt_mem_Onchip_SRAM+0xf800da14>
    dc08:	b00d883a 	mov	r6,r22
    dc0c:	e00b883a 	mov	r5,fp
    dc10:	da000115 	stw	r8,4(sp)
    dc14:	000de2c0 	call	de2c <memmove>
    dc18:	80800217 	ldw	r2,8(r16)
    dc1c:	80c00017 	ldw	r3,0(r16)
    dc20:	da000117 	ldw	r8,4(sp)
    dc24:	1585c83a 	sub	r2,r2,r22
    dc28:	1dad883a 	add	r22,r3,r22
    dc2c:	80800215 	stw	r2,8(r16)
    dc30:	85800015 	stw	r22,0(r16)
    dc34:	003fbf06 	br	db34 <__alt_mem_Onchip_SRAM+0xf800db34>
    dc38:	81000017 	ldw	r4,0(r16)
    dc3c:	9027883a 	mov	r19,r18
    dc40:	902f883a 	mov	r23,r18
    dc44:	003f6906 	br	d9ec <__alt_mem_Onchip_SRAM+0xf800d9ec>
    dc48:	900d883a 	mov	r6,r18
    dc4c:	01400284 	movi	r5,10
    dc50:	e009883a 	mov	r4,fp
    dc54:	00090b80 	call	90b8 <memchr>
    dc58:	10003e26 	beq	r2,zero,dd54 <__sfvwrite_r+0x4a4>
    dc5c:	10800044 	addi	r2,r2,1
    dc60:	1727c83a 	sub	r19,r2,fp
    dc64:	02000044 	movi	r8,1
    dc68:	003f9d06 	br	dae0 <__alt_mem_Onchip_SRAM+0xf800dae0>
    dc6c:	80800517 	ldw	r2,20(r16)
    dc70:	81400417 	ldw	r5,16(r16)
    dc74:	81c00017 	ldw	r7,0(r16)
    dc78:	10a7883a 	add	r19,r2,r2
    dc7c:	9885883a 	add	r2,r19,r2
    dc80:	1026d7fa 	srli	r19,r2,31
    dc84:	396dc83a 	sub	r22,r7,r5
    dc88:	b1000044 	addi	r4,r22,1
    dc8c:	9885883a 	add	r2,r19,r2
    dc90:	1027d07a 	srai	r19,r2,1
    dc94:	2485883a 	add	r2,r4,r18
    dc98:	980d883a 	mov	r6,r19
    dc9c:	9880022e 	bgeu	r19,r2,dca8 <__sfvwrite_r+0x3f8>
    dca0:	1027883a 	mov	r19,r2
    dca4:	100d883a 	mov	r6,r2
    dca8:	18c1000c 	andi	r3,r3,1024
    dcac:	18001c26 	beq	r3,zero,dd20 <__sfvwrite_r+0x470>
    dcb0:	300b883a 	mov	r5,r6
    dcb4:	a809883a 	mov	r4,r21
    dcb8:	00015b80 	call	15b8 <_malloc_r>
    dcbc:	102f883a 	mov	r23,r2
    dcc0:	10002926 	beq	r2,zero,dd68 <__sfvwrite_r+0x4b8>
    dcc4:	81400417 	ldw	r5,16(r16)
    dcc8:	b00d883a 	mov	r6,r22
    dccc:	1009883a 	mov	r4,r2
    dcd0:	000919c0 	call	919c <memcpy>
    dcd4:	8080030b 	ldhu	r2,12(r16)
    dcd8:	00fedfc4 	movi	r3,-1153
    dcdc:	10c4703a 	and	r2,r2,r3
    dce0:	10802014 	ori	r2,r2,128
    dce4:	8080030d 	sth	r2,12(r16)
    dce8:	bd89883a 	add	r4,r23,r22
    dcec:	9d8fc83a 	sub	r7,r19,r22
    dcf0:	85c00415 	stw	r23,16(r16)
    dcf4:	84c00515 	stw	r19,20(r16)
    dcf8:	81000015 	stw	r4,0(r16)
    dcfc:	9027883a 	mov	r19,r18
    dd00:	81c00215 	stw	r7,8(r16)
    dd04:	902f883a 	mov	r23,r18
    dd08:	003f3806 	br	d9ec <__alt_mem_Onchip_SRAM+0xf800d9ec>
    dd0c:	800b883a 	mov	r5,r16
    dd10:	a809883a 	mov	r4,r21
    dd14:	00083cc0 	call	83cc <_fflush_r>
    dd18:	103fb926 	beq	r2,zero,dc00 <__alt_mem_Onchip_SRAM+0xf800dc00>
    dd1c:	003f6506 	br	dab4 <__alt_mem_Onchip_SRAM+0xf800dab4>
    dd20:	a809883a 	mov	r4,r21
    dd24:	000dfe80 	call	dfe8 <_realloc_r>
    dd28:	102f883a 	mov	r23,r2
    dd2c:	103fee1e 	bne	r2,zero,dce8 <__alt_mem_Onchip_SRAM+0xf800dce8>
    dd30:	81400417 	ldw	r5,16(r16)
    dd34:	a809883a 	mov	r4,r21
    dd38:	000892c0 	call	892c <_free_r>
    dd3c:	8080030b 	ldhu	r2,12(r16)
    dd40:	00ffdfc4 	movi	r3,-129
    dd44:	1884703a 	and	r2,r3,r2
    dd48:	00c00304 	movi	r3,12
    dd4c:	a8c00015 	stw	r3,0(r21)
    dd50:	003f5906 	br	dab8 <__alt_mem_Onchip_SRAM+0xf800dab8>
    dd54:	94c00044 	addi	r19,r18,1
    dd58:	02000044 	movi	r8,1
    dd5c:	003f6006 	br	dae0 <__alt_mem_Onchip_SRAM+0xf800dae0>
    dd60:	00bfffc4 	movi	r2,-1
    dd64:	003f0006 	br	d968 <__alt_mem_Onchip_SRAM+0xf800d968>
    dd68:	00800304 	movi	r2,12
    dd6c:	a8800015 	stw	r2,0(r21)
    dd70:	8080030b 	ldhu	r2,12(r16)
    dd74:	003f5006 	br	dab8 <__alt_mem_Onchip_SRAM+0xf800dab8>

0000dd78 <_isatty_r>:
    dd78:	defffd04 	addi	sp,sp,-12
    dd7c:	dc000015 	stw	r16,0(sp)
    dd80:	040000b4 	movhi	r16,2
    dd84:	dc400115 	stw	r17,4(sp)
    dd88:	842fb404 	addi	r16,r16,-16688
    dd8c:	2023883a 	mov	r17,r4
    dd90:	2809883a 	mov	r4,r5
    dd94:	dfc00215 	stw	ra,8(sp)
    dd98:	80000015 	stw	zero,0(r16)
    dd9c:	00122600 	call	12260 <isatty>
    dda0:	00ffffc4 	movi	r3,-1
    dda4:	10c00526 	beq	r2,r3,ddbc <_isatty_r+0x44>
    dda8:	dfc00217 	ldw	ra,8(sp)
    ddac:	dc400117 	ldw	r17,4(sp)
    ddb0:	dc000017 	ldw	r16,0(sp)
    ddb4:	dec00304 	addi	sp,sp,12
    ddb8:	f800283a 	ret
    ddbc:	80c00017 	ldw	r3,0(r16)
    ddc0:	183ff926 	beq	r3,zero,dda8 <__alt_mem_Onchip_SRAM+0xf800dda8>
    ddc4:	88c00015 	stw	r3,0(r17)
    ddc8:	003ff706 	br	dda8 <__alt_mem_Onchip_SRAM+0xf800dda8>

0000ddcc <_lseek_r>:
    ddcc:	defffd04 	addi	sp,sp,-12
    ddd0:	2805883a 	mov	r2,r5
    ddd4:	dc000015 	stw	r16,0(sp)
    ddd8:	040000b4 	movhi	r16,2
    dddc:	dc400115 	stw	r17,4(sp)
    dde0:	300b883a 	mov	r5,r6
    dde4:	842fb404 	addi	r16,r16,-16688
    dde8:	2023883a 	mov	r17,r4
    ddec:	380d883a 	mov	r6,r7
    ddf0:	1009883a 	mov	r4,r2
    ddf4:	dfc00215 	stw	ra,8(sp)
    ddf8:	80000015 	stw	zero,0(r16)
    ddfc:	00124340 	call	12434 <lseek>
    de00:	00ffffc4 	movi	r3,-1
    de04:	10c00526 	beq	r2,r3,de1c <_lseek_r+0x50>
    de08:	dfc00217 	ldw	ra,8(sp)
    de0c:	dc400117 	ldw	r17,4(sp)
    de10:	dc000017 	ldw	r16,0(sp)
    de14:	dec00304 	addi	sp,sp,12
    de18:	f800283a 	ret
    de1c:	80c00017 	ldw	r3,0(r16)
    de20:	183ff926 	beq	r3,zero,de08 <__alt_mem_Onchip_SRAM+0xf800de08>
    de24:	88c00015 	stw	r3,0(r17)
    de28:	003ff706 	br	de08 <__alt_mem_Onchip_SRAM+0xf800de08>

0000de2c <memmove>:
    de2c:	2005883a 	mov	r2,r4
    de30:	29000b2e 	bgeu	r5,r4,de60 <memmove+0x34>
    de34:	298f883a 	add	r7,r5,r6
    de38:	21c0092e 	bgeu	r4,r7,de60 <memmove+0x34>
    de3c:	2187883a 	add	r3,r4,r6
    de40:	198bc83a 	sub	r5,r3,r6
    de44:	30004826 	beq	r6,zero,df68 <memmove+0x13c>
    de48:	39ffffc4 	addi	r7,r7,-1
    de4c:	39000003 	ldbu	r4,0(r7)
    de50:	18ffffc4 	addi	r3,r3,-1
    de54:	19000005 	stb	r4,0(r3)
    de58:	28fffb1e 	bne	r5,r3,de48 <__alt_mem_Onchip_SRAM+0xf800de48>
    de5c:	f800283a 	ret
    de60:	00c003c4 	movi	r3,15
    de64:	1980412e 	bgeu	r3,r6,df6c <memmove+0x140>
    de68:	2886b03a 	or	r3,r5,r2
    de6c:	18c000cc 	andi	r3,r3,3
    de70:	1800401e 	bne	r3,zero,df74 <memmove+0x148>
    de74:	33fffc04 	addi	r15,r6,-16
    de78:	781ed13a 	srli	r15,r15,4
    de7c:	28c00104 	addi	r3,r5,4
    de80:	13400104 	addi	r13,r2,4
    de84:	781c913a 	slli	r14,r15,4
    de88:	2b000204 	addi	r12,r5,8
    de8c:	12c00204 	addi	r11,r2,8
    de90:	73800504 	addi	r14,r14,20
    de94:	2a800304 	addi	r10,r5,12
    de98:	12400304 	addi	r9,r2,12
    de9c:	2b9d883a 	add	r14,r5,r14
    dea0:	2811883a 	mov	r8,r5
    dea4:	100f883a 	mov	r7,r2
    dea8:	41000017 	ldw	r4,0(r8)
    deac:	39c00404 	addi	r7,r7,16
    deb0:	18c00404 	addi	r3,r3,16
    deb4:	393ffc15 	stw	r4,-16(r7)
    deb8:	193ffc17 	ldw	r4,-16(r3)
    debc:	6b400404 	addi	r13,r13,16
    dec0:	5ac00404 	addi	r11,r11,16
    dec4:	693ffc15 	stw	r4,-16(r13)
    dec8:	61000017 	ldw	r4,0(r12)
    decc:	4a400404 	addi	r9,r9,16
    ded0:	42000404 	addi	r8,r8,16
    ded4:	593ffc15 	stw	r4,-16(r11)
    ded8:	51000017 	ldw	r4,0(r10)
    dedc:	63000404 	addi	r12,r12,16
    dee0:	52800404 	addi	r10,r10,16
    dee4:	493ffc15 	stw	r4,-16(r9)
    dee8:	1bbfef1e 	bne	r3,r14,dea8 <__alt_mem_Onchip_SRAM+0xf800dea8>
    deec:	79000044 	addi	r4,r15,1
    def0:	2008913a 	slli	r4,r4,4
    def4:	328003cc 	andi	r10,r6,15
    def8:	02c000c4 	movi	r11,3
    defc:	1107883a 	add	r3,r2,r4
    df00:	290b883a 	add	r5,r5,r4
    df04:	5a801e2e 	bgeu	r11,r10,df80 <memmove+0x154>
    df08:	1813883a 	mov	r9,r3
    df0c:	2811883a 	mov	r8,r5
    df10:	500f883a 	mov	r7,r10
    df14:	41000017 	ldw	r4,0(r8)
    df18:	4a400104 	addi	r9,r9,4
    df1c:	39ffff04 	addi	r7,r7,-4
    df20:	493fff15 	stw	r4,-4(r9)
    df24:	42000104 	addi	r8,r8,4
    df28:	59fffa36 	bltu	r11,r7,df14 <__alt_mem_Onchip_SRAM+0xf800df14>
    df2c:	513fff04 	addi	r4,r10,-4
    df30:	2008d0ba 	srli	r4,r4,2
    df34:	318000cc 	andi	r6,r6,3
    df38:	21000044 	addi	r4,r4,1
    df3c:	2109883a 	add	r4,r4,r4
    df40:	2109883a 	add	r4,r4,r4
    df44:	1907883a 	add	r3,r3,r4
    df48:	290b883a 	add	r5,r5,r4
    df4c:	30000b26 	beq	r6,zero,df7c <memmove+0x150>
    df50:	198d883a 	add	r6,r3,r6
    df54:	29c00003 	ldbu	r7,0(r5)
    df58:	18c00044 	addi	r3,r3,1
    df5c:	29400044 	addi	r5,r5,1
    df60:	19ffffc5 	stb	r7,-1(r3)
    df64:	19bffb1e 	bne	r3,r6,df54 <__alt_mem_Onchip_SRAM+0xf800df54>
    df68:	f800283a 	ret
    df6c:	1007883a 	mov	r3,r2
    df70:	003ff606 	br	df4c <__alt_mem_Onchip_SRAM+0xf800df4c>
    df74:	1007883a 	mov	r3,r2
    df78:	003ff506 	br	df50 <__alt_mem_Onchip_SRAM+0xf800df50>
    df7c:	f800283a 	ret
    df80:	500d883a 	mov	r6,r10
    df84:	003ff106 	br	df4c <__alt_mem_Onchip_SRAM+0xf800df4c>

0000df88 <_read_r>:
    df88:	defffd04 	addi	sp,sp,-12
    df8c:	2805883a 	mov	r2,r5
    df90:	dc000015 	stw	r16,0(sp)
    df94:	040000b4 	movhi	r16,2
    df98:	dc400115 	stw	r17,4(sp)
    df9c:	300b883a 	mov	r5,r6
    dfa0:	842fb404 	addi	r16,r16,-16688
    dfa4:	2023883a 	mov	r17,r4
    dfa8:	380d883a 	mov	r6,r7
    dfac:	1009883a 	mov	r4,r2
    dfb0:	dfc00215 	stw	ra,8(sp)
    dfb4:	80000015 	stw	zero,0(r16)
    dfb8:	00126100 	call	12610 <read>
    dfbc:	00ffffc4 	movi	r3,-1
    dfc0:	10c00526 	beq	r2,r3,dfd8 <_read_r+0x50>
    dfc4:	dfc00217 	ldw	ra,8(sp)
    dfc8:	dc400117 	ldw	r17,4(sp)
    dfcc:	dc000017 	ldw	r16,0(sp)
    dfd0:	dec00304 	addi	sp,sp,12
    dfd4:	f800283a 	ret
    dfd8:	80c00017 	ldw	r3,0(r16)
    dfdc:	183ff926 	beq	r3,zero,dfc4 <__alt_mem_Onchip_SRAM+0xf800dfc4>
    dfe0:	88c00015 	stw	r3,0(r17)
    dfe4:	003ff706 	br	dfc4 <__alt_mem_Onchip_SRAM+0xf800dfc4>

0000dfe8 <_realloc_r>:
    dfe8:	defff604 	addi	sp,sp,-40
    dfec:	dc800215 	stw	r18,8(sp)
    dff0:	dfc00915 	stw	ra,36(sp)
    dff4:	df000815 	stw	fp,32(sp)
    dff8:	ddc00715 	stw	r23,28(sp)
    dffc:	dd800615 	stw	r22,24(sp)
    e000:	dd400515 	stw	r21,20(sp)
    e004:	dd000415 	stw	r20,16(sp)
    e008:	dcc00315 	stw	r19,12(sp)
    e00c:	dc400115 	stw	r17,4(sp)
    e010:	dc000015 	stw	r16,0(sp)
    e014:	3025883a 	mov	r18,r6
    e018:	2800b726 	beq	r5,zero,e2f8 <_realloc_r+0x310>
    e01c:	282b883a 	mov	r21,r5
    e020:	2029883a 	mov	r20,r4
    e024:	001258c0 	call	1258c <__malloc_lock>
    e028:	a8bfff17 	ldw	r2,-4(r21)
    e02c:	043fff04 	movi	r16,-4
    e030:	90c002c4 	addi	r3,r18,11
    e034:	01000584 	movi	r4,22
    e038:	acfffe04 	addi	r19,r21,-8
    e03c:	1420703a 	and	r16,r2,r16
    e040:	20c0332e 	bgeu	r4,r3,e110 <_realloc_r+0x128>
    e044:	047ffe04 	movi	r17,-8
    e048:	1c62703a 	and	r17,r3,r17
    e04c:	8807883a 	mov	r3,r17
    e050:	88005816 	blt	r17,zero,e1b4 <_realloc_r+0x1cc>
    e054:	8c805736 	bltu	r17,r18,e1b4 <_realloc_r+0x1cc>
    e058:	80c0300e 	bge	r16,r3,e11c <_realloc_r+0x134>
    e05c:	070000b4 	movhi	fp,2
    e060:	e7219004 	addi	fp,fp,-31168
    e064:	e1c00217 	ldw	r7,8(fp)
    e068:	9c09883a 	add	r4,r19,r16
    e06c:	22000117 	ldw	r8,4(r4)
    e070:	21c06326 	beq	r4,r7,e200 <_realloc_r+0x218>
    e074:	017fff84 	movi	r5,-2
    e078:	414a703a 	and	r5,r8,r5
    e07c:	214b883a 	add	r5,r4,r5
    e080:	29800117 	ldw	r6,4(r5)
    e084:	3180004c 	andi	r6,r6,1
    e088:	30003f26 	beq	r6,zero,e188 <_realloc_r+0x1a0>
    e08c:	1080004c 	andi	r2,r2,1
    e090:	10008326 	beq	r2,zero,e2a0 <_realloc_r+0x2b8>
    e094:	900b883a 	mov	r5,r18
    e098:	a009883a 	mov	r4,r20
    e09c:	00015b80 	call	15b8 <_malloc_r>
    e0a0:	1025883a 	mov	r18,r2
    e0a4:	10011e26 	beq	r2,zero,e520 <_realloc_r+0x538>
    e0a8:	a93fff17 	ldw	r4,-4(r21)
    e0ac:	10fffe04 	addi	r3,r2,-8
    e0b0:	00bfff84 	movi	r2,-2
    e0b4:	2084703a 	and	r2,r4,r2
    e0b8:	9885883a 	add	r2,r19,r2
    e0bc:	1880ee26 	beq	r3,r2,e478 <_realloc_r+0x490>
    e0c0:	81bfff04 	addi	r6,r16,-4
    e0c4:	00800904 	movi	r2,36
    e0c8:	1180b836 	bltu	r2,r6,e3ac <_realloc_r+0x3c4>
    e0cc:	00c004c4 	movi	r3,19
    e0d0:	19809636 	bltu	r3,r6,e32c <_realloc_r+0x344>
    e0d4:	9005883a 	mov	r2,r18
    e0d8:	a807883a 	mov	r3,r21
    e0dc:	19000017 	ldw	r4,0(r3)
    e0e0:	11000015 	stw	r4,0(r2)
    e0e4:	19000117 	ldw	r4,4(r3)
    e0e8:	11000115 	stw	r4,4(r2)
    e0ec:	18c00217 	ldw	r3,8(r3)
    e0f0:	10c00215 	stw	r3,8(r2)
    e0f4:	a80b883a 	mov	r5,r21
    e0f8:	a009883a 	mov	r4,r20
    e0fc:	000892c0 	call	892c <_free_r>
    e100:	a009883a 	mov	r4,r20
    e104:	00125b00 	call	125b0 <__malloc_unlock>
    e108:	9005883a 	mov	r2,r18
    e10c:	00001206 	br	e158 <_realloc_r+0x170>
    e110:	00c00404 	movi	r3,16
    e114:	1823883a 	mov	r17,r3
    e118:	003fce06 	br	e054 <__alt_mem_Onchip_SRAM+0xf800e054>
    e11c:	a825883a 	mov	r18,r21
    e120:	8445c83a 	sub	r2,r16,r17
    e124:	00c003c4 	movi	r3,15
    e128:	18802636 	bltu	r3,r2,e1c4 <_realloc_r+0x1dc>
    e12c:	99800117 	ldw	r6,4(r19)
    e130:	9c07883a 	add	r3,r19,r16
    e134:	3180004c 	andi	r6,r6,1
    e138:	3420b03a 	or	r16,r6,r16
    e13c:	9c000115 	stw	r16,4(r19)
    e140:	18800117 	ldw	r2,4(r3)
    e144:	10800054 	ori	r2,r2,1
    e148:	18800115 	stw	r2,4(r3)
    e14c:	a009883a 	mov	r4,r20
    e150:	00125b00 	call	125b0 <__malloc_unlock>
    e154:	9005883a 	mov	r2,r18
    e158:	dfc00917 	ldw	ra,36(sp)
    e15c:	df000817 	ldw	fp,32(sp)
    e160:	ddc00717 	ldw	r23,28(sp)
    e164:	dd800617 	ldw	r22,24(sp)
    e168:	dd400517 	ldw	r21,20(sp)
    e16c:	dd000417 	ldw	r20,16(sp)
    e170:	dcc00317 	ldw	r19,12(sp)
    e174:	dc800217 	ldw	r18,8(sp)
    e178:	dc400117 	ldw	r17,4(sp)
    e17c:	dc000017 	ldw	r16,0(sp)
    e180:	dec00a04 	addi	sp,sp,40
    e184:	f800283a 	ret
    e188:	017fff04 	movi	r5,-4
    e18c:	414a703a 	and	r5,r8,r5
    e190:	814d883a 	add	r6,r16,r5
    e194:	30c01f16 	blt	r6,r3,e214 <_realloc_r+0x22c>
    e198:	20800317 	ldw	r2,12(r4)
    e19c:	20c00217 	ldw	r3,8(r4)
    e1a0:	a825883a 	mov	r18,r21
    e1a4:	3021883a 	mov	r16,r6
    e1a8:	18800315 	stw	r2,12(r3)
    e1ac:	10c00215 	stw	r3,8(r2)
    e1b0:	003fdb06 	br	e120 <__alt_mem_Onchip_SRAM+0xf800e120>
    e1b4:	00800304 	movi	r2,12
    e1b8:	a0800015 	stw	r2,0(r20)
    e1bc:	0005883a 	mov	r2,zero
    e1c0:	003fe506 	br	e158 <__alt_mem_Onchip_SRAM+0xf800e158>
    e1c4:	98c00117 	ldw	r3,4(r19)
    e1c8:	9c4b883a 	add	r5,r19,r17
    e1cc:	11000054 	ori	r4,r2,1
    e1d0:	18c0004c 	andi	r3,r3,1
    e1d4:	1c62b03a 	or	r17,r3,r17
    e1d8:	9c400115 	stw	r17,4(r19)
    e1dc:	29000115 	stw	r4,4(r5)
    e1e0:	2885883a 	add	r2,r5,r2
    e1e4:	10c00117 	ldw	r3,4(r2)
    e1e8:	29400204 	addi	r5,r5,8
    e1ec:	a009883a 	mov	r4,r20
    e1f0:	18c00054 	ori	r3,r3,1
    e1f4:	10c00115 	stw	r3,4(r2)
    e1f8:	000892c0 	call	892c <_free_r>
    e1fc:	003fd306 	br	e14c <__alt_mem_Onchip_SRAM+0xf800e14c>
    e200:	017fff04 	movi	r5,-4
    e204:	414a703a 	and	r5,r8,r5
    e208:	89800404 	addi	r6,r17,16
    e20c:	8151883a 	add	r8,r16,r5
    e210:	4180590e 	bge	r8,r6,e378 <_realloc_r+0x390>
    e214:	1080004c 	andi	r2,r2,1
    e218:	103f9e1e 	bne	r2,zero,e094 <__alt_mem_Onchip_SRAM+0xf800e094>
    e21c:	adbffe17 	ldw	r22,-8(r21)
    e220:	00bfff04 	movi	r2,-4
    e224:	9dadc83a 	sub	r22,r19,r22
    e228:	b1800117 	ldw	r6,4(r22)
    e22c:	3084703a 	and	r2,r6,r2
    e230:	20002026 	beq	r4,zero,e2b4 <_realloc_r+0x2cc>
    e234:	80af883a 	add	r23,r16,r2
    e238:	b96f883a 	add	r23,r23,r5
    e23c:	21c05f26 	beq	r4,r7,e3bc <_realloc_r+0x3d4>
    e240:	b8c01c16 	blt	r23,r3,e2b4 <_realloc_r+0x2cc>
    e244:	20800317 	ldw	r2,12(r4)
    e248:	20c00217 	ldw	r3,8(r4)
    e24c:	81bfff04 	addi	r6,r16,-4
    e250:	01000904 	movi	r4,36
    e254:	18800315 	stw	r2,12(r3)
    e258:	10c00215 	stw	r3,8(r2)
    e25c:	b0c00217 	ldw	r3,8(r22)
    e260:	b0800317 	ldw	r2,12(r22)
    e264:	b4800204 	addi	r18,r22,8
    e268:	18800315 	stw	r2,12(r3)
    e26c:	10c00215 	stw	r3,8(r2)
    e270:	21801b36 	bltu	r4,r6,e2e0 <_realloc_r+0x2f8>
    e274:	008004c4 	movi	r2,19
    e278:	1180352e 	bgeu	r2,r6,e350 <_realloc_r+0x368>
    e27c:	a8800017 	ldw	r2,0(r21)
    e280:	b0800215 	stw	r2,8(r22)
    e284:	a8800117 	ldw	r2,4(r21)
    e288:	b0800315 	stw	r2,12(r22)
    e28c:	008006c4 	movi	r2,27
    e290:	11807f36 	bltu	r2,r6,e490 <_realloc_r+0x4a8>
    e294:	b0800404 	addi	r2,r22,16
    e298:	ad400204 	addi	r21,r21,8
    e29c:	00002d06 	br	e354 <_realloc_r+0x36c>
    e2a0:	adbffe17 	ldw	r22,-8(r21)
    e2a4:	00bfff04 	movi	r2,-4
    e2a8:	9dadc83a 	sub	r22,r19,r22
    e2ac:	b1000117 	ldw	r4,4(r22)
    e2b0:	2084703a 	and	r2,r4,r2
    e2b4:	b03f7726 	beq	r22,zero,e094 <__alt_mem_Onchip_SRAM+0xf800e094>
    e2b8:	80af883a 	add	r23,r16,r2
    e2bc:	b8ff7516 	blt	r23,r3,e094 <__alt_mem_Onchip_SRAM+0xf800e094>
    e2c0:	b0800317 	ldw	r2,12(r22)
    e2c4:	b0c00217 	ldw	r3,8(r22)
    e2c8:	81bfff04 	addi	r6,r16,-4
    e2cc:	01000904 	movi	r4,36
    e2d0:	18800315 	stw	r2,12(r3)
    e2d4:	10c00215 	stw	r3,8(r2)
    e2d8:	b4800204 	addi	r18,r22,8
    e2dc:	21bfe52e 	bgeu	r4,r6,e274 <__alt_mem_Onchip_SRAM+0xf800e274>
    e2e0:	a80b883a 	mov	r5,r21
    e2e4:	9009883a 	mov	r4,r18
    e2e8:	000de2c0 	call	de2c <memmove>
    e2ec:	b821883a 	mov	r16,r23
    e2f0:	b027883a 	mov	r19,r22
    e2f4:	003f8a06 	br	e120 <__alt_mem_Onchip_SRAM+0xf800e120>
    e2f8:	300b883a 	mov	r5,r6
    e2fc:	dfc00917 	ldw	ra,36(sp)
    e300:	df000817 	ldw	fp,32(sp)
    e304:	ddc00717 	ldw	r23,28(sp)
    e308:	dd800617 	ldw	r22,24(sp)
    e30c:	dd400517 	ldw	r21,20(sp)
    e310:	dd000417 	ldw	r20,16(sp)
    e314:	dcc00317 	ldw	r19,12(sp)
    e318:	dc800217 	ldw	r18,8(sp)
    e31c:	dc400117 	ldw	r17,4(sp)
    e320:	dc000017 	ldw	r16,0(sp)
    e324:	dec00a04 	addi	sp,sp,40
    e328:	00015b81 	jmpi	15b8 <_malloc_r>
    e32c:	a8c00017 	ldw	r3,0(r21)
    e330:	90c00015 	stw	r3,0(r18)
    e334:	a8c00117 	ldw	r3,4(r21)
    e338:	90c00115 	stw	r3,4(r18)
    e33c:	00c006c4 	movi	r3,27
    e340:	19804536 	bltu	r3,r6,e458 <_realloc_r+0x470>
    e344:	90800204 	addi	r2,r18,8
    e348:	a8c00204 	addi	r3,r21,8
    e34c:	003f6306 	br	e0dc <__alt_mem_Onchip_SRAM+0xf800e0dc>
    e350:	9005883a 	mov	r2,r18
    e354:	a8c00017 	ldw	r3,0(r21)
    e358:	b821883a 	mov	r16,r23
    e35c:	b027883a 	mov	r19,r22
    e360:	10c00015 	stw	r3,0(r2)
    e364:	a8c00117 	ldw	r3,4(r21)
    e368:	10c00115 	stw	r3,4(r2)
    e36c:	a8c00217 	ldw	r3,8(r21)
    e370:	10c00215 	stw	r3,8(r2)
    e374:	003f6a06 	br	e120 <__alt_mem_Onchip_SRAM+0xf800e120>
    e378:	9c67883a 	add	r19,r19,r17
    e37c:	4445c83a 	sub	r2,r8,r17
    e380:	e4c00215 	stw	r19,8(fp)
    e384:	10800054 	ori	r2,r2,1
    e388:	98800115 	stw	r2,4(r19)
    e38c:	a8bfff17 	ldw	r2,-4(r21)
    e390:	a009883a 	mov	r4,r20
    e394:	1080004c 	andi	r2,r2,1
    e398:	1462b03a 	or	r17,r2,r17
    e39c:	ac7fff15 	stw	r17,-4(r21)
    e3a0:	00125b00 	call	125b0 <__malloc_unlock>
    e3a4:	a805883a 	mov	r2,r21
    e3a8:	003f6b06 	br	e158 <__alt_mem_Onchip_SRAM+0xf800e158>
    e3ac:	a80b883a 	mov	r5,r21
    e3b0:	9009883a 	mov	r4,r18
    e3b4:	000de2c0 	call	de2c <memmove>
    e3b8:	003f4e06 	br	e0f4 <__alt_mem_Onchip_SRAM+0xf800e0f4>
    e3bc:	89000404 	addi	r4,r17,16
    e3c0:	b93fbc16 	blt	r23,r4,e2b4 <__alt_mem_Onchip_SRAM+0xf800e2b4>
    e3c4:	b0800317 	ldw	r2,12(r22)
    e3c8:	b0c00217 	ldw	r3,8(r22)
    e3cc:	81bfff04 	addi	r6,r16,-4
    e3d0:	01000904 	movi	r4,36
    e3d4:	18800315 	stw	r2,12(r3)
    e3d8:	10c00215 	stw	r3,8(r2)
    e3dc:	b4800204 	addi	r18,r22,8
    e3e0:	21804336 	bltu	r4,r6,e4f0 <_realloc_r+0x508>
    e3e4:	008004c4 	movi	r2,19
    e3e8:	11803f2e 	bgeu	r2,r6,e4e8 <_realloc_r+0x500>
    e3ec:	a8800017 	ldw	r2,0(r21)
    e3f0:	b0800215 	stw	r2,8(r22)
    e3f4:	a8800117 	ldw	r2,4(r21)
    e3f8:	b0800315 	stw	r2,12(r22)
    e3fc:	008006c4 	movi	r2,27
    e400:	11803f36 	bltu	r2,r6,e500 <_realloc_r+0x518>
    e404:	b0800404 	addi	r2,r22,16
    e408:	ad400204 	addi	r21,r21,8
    e40c:	a8c00017 	ldw	r3,0(r21)
    e410:	10c00015 	stw	r3,0(r2)
    e414:	a8c00117 	ldw	r3,4(r21)
    e418:	10c00115 	stw	r3,4(r2)
    e41c:	a8c00217 	ldw	r3,8(r21)
    e420:	10c00215 	stw	r3,8(r2)
    e424:	b447883a 	add	r3,r22,r17
    e428:	bc45c83a 	sub	r2,r23,r17
    e42c:	e0c00215 	stw	r3,8(fp)
    e430:	10800054 	ori	r2,r2,1
    e434:	18800115 	stw	r2,4(r3)
    e438:	b0800117 	ldw	r2,4(r22)
    e43c:	a009883a 	mov	r4,r20
    e440:	1080004c 	andi	r2,r2,1
    e444:	1462b03a 	or	r17,r2,r17
    e448:	b4400115 	stw	r17,4(r22)
    e44c:	00125b00 	call	125b0 <__malloc_unlock>
    e450:	9005883a 	mov	r2,r18
    e454:	003f4006 	br	e158 <__alt_mem_Onchip_SRAM+0xf800e158>
    e458:	a8c00217 	ldw	r3,8(r21)
    e45c:	90c00215 	stw	r3,8(r18)
    e460:	a8c00317 	ldw	r3,12(r21)
    e464:	90c00315 	stw	r3,12(r18)
    e468:	30801126 	beq	r6,r2,e4b0 <_realloc_r+0x4c8>
    e46c:	90800404 	addi	r2,r18,16
    e470:	a8c00404 	addi	r3,r21,16
    e474:	003f1906 	br	e0dc <__alt_mem_Onchip_SRAM+0xf800e0dc>
    e478:	90ffff17 	ldw	r3,-4(r18)
    e47c:	00bfff04 	movi	r2,-4
    e480:	a825883a 	mov	r18,r21
    e484:	1884703a 	and	r2,r3,r2
    e488:	80a1883a 	add	r16,r16,r2
    e48c:	003f2406 	br	e120 <__alt_mem_Onchip_SRAM+0xf800e120>
    e490:	a8800217 	ldw	r2,8(r21)
    e494:	b0800415 	stw	r2,16(r22)
    e498:	a8800317 	ldw	r2,12(r21)
    e49c:	b0800515 	stw	r2,20(r22)
    e4a0:	31000a26 	beq	r6,r4,e4cc <_realloc_r+0x4e4>
    e4a4:	b0800604 	addi	r2,r22,24
    e4a8:	ad400404 	addi	r21,r21,16
    e4ac:	003fa906 	br	e354 <__alt_mem_Onchip_SRAM+0xf800e354>
    e4b0:	a9000417 	ldw	r4,16(r21)
    e4b4:	90800604 	addi	r2,r18,24
    e4b8:	a8c00604 	addi	r3,r21,24
    e4bc:	91000415 	stw	r4,16(r18)
    e4c0:	a9000517 	ldw	r4,20(r21)
    e4c4:	91000515 	stw	r4,20(r18)
    e4c8:	003f0406 	br	e0dc <__alt_mem_Onchip_SRAM+0xf800e0dc>
    e4cc:	a8c00417 	ldw	r3,16(r21)
    e4d0:	ad400604 	addi	r21,r21,24
    e4d4:	b0800804 	addi	r2,r22,32
    e4d8:	b0c00615 	stw	r3,24(r22)
    e4dc:	a8ffff17 	ldw	r3,-4(r21)
    e4e0:	b0c00715 	stw	r3,28(r22)
    e4e4:	003f9b06 	br	e354 <__alt_mem_Onchip_SRAM+0xf800e354>
    e4e8:	9005883a 	mov	r2,r18
    e4ec:	003fc706 	br	e40c <__alt_mem_Onchip_SRAM+0xf800e40c>
    e4f0:	a80b883a 	mov	r5,r21
    e4f4:	9009883a 	mov	r4,r18
    e4f8:	000de2c0 	call	de2c <memmove>
    e4fc:	003fc906 	br	e424 <__alt_mem_Onchip_SRAM+0xf800e424>
    e500:	a8800217 	ldw	r2,8(r21)
    e504:	b0800415 	stw	r2,16(r22)
    e508:	a8800317 	ldw	r2,12(r21)
    e50c:	b0800515 	stw	r2,20(r22)
    e510:	31000726 	beq	r6,r4,e530 <_realloc_r+0x548>
    e514:	b0800604 	addi	r2,r22,24
    e518:	ad400404 	addi	r21,r21,16
    e51c:	003fbb06 	br	e40c <__alt_mem_Onchip_SRAM+0xf800e40c>
    e520:	a009883a 	mov	r4,r20
    e524:	00125b00 	call	125b0 <__malloc_unlock>
    e528:	0005883a 	mov	r2,zero
    e52c:	003f0a06 	br	e158 <__alt_mem_Onchip_SRAM+0xf800e158>
    e530:	a8c00417 	ldw	r3,16(r21)
    e534:	ad400604 	addi	r21,r21,24
    e538:	b0800804 	addi	r2,r22,32
    e53c:	b0c00615 	stw	r3,24(r22)
    e540:	a8ffff17 	ldw	r3,-4(r21)
    e544:	b0c00715 	stw	r3,28(r22)
    e548:	003fb006 	br	e40c <__alt_mem_Onchip_SRAM+0xf800e40c>

0000e54c <__swbuf_r>:
    e54c:	defffb04 	addi	sp,sp,-20
    e550:	dcc00315 	stw	r19,12(sp)
    e554:	dc800215 	stw	r18,8(sp)
    e558:	dc000015 	stw	r16,0(sp)
    e55c:	dfc00415 	stw	ra,16(sp)
    e560:	dc400115 	stw	r17,4(sp)
    e564:	2025883a 	mov	r18,r4
    e568:	2827883a 	mov	r19,r5
    e56c:	3021883a 	mov	r16,r6
    e570:	20000226 	beq	r4,zero,e57c <__swbuf_r+0x30>
    e574:	20800e17 	ldw	r2,56(r4)
    e578:	10004226 	beq	r2,zero,e684 <__swbuf_r+0x138>
    e57c:	80800617 	ldw	r2,24(r16)
    e580:	8100030b 	ldhu	r4,12(r16)
    e584:	80800215 	stw	r2,8(r16)
    e588:	2080020c 	andi	r2,r4,8
    e58c:	10003626 	beq	r2,zero,e668 <__swbuf_r+0x11c>
    e590:	80c00417 	ldw	r3,16(r16)
    e594:	18003426 	beq	r3,zero,e668 <__swbuf_r+0x11c>
    e598:	2088000c 	andi	r2,r4,8192
    e59c:	9c403fcc 	andi	r17,r19,255
    e5a0:	10001a26 	beq	r2,zero,e60c <__swbuf_r+0xc0>
    e5a4:	80800017 	ldw	r2,0(r16)
    e5a8:	81000517 	ldw	r4,20(r16)
    e5ac:	10c7c83a 	sub	r3,r2,r3
    e5b0:	1900200e 	bge	r3,r4,e634 <__swbuf_r+0xe8>
    e5b4:	18c00044 	addi	r3,r3,1
    e5b8:	81000217 	ldw	r4,8(r16)
    e5bc:	11400044 	addi	r5,r2,1
    e5c0:	81400015 	stw	r5,0(r16)
    e5c4:	213fffc4 	addi	r4,r4,-1
    e5c8:	81000215 	stw	r4,8(r16)
    e5cc:	14c00005 	stb	r19,0(r2)
    e5d0:	80800517 	ldw	r2,20(r16)
    e5d4:	10c01e26 	beq	r2,r3,e650 <__swbuf_r+0x104>
    e5d8:	8080030b 	ldhu	r2,12(r16)
    e5dc:	1080004c 	andi	r2,r2,1
    e5e0:	10000226 	beq	r2,zero,e5ec <__swbuf_r+0xa0>
    e5e4:	00800284 	movi	r2,10
    e5e8:	88801926 	beq	r17,r2,e650 <__swbuf_r+0x104>
    e5ec:	8805883a 	mov	r2,r17
    e5f0:	dfc00417 	ldw	ra,16(sp)
    e5f4:	dcc00317 	ldw	r19,12(sp)
    e5f8:	dc800217 	ldw	r18,8(sp)
    e5fc:	dc400117 	ldw	r17,4(sp)
    e600:	dc000017 	ldw	r16,0(sp)
    e604:	dec00504 	addi	sp,sp,20
    e608:	f800283a 	ret
    e60c:	81401917 	ldw	r5,100(r16)
    e610:	00b7ffc4 	movi	r2,-8193
    e614:	21080014 	ori	r4,r4,8192
    e618:	2884703a 	and	r2,r5,r2
    e61c:	80801915 	stw	r2,100(r16)
    e620:	80800017 	ldw	r2,0(r16)
    e624:	8100030d 	sth	r4,12(r16)
    e628:	81000517 	ldw	r4,20(r16)
    e62c:	10c7c83a 	sub	r3,r2,r3
    e630:	193fe016 	blt	r3,r4,e5b4 <__alt_mem_Onchip_SRAM+0xf800e5b4>
    e634:	800b883a 	mov	r5,r16
    e638:	9009883a 	mov	r4,r18
    e63c:	00083cc0 	call	83cc <_fflush_r>
    e640:	1000071e 	bne	r2,zero,e660 <__swbuf_r+0x114>
    e644:	80800017 	ldw	r2,0(r16)
    e648:	00c00044 	movi	r3,1
    e64c:	003fda06 	br	e5b8 <__alt_mem_Onchip_SRAM+0xf800e5b8>
    e650:	800b883a 	mov	r5,r16
    e654:	9009883a 	mov	r4,r18
    e658:	00083cc0 	call	83cc <_fflush_r>
    e65c:	103fe326 	beq	r2,zero,e5ec <__alt_mem_Onchip_SRAM+0xf800e5ec>
    e660:	00bfffc4 	movi	r2,-1
    e664:	003fe206 	br	e5f0 <__alt_mem_Onchip_SRAM+0xf800e5f0>
    e668:	800b883a 	mov	r5,r16
    e66c:	9009883a 	mov	r4,r18
    e670:	00067ac0 	call	67ac <__swsetup_r>
    e674:	103ffa1e 	bne	r2,zero,e660 <__alt_mem_Onchip_SRAM+0xf800e660>
    e678:	8100030b 	ldhu	r4,12(r16)
    e67c:	80c00417 	ldw	r3,16(r16)
    e680:	003fc506 	br	e598 <__alt_mem_Onchip_SRAM+0xf800e598>
    e684:	00087b80 	call	87b8 <__sinit>
    e688:	003fbc06 	br	e57c <__alt_mem_Onchip_SRAM+0xf800e57c>

0000e68c <__swbuf>:
    e68c:	008000b4 	movhi	r2,2
    e690:	10a88304 	addi	r2,r2,-24052
    e694:	280d883a 	mov	r6,r5
    e698:	200b883a 	mov	r5,r4
    e69c:	11000017 	ldw	r4,0(r2)
    e6a0:	000e54c1 	jmpi	e54c <__swbuf_r>

0000e6a4 <_wcrtomb_r>:
    e6a4:	defff604 	addi	sp,sp,-40
    e6a8:	008000b4 	movhi	r2,2
    e6ac:	dc800815 	stw	r18,32(sp)
    e6b0:	dc400715 	stw	r17,28(sp)
    e6b4:	dc000615 	stw	r16,24(sp)
    e6b8:	10a88504 	addi	r2,r2,-24044
    e6bc:	dfc00915 	stw	ra,36(sp)
    e6c0:	2021883a 	mov	r16,r4
    e6c4:	3823883a 	mov	r17,r7
    e6c8:	14800017 	ldw	r18,0(r2)
    e6cc:	28001426 	beq	r5,zero,e720 <_wcrtomb_r+0x7c>
    e6d0:	d9400415 	stw	r5,16(sp)
    e6d4:	d9800515 	stw	r6,20(sp)
    e6d8:	0008e9c0 	call	8e9c <__locale_charset>
    e6dc:	d9800517 	ldw	r6,20(sp)
    e6e0:	d9400417 	ldw	r5,16(sp)
    e6e4:	100f883a 	mov	r7,r2
    e6e8:	dc400015 	stw	r17,0(sp)
    e6ec:	8009883a 	mov	r4,r16
    e6f0:	903ee83a 	callr	r18
    e6f4:	00ffffc4 	movi	r3,-1
    e6f8:	10c0031e 	bne	r2,r3,e708 <_wcrtomb_r+0x64>
    e6fc:	88000015 	stw	zero,0(r17)
    e700:	00c02284 	movi	r3,138
    e704:	80c00015 	stw	r3,0(r16)
    e708:	dfc00917 	ldw	ra,36(sp)
    e70c:	dc800817 	ldw	r18,32(sp)
    e710:	dc400717 	ldw	r17,28(sp)
    e714:	dc000617 	ldw	r16,24(sp)
    e718:	dec00a04 	addi	sp,sp,40
    e71c:	f800283a 	ret
    e720:	0008e9c0 	call	8e9c <__locale_charset>
    e724:	100f883a 	mov	r7,r2
    e728:	dc400015 	stw	r17,0(sp)
    e72c:	000d883a 	mov	r6,zero
    e730:	d9400104 	addi	r5,sp,4
    e734:	8009883a 	mov	r4,r16
    e738:	903ee83a 	callr	r18
    e73c:	003fed06 	br	e6f4 <__alt_mem_Onchip_SRAM+0xf800e6f4>

0000e740 <wcrtomb>:
    e740:	defff604 	addi	sp,sp,-40
    e744:	008000b4 	movhi	r2,2
    e748:	dc800615 	stw	r18,24(sp)
    e74c:	dc400515 	stw	r17,20(sp)
    e750:	10a88304 	addi	r2,r2,-24052
    e754:	dfc00915 	stw	ra,36(sp)
    e758:	dd000815 	stw	r20,32(sp)
    e75c:	dcc00715 	stw	r19,28(sp)
    e760:	dc000415 	stw	r16,16(sp)
    e764:	3025883a 	mov	r18,r6
    e768:	14400017 	ldw	r17,0(r2)
    e76c:	20001926 	beq	r4,zero,e7d4 <wcrtomb+0x94>
    e770:	008000b4 	movhi	r2,2
    e774:	10a88504 	addi	r2,r2,-24044
    e778:	15000017 	ldw	r20,0(r2)
    e77c:	2021883a 	mov	r16,r4
    e780:	2827883a 	mov	r19,r5
    e784:	0008e9c0 	call	8e9c <__locale_charset>
    e788:	100f883a 	mov	r7,r2
    e78c:	dc800015 	stw	r18,0(sp)
    e790:	980d883a 	mov	r6,r19
    e794:	800b883a 	mov	r5,r16
    e798:	8809883a 	mov	r4,r17
    e79c:	a03ee83a 	callr	r20
    e7a0:	00ffffc4 	movi	r3,-1
    e7a4:	10c0031e 	bne	r2,r3,e7b4 <wcrtomb+0x74>
    e7a8:	90000015 	stw	zero,0(r18)
    e7ac:	00c02284 	movi	r3,138
    e7b0:	88c00015 	stw	r3,0(r17)
    e7b4:	dfc00917 	ldw	ra,36(sp)
    e7b8:	dd000817 	ldw	r20,32(sp)
    e7bc:	dcc00717 	ldw	r19,28(sp)
    e7c0:	dc800617 	ldw	r18,24(sp)
    e7c4:	dc400517 	ldw	r17,20(sp)
    e7c8:	dc000417 	ldw	r16,16(sp)
    e7cc:	dec00a04 	addi	sp,sp,40
    e7d0:	f800283a 	ret
    e7d4:	008000b4 	movhi	r2,2
    e7d8:	10a88504 	addi	r2,r2,-24044
    e7dc:	14000017 	ldw	r16,0(r2)
    e7e0:	0008e9c0 	call	8e9c <__locale_charset>
    e7e4:	100f883a 	mov	r7,r2
    e7e8:	dc800015 	stw	r18,0(sp)
    e7ec:	000d883a 	mov	r6,zero
    e7f0:	d9400104 	addi	r5,sp,4
    e7f4:	8809883a 	mov	r4,r17
    e7f8:	803ee83a 	callr	r16
    e7fc:	003fe806 	br	e7a0 <__alt_mem_Onchip_SRAM+0xf800e7a0>

0000e800 <__ascii_wctomb>:
    e800:	28000526 	beq	r5,zero,e818 <__ascii_wctomb+0x18>
    e804:	00803fc4 	movi	r2,255
    e808:	11800536 	bltu	r2,r6,e820 <__ascii_wctomb+0x20>
    e80c:	29800005 	stb	r6,0(r5)
    e810:	00800044 	movi	r2,1
    e814:	f800283a 	ret
    e818:	0005883a 	mov	r2,zero
    e81c:	f800283a 	ret
    e820:	00802284 	movi	r2,138
    e824:	20800015 	stw	r2,0(r4)
    e828:	00bfffc4 	movi	r2,-1
    e82c:	f800283a 	ret

0000e830 <_wctomb_r>:
    e830:	008000b4 	movhi	r2,2
    e834:	defff904 	addi	sp,sp,-28
    e838:	10a88504 	addi	r2,r2,-24044
    e83c:	dfc00615 	stw	ra,24(sp)
    e840:	dc400515 	stw	r17,20(sp)
    e844:	dc000415 	stw	r16,16(sp)
    e848:	3823883a 	mov	r17,r7
    e84c:	14000017 	ldw	r16,0(r2)
    e850:	d9000115 	stw	r4,4(sp)
    e854:	d9400215 	stw	r5,8(sp)
    e858:	d9800315 	stw	r6,12(sp)
    e85c:	0008e9c0 	call	8e9c <__locale_charset>
    e860:	d9800317 	ldw	r6,12(sp)
    e864:	d9400217 	ldw	r5,8(sp)
    e868:	d9000117 	ldw	r4,4(sp)
    e86c:	100f883a 	mov	r7,r2
    e870:	dc400015 	stw	r17,0(sp)
    e874:	803ee83a 	callr	r16
    e878:	dfc00617 	ldw	ra,24(sp)
    e87c:	dc400517 	ldw	r17,20(sp)
    e880:	dc000417 	ldw	r16,16(sp)
    e884:	dec00704 	addi	sp,sp,28
    e888:	f800283a 	ret

0000e88c <__muldi3>:
    e88c:	defff604 	addi	sp,sp,-40
    e890:	dd800615 	stw	r22,24(sp)
    e894:	dd400515 	stw	r21,20(sp)
    e898:	dc400115 	stw	r17,4(sp)
    e89c:	357fffcc 	andi	r21,r6,65535
    e8a0:	2022d43a 	srli	r17,r4,16
    e8a4:	25bfffcc 	andi	r22,r4,65535
    e8a8:	dcc00315 	stw	r19,12(sp)
    e8ac:	dc800215 	stw	r18,8(sp)
    e8b0:	2027883a 	mov	r19,r4
    e8b4:	2825883a 	mov	r18,r5
    e8b8:	b009883a 	mov	r4,r22
    e8bc:	a80b883a 	mov	r5,r21
    e8c0:	dfc00915 	stw	ra,36(sp)
    e8c4:	df000815 	stw	fp,32(sp)
    e8c8:	ddc00715 	stw	r23,28(sp)
    e8cc:	3839883a 	mov	fp,r7
    e8d0:	302ed43a 	srli	r23,r6,16
    e8d4:	dd000415 	stw	r20,16(sp)
    e8d8:	dc000015 	stw	r16,0(sp)
    e8dc:	3029883a 	mov	r20,r6
    e8e0:	00015680 	call	1568 <__mulsi3>
    e8e4:	a80b883a 	mov	r5,r21
    e8e8:	8809883a 	mov	r4,r17
    e8ec:	1021883a 	mov	r16,r2
    e8f0:	00015680 	call	1568 <__mulsi3>
    e8f4:	8809883a 	mov	r4,r17
    e8f8:	b80b883a 	mov	r5,r23
    e8fc:	102b883a 	mov	r21,r2
    e900:	00015680 	call	1568 <__mulsi3>
    e904:	b80b883a 	mov	r5,r23
    e908:	b009883a 	mov	r4,r22
    e90c:	1023883a 	mov	r17,r2
    e910:	00015680 	call	1568 <__mulsi3>
    e914:	8006d43a 	srli	r3,r16,16
    e918:	1545883a 	add	r2,r2,r21
    e91c:	1885883a 	add	r2,r3,r2
    e920:	1540022e 	bgeu	r2,r21,e92c <__muldi3+0xa0>
    e924:	00c00074 	movhi	r3,1
    e928:	88e3883a 	add	r17,r17,r3
    e92c:	1006d43a 	srli	r3,r2,16
    e930:	1004943a 	slli	r2,r2,16
    e934:	e00b883a 	mov	r5,fp
    e938:	9809883a 	mov	r4,r19
    e93c:	843fffcc 	andi	r16,r16,65535
    e940:	1c63883a 	add	r17,r3,r17
    e944:	1421883a 	add	r16,r2,r16
    e948:	00015680 	call	1568 <__mulsi3>
    e94c:	900b883a 	mov	r5,r18
    e950:	a009883a 	mov	r4,r20
    e954:	1027883a 	mov	r19,r2
    e958:	00015680 	call	1568 <__mulsi3>
    e95c:	9885883a 	add	r2,r19,r2
    e960:	1447883a 	add	r3,r2,r17
    e964:	8005883a 	mov	r2,r16
    e968:	dfc00917 	ldw	ra,36(sp)
    e96c:	df000817 	ldw	fp,32(sp)
    e970:	ddc00717 	ldw	r23,28(sp)
    e974:	dd800617 	ldw	r22,24(sp)
    e978:	dd400517 	ldw	r21,20(sp)
    e97c:	dd000417 	ldw	r20,16(sp)
    e980:	dcc00317 	ldw	r19,12(sp)
    e984:	dc800217 	ldw	r18,8(sp)
    e988:	dc400117 	ldw	r17,4(sp)
    e98c:	dc000017 	ldw	r16,0(sp)
    e990:	dec00a04 	addi	sp,sp,40
    e994:	f800283a 	ret

0000e998 <__udivdi3>:
    e998:	defff404 	addi	sp,sp,-48
    e99c:	dcc00515 	stw	r19,20(sp)
    e9a0:	dc000215 	stw	r16,8(sp)
    e9a4:	dfc00b15 	stw	ra,44(sp)
    e9a8:	df000a15 	stw	fp,40(sp)
    e9ac:	ddc00915 	stw	r23,36(sp)
    e9b0:	dd800815 	stw	r22,32(sp)
    e9b4:	dd400715 	stw	r21,28(sp)
    e9b8:	dd000615 	stw	r20,24(sp)
    e9bc:	dc800415 	stw	r18,16(sp)
    e9c0:	dc400315 	stw	r17,12(sp)
    e9c4:	2027883a 	mov	r19,r4
    e9c8:	2821883a 	mov	r16,r5
    e9cc:	3800461e 	bne	r7,zero,eae8 <__udivdi3+0x150>
    e9d0:	3023883a 	mov	r17,r6
    e9d4:	2025883a 	mov	r18,r4
    e9d8:	2980572e 	bgeu	r5,r6,eb38 <__udivdi3+0x1a0>
    e9dc:	00bfffd4 	movui	r2,65535
    e9e0:	282d883a 	mov	r22,r5
    e9e4:	1180b236 	bltu	r2,r6,ecb0 <__udivdi3+0x318>
    e9e8:	00803fc4 	movi	r2,255
    e9ec:	1185803a 	cmpltu	r2,r2,r6
    e9f0:	100490fa 	slli	r2,r2,3
    e9f4:	3086d83a 	srl	r3,r6,r2
    e9f8:	010000b4 	movhi	r4,2
    e9fc:	21211d04 	addi	r4,r4,-31628
    ea00:	20c7883a 	add	r3,r4,r3
    ea04:	18c00003 	ldbu	r3,0(r3)
    ea08:	1885883a 	add	r2,r3,r2
    ea0c:	00c00804 	movi	r3,32
    ea10:	1887c83a 	sub	r3,r3,r2
    ea14:	18000526 	beq	r3,zero,ea2c <__udivdi3+0x94>
    ea18:	80e0983a 	sll	r16,r16,r3
    ea1c:	9884d83a 	srl	r2,r19,r2
    ea20:	30e2983a 	sll	r17,r6,r3
    ea24:	98e4983a 	sll	r18,r19,r3
    ea28:	142cb03a 	or	r22,r2,r16
    ea2c:	882ad43a 	srli	r21,r17,16
    ea30:	b009883a 	mov	r4,r22
    ea34:	8d3fffcc 	andi	r20,r17,65535
    ea38:	a80b883a 	mov	r5,r21
    ea3c:	00015100 	call	1510 <__umodsi3>
    ea40:	b009883a 	mov	r4,r22
    ea44:	a80b883a 	mov	r5,r21
    ea48:	1027883a 	mov	r19,r2
    ea4c:	00014ac0 	call	14ac <__udivsi3>
    ea50:	100b883a 	mov	r5,r2
    ea54:	a009883a 	mov	r4,r20
    ea58:	102d883a 	mov	r22,r2
    ea5c:	00015680 	call	1568 <__mulsi3>
    ea60:	9826943a 	slli	r19,r19,16
    ea64:	9006d43a 	srli	r3,r18,16
    ea68:	1cc6b03a 	or	r3,r3,r19
    ea6c:	1880052e 	bgeu	r3,r2,ea84 <__udivdi3+0xec>
    ea70:	1c47883a 	add	r3,r3,r17
    ea74:	b13fffc4 	addi	r4,r22,-1
    ea78:	1c400136 	bltu	r3,r17,ea80 <__udivdi3+0xe8>
    ea7c:	18814236 	bltu	r3,r2,ef88 <__udivdi3+0x5f0>
    ea80:	202d883a 	mov	r22,r4
    ea84:	18a1c83a 	sub	r16,r3,r2
    ea88:	8009883a 	mov	r4,r16
    ea8c:	a80b883a 	mov	r5,r21
    ea90:	00015100 	call	1510 <__umodsi3>
    ea94:	1027883a 	mov	r19,r2
    ea98:	8009883a 	mov	r4,r16
    ea9c:	a80b883a 	mov	r5,r21
    eaa0:	9826943a 	slli	r19,r19,16
    eaa4:	00014ac0 	call	14ac <__udivsi3>
    eaa8:	100b883a 	mov	r5,r2
    eaac:	a009883a 	mov	r4,r20
    eab0:	94bfffcc 	andi	r18,r18,65535
    eab4:	1021883a 	mov	r16,r2
    eab8:	94e4b03a 	or	r18,r18,r19
    eabc:	00015680 	call	1568 <__mulsi3>
    eac0:	9080052e 	bgeu	r18,r2,ead8 <__udivdi3+0x140>
    eac4:	8ca5883a 	add	r18,r17,r18
    eac8:	80ffffc4 	addi	r3,r16,-1
    eacc:	94410c36 	bltu	r18,r17,ef00 <__udivdi3+0x568>
    ead0:	90810b2e 	bgeu	r18,r2,ef00 <__udivdi3+0x568>
    ead4:	843fff84 	addi	r16,r16,-2
    ead8:	b004943a 	slli	r2,r22,16
    eadc:	0007883a 	mov	r3,zero
    eae0:	1404b03a 	or	r2,r2,r16
    eae4:	00005e06 	br	ec60 <__udivdi3+0x2c8>
    eae8:	29c05b36 	bltu	r5,r7,ec58 <__udivdi3+0x2c0>
    eaec:	00bfffd4 	movui	r2,65535
    eaf0:	11c0672e 	bgeu	r2,r7,ec90 <__udivdi3+0x2f8>
    eaf4:	00804034 	movhi	r2,256
    eaf8:	10bfffc4 	addi	r2,r2,-1
    eafc:	11c10a36 	bltu	r2,r7,ef28 <__udivdi3+0x590>
    eb00:	00800404 	movi	r2,16
    eb04:	3886d83a 	srl	r3,r7,r2
    eb08:	010000b4 	movhi	r4,2
    eb0c:	21211d04 	addi	r4,r4,-31628
    eb10:	20c7883a 	add	r3,r4,r3
    eb14:	18c00003 	ldbu	r3,0(r3)
    eb18:	05c00804 	movi	r23,32
    eb1c:	1885883a 	add	r2,r3,r2
    eb20:	b8afc83a 	sub	r23,r23,r2
    eb24:	b800671e 	bne	r23,zero,ecc4 <__udivdi3+0x32c>
    eb28:	3c010536 	bltu	r7,r16,ef40 <__udivdi3+0x5a8>
    eb2c:	9985403a 	cmpgeu	r2,r19,r6
    eb30:	0007883a 	mov	r3,zero
    eb34:	00004a06 	br	ec60 <__udivdi3+0x2c8>
    eb38:	3000041e 	bne	r6,zero,eb4c <__udivdi3+0x1b4>
    eb3c:	000b883a 	mov	r5,zero
    eb40:	01000044 	movi	r4,1
    eb44:	00014ac0 	call	14ac <__udivsi3>
    eb48:	1023883a 	mov	r17,r2
    eb4c:	00bfffd4 	movui	r2,65535
    eb50:	1440532e 	bgeu	r2,r17,eca0 <__udivdi3+0x308>
    eb54:	00804034 	movhi	r2,256
    eb58:	10bfffc4 	addi	r2,r2,-1
    eb5c:	1440f436 	bltu	r2,r17,ef30 <__udivdi3+0x598>
    eb60:	00800404 	movi	r2,16
    eb64:	8886d83a 	srl	r3,r17,r2
    eb68:	010000b4 	movhi	r4,2
    eb6c:	21211d04 	addi	r4,r4,-31628
    eb70:	20c7883a 	add	r3,r4,r3
    eb74:	18c00003 	ldbu	r3,0(r3)
    eb78:	1885883a 	add	r2,r3,r2
    eb7c:	00c00804 	movi	r3,32
    eb80:	1887c83a 	sub	r3,r3,r2
    eb84:	1800a51e 	bne	r3,zero,ee1c <__udivdi3+0x484>
    eb88:	882ad43a 	srli	r21,r17,16
    eb8c:	8461c83a 	sub	r16,r16,r17
    eb90:	8d3fffcc 	andi	r20,r17,65535
    eb94:	00c00044 	movi	r3,1
    eb98:	a80b883a 	mov	r5,r21
    eb9c:	8009883a 	mov	r4,r16
    eba0:	d8c00115 	stw	r3,4(sp)
    eba4:	00015100 	call	1510 <__umodsi3>
    eba8:	a80b883a 	mov	r5,r21
    ebac:	8009883a 	mov	r4,r16
    ebb0:	1027883a 	mov	r19,r2
    ebb4:	00014ac0 	call	14ac <__udivsi3>
    ebb8:	a00b883a 	mov	r5,r20
    ebbc:	1009883a 	mov	r4,r2
    ebc0:	102d883a 	mov	r22,r2
    ebc4:	00015680 	call	1568 <__mulsi3>
    ebc8:	9826943a 	slli	r19,r19,16
    ebcc:	900ed43a 	srli	r7,r18,16
    ebd0:	d8c00117 	ldw	r3,4(sp)
    ebd4:	3cceb03a 	or	r7,r7,r19
    ebd8:	3880052e 	bgeu	r7,r2,ebf0 <__udivdi3+0x258>
    ebdc:	3c4f883a 	add	r7,r7,r17
    ebe0:	b13fffc4 	addi	r4,r22,-1
    ebe4:	3c400136 	bltu	r7,r17,ebec <__udivdi3+0x254>
    ebe8:	3880e436 	bltu	r7,r2,ef7c <__udivdi3+0x5e4>
    ebec:	202d883a 	mov	r22,r4
    ebf0:	38a1c83a 	sub	r16,r7,r2
    ebf4:	8009883a 	mov	r4,r16
    ebf8:	a80b883a 	mov	r5,r21
    ebfc:	d8c00115 	stw	r3,4(sp)
    ec00:	00015100 	call	1510 <__umodsi3>
    ec04:	1027883a 	mov	r19,r2
    ec08:	8009883a 	mov	r4,r16
    ec0c:	a80b883a 	mov	r5,r21
    ec10:	9826943a 	slli	r19,r19,16
    ec14:	00014ac0 	call	14ac <__udivsi3>
    ec18:	a00b883a 	mov	r5,r20
    ec1c:	1009883a 	mov	r4,r2
    ec20:	94bfffcc 	andi	r18,r18,65535
    ec24:	1021883a 	mov	r16,r2
    ec28:	94e4b03a 	or	r18,r18,r19
    ec2c:	00015680 	call	1568 <__mulsi3>
    ec30:	d8c00117 	ldw	r3,4(sp)
    ec34:	9080052e 	bgeu	r18,r2,ec4c <__udivdi3+0x2b4>
    ec38:	8ca5883a 	add	r18,r17,r18
    ec3c:	813fffc4 	addi	r4,r16,-1
    ec40:	9440ad36 	bltu	r18,r17,eef8 <__udivdi3+0x560>
    ec44:	9080ac2e 	bgeu	r18,r2,eef8 <__udivdi3+0x560>
    ec48:	843fff84 	addi	r16,r16,-2
    ec4c:	b004943a 	slli	r2,r22,16
    ec50:	1404b03a 	or	r2,r2,r16
    ec54:	00000206 	br	ec60 <__udivdi3+0x2c8>
    ec58:	0007883a 	mov	r3,zero
    ec5c:	0005883a 	mov	r2,zero
    ec60:	dfc00b17 	ldw	ra,44(sp)
    ec64:	df000a17 	ldw	fp,40(sp)
    ec68:	ddc00917 	ldw	r23,36(sp)
    ec6c:	dd800817 	ldw	r22,32(sp)
    ec70:	dd400717 	ldw	r21,28(sp)
    ec74:	dd000617 	ldw	r20,24(sp)
    ec78:	dcc00517 	ldw	r19,20(sp)
    ec7c:	dc800417 	ldw	r18,16(sp)
    ec80:	dc400317 	ldw	r17,12(sp)
    ec84:	dc000217 	ldw	r16,8(sp)
    ec88:	dec00c04 	addi	sp,sp,48
    ec8c:	f800283a 	ret
    ec90:	00803fc4 	movi	r2,255
    ec94:	11c5803a 	cmpltu	r2,r2,r7
    ec98:	100490fa 	slli	r2,r2,3
    ec9c:	003f9906 	br	eb04 <__alt_mem_Onchip_SRAM+0xf800eb04>
    eca0:	00803fc4 	movi	r2,255
    eca4:	1445803a 	cmpltu	r2,r2,r17
    eca8:	100490fa 	slli	r2,r2,3
    ecac:	003fad06 	br	eb64 <__alt_mem_Onchip_SRAM+0xf800eb64>
    ecb0:	00804034 	movhi	r2,256
    ecb4:	10bfffc4 	addi	r2,r2,-1
    ecb8:	11809f36 	bltu	r2,r6,ef38 <__udivdi3+0x5a0>
    ecbc:	00800404 	movi	r2,16
    ecc0:	003f4c06 	br	e9f4 <__alt_mem_Onchip_SRAM+0xf800e9f4>
    ecc4:	3dce983a 	sll	r7,r7,r23
    ecc8:	30b8d83a 	srl	fp,r6,r2
    eccc:	80a2d83a 	srl	r17,r16,r2
    ecd0:	35cc983a 	sll	r6,r6,r23
    ecd4:	3f38b03a 	or	fp,r7,fp
    ecd8:	e024d43a 	srli	r18,fp,16
    ecdc:	9884d83a 	srl	r2,r19,r2
    ece0:	85e0983a 	sll	r16,r16,r23
    ece4:	8809883a 	mov	r4,r17
    ece8:	900b883a 	mov	r5,r18
    ecec:	d9800015 	stw	r6,0(sp)
    ecf0:	1420b03a 	or	r16,r2,r16
    ecf4:	00015100 	call	1510 <__umodsi3>
    ecf8:	900b883a 	mov	r5,r18
    ecfc:	8809883a 	mov	r4,r17
    ed00:	1029883a 	mov	r20,r2
    ed04:	e5bfffcc 	andi	r22,fp,65535
    ed08:	00014ac0 	call	14ac <__udivsi3>
    ed0c:	100b883a 	mov	r5,r2
    ed10:	b009883a 	mov	r4,r22
    ed14:	102b883a 	mov	r21,r2
    ed18:	00015680 	call	1568 <__mulsi3>
    ed1c:	a028943a 	slli	r20,r20,16
    ed20:	8006d43a 	srli	r3,r16,16
    ed24:	1d06b03a 	or	r3,r3,r20
    ed28:	1880042e 	bgeu	r3,r2,ed3c <__udivdi3+0x3a4>
    ed2c:	1f07883a 	add	r3,r3,fp
    ed30:	a93fffc4 	addi	r4,r21,-1
    ed34:	1f00892e 	bgeu	r3,fp,ef5c <__udivdi3+0x5c4>
    ed38:	202b883a 	mov	r21,r4
    ed3c:	18a3c83a 	sub	r17,r3,r2
    ed40:	8809883a 	mov	r4,r17
    ed44:	900b883a 	mov	r5,r18
    ed48:	00015100 	call	1510 <__umodsi3>
    ed4c:	1029883a 	mov	r20,r2
    ed50:	8809883a 	mov	r4,r17
    ed54:	900b883a 	mov	r5,r18
    ed58:	a028943a 	slli	r20,r20,16
    ed5c:	00014ac0 	call	14ac <__udivsi3>
    ed60:	100b883a 	mov	r5,r2
    ed64:	b009883a 	mov	r4,r22
    ed68:	843fffcc 	andi	r16,r16,65535
    ed6c:	1023883a 	mov	r17,r2
    ed70:	8520b03a 	or	r16,r16,r20
    ed74:	00015680 	call	1568 <__mulsi3>
    ed78:	8080042e 	bgeu	r16,r2,ed8c <__udivdi3+0x3f4>
    ed7c:	8721883a 	add	r16,r16,fp
    ed80:	88ffffc4 	addi	r3,r17,-1
    ed84:	8700712e 	bgeu	r16,fp,ef4c <__udivdi3+0x5b4>
    ed88:	1823883a 	mov	r17,r3
    ed8c:	a80e943a 	slli	r7,r21,16
    ed90:	d8c00017 	ldw	r3,0(sp)
    ed94:	80a1c83a 	sub	r16,r16,r2
    ed98:	3c64b03a 	or	r18,r7,r17
    ed9c:	1d3fffcc 	andi	r20,r3,65535
    eda0:	9022d43a 	srli	r17,r18,16
    eda4:	95bfffcc 	andi	r22,r18,65535
    eda8:	a00b883a 	mov	r5,r20
    edac:	b009883a 	mov	r4,r22
    edb0:	182ad43a 	srli	r21,r3,16
    edb4:	00015680 	call	1568 <__mulsi3>
    edb8:	a00b883a 	mov	r5,r20
    edbc:	8809883a 	mov	r4,r17
    edc0:	1039883a 	mov	fp,r2
    edc4:	00015680 	call	1568 <__mulsi3>
    edc8:	8809883a 	mov	r4,r17
    edcc:	a80b883a 	mov	r5,r21
    edd0:	1029883a 	mov	r20,r2
    edd4:	00015680 	call	1568 <__mulsi3>
    edd8:	a80b883a 	mov	r5,r21
    eddc:	b009883a 	mov	r4,r22
    ede0:	1023883a 	mov	r17,r2
    ede4:	00015680 	call	1568 <__mulsi3>
    ede8:	e006d43a 	srli	r3,fp,16
    edec:	1505883a 	add	r2,r2,r20
    edf0:	1887883a 	add	r3,r3,r2
    edf4:	1d00022e 	bgeu	r3,r20,ee00 <__udivdi3+0x468>
    edf8:	00800074 	movhi	r2,1
    edfc:	88a3883a 	add	r17,r17,r2
    ee00:	1804d43a 	srli	r2,r3,16
    ee04:	1463883a 	add	r17,r2,r17
    ee08:	84404436 	bltu	r16,r17,ef1c <__udivdi3+0x584>
    ee0c:	84403e26 	beq	r16,r17,ef08 <__udivdi3+0x570>
    ee10:	9005883a 	mov	r2,r18
    ee14:	0007883a 	mov	r3,zero
    ee18:	003f9106 	br	ec60 <__alt_mem_Onchip_SRAM+0xf800ec60>
    ee1c:	88e2983a 	sll	r17,r17,r3
    ee20:	80aed83a 	srl	r23,r16,r2
    ee24:	80e0983a 	sll	r16,r16,r3
    ee28:	882ad43a 	srli	r21,r17,16
    ee2c:	9884d83a 	srl	r2,r19,r2
    ee30:	b809883a 	mov	r4,r23
    ee34:	a80b883a 	mov	r5,r21
    ee38:	98e4983a 	sll	r18,r19,r3
    ee3c:	142cb03a 	or	r22,r2,r16
    ee40:	00015100 	call	1510 <__umodsi3>
    ee44:	b809883a 	mov	r4,r23
    ee48:	a80b883a 	mov	r5,r21
    ee4c:	1027883a 	mov	r19,r2
    ee50:	8d3fffcc 	andi	r20,r17,65535
    ee54:	00014ac0 	call	14ac <__udivsi3>
    ee58:	a009883a 	mov	r4,r20
    ee5c:	100b883a 	mov	r5,r2
    ee60:	102f883a 	mov	r23,r2
    ee64:	00015680 	call	1568 <__mulsi3>
    ee68:	9826943a 	slli	r19,r19,16
    ee6c:	b008d43a 	srli	r4,r22,16
    ee70:	24c8b03a 	or	r4,r4,r19
    ee74:	2080062e 	bgeu	r4,r2,ee90 <__udivdi3+0x4f8>
    ee78:	2449883a 	add	r4,r4,r17
    ee7c:	b8ffffc4 	addi	r3,r23,-1
    ee80:	24403c36 	bltu	r4,r17,ef74 <__udivdi3+0x5dc>
    ee84:	20803b2e 	bgeu	r4,r2,ef74 <__udivdi3+0x5dc>
    ee88:	bdffff84 	addi	r23,r23,-2
    ee8c:	2449883a 	add	r4,r4,r17
    ee90:	20a1c83a 	sub	r16,r4,r2
    ee94:	a80b883a 	mov	r5,r21
    ee98:	8009883a 	mov	r4,r16
    ee9c:	00015100 	call	1510 <__umodsi3>
    eea0:	a80b883a 	mov	r5,r21
    eea4:	8009883a 	mov	r4,r16
    eea8:	1027883a 	mov	r19,r2
    eeac:	00014ac0 	call	14ac <__udivsi3>
    eeb0:	a009883a 	mov	r4,r20
    eeb4:	100b883a 	mov	r5,r2
    eeb8:	9826943a 	slli	r19,r19,16
    eebc:	1039883a 	mov	fp,r2
    eec0:	00015680 	call	1568 <__mulsi3>
    eec4:	b13fffcc 	andi	r4,r22,65535
    eec8:	24c8b03a 	or	r4,r4,r19
    eecc:	2080062e 	bgeu	r4,r2,eee8 <__udivdi3+0x550>
    eed0:	2449883a 	add	r4,r4,r17
    eed4:	e0ffffc4 	addi	r3,fp,-1
    eed8:	24402436 	bltu	r4,r17,ef6c <__udivdi3+0x5d4>
    eedc:	2080232e 	bgeu	r4,r2,ef6c <__udivdi3+0x5d4>
    eee0:	e73fff84 	addi	fp,fp,-2
    eee4:	2449883a 	add	r4,r4,r17
    eee8:	b82e943a 	slli	r23,r23,16
    eeec:	20a1c83a 	sub	r16,r4,r2
    eef0:	bf06b03a 	or	r3,r23,fp
    eef4:	003f2806 	br	eb98 <__alt_mem_Onchip_SRAM+0xf800eb98>
    eef8:	2021883a 	mov	r16,r4
    eefc:	003f5306 	br	ec4c <__alt_mem_Onchip_SRAM+0xf800ec4c>
    ef00:	1821883a 	mov	r16,r3
    ef04:	003ef406 	br	ead8 <__alt_mem_Onchip_SRAM+0xf800ead8>
    ef08:	1806943a 	slli	r3,r3,16
    ef0c:	9de6983a 	sll	r19,r19,r23
    ef10:	e73fffcc 	andi	fp,fp,65535
    ef14:	1f07883a 	add	r3,r3,fp
    ef18:	98ffbd2e 	bgeu	r19,r3,ee10 <__alt_mem_Onchip_SRAM+0xf800ee10>
    ef1c:	90bfffc4 	addi	r2,r18,-1
    ef20:	0007883a 	mov	r3,zero
    ef24:	003f4e06 	br	ec60 <__alt_mem_Onchip_SRAM+0xf800ec60>
    ef28:	00800604 	movi	r2,24
    ef2c:	003ef506 	br	eb04 <__alt_mem_Onchip_SRAM+0xf800eb04>
    ef30:	00800604 	movi	r2,24
    ef34:	003f0b06 	br	eb64 <__alt_mem_Onchip_SRAM+0xf800eb64>
    ef38:	00800604 	movi	r2,24
    ef3c:	003ead06 	br	e9f4 <__alt_mem_Onchip_SRAM+0xf800e9f4>
    ef40:	0007883a 	mov	r3,zero
    ef44:	00800044 	movi	r2,1
    ef48:	003f4506 	br	ec60 <__alt_mem_Onchip_SRAM+0xf800ec60>
    ef4c:	80bf8e2e 	bgeu	r16,r2,ed88 <__alt_mem_Onchip_SRAM+0xf800ed88>
    ef50:	8c7fff84 	addi	r17,r17,-2
    ef54:	8721883a 	add	r16,r16,fp
    ef58:	003f8c06 	br	ed8c <__alt_mem_Onchip_SRAM+0xf800ed8c>
    ef5c:	18bf762e 	bgeu	r3,r2,ed38 <__alt_mem_Onchip_SRAM+0xf800ed38>
    ef60:	ad7fff84 	addi	r21,r21,-2
    ef64:	1f07883a 	add	r3,r3,fp
    ef68:	003f7406 	br	ed3c <__alt_mem_Onchip_SRAM+0xf800ed3c>
    ef6c:	1839883a 	mov	fp,r3
    ef70:	003fdd06 	br	eee8 <__alt_mem_Onchip_SRAM+0xf800eee8>
    ef74:	182f883a 	mov	r23,r3
    ef78:	003fc506 	br	ee90 <__alt_mem_Onchip_SRAM+0xf800ee90>
    ef7c:	b5bfff84 	addi	r22,r22,-2
    ef80:	3c4f883a 	add	r7,r7,r17
    ef84:	003f1a06 	br	ebf0 <__alt_mem_Onchip_SRAM+0xf800ebf0>
    ef88:	b5bfff84 	addi	r22,r22,-2
    ef8c:	1c47883a 	add	r3,r3,r17
    ef90:	003ebc06 	br	ea84 <__alt_mem_Onchip_SRAM+0xf800ea84>

0000ef94 <__umoddi3>:
    ef94:	defff304 	addi	sp,sp,-52
    ef98:	df000b15 	stw	fp,44(sp)
    ef9c:	dc400415 	stw	r17,16(sp)
    efa0:	dc000315 	stw	r16,12(sp)
    efa4:	dfc00c15 	stw	ra,48(sp)
    efa8:	ddc00a15 	stw	r23,40(sp)
    efac:	dd800915 	stw	r22,36(sp)
    efb0:	dd400815 	stw	r21,32(sp)
    efb4:	dd000715 	stw	r20,28(sp)
    efb8:	dcc00615 	stw	r19,24(sp)
    efbc:	dc800515 	stw	r18,20(sp)
    efc0:	2021883a 	mov	r16,r4
    efc4:	2823883a 	mov	r17,r5
    efc8:	2839883a 	mov	fp,r5
    efcc:	3800401e 	bne	r7,zero,f0d0 <__umoddi3+0x13c>
    efd0:	3027883a 	mov	r19,r6
    efd4:	2029883a 	mov	r20,r4
    efd8:	2980552e 	bgeu	r5,r6,f130 <__umoddi3+0x19c>
    efdc:	00bfffd4 	movui	r2,65535
    efe0:	1180a236 	bltu	r2,r6,f26c <__umoddi3+0x2d8>
    efe4:	01003fc4 	movi	r4,255
    efe8:	2189803a 	cmpltu	r4,r4,r6
    efec:	200890fa 	slli	r4,r4,3
    eff0:	3104d83a 	srl	r2,r6,r4
    eff4:	00c000b4 	movhi	r3,2
    eff8:	18e11d04 	addi	r3,r3,-31628
    effc:	1885883a 	add	r2,r3,r2
    f000:	10c00003 	ldbu	r3,0(r2)
    f004:	00800804 	movi	r2,32
    f008:	1909883a 	add	r4,r3,r4
    f00c:	1125c83a 	sub	r18,r2,r4
    f010:	90000526 	beq	r18,zero,f028 <__umoddi3+0x94>
    f014:	8ca2983a 	sll	r17,r17,r18
    f018:	8108d83a 	srl	r4,r16,r4
    f01c:	34a6983a 	sll	r19,r6,r18
    f020:	84a8983a 	sll	r20,r16,r18
    f024:	2478b03a 	or	fp,r4,r17
    f028:	982cd43a 	srli	r22,r19,16
    f02c:	e009883a 	mov	r4,fp
    f030:	9dffffcc 	andi	r23,r19,65535
    f034:	b00b883a 	mov	r5,r22
    f038:	00015100 	call	1510 <__umodsi3>
    f03c:	b00b883a 	mov	r5,r22
    f040:	e009883a 	mov	r4,fp
    f044:	102b883a 	mov	r21,r2
    f048:	00014ac0 	call	14ac <__udivsi3>
    f04c:	100b883a 	mov	r5,r2
    f050:	b809883a 	mov	r4,r23
    f054:	00015680 	call	1568 <__mulsi3>
    f058:	a82a943a 	slli	r21,r21,16
    f05c:	a006d43a 	srli	r3,r20,16
    f060:	1d46b03a 	or	r3,r3,r21
    f064:	1880032e 	bgeu	r3,r2,f074 <__umoddi3+0xe0>
    f068:	1cc7883a 	add	r3,r3,r19
    f06c:	1cc00136 	bltu	r3,r19,f074 <__umoddi3+0xe0>
    f070:	18813136 	bltu	r3,r2,f538 <__umoddi3+0x5a4>
    f074:	18a1c83a 	sub	r16,r3,r2
    f078:	b00b883a 	mov	r5,r22
    f07c:	8009883a 	mov	r4,r16
    f080:	00015100 	call	1510 <__umodsi3>
    f084:	b00b883a 	mov	r5,r22
    f088:	8009883a 	mov	r4,r16
    f08c:	1023883a 	mov	r17,r2
    f090:	00014ac0 	call	14ac <__udivsi3>
    f094:	100b883a 	mov	r5,r2
    f098:	b809883a 	mov	r4,r23
    f09c:	8822943a 	slli	r17,r17,16
    f0a0:	00015680 	call	1568 <__mulsi3>
    f0a4:	a0ffffcc 	andi	r3,r20,65535
    f0a8:	1c46b03a 	or	r3,r3,r17
    f0ac:	1880042e 	bgeu	r3,r2,f0c0 <__umoddi3+0x12c>
    f0b0:	1cc7883a 	add	r3,r3,r19
    f0b4:	1cc00236 	bltu	r3,r19,f0c0 <__umoddi3+0x12c>
    f0b8:	1880012e 	bgeu	r3,r2,f0c0 <__umoddi3+0x12c>
    f0bc:	1cc7883a 	add	r3,r3,r19
    f0c0:	1885c83a 	sub	r2,r3,r2
    f0c4:	1484d83a 	srl	r2,r2,r18
    f0c8:	0007883a 	mov	r3,zero
    f0cc:	00005306 	br	f21c <__umoddi3+0x288>
    f0d0:	29c05036 	bltu	r5,r7,f214 <__umoddi3+0x280>
    f0d4:	00bfffd4 	movui	r2,65535
    f0d8:	11c05c2e 	bgeu	r2,r7,f24c <__umoddi3+0x2b8>
    f0dc:	00804034 	movhi	r2,256
    f0e0:	10bfffc4 	addi	r2,r2,-1
    f0e4:	11c10636 	bltu	r2,r7,f500 <__umoddi3+0x56c>
    f0e8:	01000404 	movi	r4,16
    f0ec:	3904d83a 	srl	r2,r7,r4
    f0f0:	00c000b4 	movhi	r3,2
    f0f4:	18e11d04 	addi	r3,r3,-31628
    f0f8:	1885883a 	add	r2,r3,r2
    f0fc:	14c00003 	ldbu	r19,0(r2)
    f100:	00c00804 	movi	r3,32
    f104:	9927883a 	add	r19,r19,r4
    f108:	1ce9c83a 	sub	r20,r3,r19
    f10c:	a0005c1e 	bne	r20,zero,f280 <__umoddi3+0x2ec>
    f110:	3c400136 	bltu	r7,r17,f118 <__umoddi3+0x184>
    f114:	81810a36 	bltu	r16,r6,f540 <__umoddi3+0x5ac>
    f118:	8185c83a 	sub	r2,r16,r6
    f11c:	89e3c83a 	sub	r17,r17,r7
    f120:	8089803a 	cmpltu	r4,r16,r2
    f124:	8939c83a 	sub	fp,r17,r4
    f128:	e007883a 	mov	r3,fp
    f12c:	00003b06 	br	f21c <__umoddi3+0x288>
    f130:	3000041e 	bne	r6,zero,f144 <__umoddi3+0x1b0>
    f134:	000b883a 	mov	r5,zero
    f138:	01000044 	movi	r4,1
    f13c:	00014ac0 	call	14ac <__udivsi3>
    f140:	1027883a 	mov	r19,r2
    f144:	00bfffd4 	movui	r2,65535
    f148:	14c0442e 	bgeu	r2,r19,f25c <__umoddi3+0x2c8>
    f14c:	00804034 	movhi	r2,256
    f150:	10bfffc4 	addi	r2,r2,-1
    f154:	14c0ec36 	bltu	r2,r19,f508 <__umoddi3+0x574>
    f158:	00800404 	movi	r2,16
    f15c:	9886d83a 	srl	r3,r19,r2
    f160:	010000b4 	movhi	r4,2
    f164:	21211d04 	addi	r4,r4,-31628
    f168:	20c7883a 	add	r3,r4,r3
    f16c:	18c00003 	ldbu	r3,0(r3)
    f170:	1887883a 	add	r3,r3,r2
    f174:	00800804 	movi	r2,32
    f178:	10e5c83a 	sub	r18,r2,r3
    f17c:	9000ab1e 	bne	r18,zero,f42c <__umoddi3+0x498>
    f180:	982cd43a 	srli	r22,r19,16
    f184:	8ce3c83a 	sub	r17,r17,r19
    f188:	9dffffcc 	andi	r23,r19,65535
    f18c:	b00b883a 	mov	r5,r22
    f190:	8809883a 	mov	r4,r17
    f194:	00015100 	call	1510 <__umodsi3>
    f198:	b00b883a 	mov	r5,r22
    f19c:	8809883a 	mov	r4,r17
    f1a0:	102b883a 	mov	r21,r2
    f1a4:	00014ac0 	call	14ac <__udivsi3>
    f1a8:	b80b883a 	mov	r5,r23
    f1ac:	1009883a 	mov	r4,r2
    f1b0:	00015680 	call	1568 <__mulsi3>
    f1b4:	a82a943a 	slli	r21,r21,16
    f1b8:	a006d43a 	srli	r3,r20,16
    f1bc:	1d46b03a 	or	r3,r3,r21
    f1c0:	1880042e 	bgeu	r3,r2,f1d4 <__umoddi3+0x240>
    f1c4:	1cc7883a 	add	r3,r3,r19
    f1c8:	1cc00236 	bltu	r3,r19,f1d4 <__umoddi3+0x240>
    f1cc:	1880012e 	bgeu	r3,r2,f1d4 <__umoddi3+0x240>
    f1d0:	1cc7883a 	add	r3,r3,r19
    f1d4:	18a1c83a 	sub	r16,r3,r2
    f1d8:	b00b883a 	mov	r5,r22
    f1dc:	8009883a 	mov	r4,r16
    f1e0:	00015100 	call	1510 <__umodsi3>
    f1e4:	1023883a 	mov	r17,r2
    f1e8:	b00b883a 	mov	r5,r22
    f1ec:	8009883a 	mov	r4,r16
    f1f0:	00014ac0 	call	14ac <__udivsi3>
    f1f4:	8822943a 	slli	r17,r17,16
    f1f8:	b80b883a 	mov	r5,r23
    f1fc:	1009883a 	mov	r4,r2
    f200:	00015680 	call	1568 <__mulsi3>
    f204:	a53fffcc 	andi	r20,r20,65535
    f208:	a446b03a 	or	r3,r20,r17
    f20c:	18bfac2e 	bgeu	r3,r2,f0c0 <__alt_mem_Onchip_SRAM+0xf800f0c0>
    f210:	003fa706 	br	f0b0 <__alt_mem_Onchip_SRAM+0xf800f0b0>
    f214:	2005883a 	mov	r2,r4
    f218:	2807883a 	mov	r3,r5
    f21c:	dfc00c17 	ldw	ra,48(sp)
    f220:	df000b17 	ldw	fp,44(sp)
    f224:	ddc00a17 	ldw	r23,40(sp)
    f228:	dd800917 	ldw	r22,36(sp)
    f22c:	dd400817 	ldw	r21,32(sp)
    f230:	dd000717 	ldw	r20,28(sp)
    f234:	dcc00617 	ldw	r19,24(sp)
    f238:	dc800517 	ldw	r18,20(sp)
    f23c:	dc400417 	ldw	r17,16(sp)
    f240:	dc000317 	ldw	r16,12(sp)
    f244:	dec00d04 	addi	sp,sp,52
    f248:	f800283a 	ret
    f24c:	04c03fc4 	movi	r19,255
    f250:	99c9803a 	cmpltu	r4,r19,r7
    f254:	200890fa 	slli	r4,r4,3
    f258:	003fa406 	br	f0ec <__alt_mem_Onchip_SRAM+0xf800f0ec>
    f25c:	00803fc4 	movi	r2,255
    f260:	14c5803a 	cmpltu	r2,r2,r19
    f264:	100490fa 	slli	r2,r2,3
    f268:	003fbc06 	br	f15c <__alt_mem_Onchip_SRAM+0xf800f15c>
    f26c:	00804034 	movhi	r2,256
    f270:	10bfffc4 	addi	r2,r2,-1
    f274:	1180a636 	bltu	r2,r6,f510 <__umoddi3+0x57c>
    f278:	01000404 	movi	r4,16
    f27c:	003f5c06 	br	eff0 <__alt_mem_Onchip_SRAM+0xf800eff0>
    f280:	3d0e983a 	sll	r7,r7,r20
    f284:	34ead83a 	srl	r21,r6,r19
    f288:	8cc6d83a 	srl	r3,r17,r19
    f28c:	8d10983a 	sll	r8,r17,r20
    f290:	3d6ab03a 	or	r21,r7,r21
    f294:	a82cd43a 	srli	r22,r21,16
    f298:	84e2d83a 	srl	r17,r16,r19
    f29c:	1809883a 	mov	r4,r3
    f2a0:	b00b883a 	mov	r5,r22
    f2a4:	8a22b03a 	or	r17,r17,r8
    f2a8:	3524983a 	sll	r18,r6,r20
    f2ac:	dc400015 	stw	r17,0(sp)
    f2b0:	d8c00115 	stw	r3,4(sp)
    f2b4:	00015100 	call	1510 <__umodsi3>
    f2b8:	d8c00117 	ldw	r3,4(sp)
    f2bc:	b00b883a 	mov	r5,r22
    f2c0:	1039883a 	mov	fp,r2
    f2c4:	1809883a 	mov	r4,r3
    f2c8:	00014ac0 	call	14ac <__udivsi3>
    f2cc:	adffffcc 	andi	r23,r21,65535
    f2d0:	100b883a 	mov	r5,r2
    f2d4:	b809883a 	mov	r4,r23
    f2d8:	1023883a 	mov	r17,r2
    f2dc:	00015680 	call	1568 <__mulsi3>
    f2e0:	d9400017 	ldw	r5,0(sp)
    f2e4:	e008943a 	slli	r4,fp,16
    f2e8:	8520983a 	sll	r16,r16,r20
    f2ec:	2806d43a 	srli	r3,r5,16
    f2f0:	1906b03a 	or	r3,r3,r4
    f2f4:	1880042e 	bgeu	r3,r2,f308 <__umoddi3+0x374>
    f2f8:	1d47883a 	add	r3,r3,r21
    f2fc:	893fffc4 	addi	r4,r17,-1
    f300:	1d40892e 	bgeu	r3,r21,f528 <__umoddi3+0x594>
    f304:	2023883a 	mov	r17,r4
    f308:	18b9c83a 	sub	fp,r3,r2
    f30c:	b00b883a 	mov	r5,r22
    f310:	e009883a 	mov	r4,fp
    f314:	00015100 	call	1510 <__umodsi3>
    f318:	b00b883a 	mov	r5,r22
    f31c:	e009883a 	mov	r4,fp
    f320:	d8800215 	stw	r2,8(sp)
    f324:	00014ac0 	call	14ac <__udivsi3>
    f328:	100b883a 	mov	r5,r2
    f32c:	b809883a 	mov	r4,r23
    f330:	102d883a 	mov	r22,r2
    f334:	00015680 	call	1568 <__mulsi3>
    f338:	d9800217 	ldw	r6,8(sp)
    f33c:	d8c00017 	ldw	r3,0(sp)
    f340:	300c943a 	slli	r6,r6,16
    f344:	1a3fffcc 	andi	r8,r3,65535
    f348:	4190b03a 	or	r8,r8,r6
    f34c:	4080042e 	bgeu	r8,r2,f360 <__umoddi3+0x3cc>
    f350:	4551883a 	add	r8,r8,r21
    f354:	b0ffffc4 	addi	r3,r22,-1
    f358:	45406f2e 	bgeu	r8,r21,f518 <__umoddi3+0x584>
    f35c:	182d883a 	mov	r22,r3
    f360:	880e943a 	slli	r7,r17,16
    f364:	9006d43a 	srli	r3,r18,16
    f368:	91bfffcc 	andi	r6,r18,65535
    f36c:	3dacb03a 	or	r22,r7,r22
    f370:	b02ed43a 	srli	r23,r22,16
    f374:	b5bfffcc 	andi	r22,r22,65535
    f378:	300b883a 	mov	r5,r6
    f37c:	b009883a 	mov	r4,r22
    f380:	40a3c83a 	sub	r17,r8,r2
    f384:	d8c00115 	stw	r3,4(sp)
    f388:	d9800215 	stw	r6,8(sp)
    f38c:	00015680 	call	1568 <__mulsi3>
    f390:	d9800217 	ldw	r6,8(sp)
    f394:	b809883a 	mov	r4,r23
    f398:	1039883a 	mov	fp,r2
    f39c:	300b883a 	mov	r5,r6
    f3a0:	00015680 	call	1568 <__mulsi3>
    f3a4:	d8c00117 	ldw	r3,4(sp)
    f3a8:	b809883a 	mov	r4,r23
    f3ac:	d8800215 	stw	r2,8(sp)
    f3b0:	180b883a 	mov	r5,r3
    f3b4:	00015680 	call	1568 <__mulsi3>
    f3b8:	d8c00117 	ldw	r3,4(sp)
    f3bc:	b009883a 	mov	r4,r22
    f3c0:	102f883a 	mov	r23,r2
    f3c4:	180b883a 	mov	r5,r3
    f3c8:	00015680 	call	1568 <__mulsi3>
    f3cc:	d9800217 	ldw	r6,8(sp)
    f3d0:	e006d43a 	srli	r3,fp,16
    f3d4:	1185883a 	add	r2,r2,r6
    f3d8:	1885883a 	add	r2,r3,r2
    f3dc:	1180022e 	bgeu	r2,r6,f3e8 <__umoddi3+0x454>
    f3e0:	00c00074 	movhi	r3,1
    f3e4:	b8ef883a 	add	r23,r23,r3
    f3e8:	1006d43a 	srli	r3,r2,16
    f3ec:	1004943a 	slli	r2,r2,16
    f3f0:	e73fffcc 	andi	fp,fp,65535
    f3f4:	1dc7883a 	add	r3,r3,r23
    f3f8:	1739883a 	add	fp,r2,fp
    f3fc:	88c03a36 	bltu	r17,r3,f4e8 <__umoddi3+0x554>
    f400:	88c05126 	beq	r17,r3,f548 <__umoddi3+0x5b4>
    f404:	88c9c83a 	sub	r4,r17,r3
    f408:	e00f883a 	mov	r7,fp
    f40c:	81cfc83a 	sub	r7,r16,r7
    f410:	81c7803a 	cmpltu	r3,r16,r7
    f414:	20c7c83a 	sub	r3,r4,r3
    f418:	1cc4983a 	sll	r2,r3,r19
    f41c:	3d0ed83a 	srl	r7,r7,r20
    f420:	1d06d83a 	srl	r3,r3,r20
    f424:	11c4b03a 	or	r2,r2,r7
    f428:	003f7c06 	br	f21c <__alt_mem_Onchip_SRAM+0xf800f21c>
    f42c:	9ca6983a 	sll	r19,r19,r18
    f430:	88f8d83a 	srl	fp,r17,r3
    f434:	80c4d83a 	srl	r2,r16,r3
    f438:	982cd43a 	srli	r22,r19,16
    f43c:	8ca2983a 	sll	r17,r17,r18
    f440:	e009883a 	mov	r4,fp
    f444:	b00b883a 	mov	r5,r22
    f448:	146ab03a 	or	r21,r2,r17
    f44c:	00015100 	call	1510 <__umodsi3>
    f450:	b00b883a 	mov	r5,r22
    f454:	e009883a 	mov	r4,fp
    f458:	1029883a 	mov	r20,r2
    f45c:	9dffffcc 	andi	r23,r19,65535
    f460:	00014ac0 	call	14ac <__udivsi3>
    f464:	b809883a 	mov	r4,r23
    f468:	100b883a 	mov	r5,r2
    f46c:	00015680 	call	1568 <__mulsi3>
    f470:	a008943a 	slli	r4,r20,16
    f474:	a806d43a 	srli	r3,r21,16
    f478:	84a8983a 	sll	r20,r16,r18
    f47c:	1906b03a 	or	r3,r3,r4
    f480:	1880042e 	bgeu	r3,r2,f494 <__umoddi3+0x500>
    f484:	1cc7883a 	add	r3,r3,r19
    f488:	1cc00236 	bltu	r3,r19,f494 <__umoddi3+0x500>
    f48c:	1880012e 	bgeu	r3,r2,f494 <__umoddi3+0x500>
    f490:	1cc7883a 	add	r3,r3,r19
    f494:	18a3c83a 	sub	r17,r3,r2
    f498:	b00b883a 	mov	r5,r22
    f49c:	8809883a 	mov	r4,r17
    f4a0:	00015100 	call	1510 <__umodsi3>
    f4a4:	b00b883a 	mov	r5,r22
    f4a8:	8809883a 	mov	r4,r17
    f4ac:	1021883a 	mov	r16,r2
    f4b0:	00014ac0 	call	14ac <__udivsi3>
    f4b4:	100b883a 	mov	r5,r2
    f4b8:	b809883a 	mov	r4,r23
    f4bc:	8020943a 	slli	r16,r16,16
    f4c0:	00015680 	call	1568 <__mulsi3>
    f4c4:	a8ffffcc 	andi	r3,r21,65535
    f4c8:	1c06b03a 	or	r3,r3,r16
    f4cc:	1880042e 	bgeu	r3,r2,f4e0 <__umoddi3+0x54c>
    f4d0:	1cc7883a 	add	r3,r3,r19
    f4d4:	1cc00236 	bltu	r3,r19,f4e0 <__umoddi3+0x54c>
    f4d8:	1880012e 	bgeu	r3,r2,f4e0 <__umoddi3+0x54c>
    f4dc:	1cc7883a 	add	r3,r3,r19
    f4e0:	18a3c83a 	sub	r17,r3,r2
    f4e4:	003f2906 	br	f18c <__alt_mem_Onchip_SRAM+0xf800f18c>
    f4e8:	e48fc83a 	sub	r7,fp,r18
    f4ec:	1d49c83a 	sub	r4,r3,r21
    f4f0:	e1f9803a 	cmpltu	fp,fp,r7
    f4f4:	2739c83a 	sub	fp,r4,fp
    f4f8:	8f09c83a 	sub	r4,r17,fp
    f4fc:	003fc306 	br	f40c <__alt_mem_Onchip_SRAM+0xf800f40c>
    f500:	01000604 	movi	r4,24
    f504:	003ef906 	br	f0ec <__alt_mem_Onchip_SRAM+0xf800f0ec>
    f508:	00800604 	movi	r2,24
    f50c:	003f1306 	br	f15c <__alt_mem_Onchip_SRAM+0xf800f15c>
    f510:	01000604 	movi	r4,24
    f514:	003eb606 	br	eff0 <__alt_mem_Onchip_SRAM+0xf800eff0>
    f518:	40bf902e 	bgeu	r8,r2,f35c <__alt_mem_Onchip_SRAM+0xf800f35c>
    f51c:	b5bfff84 	addi	r22,r22,-2
    f520:	4551883a 	add	r8,r8,r21
    f524:	003f8e06 	br	f360 <__alt_mem_Onchip_SRAM+0xf800f360>
    f528:	18bf762e 	bgeu	r3,r2,f304 <__alt_mem_Onchip_SRAM+0xf800f304>
    f52c:	8c7fff84 	addi	r17,r17,-2
    f530:	1d47883a 	add	r3,r3,r21
    f534:	003f7406 	br	f308 <__alt_mem_Onchip_SRAM+0xf800f308>
    f538:	1cc7883a 	add	r3,r3,r19
    f53c:	003ecd06 	br	f074 <__alt_mem_Onchip_SRAM+0xf800f074>
    f540:	8005883a 	mov	r2,r16
    f544:	003ef806 	br	f128 <__alt_mem_Onchip_SRAM+0xf800f128>
    f548:	873fe736 	bltu	r16,fp,f4e8 <__alt_mem_Onchip_SRAM+0xf800f4e8>
    f54c:	e00f883a 	mov	r7,fp
    f550:	0009883a 	mov	r4,zero
    f554:	003fad06 	br	f40c <__alt_mem_Onchip_SRAM+0xf800f40c>

0000f558 <__adddf3>:
    f558:	02c00434 	movhi	r11,16
    f55c:	5affffc4 	addi	r11,r11,-1
    f560:	2806d7fa 	srli	r3,r5,31
    f564:	2ad4703a 	and	r10,r5,r11
    f568:	3ad2703a 	and	r9,r7,r11
    f56c:	3804d53a 	srli	r2,r7,20
    f570:	3018d77a 	srli	r12,r6,29
    f574:	280ad53a 	srli	r5,r5,20
    f578:	501490fa 	slli	r10,r10,3
    f57c:	2010d77a 	srli	r8,r4,29
    f580:	481290fa 	slli	r9,r9,3
    f584:	380ed7fa 	srli	r7,r7,31
    f588:	defffb04 	addi	sp,sp,-20
    f58c:	dc800215 	stw	r18,8(sp)
    f590:	dc400115 	stw	r17,4(sp)
    f594:	dc000015 	stw	r16,0(sp)
    f598:	dfc00415 	stw	ra,16(sp)
    f59c:	dcc00315 	stw	r19,12(sp)
    f5a0:	1c803fcc 	andi	r18,r3,255
    f5a4:	2c01ffcc 	andi	r16,r5,2047
    f5a8:	5210b03a 	or	r8,r10,r8
    f5ac:	202290fa 	slli	r17,r4,3
    f5b0:	1081ffcc 	andi	r2,r2,2047
    f5b4:	4b12b03a 	or	r9,r9,r12
    f5b8:	300c90fa 	slli	r6,r6,3
    f5bc:	91c07526 	beq	r18,r7,f794 <__adddf3+0x23c>
    f5c0:	8087c83a 	sub	r3,r16,r2
    f5c4:	00c0ab0e 	bge	zero,r3,f874 <__adddf3+0x31c>
    f5c8:	10002a1e 	bne	r2,zero,f674 <__adddf3+0x11c>
    f5cc:	4984b03a 	or	r2,r9,r6
    f5d0:	1000961e 	bne	r2,zero,f82c <__adddf3+0x2d4>
    f5d4:	888001cc 	andi	r2,r17,7
    f5d8:	10000726 	beq	r2,zero,f5f8 <__adddf3+0xa0>
    f5dc:	888003cc 	andi	r2,r17,15
    f5e0:	00c00104 	movi	r3,4
    f5e4:	10c00426 	beq	r2,r3,f5f8 <__adddf3+0xa0>
    f5e8:	88c7883a 	add	r3,r17,r3
    f5ec:	1c63803a 	cmpltu	r17,r3,r17
    f5f0:	4451883a 	add	r8,r8,r17
    f5f4:	1823883a 	mov	r17,r3
    f5f8:	4080202c 	andhi	r2,r8,128
    f5fc:	10005926 	beq	r2,zero,f764 <__adddf3+0x20c>
    f600:	84000044 	addi	r16,r16,1
    f604:	0081ffc4 	movi	r2,2047
    f608:	8080ba26 	beq	r16,r2,f8f4 <__adddf3+0x39c>
    f60c:	00bfe034 	movhi	r2,65408
    f610:	10bfffc4 	addi	r2,r2,-1
    f614:	4090703a 	and	r8,r8,r2
    f618:	4004977a 	slli	r2,r8,29
    f61c:	4010927a 	slli	r8,r8,9
    f620:	8822d0fa 	srli	r17,r17,3
    f624:	8401ffcc 	andi	r16,r16,2047
    f628:	4010d33a 	srli	r8,r8,12
    f62c:	9007883a 	mov	r3,r18
    f630:	1444b03a 	or	r2,r2,r17
    f634:	8401ffcc 	andi	r16,r16,2047
    f638:	8020953a 	slli	r16,r16,20
    f63c:	18c03fcc 	andi	r3,r3,255
    f640:	01000434 	movhi	r4,16
    f644:	213fffc4 	addi	r4,r4,-1
    f648:	180697fa 	slli	r3,r3,31
    f64c:	4110703a 	and	r8,r8,r4
    f650:	4410b03a 	or	r8,r8,r16
    f654:	40c6b03a 	or	r3,r8,r3
    f658:	dfc00417 	ldw	ra,16(sp)
    f65c:	dcc00317 	ldw	r19,12(sp)
    f660:	dc800217 	ldw	r18,8(sp)
    f664:	dc400117 	ldw	r17,4(sp)
    f668:	dc000017 	ldw	r16,0(sp)
    f66c:	dec00504 	addi	sp,sp,20
    f670:	f800283a 	ret
    f674:	0081ffc4 	movi	r2,2047
    f678:	80bfd626 	beq	r16,r2,f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    f67c:	4a402034 	orhi	r9,r9,128
    f680:	00800e04 	movi	r2,56
    f684:	10c09f16 	blt	r2,r3,f904 <__adddf3+0x3ac>
    f688:	008007c4 	movi	r2,31
    f68c:	10c0c216 	blt	r2,r3,f998 <__adddf3+0x440>
    f690:	00800804 	movi	r2,32
    f694:	10c5c83a 	sub	r2,r2,r3
    f698:	488a983a 	sll	r5,r9,r2
    f69c:	30c8d83a 	srl	r4,r6,r3
    f6a0:	3084983a 	sll	r2,r6,r2
    f6a4:	48c6d83a 	srl	r3,r9,r3
    f6a8:	290cb03a 	or	r6,r5,r4
    f6ac:	1004c03a 	cmpne	r2,r2,zero
    f6b0:	308cb03a 	or	r6,r6,r2
    f6b4:	898dc83a 	sub	r6,r17,r6
    f6b8:	89a3803a 	cmpltu	r17,r17,r6
    f6bc:	40d1c83a 	sub	r8,r8,r3
    f6c0:	4451c83a 	sub	r8,r8,r17
    f6c4:	3023883a 	mov	r17,r6
    f6c8:	4080202c 	andhi	r2,r8,128
    f6cc:	10002326 	beq	r2,zero,f75c <__adddf3+0x204>
    f6d0:	04c02034 	movhi	r19,128
    f6d4:	9cffffc4 	addi	r19,r19,-1
    f6d8:	44e6703a 	and	r19,r8,r19
    f6dc:	98007626 	beq	r19,zero,f8b8 <__adddf3+0x360>
    f6e0:	9809883a 	mov	r4,r19
    f6e4:	0011d980 	call	11d98 <__clzsi2>
    f6e8:	10fffe04 	addi	r3,r2,-8
    f6ec:	010007c4 	movi	r4,31
    f6f0:	20c07716 	blt	r4,r3,f8d0 <__adddf3+0x378>
    f6f4:	00800804 	movi	r2,32
    f6f8:	10c5c83a 	sub	r2,r2,r3
    f6fc:	8884d83a 	srl	r2,r17,r2
    f700:	98d0983a 	sll	r8,r19,r3
    f704:	88e2983a 	sll	r17,r17,r3
    f708:	1204b03a 	or	r2,r2,r8
    f70c:	1c007416 	blt	r3,r16,f8e0 <__adddf3+0x388>
    f710:	1c21c83a 	sub	r16,r3,r16
    f714:	82000044 	addi	r8,r16,1
    f718:	00c007c4 	movi	r3,31
    f71c:	1a009116 	blt	r3,r8,f964 <__adddf3+0x40c>
    f720:	00c00804 	movi	r3,32
    f724:	1a07c83a 	sub	r3,r3,r8
    f728:	8a08d83a 	srl	r4,r17,r8
    f72c:	88e2983a 	sll	r17,r17,r3
    f730:	10c6983a 	sll	r3,r2,r3
    f734:	1210d83a 	srl	r8,r2,r8
    f738:	8804c03a 	cmpne	r2,r17,zero
    f73c:	1906b03a 	or	r3,r3,r4
    f740:	18a2b03a 	or	r17,r3,r2
    f744:	0021883a 	mov	r16,zero
    f748:	003fa206 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    f74c:	1890b03a 	or	r8,r3,r2
    f750:	40017d26 	beq	r8,zero,fd48 <__adddf3+0x7f0>
    f754:	1011883a 	mov	r8,r2
    f758:	1823883a 	mov	r17,r3
    f75c:	888001cc 	andi	r2,r17,7
    f760:	103f9e1e 	bne	r2,zero,f5dc <__alt_mem_Onchip_SRAM+0xf800f5dc>
    f764:	4004977a 	slli	r2,r8,29
    f768:	8822d0fa 	srli	r17,r17,3
    f76c:	4010d0fa 	srli	r8,r8,3
    f770:	9007883a 	mov	r3,r18
    f774:	1444b03a 	or	r2,r2,r17
    f778:	0101ffc4 	movi	r4,2047
    f77c:	81002426 	beq	r16,r4,f810 <__adddf3+0x2b8>
    f780:	8120703a 	and	r16,r16,r4
    f784:	01000434 	movhi	r4,16
    f788:	213fffc4 	addi	r4,r4,-1
    f78c:	4110703a 	and	r8,r8,r4
    f790:	003fa806 	br	f634 <__alt_mem_Onchip_SRAM+0xf800f634>
    f794:	8089c83a 	sub	r4,r16,r2
    f798:	01005e0e 	bge	zero,r4,f914 <__adddf3+0x3bc>
    f79c:	10002b26 	beq	r2,zero,f84c <__adddf3+0x2f4>
    f7a0:	0081ffc4 	movi	r2,2047
    f7a4:	80bf8b26 	beq	r16,r2,f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    f7a8:	4a402034 	orhi	r9,r9,128
    f7ac:	00800e04 	movi	r2,56
    f7b0:	1100a40e 	bge	r2,r4,fa44 <__adddf3+0x4ec>
    f7b4:	498cb03a 	or	r6,r9,r6
    f7b8:	300ac03a 	cmpne	r5,r6,zero
    f7bc:	0013883a 	mov	r9,zero
    f7c0:	2c4b883a 	add	r5,r5,r17
    f7c4:	2c63803a 	cmpltu	r17,r5,r17
    f7c8:	4a11883a 	add	r8,r9,r8
    f7cc:	8a11883a 	add	r8,r17,r8
    f7d0:	2823883a 	mov	r17,r5
    f7d4:	4080202c 	andhi	r2,r8,128
    f7d8:	103fe026 	beq	r2,zero,f75c <__alt_mem_Onchip_SRAM+0xf800f75c>
    f7dc:	84000044 	addi	r16,r16,1
    f7e0:	0081ffc4 	movi	r2,2047
    f7e4:	8080d226 	beq	r16,r2,fb30 <__adddf3+0x5d8>
    f7e8:	00bfe034 	movhi	r2,65408
    f7ec:	10bfffc4 	addi	r2,r2,-1
    f7f0:	4090703a 	and	r8,r8,r2
    f7f4:	880ad07a 	srli	r5,r17,1
    f7f8:	400897fa 	slli	r4,r8,31
    f7fc:	88c0004c 	andi	r3,r17,1
    f800:	28e2b03a 	or	r17,r5,r3
    f804:	4010d07a 	srli	r8,r8,1
    f808:	2462b03a 	or	r17,r4,r17
    f80c:	003f7106 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    f810:	4088b03a 	or	r4,r8,r2
    f814:	20014526 	beq	r4,zero,fd2c <__adddf3+0x7d4>
    f818:	01000434 	movhi	r4,16
    f81c:	42000234 	orhi	r8,r8,8
    f820:	213fffc4 	addi	r4,r4,-1
    f824:	4110703a 	and	r8,r8,r4
    f828:	003f8206 	br	f634 <__alt_mem_Onchip_SRAM+0xf800f634>
    f82c:	18ffffc4 	addi	r3,r3,-1
    f830:	1800491e 	bne	r3,zero,f958 <__adddf3+0x400>
    f834:	898bc83a 	sub	r5,r17,r6
    f838:	8963803a 	cmpltu	r17,r17,r5
    f83c:	4251c83a 	sub	r8,r8,r9
    f840:	4451c83a 	sub	r8,r8,r17
    f844:	2823883a 	mov	r17,r5
    f848:	003f9f06 	br	f6c8 <__alt_mem_Onchip_SRAM+0xf800f6c8>
    f84c:	4984b03a 	or	r2,r9,r6
    f850:	103f6026 	beq	r2,zero,f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    f854:	213fffc4 	addi	r4,r4,-1
    f858:	2000931e 	bne	r4,zero,faa8 <__adddf3+0x550>
    f85c:	898d883a 	add	r6,r17,r6
    f860:	3463803a 	cmpltu	r17,r6,r17
    f864:	4251883a 	add	r8,r8,r9
    f868:	8a11883a 	add	r8,r17,r8
    f86c:	3023883a 	mov	r17,r6
    f870:	003fd806 	br	f7d4 <__alt_mem_Onchip_SRAM+0xf800f7d4>
    f874:	1800541e 	bne	r3,zero,f9c8 <__adddf3+0x470>
    f878:	80800044 	addi	r2,r16,1
    f87c:	1081ffcc 	andi	r2,r2,2047
    f880:	00c00044 	movi	r3,1
    f884:	1880a00e 	bge	r3,r2,fb08 <__adddf3+0x5b0>
    f888:	8989c83a 	sub	r4,r17,r6
    f88c:	8905803a 	cmpltu	r2,r17,r4
    f890:	4267c83a 	sub	r19,r8,r9
    f894:	98a7c83a 	sub	r19,r19,r2
    f898:	9880202c 	andhi	r2,r19,128
    f89c:	10006326 	beq	r2,zero,fa2c <__adddf3+0x4d4>
    f8a0:	3463c83a 	sub	r17,r6,r17
    f8a4:	4a07c83a 	sub	r3,r9,r8
    f8a8:	344d803a 	cmpltu	r6,r6,r17
    f8ac:	19a7c83a 	sub	r19,r3,r6
    f8b0:	3825883a 	mov	r18,r7
    f8b4:	983f8a1e 	bne	r19,zero,f6e0 <__alt_mem_Onchip_SRAM+0xf800f6e0>
    f8b8:	8809883a 	mov	r4,r17
    f8bc:	0011d980 	call	11d98 <__clzsi2>
    f8c0:	10800804 	addi	r2,r2,32
    f8c4:	10fffe04 	addi	r3,r2,-8
    f8c8:	010007c4 	movi	r4,31
    f8cc:	20ff890e 	bge	r4,r3,f6f4 <__alt_mem_Onchip_SRAM+0xf800f6f4>
    f8d0:	10bff604 	addi	r2,r2,-40
    f8d4:	8884983a 	sll	r2,r17,r2
    f8d8:	0023883a 	mov	r17,zero
    f8dc:	1c3f8c0e 	bge	r3,r16,f710 <__alt_mem_Onchip_SRAM+0xf800f710>
    f8e0:	023fe034 	movhi	r8,65408
    f8e4:	423fffc4 	addi	r8,r8,-1
    f8e8:	80e1c83a 	sub	r16,r16,r3
    f8ec:	1210703a 	and	r8,r2,r8
    f8f0:	003f3806 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    f8f4:	9007883a 	mov	r3,r18
    f8f8:	0011883a 	mov	r8,zero
    f8fc:	0005883a 	mov	r2,zero
    f900:	003f4c06 	br	f634 <__alt_mem_Onchip_SRAM+0xf800f634>
    f904:	498cb03a 	or	r6,r9,r6
    f908:	300cc03a 	cmpne	r6,r6,zero
    f90c:	0007883a 	mov	r3,zero
    f910:	003f6806 	br	f6b4 <__alt_mem_Onchip_SRAM+0xf800f6b4>
    f914:	20009c1e 	bne	r4,zero,fb88 <__adddf3+0x630>
    f918:	80800044 	addi	r2,r16,1
    f91c:	1141ffcc 	andi	r5,r2,2047
    f920:	01000044 	movi	r4,1
    f924:	2140670e 	bge	r4,r5,fac4 <__adddf3+0x56c>
    f928:	0101ffc4 	movi	r4,2047
    f92c:	11007f26 	beq	r2,r4,fb2c <__adddf3+0x5d4>
    f930:	898d883a 	add	r6,r17,r6
    f934:	4247883a 	add	r3,r8,r9
    f938:	3451803a 	cmpltu	r8,r6,r17
    f93c:	40d1883a 	add	r8,r8,r3
    f940:	402297fa 	slli	r17,r8,31
    f944:	300cd07a 	srli	r6,r6,1
    f948:	4010d07a 	srli	r8,r8,1
    f94c:	1021883a 	mov	r16,r2
    f950:	89a2b03a 	or	r17,r17,r6
    f954:	003f1f06 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    f958:	0081ffc4 	movi	r2,2047
    f95c:	80bf481e 	bne	r16,r2,f680 <__alt_mem_Onchip_SRAM+0xf800f680>
    f960:	003f1c06 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    f964:	843ff844 	addi	r16,r16,-31
    f968:	01000804 	movi	r4,32
    f96c:	1406d83a 	srl	r3,r2,r16
    f970:	41005026 	beq	r8,r4,fab4 <__adddf3+0x55c>
    f974:	01001004 	movi	r4,64
    f978:	2211c83a 	sub	r8,r4,r8
    f97c:	1204983a 	sll	r2,r2,r8
    f980:	88a2b03a 	or	r17,r17,r2
    f984:	8822c03a 	cmpne	r17,r17,zero
    f988:	1c62b03a 	or	r17,r3,r17
    f98c:	0011883a 	mov	r8,zero
    f990:	0021883a 	mov	r16,zero
    f994:	003f7106 	br	f75c <__alt_mem_Onchip_SRAM+0xf800f75c>
    f998:	193ff804 	addi	r4,r3,-32
    f99c:	00800804 	movi	r2,32
    f9a0:	4908d83a 	srl	r4,r9,r4
    f9a4:	18804526 	beq	r3,r2,fabc <__adddf3+0x564>
    f9a8:	00801004 	movi	r2,64
    f9ac:	10c5c83a 	sub	r2,r2,r3
    f9b0:	4886983a 	sll	r3,r9,r2
    f9b4:	198cb03a 	or	r6,r3,r6
    f9b8:	300cc03a 	cmpne	r6,r6,zero
    f9bc:	218cb03a 	or	r6,r4,r6
    f9c0:	0007883a 	mov	r3,zero
    f9c4:	003f3b06 	br	f6b4 <__alt_mem_Onchip_SRAM+0xf800f6b4>
    f9c8:	80002a26 	beq	r16,zero,fa74 <__adddf3+0x51c>
    f9cc:	0101ffc4 	movi	r4,2047
    f9d0:	11006826 	beq	r2,r4,fb74 <__adddf3+0x61c>
    f9d4:	00c7c83a 	sub	r3,zero,r3
    f9d8:	42002034 	orhi	r8,r8,128
    f9dc:	01000e04 	movi	r4,56
    f9e0:	20c07c16 	blt	r4,r3,fbd4 <__adddf3+0x67c>
    f9e4:	010007c4 	movi	r4,31
    f9e8:	20c0da16 	blt	r4,r3,fd54 <__adddf3+0x7fc>
    f9ec:	01000804 	movi	r4,32
    f9f0:	20c9c83a 	sub	r4,r4,r3
    f9f4:	4114983a 	sll	r10,r8,r4
    f9f8:	88cad83a 	srl	r5,r17,r3
    f9fc:	8908983a 	sll	r4,r17,r4
    fa00:	40c6d83a 	srl	r3,r8,r3
    fa04:	5162b03a 	or	r17,r10,r5
    fa08:	2008c03a 	cmpne	r4,r4,zero
    fa0c:	8922b03a 	or	r17,r17,r4
    fa10:	3463c83a 	sub	r17,r6,r17
    fa14:	48c7c83a 	sub	r3,r9,r3
    fa18:	344d803a 	cmpltu	r6,r6,r17
    fa1c:	1991c83a 	sub	r8,r3,r6
    fa20:	1021883a 	mov	r16,r2
    fa24:	3825883a 	mov	r18,r7
    fa28:	003f2706 	br	f6c8 <__alt_mem_Onchip_SRAM+0xf800f6c8>
    fa2c:	24d0b03a 	or	r8,r4,r19
    fa30:	40001b1e 	bne	r8,zero,faa0 <__adddf3+0x548>
    fa34:	0005883a 	mov	r2,zero
    fa38:	0007883a 	mov	r3,zero
    fa3c:	0021883a 	mov	r16,zero
    fa40:	003f4d06 	br	f778 <__alt_mem_Onchip_SRAM+0xf800f778>
    fa44:	008007c4 	movi	r2,31
    fa48:	11003c16 	blt	r2,r4,fb3c <__adddf3+0x5e4>
    fa4c:	00800804 	movi	r2,32
    fa50:	1105c83a 	sub	r2,r2,r4
    fa54:	488e983a 	sll	r7,r9,r2
    fa58:	310ad83a 	srl	r5,r6,r4
    fa5c:	3084983a 	sll	r2,r6,r2
    fa60:	4912d83a 	srl	r9,r9,r4
    fa64:	394ab03a 	or	r5,r7,r5
    fa68:	1004c03a 	cmpne	r2,r2,zero
    fa6c:	288ab03a 	or	r5,r5,r2
    fa70:	003f5306 	br	f7c0 <__alt_mem_Onchip_SRAM+0xf800f7c0>
    fa74:	4448b03a 	or	r4,r8,r17
    fa78:	20003e26 	beq	r4,zero,fb74 <__adddf3+0x61c>
    fa7c:	00c6303a 	nor	r3,zero,r3
    fa80:	18003a1e 	bne	r3,zero,fb6c <__adddf3+0x614>
    fa84:	3463c83a 	sub	r17,r6,r17
    fa88:	4a07c83a 	sub	r3,r9,r8
    fa8c:	344d803a 	cmpltu	r6,r6,r17
    fa90:	1991c83a 	sub	r8,r3,r6
    fa94:	1021883a 	mov	r16,r2
    fa98:	3825883a 	mov	r18,r7
    fa9c:	003f0a06 	br	f6c8 <__alt_mem_Onchip_SRAM+0xf800f6c8>
    faa0:	2023883a 	mov	r17,r4
    faa4:	003f0d06 	br	f6dc <__alt_mem_Onchip_SRAM+0xf800f6dc>
    faa8:	0081ffc4 	movi	r2,2047
    faac:	80bf3f1e 	bne	r16,r2,f7ac <__alt_mem_Onchip_SRAM+0xf800f7ac>
    fab0:	003ec806 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fab4:	0005883a 	mov	r2,zero
    fab8:	003fb106 	br	f980 <__alt_mem_Onchip_SRAM+0xf800f980>
    fabc:	0007883a 	mov	r3,zero
    fac0:	003fbc06 	br	f9b4 <__alt_mem_Onchip_SRAM+0xf800f9b4>
    fac4:	4444b03a 	or	r2,r8,r17
    fac8:	8000871e 	bne	r16,zero,fce8 <__adddf3+0x790>
    facc:	1000ba26 	beq	r2,zero,fdb8 <__adddf3+0x860>
    fad0:	4984b03a 	or	r2,r9,r6
    fad4:	103ebf26 	beq	r2,zero,f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fad8:	8985883a 	add	r2,r17,r6
    fadc:	4247883a 	add	r3,r8,r9
    fae0:	1451803a 	cmpltu	r8,r2,r17
    fae4:	40d1883a 	add	r8,r8,r3
    fae8:	40c0202c 	andhi	r3,r8,128
    faec:	1023883a 	mov	r17,r2
    faf0:	183f1a26 	beq	r3,zero,f75c <__alt_mem_Onchip_SRAM+0xf800f75c>
    faf4:	00bfe034 	movhi	r2,65408
    faf8:	10bfffc4 	addi	r2,r2,-1
    fafc:	2021883a 	mov	r16,r4
    fb00:	4090703a 	and	r8,r8,r2
    fb04:	003eb306 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fb08:	4444b03a 	or	r2,r8,r17
    fb0c:	8000291e 	bne	r16,zero,fbb4 <__adddf3+0x65c>
    fb10:	10004b1e 	bne	r2,zero,fc40 <__adddf3+0x6e8>
    fb14:	4990b03a 	or	r8,r9,r6
    fb18:	40008b26 	beq	r8,zero,fd48 <__adddf3+0x7f0>
    fb1c:	4811883a 	mov	r8,r9
    fb20:	3023883a 	mov	r17,r6
    fb24:	3825883a 	mov	r18,r7
    fb28:	003eaa06 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fb2c:	1021883a 	mov	r16,r2
    fb30:	0011883a 	mov	r8,zero
    fb34:	0005883a 	mov	r2,zero
    fb38:	003f0f06 	br	f778 <__alt_mem_Onchip_SRAM+0xf800f778>
    fb3c:	217ff804 	addi	r5,r4,-32
    fb40:	00800804 	movi	r2,32
    fb44:	494ad83a 	srl	r5,r9,r5
    fb48:	20807d26 	beq	r4,r2,fd40 <__adddf3+0x7e8>
    fb4c:	00801004 	movi	r2,64
    fb50:	1109c83a 	sub	r4,r2,r4
    fb54:	4912983a 	sll	r9,r9,r4
    fb58:	498cb03a 	or	r6,r9,r6
    fb5c:	300cc03a 	cmpne	r6,r6,zero
    fb60:	298ab03a 	or	r5,r5,r6
    fb64:	0013883a 	mov	r9,zero
    fb68:	003f1506 	br	f7c0 <__alt_mem_Onchip_SRAM+0xf800f7c0>
    fb6c:	0101ffc4 	movi	r4,2047
    fb70:	113f9a1e 	bne	r2,r4,f9dc <__alt_mem_Onchip_SRAM+0xf800f9dc>
    fb74:	4811883a 	mov	r8,r9
    fb78:	3023883a 	mov	r17,r6
    fb7c:	1021883a 	mov	r16,r2
    fb80:	3825883a 	mov	r18,r7
    fb84:	003e9306 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fb88:	8000161e 	bne	r16,zero,fbe4 <__adddf3+0x68c>
    fb8c:	444ab03a 	or	r5,r8,r17
    fb90:	28005126 	beq	r5,zero,fcd8 <__adddf3+0x780>
    fb94:	0108303a 	nor	r4,zero,r4
    fb98:	20004d1e 	bne	r4,zero,fcd0 <__adddf3+0x778>
    fb9c:	89a3883a 	add	r17,r17,r6
    fba0:	4253883a 	add	r9,r8,r9
    fba4:	898d803a 	cmpltu	r6,r17,r6
    fba8:	3251883a 	add	r8,r6,r9
    fbac:	1021883a 	mov	r16,r2
    fbb0:	003f0806 	br	f7d4 <__alt_mem_Onchip_SRAM+0xf800f7d4>
    fbb4:	1000301e 	bne	r2,zero,fc78 <__adddf3+0x720>
    fbb8:	4984b03a 	or	r2,r9,r6
    fbbc:	10007126 	beq	r2,zero,fd84 <__adddf3+0x82c>
    fbc0:	4811883a 	mov	r8,r9
    fbc4:	3023883a 	mov	r17,r6
    fbc8:	3825883a 	mov	r18,r7
    fbcc:	0401ffc4 	movi	r16,2047
    fbd0:	003e8006 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fbd4:	4462b03a 	or	r17,r8,r17
    fbd8:	8822c03a 	cmpne	r17,r17,zero
    fbdc:	0007883a 	mov	r3,zero
    fbe0:	003f8b06 	br	fa10 <__alt_mem_Onchip_SRAM+0xf800fa10>
    fbe4:	0141ffc4 	movi	r5,2047
    fbe8:	11403b26 	beq	r2,r5,fcd8 <__adddf3+0x780>
    fbec:	0109c83a 	sub	r4,zero,r4
    fbf0:	42002034 	orhi	r8,r8,128
    fbf4:	01400e04 	movi	r5,56
    fbf8:	29006716 	blt	r5,r4,fd98 <__adddf3+0x840>
    fbfc:	014007c4 	movi	r5,31
    fc00:	29007016 	blt	r5,r4,fdc4 <__adddf3+0x86c>
    fc04:	01400804 	movi	r5,32
    fc08:	290bc83a 	sub	r5,r5,r4
    fc0c:	4154983a 	sll	r10,r8,r5
    fc10:	890ed83a 	srl	r7,r17,r4
    fc14:	894a983a 	sll	r5,r17,r5
    fc18:	4108d83a 	srl	r4,r8,r4
    fc1c:	51e2b03a 	or	r17,r10,r7
    fc20:	280ac03a 	cmpne	r5,r5,zero
    fc24:	8962b03a 	or	r17,r17,r5
    fc28:	89a3883a 	add	r17,r17,r6
    fc2c:	2253883a 	add	r9,r4,r9
    fc30:	898d803a 	cmpltu	r6,r17,r6
    fc34:	3251883a 	add	r8,r6,r9
    fc38:	1021883a 	mov	r16,r2
    fc3c:	003ee506 	br	f7d4 <__alt_mem_Onchip_SRAM+0xf800f7d4>
    fc40:	4984b03a 	or	r2,r9,r6
    fc44:	103e6326 	beq	r2,zero,f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fc48:	8987c83a 	sub	r3,r17,r6
    fc4c:	88c9803a 	cmpltu	r4,r17,r3
    fc50:	4245c83a 	sub	r2,r8,r9
    fc54:	1105c83a 	sub	r2,r2,r4
    fc58:	1100202c 	andhi	r4,r2,128
    fc5c:	203ebb26 	beq	r4,zero,f74c <__alt_mem_Onchip_SRAM+0xf800f74c>
    fc60:	3463c83a 	sub	r17,r6,r17
    fc64:	4a07c83a 	sub	r3,r9,r8
    fc68:	344d803a 	cmpltu	r6,r6,r17
    fc6c:	1991c83a 	sub	r8,r3,r6
    fc70:	3825883a 	mov	r18,r7
    fc74:	003e5706 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fc78:	4984b03a 	or	r2,r9,r6
    fc7c:	10002e26 	beq	r2,zero,fd38 <__adddf3+0x7e0>
    fc80:	4004d0fa 	srli	r2,r8,3
    fc84:	8822d0fa 	srli	r17,r17,3
    fc88:	4010977a 	slli	r8,r8,29
    fc8c:	10c0022c 	andhi	r3,r2,8
    fc90:	4462b03a 	or	r17,r8,r17
    fc94:	18000826 	beq	r3,zero,fcb8 <__adddf3+0x760>
    fc98:	4808d0fa 	srli	r4,r9,3
    fc9c:	20c0022c 	andhi	r3,r4,8
    fca0:	1800051e 	bne	r3,zero,fcb8 <__adddf3+0x760>
    fca4:	300cd0fa 	srli	r6,r6,3
    fca8:	4806977a 	slli	r3,r9,29
    fcac:	2005883a 	mov	r2,r4
    fcb0:	3825883a 	mov	r18,r7
    fcb4:	19a2b03a 	or	r17,r3,r6
    fcb8:	8810d77a 	srli	r8,r17,29
    fcbc:	100490fa 	slli	r2,r2,3
    fcc0:	882290fa 	slli	r17,r17,3
    fcc4:	0401ffc4 	movi	r16,2047
    fcc8:	4090b03a 	or	r8,r8,r2
    fccc:	003e4106 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fcd0:	0141ffc4 	movi	r5,2047
    fcd4:	117fc71e 	bne	r2,r5,fbf4 <__alt_mem_Onchip_SRAM+0xf800fbf4>
    fcd8:	4811883a 	mov	r8,r9
    fcdc:	3023883a 	mov	r17,r6
    fce0:	1021883a 	mov	r16,r2
    fce4:	003e3b06 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fce8:	10002f26 	beq	r2,zero,fda8 <__adddf3+0x850>
    fcec:	4984b03a 	or	r2,r9,r6
    fcf0:	10001126 	beq	r2,zero,fd38 <__adddf3+0x7e0>
    fcf4:	4004d0fa 	srli	r2,r8,3
    fcf8:	8822d0fa 	srli	r17,r17,3
    fcfc:	4010977a 	slli	r8,r8,29
    fd00:	10c0022c 	andhi	r3,r2,8
    fd04:	4462b03a 	or	r17,r8,r17
    fd08:	183feb26 	beq	r3,zero,fcb8 <__alt_mem_Onchip_SRAM+0xf800fcb8>
    fd0c:	4808d0fa 	srli	r4,r9,3
    fd10:	20c0022c 	andhi	r3,r4,8
    fd14:	183fe81e 	bne	r3,zero,fcb8 <__alt_mem_Onchip_SRAM+0xf800fcb8>
    fd18:	300cd0fa 	srli	r6,r6,3
    fd1c:	4806977a 	slli	r3,r9,29
    fd20:	2005883a 	mov	r2,r4
    fd24:	19a2b03a 	or	r17,r3,r6
    fd28:	003fe306 	br	fcb8 <__alt_mem_Onchip_SRAM+0xf800fcb8>
    fd2c:	0011883a 	mov	r8,zero
    fd30:	0005883a 	mov	r2,zero
    fd34:	003e3f06 	br	f634 <__alt_mem_Onchip_SRAM+0xf800f634>
    fd38:	0401ffc4 	movi	r16,2047
    fd3c:	003e2506 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fd40:	0013883a 	mov	r9,zero
    fd44:	003f8406 	br	fb58 <__alt_mem_Onchip_SRAM+0xf800fb58>
    fd48:	0005883a 	mov	r2,zero
    fd4c:	0007883a 	mov	r3,zero
    fd50:	003e8906 	br	f778 <__alt_mem_Onchip_SRAM+0xf800f778>
    fd54:	197ff804 	addi	r5,r3,-32
    fd58:	01000804 	movi	r4,32
    fd5c:	414ad83a 	srl	r5,r8,r5
    fd60:	19002426 	beq	r3,r4,fdf4 <__adddf3+0x89c>
    fd64:	01001004 	movi	r4,64
    fd68:	20c7c83a 	sub	r3,r4,r3
    fd6c:	40c6983a 	sll	r3,r8,r3
    fd70:	1c46b03a 	or	r3,r3,r17
    fd74:	1806c03a 	cmpne	r3,r3,zero
    fd78:	28e2b03a 	or	r17,r5,r3
    fd7c:	0007883a 	mov	r3,zero
    fd80:	003f2306 	br	fa10 <__alt_mem_Onchip_SRAM+0xf800fa10>
    fd84:	0007883a 	mov	r3,zero
    fd88:	5811883a 	mov	r8,r11
    fd8c:	00bfffc4 	movi	r2,-1
    fd90:	0401ffc4 	movi	r16,2047
    fd94:	003e7806 	br	f778 <__alt_mem_Onchip_SRAM+0xf800f778>
    fd98:	4462b03a 	or	r17,r8,r17
    fd9c:	8822c03a 	cmpne	r17,r17,zero
    fda0:	0009883a 	mov	r4,zero
    fda4:	003fa006 	br	fc28 <__alt_mem_Onchip_SRAM+0xf800fc28>
    fda8:	4811883a 	mov	r8,r9
    fdac:	3023883a 	mov	r17,r6
    fdb0:	0401ffc4 	movi	r16,2047
    fdb4:	003e0706 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fdb8:	4811883a 	mov	r8,r9
    fdbc:	3023883a 	mov	r17,r6
    fdc0:	003e0406 	br	f5d4 <__alt_mem_Onchip_SRAM+0xf800f5d4>
    fdc4:	21fff804 	addi	r7,r4,-32
    fdc8:	01400804 	movi	r5,32
    fdcc:	41ced83a 	srl	r7,r8,r7
    fdd0:	21400a26 	beq	r4,r5,fdfc <__adddf3+0x8a4>
    fdd4:	01401004 	movi	r5,64
    fdd8:	2909c83a 	sub	r4,r5,r4
    fddc:	4108983a 	sll	r4,r8,r4
    fde0:	2448b03a 	or	r4,r4,r17
    fde4:	2008c03a 	cmpne	r4,r4,zero
    fde8:	3922b03a 	or	r17,r7,r4
    fdec:	0009883a 	mov	r4,zero
    fdf0:	003f8d06 	br	fc28 <__alt_mem_Onchip_SRAM+0xf800fc28>
    fdf4:	0007883a 	mov	r3,zero
    fdf8:	003fdd06 	br	fd70 <__alt_mem_Onchip_SRAM+0xf800fd70>
    fdfc:	0009883a 	mov	r4,zero
    fe00:	003ff706 	br	fde0 <__alt_mem_Onchip_SRAM+0xf800fde0>

0000fe04 <__divdf3>:
    fe04:	defff004 	addi	sp,sp,-64
    fe08:	dc800815 	stw	r18,32(sp)
    fe0c:	2824d53a 	srli	r18,r5,20
    fe10:	dd800c15 	stw	r22,48(sp)
    fe14:	282cd7fa 	srli	r22,r5,31
    fe18:	dc000615 	stw	r16,24(sp)
    fe1c:	04000434 	movhi	r16,16
    fe20:	843fffc4 	addi	r16,r16,-1
    fe24:	dfc00f15 	stw	ra,60(sp)
    fe28:	df000e15 	stw	fp,56(sp)
    fe2c:	ddc00d15 	stw	r23,52(sp)
    fe30:	dd400b15 	stw	r21,44(sp)
    fe34:	dd000a15 	stw	r20,40(sp)
    fe38:	dcc00915 	stw	r19,36(sp)
    fe3c:	dc400715 	stw	r17,28(sp)
    fe40:	9481ffcc 	andi	r18,r18,2047
    fe44:	2c20703a 	and	r16,r5,r16
    fe48:	b2003fcc 	andi	r8,r22,255
    fe4c:	90006126 	beq	r18,zero,ffd4 <__divdf3+0x1d0>
    fe50:	0081ffc4 	movi	r2,2047
    fe54:	202b883a 	mov	r21,r4
    fe58:	90803726 	beq	r18,r2,ff38 <__divdf3+0x134>
    fe5c:	80800434 	orhi	r2,r16,16
    fe60:	100490fa 	slli	r2,r2,3
    fe64:	2020d77a 	srli	r16,r4,29
    fe68:	202a90fa 	slli	r21,r4,3
    fe6c:	94bf0044 	addi	r18,r18,-1023
    fe70:	80a0b03a 	or	r16,r16,r2
    fe74:	0013883a 	mov	r9,zero
    fe78:	000b883a 	mov	r5,zero
    fe7c:	3806d53a 	srli	r3,r7,20
    fe80:	382ed7fa 	srli	r23,r7,31
    fe84:	04400434 	movhi	r17,16
    fe88:	8c7fffc4 	addi	r17,r17,-1
    fe8c:	18c1ffcc 	andi	r3,r3,2047
    fe90:	3029883a 	mov	r20,r6
    fe94:	3c62703a 	and	r17,r7,r17
    fe98:	bf003fcc 	andi	fp,r23,255
    fe9c:	18006e26 	beq	r3,zero,10058 <__divdf3+0x254>
    fea0:	0081ffc4 	movi	r2,2047
    fea4:	18806626 	beq	r3,r2,10040 <__divdf3+0x23c>
    fea8:	88800434 	orhi	r2,r17,16
    feac:	100490fa 	slli	r2,r2,3
    feb0:	3022d77a 	srli	r17,r6,29
    feb4:	302890fa 	slli	r20,r6,3
    feb8:	18ff0044 	addi	r3,r3,-1023
    febc:	88a2b03a 	or	r17,r17,r2
    fec0:	000f883a 	mov	r7,zero
    fec4:	b5e6f03a 	xor	r19,r22,r23
    fec8:	3a4cb03a 	or	r6,r7,r9
    fecc:	008003c4 	movi	r2,15
    fed0:	9809883a 	mov	r4,r19
    fed4:	90c7c83a 	sub	r3,r18,r3
    fed8:	9cc03fcc 	andi	r19,r19,255
    fedc:	11809636 	bltu	r2,r6,10138 <__divdf3+0x334>
    fee0:	300c90ba 	slli	r6,r6,2
    fee4:	00800074 	movhi	r2,1
    fee8:	10bfbe04 	addi	r2,r2,-264
    feec:	308d883a 	add	r6,r6,r2
    fef0:	30800017 	ldw	r2,0(r6)
    fef4:	1000683a 	jmp	r2
    fef8:	00010138 	rdprs	zero,zero,1028
    fefc:	0000ff70 	cmpltui	zero,zero,1021
    ff00:	00010128 	cmpgeui	zero,zero,1028
    ff04:	0000ff64 	muli	zero,zero,1021
    ff08:	00010128 	cmpgeui	zero,zero,1028
    ff0c:	000100fc 	xorhi	zero,zero,1027
    ff10:	00010128 	cmpgeui	zero,zero,1028
    ff14:	0000ff64 	muli	zero,zero,1021
    ff18:	0000ff70 	cmpltui	zero,zero,1021
    ff1c:	0000ff70 	cmpltui	zero,zero,1021
    ff20:	000100fc 	xorhi	zero,zero,1027
    ff24:	0000ff64 	muli	zero,zero,1021
    ff28:	0000ff54 	movui	zero,1021
    ff2c:	0000ff54 	movui	zero,1021
    ff30:	0000ff54 	movui	zero,1021
    ff34:	000104c0 	call	104c <follow_touch+0xb0>
    ff38:	2404b03a 	or	r2,r4,r16
    ff3c:	10006c1e 	bne	r2,zero,100f0 <__divdf3+0x2ec>
    ff40:	02400204 	movi	r9,8
    ff44:	0021883a 	mov	r16,zero
    ff48:	002b883a 	mov	r21,zero
    ff4c:	01400084 	movi	r5,2
    ff50:	003fca06 	br	fe7c <__alt_mem_Onchip_SRAM+0xf800fe7c>
    ff54:	8023883a 	mov	r17,r16
    ff58:	a829883a 	mov	r20,r21
    ff5c:	4039883a 	mov	fp,r8
    ff60:	280f883a 	mov	r7,r5
    ff64:	00800084 	movi	r2,2
    ff68:	3881601e 	bne	r7,r2,104ec <__divdf3+0x6e8>
    ff6c:	e027883a 	mov	r19,fp
    ff70:	9900004c 	andi	r4,r19,1
    ff74:	0081ffc4 	movi	r2,2047
    ff78:	0021883a 	mov	r16,zero
    ff7c:	002b883a 	mov	r21,zero
    ff80:	1004953a 	slli	r2,r2,20
    ff84:	20c03fcc 	andi	r3,r4,255
    ff88:	01400434 	movhi	r5,16
    ff8c:	297fffc4 	addi	r5,r5,-1
    ff90:	180697fa 	slli	r3,r3,31
    ff94:	8160703a 	and	r16,r16,r5
    ff98:	80a0b03a 	or	r16,r16,r2
    ff9c:	80c6b03a 	or	r3,r16,r3
    ffa0:	a805883a 	mov	r2,r21
    ffa4:	dfc00f17 	ldw	ra,60(sp)
    ffa8:	df000e17 	ldw	fp,56(sp)
    ffac:	ddc00d17 	ldw	r23,52(sp)
    ffb0:	dd800c17 	ldw	r22,48(sp)
    ffb4:	dd400b17 	ldw	r21,44(sp)
    ffb8:	dd000a17 	ldw	r20,40(sp)
    ffbc:	dcc00917 	ldw	r19,36(sp)
    ffc0:	dc800817 	ldw	r18,32(sp)
    ffc4:	dc400717 	ldw	r17,28(sp)
    ffc8:	dc000617 	ldw	r16,24(sp)
    ffcc:	dec01004 	addi	sp,sp,64
    ffd0:	f800283a 	ret
    ffd4:	2404b03a 	or	r2,r4,r16
    ffd8:	2023883a 	mov	r17,r4
    ffdc:	10003f26 	beq	r2,zero,100dc <__divdf3+0x2d8>
    ffe0:	80015e26 	beq	r16,zero,1055c <__divdf3+0x758>
    ffe4:	8009883a 	mov	r4,r16
    ffe8:	d9800215 	stw	r6,8(sp)
    ffec:	d9c00515 	stw	r7,20(sp)
    fff0:	da000415 	stw	r8,16(sp)
    fff4:	0011d980 	call	11d98 <__clzsi2>
    fff8:	d9800217 	ldw	r6,8(sp)
    fffc:	d9c00517 	ldw	r7,20(sp)
   10000:	da000417 	ldw	r8,16(sp)
   10004:	113ffd44 	addi	r4,r2,-11
   10008:	00c00704 	movi	r3,28
   1000c:	19014f16 	blt	r3,r4,1054c <__divdf3+0x748>
   10010:	00c00744 	movi	r3,29
   10014:	157ffe04 	addi	r21,r2,-8
   10018:	1907c83a 	sub	r3,r3,r4
   1001c:	8560983a 	sll	r16,r16,r21
   10020:	88c6d83a 	srl	r3,r17,r3
   10024:	8d6a983a 	sll	r21,r17,r21
   10028:	1c20b03a 	or	r16,r3,r16
   1002c:	1080fcc4 	addi	r2,r2,1011
   10030:	00a5c83a 	sub	r18,zero,r2
   10034:	0013883a 	mov	r9,zero
   10038:	000b883a 	mov	r5,zero
   1003c:	003f8f06 	br	fe7c <__alt_mem_Onchip_SRAM+0xf800fe7c>
   10040:	3444b03a 	or	r2,r6,r17
   10044:	1000231e 	bne	r2,zero,100d4 <__divdf3+0x2d0>
   10048:	0023883a 	mov	r17,zero
   1004c:	0029883a 	mov	r20,zero
   10050:	01c00084 	movi	r7,2
   10054:	003f9b06 	br	fec4 <__alt_mem_Onchip_SRAM+0xf800fec4>
   10058:	3444b03a 	or	r2,r6,r17
   1005c:	10001926 	beq	r2,zero,100c4 <__divdf3+0x2c0>
   10060:	88014b26 	beq	r17,zero,10590 <__divdf3+0x78c>
   10064:	8809883a 	mov	r4,r17
   10068:	d9400115 	stw	r5,4(sp)
   1006c:	d9800215 	stw	r6,8(sp)
   10070:	da000415 	stw	r8,16(sp)
   10074:	da400315 	stw	r9,12(sp)
   10078:	0011d980 	call	11d98 <__clzsi2>
   1007c:	d9400117 	ldw	r5,4(sp)
   10080:	d9800217 	ldw	r6,8(sp)
   10084:	da000417 	ldw	r8,16(sp)
   10088:	da400317 	ldw	r9,12(sp)
   1008c:	113ffd44 	addi	r4,r2,-11
   10090:	00c00704 	movi	r3,28
   10094:	19013a16 	blt	r3,r4,10580 <__divdf3+0x77c>
   10098:	00c00744 	movi	r3,29
   1009c:	153ffe04 	addi	r20,r2,-8
   100a0:	1907c83a 	sub	r3,r3,r4
   100a4:	8d22983a 	sll	r17,r17,r20
   100a8:	30c6d83a 	srl	r3,r6,r3
   100ac:	3528983a 	sll	r20,r6,r20
   100b0:	1c62b03a 	or	r17,r3,r17
   100b4:	1080fcc4 	addi	r2,r2,1011
   100b8:	0087c83a 	sub	r3,zero,r2
   100bc:	000f883a 	mov	r7,zero
   100c0:	003f8006 	br	fec4 <__alt_mem_Onchip_SRAM+0xf800fec4>
   100c4:	0023883a 	mov	r17,zero
   100c8:	0029883a 	mov	r20,zero
   100cc:	01c00044 	movi	r7,1
   100d0:	003f7c06 	br	fec4 <__alt_mem_Onchip_SRAM+0xf800fec4>
   100d4:	01c000c4 	movi	r7,3
   100d8:	003f7a06 	br	fec4 <__alt_mem_Onchip_SRAM+0xf800fec4>
   100dc:	02400104 	movi	r9,4
   100e0:	0021883a 	mov	r16,zero
   100e4:	002b883a 	mov	r21,zero
   100e8:	01400044 	movi	r5,1
   100ec:	003f6306 	br	fe7c <__alt_mem_Onchip_SRAM+0xf800fe7c>
   100f0:	02400304 	movi	r9,12
   100f4:	014000c4 	movi	r5,3
   100f8:	003f6006 	br	fe7c <__alt_mem_Onchip_SRAM+0xf800fe7c>
   100fc:	04000434 	movhi	r16,16
   10100:	0009883a 	mov	r4,zero
   10104:	843fffc4 	addi	r16,r16,-1
   10108:	057fffc4 	movi	r21,-1
   1010c:	0081ffc4 	movi	r2,2047
   10110:	003f9b06 	br	ff80 <__alt_mem_Onchip_SRAM+0xf800ff80>
   10114:	00c00044 	movi	r3,1
   10118:	1887c83a 	sub	r3,r3,r2
   1011c:	01000e04 	movi	r4,56
   10120:	20c1530e 	bge	r4,r3,10670 <__divdf3+0x86c>
   10124:	9900004c 	andi	r4,r19,1
   10128:	0005883a 	mov	r2,zero
   1012c:	0021883a 	mov	r16,zero
   10130:	002b883a 	mov	r21,zero
   10134:	003f9206 	br	ff80 <__alt_mem_Onchip_SRAM+0xf800ff80>
   10138:	8c012e36 	bltu	r17,r16,105f4 <__divdf3+0x7f0>
   1013c:	84412c26 	beq	r16,r17,105f0 <__divdf3+0x7ec>
   10140:	a82f883a 	mov	r23,r21
   10144:	18ffffc4 	addi	r3,r3,-1
   10148:	002b883a 	mov	r21,zero
   1014c:	a004d63a 	srli	r2,r20,24
   10150:	8822923a 	slli	r17,r17,8
   10154:	a028923a 	slli	r20,r20,8
   10158:	8009883a 	mov	r4,r16
   1015c:	88acb03a 	or	r22,r17,r2
   10160:	dd000015 	stw	r20,0(sp)
   10164:	b028d43a 	srli	r20,r22,16
   10168:	d8c00215 	stw	r3,8(sp)
   1016c:	b4bfffcc 	andi	r18,r22,65535
   10170:	a00b883a 	mov	r5,r20
   10174:	00014ac0 	call	14ac <__udivsi3>
   10178:	100b883a 	mov	r5,r2
   1017c:	9009883a 	mov	r4,r18
   10180:	1023883a 	mov	r17,r2
   10184:	00015680 	call	1568 <__mulsi3>
   10188:	8009883a 	mov	r4,r16
   1018c:	a00b883a 	mov	r5,r20
   10190:	1039883a 	mov	fp,r2
   10194:	00015100 	call	1510 <__umodsi3>
   10198:	1004943a 	slli	r2,r2,16
   1019c:	b808d43a 	srli	r4,r23,16
   101a0:	d8c00217 	ldw	r3,8(sp)
   101a4:	2084b03a 	or	r2,r4,r2
   101a8:	1700062e 	bgeu	r2,fp,101c4 <__divdf3+0x3c0>
   101ac:	1585883a 	add	r2,r2,r22
   101b0:	893fffc4 	addi	r4,r17,-1
   101b4:	15811d36 	bltu	r2,r22,1062c <__divdf3+0x828>
   101b8:	17011c2e 	bgeu	r2,fp,1062c <__divdf3+0x828>
   101bc:	8c7fff84 	addi	r17,r17,-2
   101c0:	1585883a 	add	r2,r2,r22
   101c4:	1739c83a 	sub	fp,r2,fp
   101c8:	a00b883a 	mov	r5,r20
   101cc:	e009883a 	mov	r4,fp
   101d0:	d8c00215 	stw	r3,8(sp)
   101d4:	00014ac0 	call	14ac <__udivsi3>
   101d8:	100b883a 	mov	r5,r2
   101dc:	9009883a 	mov	r4,r18
   101e0:	1021883a 	mov	r16,r2
   101e4:	00015680 	call	1568 <__mulsi3>
   101e8:	a00b883a 	mov	r5,r20
   101ec:	e009883a 	mov	r4,fp
   101f0:	d8800415 	stw	r2,16(sp)
   101f4:	00015100 	call	1510 <__umodsi3>
   101f8:	1004943a 	slli	r2,r2,16
   101fc:	da000417 	ldw	r8,16(sp)
   10200:	bdffffcc 	andi	r23,r23,65535
   10204:	b884b03a 	or	r2,r23,r2
   10208:	d8c00217 	ldw	r3,8(sp)
   1020c:	1200062e 	bgeu	r2,r8,10228 <__divdf3+0x424>
   10210:	1585883a 	add	r2,r2,r22
   10214:	813fffc4 	addi	r4,r16,-1
   10218:	15810236 	bltu	r2,r22,10624 <__divdf3+0x820>
   1021c:	1201012e 	bgeu	r2,r8,10624 <__divdf3+0x820>
   10220:	843fff84 	addi	r16,r16,-2
   10224:	1585883a 	add	r2,r2,r22
   10228:	8822943a 	slli	r17,r17,16
   1022c:	d9800017 	ldw	r6,0(sp)
   10230:	1211c83a 	sub	r8,r2,r8
   10234:	8c22b03a 	or	r17,r17,r16
   10238:	373fffcc 	andi	fp,r6,65535
   1023c:	8abfffcc 	andi	r10,r17,65535
   10240:	8820d43a 	srli	r16,r17,16
   10244:	5009883a 	mov	r4,r10
   10248:	e00b883a 	mov	r5,fp
   1024c:	302ed43a 	srli	r23,r6,16
   10250:	d8c00215 	stw	r3,8(sp)
   10254:	da000415 	stw	r8,16(sp)
   10258:	da800115 	stw	r10,4(sp)
   1025c:	00015680 	call	1568 <__mulsi3>
   10260:	800b883a 	mov	r5,r16
   10264:	e009883a 	mov	r4,fp
   10268:	d8800515 	stw	r2,20(sp)
   1026c:	00015680 	call	1568 <__mulsi3>
   10270:	8009883a 	mov	r4,r16
   10274:	b80b883a 	mov	r5,r23
   10278:	d8800315 	stw	r2,12(sp)
   1027c:	00015680 	call	1568 <__mulsi3>
   10280:	da800117 	ldw	r10,4(sp)
   10284:	b80b883a 	mov	r5,r23
   10288:	1021883a 	mov	r16,r2
   1028c:	5009883a 	mov	r4,r10
   10290:	00015680 	call	1568 <__mulsi3>
   10294:	d9c00517 	ldw	r7,20(sp)
   10298:	da400317 	ldw	r9,12(sp)
   1029c:	d8c00217 	ldw	r3,8(sp)
   102a0:	3808d43a 	srli	r4,r7,16
   102a4:	1245883a 	add	r2,r2,r9
   102a8:	da000417 	ldw	r8,16(sp)
   102ac:	2085883a 	add	r2,r4,r2
   102b0:	1240022e 	bgeu	r2,r9,102bc <__divdf3+0x4b8>
   102b4:	01000074 	movhi	r4,1
   102b8:	8121883a 	add	r16,r16,r4
   102bc:	1008d43a 	srli	r4,r2,16
   102c0:	1004943a 	slli	r2,r2,16
   102c4:	39ffffcc 	andi	r7,r7,65535
   102c8:	2409883a 	add	r4,r4,r16
   102cc:	11c5883a 	add	r2,r2,r7
   102d0:	4100bb36 	bltu	r8,r4,105c0 <__divdf3+0x7bc>
   102d4:	4100d726 	beq	r8,r4,10634 <__divdf3+0x830>
   102d8:	4109c83a 	sub	r4,r8,r4
   102dc:	a8a1c83a 	sub	r16,r21,r2
   102e0:	ac2b803a 	cmpltu	r21,r21,r16
   102e4:	256bc83a 	sub	r21,r4,r21
   102e8:	b540d926 	beq	r22,r21,10650 <__divdf3+0x84c>
   102ec:	a00b883a 	mov	r5,r20
   102f0:	a809883a 	mov	r4,r21
   102f4:	d8c00215 	stw	r3,8(sp)
   102f8:	00014ac0 	call	14ac <__udivsi3>
   102fc:	100b883a 	mov	r5,r2
   10300:	9009883a 	mov	r4,r18
   10304:	d8800515 	stw	r2,20(sp)
   10308:	00015680 	call	1568 <__mulsi3>
   1030c:	a809883a 	mov	r4,r21
   10310:	a00b883a 	mov	r5,r20
   10314:	d8800415 	stw	r2,16(sp)
   10318:	00015100 	call	1510 <__umodsi3>
   1031c:	1004943a 	slli	r2,r2,16
   10320:	8008d43a 	srli	r4,r16,16
   10324:	da000417 	ldw	r8,16(sp)
   10328:	d8c00217 	ldw	r3,8(sp)
   1032c:	2084b03a 	or	r2,r4,r2
   10330:	d9c00517 	ldw	r7,20(sp)
   10334:	1200062e 	bgeu	r2,r8,10350 <__divdf3+0x54c>
   10338:	1585883a 	add	r2,r2,r22
   1033c:	393fffc4 	addi	r4,r7,-1
   10340:	1580c536 	bltu	r2,r22,10658 <__divdf3+0x854>
   10344:	1200c42e 	bgeu	r2,r8,10658 <__divdf3+0x854>
   10348:	39ffff84 	addi	r7,r7,-2
   1034c:	1585883a 	add	r2,r2,r22
   10350:	122bc83a 	sub	r21,r2,r8
   10354:	a00b883a 	mov	r5,r20
   10358:	a809883a 	mov	r4,r21
   1035c:	d8c00215 	stw	r3,8(sp)
   10360:	d9c00515 	stw	r7,20(sp)
   10364:	00014ac0 	call	14ac <__udivsi3>
   10368:	9009883a 	mov	r4,r18
   1036c:	100b883a 	mov	r5,r2
   10370:	d8800415 	stw	r2,16(sp)
   10374:	00015680 	call	1568 <__mulsi3>
   10378:	a809883a 	mov	r4,r21
   1037c:	a00b883a 	mov	r5,r20
   10380:	1025883a 	mov	r18,r2
   10384:	00015100 	call	1510 <__umodsi3>
   10388:	1004943a 	slli	r2,r2,16
   1038c:	813fffcc 	andi	r4,r16,65535
   10390:	d8c00217 	ldw	r3,8(sp)
   10394:	20a0b03a 	or	r16,r4,r2
   10398:	d9c00517 	ldw	r7,20(sp)
   1039c:	da000417 	ldw	r8,16(sp)
   103a0:	8480062e 	bgeu	r16,r18,103bc <__divdf3+0x5b8>
   103a4:	85a1883a 	add	r16,r16,r22
   103a8:	40bfffc4 	addi	r2,r8,-1
   103ac:	8580ac36 	bltu	r16,r22,10660 <__divdf3+0x85c>
   103b0:	8480ab2e 	bgeu	r16,r18,10660 <__divdf3+0x85c>
   103b4:	423fff84 	addi	r8,r8,-2
   103b8:	85a1883a 	add	r16,r16,r22
   103bc:	3804943a 	slli	r2,r7,16
   103c0:	84a1c83a 	sub	r16,r16,r18
   103c4:	e009883a 	mov	r4,fp
   103c8:	1228b03a 	or	r20,r2,r8
   103cc:	a1ffffcc 	andi	r7,r20,65535
   103d0:	a024d43a 	srli	r18,r20,16
   103d4:	380b883a 	mov	r5,r7
   103d8:	d8c00215 	stw	r3,8(sp)
   103dc:	d9c00515 	stw	r7,20(sp)
   103e0:	00015680 	call	1568 <__mulsi3>
   103e4:	900b883a 	mov	r5,r18
   103e8:	e009883a 	mov	r4,fp
   103ec:	102b883a 	mov	r21,r2
   103f0:	00015680 	call	1568 <__mulsi3>
   103f4:	900b883a 	mov	r5,r18
   103f8:	b809883a 	mov	r4,r23
   103fc:	1039883a 	mov	fp,r2
   10400:	00015680 	call	1568 <__mulsi3>
   10404:	d9c00517 	ldw	r7,20(sp)
   10408:	b80b883a 	mov	r5,r23
   1040c:	1025883a 	mov	r18,r2
   10410:	3809883a 	mov	r4,r7
   10414:	00015680 	call	1568 <__mulsi3>
   10418:	a808d43a 	srli	r4,r21,16
   1041c:	1705883a 	add	r2,r2,fp
   10420:	d8c00217 	ldw	r3,8(sp)
   10424:	2085883a 	add	r2,r4,r2
   10428:	1700022e 	bgeu	r2,fp,10434 <__divdf3+0x630>
   1042c:	01000074 	movhi	r4,1
   10430:	9125883a 	add	r18,r18,r4
   10434:	1008d43a 	srli	r4,r2,16
   10438:	1004943a 	slli	r2,r2,16
   1043c:	ad7fffcc 	andi	r21,r21,65535
   10440:	2489883a 	add	r4,r4,r18
   10444:	1545883a 	add	r2,r2,r21
   10448:	81003836 	bltu	r16,r4,1052c <__divdf3+0x728>
   1044c:	81003626 	beq	r16,r4,10528 <__divdf3+0x724>
   10450:	a5000054 	ori	r20,r20,1
   10454:	1880ffc4 	addi	r2,r3,1023
   10458:	00bf2e0e 	bge	zero,r2,10114 <__alt_mem_Onchip_SRAM+0xf8010114>
   1045c:	a10001cc 	andi	r4,r20,7
   10460:	20000726 	beq	r4,zero,10480 <__divdf3+0x67c>
   10464:	a10003cc 	andi	r4,r20,15
   10468:	01400104 	movi	r5,4
   1046c:	21400426 	beq	r4,r5,10480 <__divdf3+0x67c>
   10470:	a149883a 	add	r4,r20,r5
   10474:	2529803a 	cmpltu	r20,r4,r20
   10478:	8d23883a 	add	r17,r17,r20
   1047c:	2029883a 	mov	r20,r4
   10480:	8900402c 	andhi	r4,r17,256
   10484:	20000426 	beq	r4,zero,10498 <__divdf3+0x694>
   10488:	18810004 	addi	r2,r3,1024
   1048c:	00ffc034 	movhi	r3,65280
   10490:	18ffffc4 	addi	r3,r3,-1
   10494:	88e2703a 	and	r17,r17,r3
   10498:	00c1ff84 	movi	r3,2046
   1049c:	18beb416 	blt	r3,r2,ff70 <__alt_mem_Onchip_SRAM+0xf800ff70>
   104a0:	a028d0fa 	srli	r20,r20,3
   104a4:	882a977a 	slli	r21,r17,29
   104a8:	8820927a 	slli	r16,r17,9
   104ac:	1081ffcc 	andi	r2,r2,2047
   104b0:	ad2ab03a 	or	r21,r21,r20
   104b4:	8020d33a 	srli	r16,r16,12
   104b8:	9900004c 	andi	r4,r19,1
   104bc:	003eb006 	br	ff80 <__alt_mem_Onchip_SRAM+0xf800ff80>
   104c0:	8080022c 	andhi	r2,r16,8
   104c4:	10001226 	beq	r2,zero,10510 <__divdf3+0x70c>
   104c8:	8880022c 	andhi	r2,r17,8
   104cc:	1000101e 	bne	r2,zero,10510 <__divdf3+0x70c>
   104d0:	00800434 	movhi	r2,16
   104d4:	8c000234 	orhi	r16,r17,8
   104d8:	10bfffc4 	addi	r2,r2,-1
   104dc:	b809883a 	mov	r4,r23
   104e0:	80a0703a 	and	r16,r16,r2
   104e4:	a02b883a 	mov	r21,r20
   104e8:	003f0806 	br	1010c <__alt_mem_Onchip_SRAM+0xf801010c>
   104ec:	008000c4 	movi	r2,3
   104f0:	3880b126 	beq	r7,r2,107b8 <__divdf3+0x9b4>
   104f4:	00800044 	movi	r2,1
   104f8:	38805b1e 	bne	r7,r2,10668 <__divdf3+0x864>
   104fc:	e009883a 	mov	r4,fp
   10500:	0005883a 	mov	r2,zero
   10504:	0021883a 	mov	r16,zero
   10508:	002b883a 	mov	r21,zero
   1050c:	003e9c06 	br	ff80 <__alt_mem_Onchip_SRAM+0xf800ff80>
   10510:	00800434 	movhi	r2,16
   10514:	84000234 	orhi	r16,r16,8
   10518:	10bfffc4 	addi	r2,r2,-1
   1051c:	b009883a 	mov	r4,r22
   10520:	80a0703a 	and	r16,r16,r2
   10524:	003ef906 	br	1010c <__alt_mem_Onchip_SRAM+0xf801010c>
   10528:	103fca26 	beq	r2,zero,10454 <__alt_mem_Onchip_SRAM+0xf8010454>
   1052c:	b421883a 	add	r16,r22,r16
   10530:	a17fffc4 	addi	r5,r20,-1
   10534:	8580422e 	bgeu	r16,r22,10640 <__divdf3+0x83c>
   10538:	2829883a 	mov	r20,r5
   1053c:	813fc41e 	bne	r16,r4,10450 <__alt_mem_Onchip_SRAM+0xf8010450>
   10540:	d9800017 	ldw	r6,0(sp)
   10544:	30bfc21e 	bne	r6,r2,10450 <__alt_mem_Onchip_SRAM+0xf8010450>
   10548:	003fc206 	br	10454 <__alt_mem_Onchip_SRAM+0xf8010454>
   1054c:	143ff604 	addi	r16,r2,-40
   10550:	8c20983a 	sll	r16,r17,r16
   10554:	002b883a 	mov	r21,zero
   10558:	003eb406 	br	1002c <__alt_mem_Onchip_SRAM+0xf801002c>
   1055c:	d9800215 	stw	r6,8(sp)
   10560:	d9c00515 	stw	r7,20(sp)
   10564:	da000415 	stw	r8,16(sp)
   10568:	0011d980 	call	11d98 <__clzsi2>
   1056c:	10800804 	addi	r2,r2,32
   10570:	da000417 	ldw	r8,16(sp)
   10574:	d9c00517 	ldw	r7,20(sp)
   10578:	d9800217 	ldw	r6,8(sp)
   1057c:	003ea106 	br	10004 <__alt_mem_Onchip_SRAM+0xf8010004>
   10580:	147ff604 	addi	r17,r2,-40
   10584:	3462983a 	sll	r17,r6,r17
   10588:	0029883a 	mov	r20,zero
   1058c:	003ec906 	br	100b4 <__alt_mem_Onchip_SRAM+0xf80100b4>
   10590:	3009883a 	mov	r4,r6
   10594:	d9400115 	stw	r5,4(sp)
   10598:	d9800215 	stw	r6,8(sp)
   1059c:	da000415 	stw	r8,16(sp)
   105a0:	da400315 	stw	r9,12(sp)
   105a4:	0011d980 	call	11d98 <__clzsi2>
   105a8:	10800804 	addi	r2,r2,32
   105ac:	da400317 	ldw	r9,12(sp)
   105b0:	da000417 	ldw	r8,16(sp)
   105b4:	d9800217 	ldw	r6,8(sp)
   105b8:	d9400117 	ldw	r5,4(sp)
   105bc:	003eb306 	br	1008c <__alt_mem_Onchip_SRAM+0xf801008c>
   105c0:	d9800017 	ldw	r6,0(sp)
   105c4:	a9ab883a 	add	r21,r21,r6
   105c8:	a98b803a 	cmpltu	r5,r21,r6
   105cc:	2d8b883a 	add	r5,r5,r22
   105d0:	2a11883a 	add	r8,r5,r8
   105d4:	897fffc4 	addi	r5,r17,-1
   105d8:	b2000c2e 	bgeu	r22,r8,1060c <__divdf3+0x808>
   105dc:	41003f36 	bltu	r8,r4,106dc <__divdf3+0x8d8>
   105e0:	22006c26 	beq	r4,r8,10794 <__divdf3+0x990>
   105e4:	4109c83a 	sub	r4,r8,r4
   105e8:	2823883a 	mov	r17,r5
   105ec:	003f3b06 	br	102dc <__alt_mem_Onchip_SRAM+0xf80102dc>
   105f0:	ad3ed336 	bltu	r21,r20,10140 <__alt_mem_Onchip_SRAM+0xf8010140>
   105f4:	a804d07a 	srli	r2,r21,1
   105f8:	802e97fa 	slli	r23,r16,31
   105fc:	a82a97fa 	slli	r21,r21,31
   10600:	8020d07a 	srli	r16,r16,1
   10604:	b8aeb03a 	or	r23,r23,r2
   10608:	003ed006 	br	1014c <__alt_mem_Onchip_SRAM+0xf801014c>
   1060c:	b23ff51e 	bne	r22,r8,105e4 <__alt_mem_Onchip_SRAM+0xf80105e4>
   10610:	d9800017 	ldw	r6,0(sp)
   10614:	a9bff12e 	bgeu	r21,r6,105dc <__alt_mem_Onchip_SRAM+0xf80105dc>
   10618:	b109c83a 	sub	r4,r22,r4
   1061c:	2823883a 	mov	r17,r5
   10620:	003f2e06 	br	102dc <__alt_mem_Onchip_SRAM+0xf80102dc>
   10624:	2021883a 	mov	r16,r4
   10628:	003eff06 	br	10228 <__alt_mem_Onchip_SRAM+0xf8010228>
   1062c:	2023883a 	mov	r17,r4
   10630:	003ee406 	br	101c4 <__alt_mem_Onchip_SRAM+0xf80101c4>
   10634:	a8bfe236 	bltu	r21,r2,105c0 <__alt_mem_Onchip_SRAM+0xf80105c0>
   10638:	0009883a 	mov	r4,zero
   1063c:	003f2706 	br	102dc <__alt_mem_Onchip_SRAM+0xf80102dc>
   10640:	81002d36 	bltu	r16,r4,106f8 <__divdf3+0x8f4>
   10644:	24005626 	beq	r4,r16,107a0 <__divdf3+0x99c>
   10648:	2829883a 	mov	r20,r5
   1064c:	003f8006 	br	10450 <__alt_mem_Onchip_SRAM+0xf8010450>
   10650:	053fffc4 	movi	r20,-1
   10654:	003f7f06 	br	10454 <__alt_mem_Onchip_SRAM+0xf8010454>
   10658:	200f883a 	mov	r7,r4
   1065c:	003f3c06 	br	10350 <__alt_mem_Onchip_SRAM+0xf8010350>
   10660:	1011883a 	mov	r8,r2
   10664:	003f5506 	br	103bc <__alt_mem_Onchip_SRAM+0xf80103bc>
   10668:	e027883a 	mov	r19,fp
   1066c:	003f7906 	br	10454 <__alt_mem_Onchip_SRAM+0xf8010454>
   10670:	010007c4 	movi	r4,31
   10674:	20c02816 	blt	r4,r3,10718 <__divdf3+0x914>
   10678:	00800804 	movi	r2,32
   1067c:	10c5c83a 	sub	r2,r2,r3
   10680:	888a983a 	sll	r5,r17,r2
   10684:	a0c8d83a 	srl	r4,r20,r3
   10688:	a084983a 	sll	r2,r20,r2
   1068c:	88e2d83a 	srl	r17,r17,r3
   10690:	2906b03a 	or	r3,r5,r4
   10694:	1004c03a 	cmpne	r2,r2,zero
   10698:	1886b03a 	or	r3,r3,r2
   1069c:	188001cc 	andi	r2,r3,7
   106a0:	10000726 	beq	r2,zero,106c0 <__divdf3+0x8bc>
   106a4:	188003cc 	andi	r2,r3,15
   106a8:	01000104 	movi	r4,4
   106ac:	11000426 	beq	r2,r4,106c0 <__divdf3+0x8bc>
   106b0:	1805883a 	mov	r2,r3
   106b4:	10c00104 	addi	r3,r2,4
   106b8:	1885803a 	cmpltu	r2,r3,r2
   106bc:	88a3883a 	add	r17,r17,r2
   106c0:	8880202c 	andhi	r2,r17,128
   106c4:	10002926 	beq	r2,zero,1076c <__divdf3+0x968>
   106c8:	9900004c 	andi	r4,r19,1
   106cc:	00800044 	movi	r2,1
   106d0:	0021883a 	mov	r16,zero
   106d4:	002b883a 	mov	r21,zero
   106d8:	003e2906 	br	ff80 <__alt_mem_Onchip_SRAM+0xf800ff80>
   106dc:	d9800017 	ldw	r6,0(sp)
   106e0:	8c7fff84 	addi	r17,r17,-2
   106e4:	a9ab883a 	add	r21,r21,r6
   106e8:	a98b803a 	cmpltu	r5,r21,r6
   106ec:	2d8b883a 	add	r5,r5,r22
   106f0:	2a11883a 	add	r8,r5,r8
   106f4:	003ef806 	br	102d8 <__alt_mem_Onchip_SRAM+0xf80102d8>
   106f8:	d9800017 	ldw	r6,0(sp)
   106fc:	318f883a 	add	r7,r6,r6
   10700:	398b803a 	cmpltu	r5,r7,r6
   10704:	2d8d883a 	add	r6,r5,r22
   10708:	81a1883a 	add	r16,r16,r6
   1070c:	a17fff84 	addi	r5,r20,-2
   10710:	d9c00015 	stw	r7,0(sp)
   10714:	003f8806 	br	10538 <__alt_mem_Onchip_SRAM+0xf8010538>
   10718:	013ff844 	movi	r4,-31
   1071c:	2085c83a 	sub	r2,r4,r2
   10720:	8888d83a 	srl	r4,r17,r2
   10724:	00800804 	movi	r2,32
   10728:	18802126 	beq	r3,r2,107b0 <__divdf3+0x9ac>
   1072c:	04001004 	movi	r16,64
   10730:	80c7c83a 	sub	r3,r16,r3
   10734:	88e0983a 	sll	r16,r17,r3
   10738:	8504b03a 	or	r2,r16,r20
   1073c:	1004c03a 	cmpne	r2,r2,zero
   10740:	2084b03a 	or	r2,r4,r2
   10744:	144001cc 	andi	r17,r2,7
   10748:	88000d1e 	bne	r17,zero,10780 <__divdf3+0x97c>
   1074c:	0021883a 	mov	r16,zero
   10750:	102ad0fa 	srli	r21,r2,3
   10754:	9900004c 	andi	r4,r19,1
   10758:	0005883a 	mov	r2,zero
   1075c:	ac6ab03a 	or	r21,r21,r17
   10760:	003e0706 	br	ff80 <__alt_mem_Onchip_SRAM+0xf800ff80>
   10764:	1007883a 	mov	r3,r2
   10768:	0023883a 	mov	r17,zero
   1076c:	8820927a 	slli	r16,r17,9
   10770:	1805883a 	mov	r2,r3
   10774:	8822977a 	slli	r17,r17,29
   10778:	8020d33a 	srli	r16,r16,12
   1077c:	003ff406 	br	10750 <__alt_mem_Onchip_SRAM+0xf8010750>
   10780:	10c003cc 	andi	r3,r2,15
   10784:	01000104 	movi	r4,4
   10788:	193ff626 	beq	r3,r4,10764 <__alt_mem_Onchip_SRAM+0xf8010764>
   1078c:	0023883a 	mov	r17,zero
   10790:	003fc806 	br	106b4 <__alt_mem_Onchip_SRAM+0xf80106b4>
   10794:	a8bfd136 	bltu	r21,r2,106dc <__alt_mem_Onchip_SRAM+0xf80106dc>
   10798:	2823883a 	mov	r17,r5
   1079c:	003fa606 	br	10638 <__alt_mem_Onchip_SRAM+0xf8010638>
   107a0:	d9800017 	ldw	r6,0(sp)
   107a4:	30bfd436 	bltu	r6,r2,106f8 <__alt_mem_Onchip_SRAM+0xf80106f8>
   107a8:	2829883a 	mov	r20,r5
   107ac:	003f6406 	br	10540 <__alt_mem_Onchip_SRAM+0xf8010540>
   107b0:	0021883a 	mov	r16,zero
   107b4:	003fe006 	br	10738 <__alt_mem_Onchip_SRAM+0xf8010738>
   107b8:	00800434 	movhi	r2,16
   107bc:	8c000234 	orhi	r16,r17,8
   107c0:	10bfffc4 	addi	r2,r2,-1
   107c4:	e009883a 	mov	r4,fp
   107c8:	80a0703a 	and	r16,r16,r2
   107cc:	a02b883a 	mov	r21,r20
   107d0:	003e4e06 	br	1010c <__alt_mem_Onchip_SRAM+0xf801010c>

000107d4 <__eqdf2>:
   107d4:	2804d53a 	srli	r2,r5,20
   107d8:	3806d53a 	srli	r3,r7,20
   107dc:	02000434 	movhi	r8,16
   107e0:	423fffc4 	addi	r8,r8,-1
   107e4:	1081ffcc 	andi	r2,r2,2047
   107e8:	0281ffc4 	movi	r10,2047
   107ec:	2a12703a 	and	r9,r5,r8
   107f0:	18c1ffcc 	andi	r3,r3,2047
   107f4:	3a10703a 	and	r8,r7,r8
   107f8:	280ad7fa 	srli	r5,r5,31
   107fc:	380ed7fa 	srli	r7,r7,31
   10800:	12801026 	beq	r2,r10,10844 <__eqdf2+0x70>
   10804:	0281ffc4 	movi	r10,2047
   10808:	1a800a26 	beq	r3,r10,10834 <__eqdf2+0x60>
   1080c:	10c00226 	beq	r2,r3,10818 <__eqdf2+0x44>
   10810:	00800044 	movi	r2,1
   10814:	f800283a 	ret
   10818:	4a3ffd1e 	bne	r9,r8,10810 <__alt_mem_Onchip_SRAM+0xf8010810>
   1081c:	21bffc1e 	bne	r4,r6,10810 <__alt_mem_Onchip_SRAM+0xf8010810>
   10820:	29c00c26 	beq	r5,r7,10854 <__eqdf2+0x80>
   10824:	103ffa1e 	bne	r2,zero,10810 <__alt_mem_Onchip_SRAM+0xf8010810>
   10828:	2244b03a 	or	r2,r4,r9
   1082c:	1004c03a 	cmpne	r2,r2,zero
   10830:	f800283a 	ret
   10834:	3214b03a 	or	r10,r6,r8
   10838:	503ff426 	beq	r10,zero,1080c <__alt_mem_Onchip_SRAM+0xf801080c>
   1083c:	00800044 	movi	r2,1
   10840:	f800283a 	ret
   10844:	2254b03a 	or	r10,r4,r9
   10848:	503fee26 	beq	r10,zero,10804 <__alt_mem_Onchip_SRAM+0xf8010804>
   1084c:	00800044 	movi	r2,1
   10850:	f800283a 	ret
   10854:	0005883a 	mov	r2,zero
   10858:	f800283a 	ret

0001085c <__gedf2>:
   1085c:	2804d53a 	srli	r2,r5,20
   10860:	3806d53a 	srli	r3,r7,20
   10864:	02000434 	movhi	r8,16
   10868:	423fffc4 	addi	r8,r8,-1
   1086c:	1081ffcc 	andi	r2,r2,2047
   10870:	0241ffc4 	movi	r9,2047
   10874:	2a14703a 	and	r10,r5,r8
   10878:	18c1ffcc 	andi	r3,r3,2047
   1087c:	3a10703a 	and	r8,r7,r8
   10880:	280ad7fa 	srli	r5,r5,31
   10884:	380ed7fa 	srli	r7,r7,31
   10888:	12401d26 	beq	r2,r9,10900 <__gedf2+0xa4>
   1088c:	0241ffc4 	movi	r9,2047
   10890:	1a401226 	beq	r3,r9,108dc <__gedf2+0x80>
   10894:	1000081e 	bne	r2,zero,108b8 <__gedf2+0x5c>
   10898:	2296b03a 	or	r11,r4,r10
   1089c:	5813003a 	cmpeq	r9,r11,zero
   108a0:	1800091e 	bne	r3,zero,108c8 <__gedf2+0x6c>
   108a4:	3218b03a 	or	r12,r6,r8
   108a8:	6000071e 	bne	r12,zero,108c8 <__gedf2+0x6c>
   108ac:	0005883a 	mov	r2,zero
   108b0:	5800101e 	bne	r11,zero,108f4 <__gedf2+0x98>
   108b4:	f800283a 	ret
   108b8:	18000c1e 	bne	r3,zero,108ec <__gedf2+0x90>
   108bc:	3212b03a 	or	r9,r6,r8
   108c0:	48000c26 	beq	r9,zero,108f4 <__gedf2+0x98>
   108c4:	0013883a 	mov	r9,zero
   108c8:	39c03fcc 	andi	r7,r7,255
   108cc:	48000826 	beq	r9,zero,108f0 <__gedf2+0x94>
   108d0:	38000926 	beq	r7,zero,108f8 <__gedf2+0x9c>
   108d4:	00800044 	movi	r2,1
   108d8:	f800283a 	ret
   108dc:	3212b03a 	or	r9,r6,r8
   108e0:	483fec26 	beq	r9,zero,10894 <__alt_mem_Onchip_SRAM+0xf8010894>
   108e4:	00bfff84 	movi	r2,-2
   108e8:	f800283a 	ret
   108ec:	39c03fcc 	andi	r7,r7,255
   108f0:	29c00626 	beq	r5,r7,1090c <__gedf2+0xb0>
   108f4:	283ff726 	beq	r5,zero,108d4 <__alt_mem_Onchip_SRAM+0xf80108d4>
   108f8:	00bfffc4 	movi	r2,-1
   108fc:	f800283a 	ret
   10900:	2292b03a 	or	r9,r4,r10
   10904:	483fe126 	beq	r9,zero,1088c <__alt_mem_Onchip_SRAM+0xf801088c>
   10908:	003ff606 	br	108e4 <__alt_mem_Onchip_SRAM+0xf80108e4>
   1090c:	18bff916 	blt	r3,r2,108f4 <__alt_mem_Onchip_SRAM+0xf80108f4>
   10910:	10c00316 	blt	r2,r3,10920 <__gedf2+0xc4>
   10914:	42bff736 	bltu	r8,r10,108f4 <__alt_mem_Onchip_SRAM+0xf80108f4>
   10918:	52000326 	beq	r10,r8,10928 <__gedf2+0xcc>
   1091c:	5200042e 	bgeu	r10,r8,10930 <__gedf2+0xd4>
   10920:	283fec1e 	bne	r5,zero,108d4 <__alt_mem_Onchip_SRAM+0xf80108d4>
   10924:	003ff406 	br	108f8 <__alt_mem_Onchip_SRAM+0xf80108f8>
   10928:	313ff236 	bltu	r6,r4,108f4 <__alt_mem_Onchip_SRAM+0xf80108f4>
   1092c:	21bffc36 	bltu	r4,r6,10920 <__alt_mem_Onchip_SRAM+0xf8010920>
   10930:	0005883a 	mov	r2,zero
   10934:	f800283a 	ret

00010938 <__ledf2>:
   10938:	2804d53a 	srli	r2,r5,20
   1093c:	3810d53a 	srli	r8,r7,20
   10940:	00c00434 	movhi	r3,16
   10944:	18ffffc4 	addi	r3,r3,-1
   10948:	1081ffcc 	andi	r2,r2,2047
   1094c:	0241ffc4 	movi	r9,2047
   10950:	28d4703a 	and	r10,r5,r3
   10954:	4201ffcc 	andi	r8,r8,2047
   10958:	38c6703a 	and	r3,r7,r3
   1095c:	280ad7fa 	srli	r5,r5,31
   10960:	380ed7fa 	srli	r7,r7,31
   10964:	12401f26 	beq	r2,r9,109e4 <__ledf2+0xac>
   10968:	0241ffc4 	movi	r9,2047
   1096c:	42401426 	beq	r8,r9,109c0 <__ledf2+0x88>
   10970:	1000091e 	bne	r2,zero,10998 <__ledf2+0x60>
   10974:	2296b03a 	or	r11,r4,r10
   10978:	5813003a 	cmpeq	r9,r11,zero
   1097c:	29403fcc 	andi	r5,r5,255
   10980:	40000a1e 	bne	r8,zero,109ac <__ledf2+0x74>
   10984:	30d8b03a 	or	r12,r6,r3
   10988:	6000081e 	bne	r12,zero,109ac <__ledf2+0x74>
   1098c:	0005883a 	mov	r2,zero
   10990:	5800111e 	bne	r11,zero,109d8 <__ledf2+0xa0>
   10994:	f800283a 	ret
   10998:	29403fcc 	andi	r5,r5,255
   1099c:	40000c1e 	bne	r8,zero,109d0 <__ledf2+0x98>
   109a0:	30d2b03a 	or	r9,r6,r3
   109a4:	48000c26 	beq	r9,zero,109d8 <__ledf2+0xa0>
   109a8:	0013883a 	mov	r9,zero
   109ac:	39c03fcc 	andi	r7,r7,255
   109b0:	48000826 	beq	r9,zero,109d4 <__ledf2+0x9c>
   109b4:	38001126 	beq	r7,zero,109fc <__ledf2+0xc4>
   109b8:	00800044 	movi	r2,1
   109bc:	f800283a 	ret
   109c0:	30d2b03a 	or	r9,r6,r3
   109c4:	483fea26 	beq	r9,zero,10970 <__alt_mem_Onchip_SRAM+0xf8010970>
   109c8:	00800084 	movi	r2,2
   109cc:	f800283a 	ret
   109d0:	39c03fcc 	andi	r7,r7,255
   109d4:	39400726 	beq	r7,r5,109f4 <__ledf2+0xbc>
   109d8:	2800081e 	bne	r5,zero,109fc <__ledf2+0xc4>
   109dc:	00800044 	movi	r2,1
   109e0:	f800283a 	ret
   109e4:	2292b03a 	or	r9,r4,r10
   109e8:	483fdf26 	beq	r9,zero,10968 <__alt_mem_Onchip_SRAM+0xf8010968>
   109ec:	00800084 	movi	r2,2
   109f0:	f800283a 	ret
   109f4:	4080030e 	bge	r8,r2,10a04 <__ledf2+0xcc>
   109f8:	383fef26 	beq	r7,zero,109b8 <__alt_mem_Onchip_SRAM+0xf80109b8>
   109fc:	00bfffc4 	movi	r2,-1
   10a00:	f800283a 	ret
   10a04:	123feb16 	blt	r2,r8,109b4 <__alt_mem_Onchip_SRAM+0xf80109b4>
   10a08:	1abff336 	bltu	r3,r10,109d8 <__alt_mem_Onchip_SRAM+0xf80109d8>
   10a0c:	50c00326 	beq	r10,r3,10a1c <__ledf2+0xe4>
   10a10:	50c0042e 	bgeu	r10,r3,10a24 <__ledf2+0xec>
   10a14:	283fe81e 	bne	r5,zero,109b8 <__alt_mem_Onchip_SRAM+0xf80109b8>
   10a18:	003ff806 	br	109fc <__alt_mem_Onchip_SRAM+0xf80109fc>
   10a1c:	313fee36 	bltu	r6,r4,109d8 <__alt_mem_Onchip_SRAM+0xf80109d8>
   10a20:	21bffc36 	bltu	r4,r6,10a14 <__alt_mem_Onchip_SRAM+0xf8010a14>
   10a24:	0005883a 	mov	r2,zero
   10a28:	f800283a 	ret

00010a2c <__muldf3>:
   10a2c:	deffee04 	addi	sp,sp,-72
   10a30:	dd000c15 	stw	r20,48(sp)
   10a34:	2828d53a 	srli	r20,r5,20
   10a38:	ddc00f15 	stw	r23,60(sp)
   10a3c:	282ed7fa 	srli	r23,r5,31
   10a40:	dc000815 	stw	r16,32(sp)
   10a44:	04000434 	movhi	r16,16
   10a48:	dcc00b15 	stw	r19,44(sp)
   10a4c:	843fffc4 	addi	r16,r16,-1
   10a50:	dfc01115 	stw	ra,68(sp)
   10a54:	df001015 	stw	fp,64(sp)
   10a58:	dd800e15 	stw	r22,56(sp)
   10a5c:	dd400d15 	stw	r21,52(sp)
   10a60:	dc800a15 	stw	r18,40(sp)
   10a64:	dc400915 	stw	r17,36(sp)
   10a68:	a501ffcc 	andi	r20,r20,2047
   10a6c:	2c20703a 	and	r16,r5,r16
   10a70:	b827883a 	mov	r19,r23
   10a74:	ba403fcc 	andi	r9,r23,255
   10a78:	a0006026 	beq	r20,zero,10bfc <__muldf3+0x1d0>
   10a7c:	0081ffc4 	movi	r2,2047
   10a80:	202d883a 	mov	r22,r4
   10a84:	a0803626 	beq	r20,r2,10b60 <__muldf3+0x134>
   10a88:	84000434 	orhi	r16,r16,16
   10a8c:	200ad77a 	srli	r5,r4,29
   10a90:	800490fa 	slli	r2,r16,3
   10a94:	202c90fa 	slli	r22,r4,3
   10a98:	a53f0044 	addi	r20,r20,-1023
   10a9c:	28a0b03a 	or	r16,r5,r2
   10aa0:	002b883a 	mov	r21,zero
   10aa4:	000b883a 	mov	r5,zero
   10aa8:	3804d53a 	srli	r2,r7,20
   10aac:	3838d7fa 	srli	fp,r7,31
   10ab0:	04400434 	movhi	r17,16
   10ab4:	8c7fffc4 	addi	r17,r17,-1
   10ab8:	1081ffcc 	andi	r2,r2,2047
   10abc:	3025883a 	mov	r18,r6
   10ac0:	3c62703a 	and	r17,r7,r17
   10ac4:	e2803fcc 	andi	r10,fp,255
   10ac8:	10006d26 	beq	r2,zero,10c80 <__muldf3+0x254>
   10acc:	00c1ffc4 	movi	r3,2047
   10ad0:	10c06526 	beq	r2,r3,10c68 <__muldf3+0x23c>
   10ad4:	8c400434 	orhi	r17,r17,16
   10ad8:	300ed77a 	srli	r7,r6,29
   10adc:	880690fa 	slli	r3,r17,3
   10ae0:	302490fa 	slli	r18,r6,3
   10ae4:	10bf0044 	addi	r2,r2,-1023
   10ae8:	38e2b03a 	or	r17,r7,r3
   10aec:	000f883a 	mov	r7,zero
   10af0:	a087883a 	add	r3,r20,r2
   10af4:	010003c4 	movi	r4,15
   10af8:	3d44b03a 	or	r2,r7,r21
   10afc:	e5ccf03a 	xor	r6,fp,r23
   10b00:	1a000044 	addi	r8,r3,1
   10b04:	20809b36 	bltu	r4,r2,10d74 <__muldf3+0x348>
   10b08:	100490ba 	slli	r2,r2,2
   10b0c:	01000074 	movhi	r4,1
   10b10:	2102c804 	addi	r4,r4,2848
   10b14:	1105883a 	add	r2,r2,r4
   10b18:	10800017 	ldw	r2,0(r2)
   10b1c:	1000683a 	jmp	r2
   10b20:	00010d74 	movhi	zero,1077
   10b24:	00010b80 	call	10b8 <follow_touch+0x11c>
   10b28:	00010b80 	call	10b8 <follow_touch+0x11c>
   10b2c:	00010b7c 	xorhi	zero,zero,1069
   10b30:	00010d50 	cmplti	zero,zero,1077
   10b34:	00010d50 	cmplti	zero,zero,1077
   10b38:	00010d38 	rdprs	zero,zero,1076
   10b3c:	00010b7c 	xorhi	zero,zero,1069
   10b40:	00010d50 	cmplti	zero,zero,1077
   10b44:	00010d38 	rdprs	zero,zero,1076
   10b48:	00010d50 	cmplti	zero,zero,1077
   10b4c:	00010b7c 	xorhi	zero,zero,1069
   10b50:	00010d60 	cmpeqi	zero,zero,1077
   10b54:	00010d60 	cmpeqi	zero,zero,1077
   10b58:	00010d60 	cmpeqi	zero,zero,1077
   10b5c:	000110c0 	call	110c <follow_touch+0x170>
   10b60:	2404b03a 	or	r2,r4,r16
   10b64:	1000711e 	bne	r2,zero,10d2c <__muldf3+0x300>
   10b68:	05400204 	movi	r21,8
   10b6c:	0021883a 	mov	r16,zero
   10b70:	002d883a 	mov	r22,zero
   10b74:	01400084 	movi	r5,2
   10b78:	003fcb06 	br	10aa8 <__alt_mem_Onchip_SRAM+0xf8010aa8>
   10b7c:	500d883a 	mov	r6,r10
   10b80:	00800084 	movi	r2,2
   10b84:	38805926 	beq	r7,r2,10cec <__muldf3+0x2c0>
   10b88:	008000c4 	movi	r2,3
   10b8c:	3881bb26 	beq	r7,r2,1127c <__muldf3+0x850>
   10b90:	00800044 	movi	r2,1
   10b94:	3881961e 	bne	r7,r2,111f0 <__muldf3+0x7c4>
   10b98:	3027883a 	mov	r19,r6
   10b9c:	0005883a 	mov	r2,zero
   10ba0:	0021883a 	mov	r16,zero
   10ba4:	002d883a 	mov	r22,zero
   10ba8:	1004953a 	slli	r2,r2,20
   10bac:	98c03fcc 	andi	r3,r19,255
   10bb0:	04400434 	movhi	r17,16
   10bb4:	8c7fffc4 	addi	r17,r17,-1
   10bb8:	180697fa 	slli	r3,r3,31
   10bbc:	8460703a 	and	r16,r16,r17
   10bc0:	80a0b03a 	or	r16,r16,r2
   10bc4:	80c6b03a 	or	r3,r16,r3
   10bc8:	b005883a 	mov	r2,r22
   10bcc:	dfc01117 	ldw	ra,68(sp)
   10bd0:	df001017 	ldw	fp,64(sp)
   10bd4:	ddc00f17 	ldw	r23,60(sp)
   10bd8:	dd800e17 	ldw	r22,56(sp)
   10bdc:	dd400d17 	ldw	r21,52(sp)
   10be0:	dd000c17 	ldw	r20,48(sp)
   10be4:	dcc00b17 	ldw	r19,44(sp)
   10be8:	dc800a17 	ldw	r18,40(sp)
   10bec:	dc400917 	ldw	r17,36(sp)
   10bf0:	dc000817 	ldw	r16,32(sp)
   10bf4:	dec01204 	addi	sp,sp,72
   10bf8:	f800283a 	ret
   10bfc:	2404b03a 	or	r2,r4,r16
   10c00:	202b883a 	mov	r21,r4
   10c04:	10004426 	beq	r2,zero,10d18 <__muldf3+0x2ec>
   10c08:	80015126 	beq	r16,zero,11150 <__muldf3+0x724>
   10c0c:	8009883a 	mov	r4,r16
   10c10:	d9800715 	stw	r6,28(sp)
   10c14:	d9c00215 	stw	r7,8(sp)
   10c18:	da400415 	stw	r9,16(sp)
   10c1c:	0011d980 	call	11d98 <__clzsi2>
   10c20:	d9800717 	ldw	r6,28(sp)
   10c24:	d9c00217 	ldw	r7,8(sp)
   10c28:	da400417 	ldw	r9,16(sp)
   10c2c:	113ffd44 	addi	r4,r2,-11
   10c30:	00c00704 	movi	r3,28
   10c34:	19014216 	blt	r3,r4,11140 <__muldf3+0x714>
   10c38:	00c00744 	movi	r3,29
   10c3c:	15bffe04 	addi	r22,r2,-8
   10c40:	1907c83a 	sub	r3,r3,r4
   10c44:	85a0983a 	sll	r16,r16,r22
   10c48:	a8c6d83a 	srl	r3,r21,r3
   10c4c:	adac983a 	sll	r22,r21,r22
   10c50:	1c20b03a 	or	r16,r3,r16
   10c54:	1080fcc4 	addi	r2,r2,1011
   10c58:	00a9c83a 	sub	r20,zero,r2
   10c5c:	002b883a 	mov	r21,zero
   10c60:	000b883a 	mov	r5,zero
   10c64:	003f9006 	br	10aa8 <__alt_mem_Onchip_SRAM+0xf8010aa8>
   10c68:	3446b03a 	or	r3,r6,r17
   10c6c:	1800281e 	bne	r3,zero,10d10 <__muldf3+0x2e4>
   10c70:	0023883a 	mov	r17,zero
   10c74:	0025883a 	mov	r18,zero
   10c78:	01c00084 	movi	r7,2
   10c7c:	003f9c06 	br	10af0 <__alt_mem_Onchip_SRAM+0xf8010af0>
   10c80:	3446b03a 	or	r3,r6,r17
   10c84:	18001e26 	beq	r3,zero,10d00 <__muldf3+0x2d4>
   10c88:	88012126 	beq	r17,zero,11110 <__muldf3+0x6e4>
   10c8c:	8809883a 	mov	r4,r17
   10c90:	d9400215 	stw	r5,8(sp)
   10c94:	d9800715 	stw	r6,28(sp)
   10c98:	da400415 	stw	r9,16(sp)
   10c9c:	da800315 	stw	r10,12(sp)
   10ca0:	0011d980 	call	11d98 <__clzsi2>
   10ca4:	d9400217 	ldw	r5,8(sp)
   10ca8:	d9800717 	ldw	r6,28(sp)
   10cac:	da400417 	ldw	r9,16(sp)
   10cb0:	da800317 	ldw	r10,12(sp)
   10cb4:	113ffd44 	addi	r4,r2,-11
   10cb8:	00c00704 	movi	r3,28
   10cbc:	19011016 	blt	r3,r4,11100 <__muldf3+0x6d4>
   10cc0:	00c00744 	movi	r3,29
   10cc4:	14bffe04 	addi	r18,r2,-8
   10cc8:	1907c83a 	sub	r3,r3,r4
   10ccc:	8ca2983a 	sll	r17,r17,r18
   10cd0:	30c6d83a 	srl	r3,r6,r3
   10cd4:	34a4983a 	sll	r18,r6,r18
   10cd8:	1c62b03a 	or	r17,r3,r17
   10cdc:	1080fcc4 	addi	r2,r2,1011
   10ce0:	0085c83a 	sub	r2,zero,r2
   10ce4:	000f883a 	mov	r7,zero
   10ce8:	003f8106 	br	10af0 <__alt_mem_Onchip_SRAM+0xf8010af0>
   10cec:	3027883a 	mov	r19,r6
   10cf0:	0081ffc4 	movi	r2,2047
   10cf4:	0021883a 	mov	r16,zero
   10cf8:	002d883a 	mov	r22,zero
   10cfc:	003faa06 	br	10ba8 <__alt_mem_Onchip_SRAM+0xf8010ba8>
   10d00:	0023883a 	mov	r17,zero
   10d04:	0025883a 	mov	r18,zero
   10d08:	01c00044 	movi	r7,1
   10d0c:	003f7806 	br	10af0 <__alt_mem_Onchip_SRAM+0xf8010af0>
   10d10:	01c000c4 	movi	r7,3
   10d14:	003f7606 	br	10af0 <__alt_mem_Onchip_SRAM+0xf8010af0>
   10d18:	05400104 	movi	r21,4
   10d1c:	0021883a 	mov	r16,zero
   10d20:	002d883a 	mov	r22,zero
   10d24:	01400044 	movi	r5,1
   10d28:	003f5f06 	br	10aa8 <__alt_mem_Onchip_SRAM+0xf8010aa8>
   10d2c:	05400304 	movi	r21,12
   10d30:	014000c4 	movi	r5,3
   10d34:	003f5c06 	br	10aa8 <__alt_mem_Onchip_SRAM+0xf8010aa8>
   10d38:	04000434 	movhi	r16,16
   10d3c:	0027883a 	mov	r19,zero
   10d40:	843fffc4 	addi	r16,r16,-1
   10d44:	05bfffc4 	movi	r22,-1
   10d48:	0081ffc4 	movi	r2,2047
   10d4c:	003f9606 	br	10ba8 <__alt_mem_Onchip_SRAM+0xf8010ba8>
   10d50:	8023883a 	mov	r17,r16
   10d54:	b025883a 	mov	r18,r22
   10d58:	280f883a 	mov	r7,r5
   10d5c:	003f8806 	br	10b80 <__alt_mem_Onchip_SRAM+0xf8010b80>
   10d60:	8023883a 	mov	r17,r16
   10d64:	b025883a 	mov	r18,r22
   10d68:	480d883a 	mov	r6,r9
   10d6c:	280f883a 	mov	r7,r5
   10d70:	003f8306 	br	10b80 <__alt_mem_Onchip_SRAM+0xf8010b80>
   10d74:	b026d43a 	srli	r19,r22,16
   10d78:	902ed43a 	srli	r23,r18,16
   10d7c:	b5bfffcc 	andi	r22,r22,65535
   10d80:	94bfffcc 	andi	r18,r18,65535
   10d84:	b00b883a 	mov	r5,r22
   10d88:	9009883a 	mov	r4,r18
   10d8c:	d8c00515 	stw	r3,20(sp)
   10d90:	d9800715 	stw	r6,28(sp)
   10d94:	da000615 	stw	r8,24(sp)
   10d98:	00015680 	call	1568 <__mulsi3>
   10d9c:	980b883a 	mov	r5,r19
   10da0:	9009883a 	mov	r4,r18
   10da4:	1029883a 	mov	r20,r2
   10da8:	00015680 	call	1568 <__mulsi3>
   10dac:	b80b883a 	mov	r5,r23
   10db0:	9809883a 	mov	r4,r19
   10db4:	102b883a 	mov	r21,r2
   10db8:	00015680 	call	1568 <__mulsi3>
   10dbc:	b809883a 	mov	r4,r23
   10dc0:	b00b883a 	mov	r5,r22
   10dc4:	1039883a 	mov	fp,r2
   10dc8:	00015680 	call	1568 <__mulsi3>
   10dcc:	a008d43a 	srli	r4,r20,16
   10dd0:	1545883a 	add	r2,r2,r21
   10dd4:	d8c00517 	ldw	r3,20(sp)
   10dd8:	2085883a 	add	r2,r4,r2
   10ddc:	d9800717 	ldw	r6,28(sp)
   10de0:	da000617 	ldw	r8,24(sp)
   10de4:	1540022e 	bgeu	r2,r21,10df0 <__muldf3+0x3c4>
   10de8:	01000074 	movhi	r4,1
   10dec:	e139883a 	add	fp,fp,r4
   10df0:	100e943a 	slli	r7,r2,16
   10df4:	1004d43a 	srli	r2,r2,16
   10df8:	882ad43a 	srli	r21,r17,16
   10dfc:	a53fffcc 	andi	r20,r20,65535
   10e00:	8c7fffcc 	andi	r17,r17,65535
   10e04:	3d29883a 	add	r20,r7,r20
   10e08:	b00b883a 	mov	r5,r22
   10e0c:	8809883a 	mov	r4,r17
   10e10:	d8c00515 	stw	r3,20(sp)
   10e14:	d9800715 	stw	r6,28(sp)
   10e18:	da000615 	stw	r8,24(sp)
   10e1c:	dd000115 	stw	r20,4(sp)
   10e20:	d8800015 	stw	r2,0(sp)
   10e24:	00015680 	call	1568 <__mulsi3>
   10e28:	980b883a 	mov	r5,r19
   10e2c:	8809883a 	mov	r4,r17
   10e30:	d8800215 	stw	r2,8(sp)
   10e34:	00015680 	call	1568 <__mulsi3>
   10e38:	9809883a 	mov	r4,r19
   10e3c:	a80b883a 	mov	r5,r21
   10e40:	1029883a 	mov	r20,r2
   10e44:	00015680 	call	1568 <__mulsi3>
   10e48:	b00b883a 	mov	r5,r22
   10e4c:	a809883a 	mov	r4,r21
   10e50:	d8800415 	stw	r2,16(sp)
   10e54:	00015680 	call	1568 <__mulsi3>
   10e58:	d9c00217 	ldw	r7,8(sp)
   10e5c:	1505883a 	add	r2,r2,r20
   10e60:	d8c00517 	ldw	r3,20(sp)
   10e64:	3826d43a 	srli	r19,r7,16
   10e68:	d9800717 	ldw	r6,28(sp)
   10e6c:	da000617 	ldw	r8,24(sp)
   10e70:	9885883a 	add	r2,r19,r2
   10e74:	da400417 	ldw	r9,16(sp)
   10e78:	1500022e 	bgeu	r2,r20,10e84 <__muldf3+0x458>
   10e7c:	01000074 	movhi	r4,1
   10e80:	4913883a 	add	r9,r9,r4
   10e84:	1028d43a 	srli	r20,r2,16
   10e88:	1004943a 	slli	r2,r2,16
   10e8c:	802cd43a 	srli	r22,r16,16
   10e90:	843fffcc 	andi	r16,r16,65535
   10e94:	3cffffcc 	andi	r19,r7,65535
   10e98:	9009883a 	mov	r4,r18
   10e9c:	800b883a 	mov	r5,r16
   10ea0:	a269883a 	add	r20,r20,r9
   10ea4:	d8c00515 	stw	r3,20(sp)
   10ea8:	d9800715 	stw	r6,28(sp)
   10eac:	da000615 	stw	r8,24(sp)
   10eb0:	14e7883a 	add	r19,r2,r19
   10eb4:	00015680 	call	1568 <__mulsi3>
   10eb8:	9009883a 	mov	r4,r18
   10ebc:	b00b883a 	mov	r5,r22
   10ec0:	d8800315 	stw	r2,12(sp)
   10ec4:	00015680 	call	1568 <__mulsi3>
   10ec8:	b809883a 	mov	r4,r23
   10ecc:	b00b883a 	mov	r5,r22
   10ed0:	d8800215 	stw	r2,8(sp)
   10ed4:	00015680 	call	1568 <__mulsi3>
   10ed8:	b80b883a 	mov	r5,r23
   10edc:	8009883a 	mov	r4,r16
   10ee0:	d8800415 	stw	r2,16(sp)
   10ee4:	00015680 	call	1568 <__mulsi3>
   10ee8:	da800317 	ldw	r10,12(sp)
   10eec:	d9c00217 	ldw	r7,8(sp)
   10ef0:	d9000017 	ldw	r4,0(sp)
   10ef4:	502ed43a 	srli	r23,r10,16
   10ef8:	11c5883a 	add	r2,r2,r7
   10efc:	24e5883a 	add	r18,r4,r19
   10f00:	b885883a 	add	r2,r23,r2
   10f04:	d8c00517 	ldw	r3,20(sp)
   10f08:	d9800717 	ldw	r6,28(sp)
   10f0c:	da000617 	ldw	r8,24(sp)
   10f10:	da400417 	ldw	r9,16(sp)
   10f14:	11c0022e 	bgeu	r2,r7,10f20 <__muldf3+0x4f4>
   10f18:	01000074 	movhi	r4,1
   10f1c:	4913883a 	add	r9,r9,r4
   10f20:	100ed43a 	srli	r7,r2,16
   10f24:	1004943a 	slli	r2,r2,16
   10f28:	55ffffcc 	andi	r23,r10,65535
   10f2c:	3a53883a 	add	r9,r7,r9
   10f30:	8809883a 	mov	r4,r17
   10f34:	800b883a 	mov	r5,r16
   10f38:	d8c00515 	stw	r3,20(sp)
   10f3c:	d9800715 	stw	r6,28(sp)
   10f40:	da000615 	stw	r8,24(sp)
   10f44:	da400415 	stw	r9,16(sp)
   10f48:	15ef883a 	add	r23,r2,r23
   10f4c:	00015680 	call	1568 <__mulsi3>
   10f50:	8809883a 	mov	r4,r17
   10f54:	b00b883a 	mov	r5,r22
   10f58:	d8800215 	stw	r2,8(sp)
   10f5c:	00015680 	call	1568 <__mulsi3>
   10f60:	b00b883a 	mov	r5,r22
   10f64:	a809883a 	mov	r4,r21
   10f68:	d8800315 	stw	r2,12(sp)
   10f6c:	00015680 	call	1568 <__mulsi3>
   10f70:	8009883a 	mov	r4,r16
   10f74:	a80b883a 	mov	r5,r21
   10f78:	1023883a 	mov	r17,r2
   10f7c:	00015680 	call	1568 <__mulsi3>
   10f80:	d9c00217 	ldw	r7,8(sp)
   10f84:	da800317 	ldw	r10,12(sp)
   10f88:	d8c00517 	ldw	r3,20(sp)
   10f8c:	3808d43a 	srli	r4,r7,16
   10f90:	1285883a 	add	r2,r2,r10
   10f94:	d9800717 	ldw	r6,28(sp)
   10f98:	2085883a 	add	r2,r4,r2
   10f9c:	da000617 	ldw	r8,24(sp)
   10fa0:	da400417 	ldw	r9,16(sp)
   10fa4:	1280022e 	bgeu	r2,r10,10fb0 <__muldf3+0x584>
   10fa8:	01000074 	movhi	r4,1
   10fac:	8923883a 	add	r17,r17,r4
   10fb0:	1008943a 	slli	r4,r2,16
   10fb4:	39ffffcc 	andi	r7,r7,65535
   10fb8:	e4b9883a 	add	fp,fp,r18
   10fbc:	21cf883a 	add	r7,r4,r7
   10fc0:	e4e7803a 	cmpltu	r19,fp,r19
   10fc4:	3d0f883a 	add	r7,r7,r20
   10fc8:	bf39883a 	add	fp,r23,fp
   10fcc:	99c9883a 	add	r4,r19,r7
   10fd0:	e5ef803a 	cmpltu	r23,fp,r23
   10fd4:	490b883a 	add	r5,r9,r4
   10fd8:	1004d43a 	srli	r2,r2,16
   10fdc:	b965883a 	add	r18,r23,r5
   10fe0:	24c9803a 	cmpltu	r4,r4,r19
   10fe4:	3d29803a 	cmpltu	r20,r7,r20
   10fe8:	a128b03a 	or	r20,r20,r4
   10fec:	95ef803a 	cmpltu	r23,r18,r23
   10ff0:	2a53803a 	cmpltu	r9,r5,r9
   10ff4:	a0a9883a 	add	r20,r20,r2
   10ff8:	4deeb03a 	or	r23,r9,r23
   10ffc:	a5ef883a 	add	r23,r20,r23
   11000:	bc63883a 	add	r17,r23,r17
   11004:	e004927a 	slli	r2,fp,9
   11008:	d9000117 	ldw	r4,4(sp)
   1100c:	882e927a 	slli	r23,r17,9
   11010:	9022d5fa 	srli	r17,r18,23
   11014:	e038d5fa 	srli	fp,fp,23
   11018:	1104b03a 	or	r2,r2,r4
   1101c:	9024927a 	slli	r18,r18,9
   11020:	1004c03a 	cmpne	r2,r2,zero
   11024:	bc62b03a 	or	r17,r23,r17
   11028:	1738b03a 	or	fp,r2,fp
   1102c:	8880402c 	andhi	r2,r17,256
   11030:	e4a4b03a 	or	r18,fp,r18
   11034:	10000726 	beq	r2,zero,11054 <__muldf3+0x628>
   11038:	9006d07a 	srli	r3,r18,1
   1103c:	880497fa 	slli	r2,r17,31
   11040:	9480004c 	andi	r18,r18,1
   11044:	8822d07a 	srli	r17,r17,1
   11048:	1ca4b03a 	or	r18,r3,r18
   1104c:	14a4b03a 	or	r18,r2,r18
   11050:	4007883a 	mov	r3,r8
   11054:	1880ffc4 	addi	r2,r3,1023
   11058:	0080460e 	bge	zero,r2,11174 <__muldf3+0x748>
   1105c:	910001cc 	andi	r4,r18,7
   11060:	20000726 	beq	r4,zero,11080 <__muldf3+0x654>
   11064:	910003cc 	andi	r4,r18,15
   11068:	01400104 	movi	r5,4
   1106c:	21400426 	beq	r4,r5,11080 <__muldf3+0x654>
   11070:	9149883a 	add	r4,r18,r5
   11074:	24a5803a 	cmpltu	r18,r4,r18
   11078:	8ca3883a 	add	r17,r17,r18
   1107c:	2025883a 	mov	r18,r4
   11080:	8900402c 	andhi	r4,r17,256
   11084:	20000426 	beq	r4,zero,11098 <__muldf3+0x66c>
   11088:	18810004 	addi	r2,r3,1024
   1108c:	00ffc034 	movhi	r3,65280
   11090:	18ffffc4 	addi	r3,r3,-1
   11094:	88e2703a 	and	r17,r17,r3
   11098:	00c1ff84 	movi	r3,2046
   1109c:	18bf1316 	blt	r3,r2,10cec <__alt_mem_Onchip_SRAM+0xf8010cec>
   110a0:	882c977a 	slli	r22,r17,29
   110a4:	9024d0fa 	srli	r18,r18,3
   110a8:	8822927a 	slli	r17,r17,9
   110ac:	1081ffcc 	andi	r2,r2,2047
   110b0:	b4acb03a 	or	r22,r22,r18
   110b4:	8820d33a 	srli	r16,r17,12
   110b8:	3027883a 	mov	r19,r6
   110bc:	003eba06 	br	10ba8 <__alt_mem_Onchip_SRAM+0xf8010ba8>
   110c0:	8080022c 	andhi	r2,r16,8
   110c4:	10000926 	beq	r2,zero,110ec <__muldf3+0x6c0>
   110c8:	8880022c 	andhi	r2,r17,8
   110cc:	1000071e 	bne	r2,zero,110ec <__muldf3+0x6c0>
   110d0:	00800434 	movhi	r2,16
   110d4:	8c000234 	orhi	r16,r17,8
   110d8:	10bfffc4 	addi	r2,r2,-1
   110dc:	e027883a 	mov	r19,fp
   110e0:	80a0703a 	and	r16,r16,r2
   110e4:	902d883a 	mov	r22,r18
   110e8:	003f1706 	br	10d48 <__alt_mem_Onchip_SRAM+0xf8010d48>
   110ec:	00800434 	movhi	r2,16
   110f0:	84000234 	orhi	r16,r16,8
   110f4:	10bfffc4 	addi	r2,r2,-1
   110f8:	80a0703a 	and	r16,r16,r2
   110fc:	003f1206 	br	10d48 <__alt_mem_Onchip_SRAM+0xf8010d48>
   11100:	147ff604 	addi	r17,r2,-40
   11104:	3462983a 	sll	r17,r6,r17
   11108:	0025883a 	mov	r18,zero
   1110c:	003ef306 	br	10cdc <__alt_mem_Onchip_SRAM+0xf8010cdc>
   11110:	3009883a 	mov	r4,r6
   11114:	d9400215 	stw	r5,8(sp)
   11118:	d9800715 	stw	r6,28(sp)
   1111c:	da400415 	stw	r9,16(sp)
   11120:	da800315 	stw	r10,12(sp)
   11124:	0011d980 	call	11d98 <__clzsi2>
   11128:	10800804 	addi	r2,r2,32
   1112c:	da800317 	ldw	r10,12(sp)
   11130:	da400417 	ldw	r9,16(sp)
   11134:	d9800717 	ldw	r6,28(sp)
   11138:	d9400217 	ldw	r5,8(sp)
   1113c:	003edd06 	br	10cb4 <__alt_mem_Onchip_SRAM+0xf8010cb4>
   11140:	143ff604 	addi	r16,r2,-40
   11144:	ac20983a 	sll	r16,r21,r16
   11148:	002d883a 	mov	r22,zero
   1114c:	003ec106 	br	10c54 <__alt_mem_Onchip_SRAM+0xf8010c54>
   11150:	d9800715 	stw	r6,28(sp)
   11154:	d9c00215 	stw	r7,8(sp)
   11158:	da400415 	stw	r9,16(sp)
   1115c:	0011d980 	call	11d98 <__clzsi2>
   11160:	10800804 	addi	r2,r2,32
   11164:	da400417 	ldw	r9,16(sp)
   11168:	d9c00217 	ldw	r7,8(sp)
   1116c:	d9800717 	ldw	r6,28(sp)
   11170:	003eae06 	br	10c2c <__alt_mem_Onchip_SRAM+0xf8010c2c>
   11174:	00c00044 	movi	r3,1
   11178:	1887c83a 	sub	r3,r3,r2
   1117c:	01000e04 	movi	r4,56
   11180:	20fe8516 	blt	r4,r3,10b98 <__alt_mem_Onchip_SRAM+0xf8010b98>
   11184:	010007c4 	movi	r4,31
   11188:	20c01b16 	blt	r4,r3,111f8 <__muldf3+0x7cc>
   1118c:	00800804 	movi	r2,32
   11190:	10c5c83a 	sub	r2,r2,r3
   11194:	888a983a 	sll	r5,r17,r2
   11198:	90c8d83a 	srl	r4,r18,r3
   1119c:	9084983a 	sll	r2,r18,r2
   111a0:	88e2d83a 	srl	r17,r17,r3
   111a4:	2906b03a 	or	r3,r5,r4
   111a8:	1004c03a 	cmpne	r2,r2,zero
   111ac:	1886b03a 	or	r3,r3,r2
   111b0:	188001cc 	andi	r2,r3,7
   111b4:	10000726 	beq	r2,zero,111d4 <__muldf3+0x7a8>
   111b8:	188003cc 	andi	r2,r3,15
   111bc:	01000104 	movi	r4,4
   111c0:	11000426 	beq	r2,r4,111d4 <__muldf3+0x7a8>
   111c4:	1805883a 	mov	r2,r3
   111c8:	10c00104 	addi	r3,r2,4
   111cc:	1885803a 	cmpltu	r2,r3,r2
   111d0:	88a3883a 	add	r17,r17,r2
   111d4:	8880202c 	andhi	r2,r17,128
   111d8:	10001c26 	beq	r2,zero,1124c <__muldf3+0x820>
   111dc:	3027883a 	mov	r19,r6
   111e0:	00800044 	movi	r2,1
   111e4:	0021883a 	mov	r16,zero
   111e8:	002d883a 	mov	r22,zero
   111ec:	003e6e06 	br	10ba8 <__alt_mem_Onchip_SRAM+0xf8010ba8>
   111f0:	4007883a 	mov	r3,r8
   111f4:	003f9706 	br	11054 <__alt_mem_Onchip_SRAM+0xf8011054>
   111f8:	017ff844 	movi	r5,-31
   111fc:	2885c83a 	sub	r2,r5,r2
   11200:	888ad83a 	srl	r5,r17,r2
   11204:	00800804 	movi	r2,32
   11208:	18801a26 	beq	r3,r2,11274 <__muldf3+0x848>
   1120c:	01001004 	movi	r4,64
   11210:	20c7c83a 	sub	r3,r4,r3
   11214:	88e2983a 	sll	r17,r17,r3
   11218:	8ca4b03a 	or	r18,r17,r18
   1121c:	9004c03a 	cmpne	r2,r18,zero
   11220:	2884b03a 	or	r2,r5,r2
   11224:	144001cc 	andi	r17,r2,7
   11228:	88000d1e 	bne	r17,zero,11260 <__muldf3+0x834>
   1122c:	0021883a 	mov	r16,zero
   11230:	102cd0fa 	srli	r22,r2,3
   11234:	3027883a 	mov	r19,r6
   11238:	0005883a 	mov	r2,zero
   1123c:	b46cb03a 	or	r22,r22,r17
   11240:	003e5906 	br	10ba8 <__alt_mem_Onchip_SRAM+0xf8010ba8>
   11244:	1007883a 	mov	r3,r2
   11248:	0023883a 	mov	r17,zero
   1124c:	8820927a 	slli	r16,r17,9
   11250:	1805883a 	mov	r2,r3
   11254:	8822977a 	slli	r17,r17,29
   11258:	8020d33a 	srli	r16,r16,12
   1125c:	003ff406 	br	11230 <__alt_mem_Onchip_SRAM+0xf8011230>
   11260:	10c003cc 	andi	r3,r2,15
   11264:	01000104 	movi	r4,4
   11268:	193ff626 	beq	r3,r4,11244 <__alt_mem_Onchip_SRAM+0xf8011244>
   1126c:	0023883a 	mov	r17,zero
   11270:	003fd506 	br	111c8 <__alt_mem_Onchip_SRAM+0xf80111c8>
   11274:	0023883a 	mov	r17,zero
   11278:	003fe706 	br	11218 <__alt_mem_Onchip_SRAM+0xf8011218>
   1127c:	00800434 	movhi	r2,16
   11280:	8c000234 	orhi	r16,r17,8
   11284:	10bfffc4 	addi	r2,r2,-1
   11288:	3027883a 	mov	r19,r6
   1128c:	80a0703a 	and	r16,r16,r2
   11290:	902d883a 	mov	r22,r18
   11294:	003eac06 	br	10d48 <__alt_mem_Onchip_SRAM+0xf8010d48>

00011298 <__subdf3>:
   11298:	02000434 	movhi	r8,16
   1129c:	423fffc4 	addi	r8,r8,-1
   112a0:	defffb04 	addi	sp,sp,-20
   112a4:	2a14703a 	and	r10,r5,r8
   112a8:	3812d53a 	srli	r9,r7,20
   112ac:	3a10703a 	and	r8,r7,r8
   112b0:	2006d77a 	srli	r3,r4,29
   112b4:	3004d77a 	srli	r2,r6,29
   112b8:	dc000015 	stw	r16,0(sp)
   112bc:	501490fa 	slli	r10,r10,3
   112c0:	2820d53a 	srli	r16,r5,20
   112c4:	401090fa 	slli	r8,r8,3
   112c8:	dc800215 	stw	r18,8(sp)
   112cc:	dc400115 	stw	r17,4(sp)
   112d0:	dfc00415 	stw	ra,16(sp)
   112d4:	202290fa 	slli	r17,r4,3
   112d8:	dcc00315 	stw	r19,12(sp)
   112dc:	4a41ffcc 	andi	r9,r9,2047
   112e0:	0101ffc4 	movi	r4,2047
   112e4:	2824d7fa 	srli	r18,r5,31
   112e8:	8401ffcc 	andi	r16,r16,2047
   112ec:	50c6b03a 	or	r3,r10,r3
   112f0:	380ed7fa 	srli	r7,r7,31
   112f4:	408ab03a 	or	r5,r8,r2
   112f8:	300c90fa 	slli	r6,r6,3
   112fc:	49009626 	beq	r9,r4,11558 <__subdf3+0x2c0>
   11300:	39c0005c 	xori	r7,r7,1
   11304:	8245c83a 	sub	r2,r16,r9
   11308:	3c807426 	beq	r7,r18,114dc <__subdf3+0x244>
   1130c:	0080af0e 	bge	zero,r2,115cc <__subdf3+0x334>
   11310:	48002a1e 	bne	r9,zero,113bc <__subdf3+0x124>
   11314:	2988b03a 	or	r4,r5,r6
   11318:	20009a1e 	bne	r4,zero,11584 <__subdf3+0x2ec>
   1131c:	888001cc 	andi	r2,r17,7
   11320:	10000726 	beq	r2,zero,11340 <__subdf3+0xa8>
   11324:	888003cc 	andi	r2,r17,15
   11328:	01000104 	movi	r4,4
   1132c:	11000426 	beq	r2,r4,11340 <__subdf3+0xa8>
   11330:	890b883a 	add	r5,r17,r4
   11334:	2c63803a 	cmpltu	r17,r5,r17
   11338:	1c47883a 	add	r3,r3,r17
   1133c:	2823883a 	mov	r17,r5
   11340:	1880202c 	andhi	r2,r3,128
   11344:	10005926 	beq	r2,zero,114ac <__subdf3+0x214>
   11348:	84000044 	addi	r16,r16,1
   1134c:	0081ffc4 	movi	r2,2047
   11350:	8080be26 	beq	r16,r2,1164c <__subdf3+0x3b4>
   11354:	017fe034 	movhi	r5,65408
   11358:	297fffc4 	addi	r5,r5,-1
   1135c:	1946703a 	and	r3,r3,r5
   11360:	1804977a 	slli	r2,r3,29
   11364:	1806927a 	slli	r3,r3,9
   11368:	8822d0fa 	srli	r17,r17,3
   1136c:	8401ffcc 	andi	r16,r16,2047
   11370:	180ad33a 	srli	r5,r3,12
   11374:	9100004c 	andi	r4,r18,1
   11378:	1444b03a 	or	r2,r2,r17
   1137c:	80c1ffcc 	andi	r3,r16,2047
   11380:	1820953a 	slli	r16,r3,20
   11384:	20c03fcc 	andi	r3,r4,255
   11388:	180897fa 	slli	r4,r3,31
   1138c:	00c00434 	movhi	r3,16
   11390:	18ffffc4 	addi	r3,r3,-1
   11394:	28c6703a 	and	r3,r5,r3
   11398:	1c06b03a 	or	r3,r3,r16
   1139c:	1906b03a 	or	r3,r3,r4
   113a0:	dfc00417 	ldw	ra,16(sp)
   113a4:	dcc00317 	ldw	r19,12(sp)
   113a8:	dc800217 	ldw	r18,8(sp)
   113ac:	dc400117 	ldw	r17,4(sp)
   113b0:	dc000017 	ldw	r16,0(sp)
   113b4:	dec00504 	addi	sp,sp,20
   113b8:	f800283a 	ret
   113bc:	0101ffc4 	movi	r4,2047
   113c0:	813fd626 	beq	r16,r4,1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   113c4:	29402034 	orhi	r5,r5,128
   113c8:	01000e04 	movi	r4,56
   113cc:	2080a316 	blt	r4,r2,1165c <__subdf3+0x3c4>
   113d0:	010007c4 	movi	r4,31
   113d4:	2080c616 	blt	r4,r2,116f0 <__subdf3+0x458>
   113d8:	01000804 	movi	r4,32
   113dc:	2089c83a 	sub	r4,r4,r2
   113e0:	2910983a 	sll	r8,r5,r4
   113e4:	308ed83a 	srl	r7,r6,r2
   113e8:	3108983a 	sll	r4,r6,r4
   113ec:	2884d83a 	srl	r2,r5,r2
   113f0:	41ccb03a 	or	r6,r8,r7
   113f4:	2008c03a 	cmpne	r4,r4,zero
   113f8:	310cb03a 	or	r6,r6,r4
   113fc:	898dc83a 	sub	r6,r17,r6
   11400:	89a3803a 	cmpltu	r17,r17,r6
   11404:	1887c83a 	sub	r3,r3,r2
   11408:	1c47c83a 	sub	r3,r3,r17
   1140c:	3023883a 	mov	r17,r6
   11410:	1880202c 	andhi	r2,r3,128
   11414:	10002326 	beq	r2,zero,114a4 <__subdf3+0x20c>
   11418:	04c02034 	movhi	r19,128
   1141c:	9cffffc4 	addi	r19,r19,-1
   11420:	1ce6703a 	and	r19,r3,r19
   11424:	98007a26 	beq	r19,zero,11610 <__subdf3+0x378>
   11428:	9809883a 	mov	r4,r19
   1142c:	0011d980 	call	11d98 <__clzsi2>
   11430:	113ffe04 	addi	r4,r2,-8
   11434:	00c007c4 	movi	r3,31
   11438:	19007b16 	blt	r3,r4,11628 <__subdf3+0x390>
   1143c:	00800804 	movi	r2,32
   11440:	1105c83a 	sub	r2,r2,r4
   11444:	8884d83a 	srl	r2,r17,r2
   11448:	9906983a 	sll	r3,r19,r4
   1144c:	8922983a 	sll	r17,r17,r4
   11450:	10c4b03a 	or	r2,r2,r3
   11454:	24007816 	blt	r4,r16,11638 <__subdf3+0x3a0>
   11458:	2421c83a 	sub	r16,r4,r16
   1145c:	80c00044 	addi	r3,r16,1
   11460:	010007c4 	movi	r4,31
   11464:	20c09516 	blt	r4,r3,116bc <__subdf3+0x424>
   11468:	01400804 	movi	r5,32
   1146c:	28cbc83a 	sub	r5,r5,r3
   11470:	88c8d83a 	srl	r4,r17,r3
   11474:	8962983a 	sll	r17,r17,r5
   11478:	114a983a 	sll	r5,r2,r5
   1147c:	10c6d83a 	srl	r3,r2,r3
   11480:	8804c03a 	cmpne	r2,r17,zero
   11484:	290ab03a 	or	r5,r5,r4
   11488:	28a2b03a 	or	r17,r5,r2
   1148c:	0021883a 	mov	r16,zero
   11490:	003fa206 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11494:	2090b03a 	or	r8,r4,r2
   11498:	40018e26 	beq	r8,zero,11ad4 <__subdf3+0x83c>
   1149c:	1007883a 	mov	r3,r2
   114a0:	2023883a 	mov	r17,r4
   114a4:	888001cc 	andi	r2,r17,7
   114a8:	103f9e1e 	bne	r2,zero,11324 <__alt_mem_Onchip_SRAM+0xf8011324>
   114ac:	1804977a 	slli	r2,r3,29
   114b0:	8822d0fa 	srli	r17,r17,3
   114b4:	1810d0fa 	srli	r8,r3,3
   114b8:	9100004c 	andi	r4,r18,1
   114bc:	1444b03a 	or	r2,r2,r17
   114c0:	00c1ffc4 	movi	r3,2047
   114c4:	80c02826 	beq	r16,r3,11568 <__subdf3+0x2d0>
   114c8:	01400434 	movhi	r5,16
   114cc:	297fffc4 	addi	r5,r5,-1
   114d0:	80e0703a 	and	r16,r16,r3
   114d4:	414a703a 	and	r5,r8,r5
   114d8:	003fa806 	br	1137c <__alt_mem_Onchip_SRAM+0xf801137c>
   114dc:	0080630e 	bge	zero,r2,1166c <__subdf3+0x3d4>
   114e0:	48003026 	beq	r9,zero,115a4 <__subdf3+0x30c>
   114e4:	0101ffc4 	movi	r4,2047
   114e8:	813f8c26 	beq	r16,r4,1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   114ec:	29402034 	orhi	r5,r5,128
   114f0:	01000e04 	movi	r4,56
   114f4:	2080a90e 	bge	r4,r2,1179c <__subdf3+0x504>
   114f8:	298cb03a 	or	r6,r5,r6
   114fc:	3012c03a 	cmpne	r9,r6,zero
   11500:	0005883a 	mov	r2,zero
   11504:	4c53883a 	add	r9,r9,r17
   11508:	4c63803a 	cmpltu	r17,r9,r17
   1150c:	10c7883a 	add	r3,r2,r3
   11510:	88c7883a 	add	r3,r17,r3
   11514:	4823883a 	mov	r17,r9
   11518:	1880202c 	andhi	r2,r3,128
   1151c:	1000d026 	beq	r2,zero,11860 <__subdf3+0x5c8>
   11520:	84000044 	addi	r16,r16,1
   11524:	0081ffc4 	movi	r2,2047
   11528:	8080fe26 	beq	r16,r2,11924 <__subdf3+0x68c>
   1152c:	00bfe034 	movhi	r2,65408
   11530:	10bfffc4 	addi	r2,r2,-1
   11534:	1886703a 	and	r3,r3,r2
   11538:	880ad07a 	srli	r5,r17,1
   1153c:	180497fa 	slli	r2,r3,31
   11540:	8900004c 	andi	r4,r17,1
   11544:	2922b03a 	or	r17,r5,r4
   11548:	1806d07a 	srli	r3,r3,1
   1154c:	1462b03a 	or	r17,r2,r17
   11550:	3825883a 	mov	r18,r7
   11554:	003f7106 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11558:	2984b03a 	or	r2,r5,r6
   1155c:	103f6826 	beq	r2,zero,11300 <__alt_mem_Onchip_SRAM+0xf8011300>
   11560:	39c03fcc 	andi	r7,r7,255
   11564:	003f6706 	br	11304 <__alt_mem_Onchip_SRAM+0xf8011304>
   11568:	4086b03a 	or	r3,r8,r2
   1156c:	18015226 	beq	r3,zero,11ab8 <__subdf3+0x820>
   11570:	00c00434 	movhi	r3,16
   11574:	41400234 	orhi	r5,r8,8
   11578:	18ffffc4 	addi	r3,r3,-1
   1157c:	28ca703a 	and	r5,r5,r3
   11580:	003f7e06 	br	1137c <__alt_mem_Onchip_SRAM+0xf801137c>
   11584:	10bfffc4 	addi	r2,r2,-1
   11588:	1000491e 	bne	r2,zero,116b0 <__subdf3+0x418>
   1158c:	898fc83a 	sub	r7,r17,r6
   11590:	89e3803a 	cmpltu	r17,r17,r7
   11594:	1947c83a 	sub	r3,r3,r5
   11598:	1c47c83a 	sub	r3,r3,r17
   1159c:	3823883a 	mov	r17,r7
   115a0:	003f9b06 	br	11410 <__alt_mem_Onchip_SRAM+0xf8011410>
   115a4:	2988b03a 	or	r4,r5,r6
   115a8:	203f5c26 	beq	r4,zero,1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   115ac:	10bfffc4 	addi	r2,r2,-1
   115b0:	1000931e 	bne	r2,zero,11800 <__subdf3+0x568>
   115b4:	898d883a 	add	r6,r17,r6
   115b8:	3463803a 	cmpltu	r17,r6,r17
   115bc:	1947883a 	add	r3,r3,r5
   115c0:	88c7883a 	add	r3,r17,r3
   115c4:	3023883a 	mov	r17,r6
   115c8:	003fd306 	br	11518 <__alt_mem_Onchip_SRAM+0xf8011518>
   115cc:	1000541e 	bne	r2,zero,11720 <__subdf3+0x488>
   115d0:	80800044 	addi	r2,r16,1
   115d4:	1081ffcc 	andi	r2,r2,2047
   115d8:	01000044 	movi	r4,1
   115dc:	2080a20e 	bge	r4,r2,11868 <__subdf3+0x5d0>
   115e0:	8989c83a 	sub	r4,r17,r6
   115e4:	8905803a 	cmpltu	r2,r17,r4
   115e8:	1967c83a 	sub	r19,r3,r5
   115ec:	98a7c83a 	sub	r19,r19,r2
   115f0:	9880202c 	andhi	r2,r19,128
   115f4:	10006326 	beq	r2,zero,11784 <__subdf3+0x4ec>
   115f8:	3463c83a 	sub	r17,r6,r17
   115fc:	28c7c83a 	sub	r3,r5,r3
   11600:	344d803a 	cmpltu	r6,r6,r17
   11604:	19a7c83a 	sub	r19,r3,r6
   11608:	3825883a 	mov	r18,r7
   1160c:	983f861e 	bne	r19,zero,11428 <__alt_mem_Onchip_SRAM+0xf8011428>
   11610:	8809883a 	mov	r4,r17
   11614:	0011d980 	call	11d98 <__clzsi2>
   11618:	10800804 	addi	r2,r2,32
   1161c:	113ffe04 	addi	r4,r2,-8
   11620:	00c007c4 	movi	r3,31
   11624:	193f850e 	bge	r3,r4,1143c <__alt_mem_Onchip_SRAM+0xf801143c>
   11628:	10bff604 	addi	r2,r2,-40
   1162c:	8884983a 	sll	r2,r17,r2
   11630:	0023883a 	mov	r17,zero
   11634:	243f880e 	bge	r4,r16,11458 <__alt_mem_Onchip_SRAM+0xf8011458>
   11638:	00ffe034 	movhi	r3,65408
   1163c:	18ffffc4 	addi	r3,r3,-1
   11640:	8121c83a 	sub	r16,r16,r4
   11644:	10c6703a 	and	r3,r2,r3
   11648:	003f3406 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   1164c:	9100004c 	andi	r4,r18,1
   11650:	000b883a 	mov	r5,zero
   11654:	0005883a 	mov	r2,zero
   11658:	003f4806 	br	1137c <__alt_mem_Onchip_SRAM+0xf801137c>
   1165c:	298cb03a 	or	r6,r5,r6
   11660:	300cc03a 	cmpne	r6,r6,zero
   11664:	0005883a 	mov	r2,zero
   11668:	003f6406 	br	113fc <__alt_mem_Onchip_SRAM+0xf80113fc>
   1166c:	10009a1e 	bne	r2,zero,118d8 <__subdf3+0x640>
   11670:	82400044 	addi	r9,r16,1
   11674:	4881ffcc 	andi	r2,r9,2047
   11678:	02800044 	movi	r10,1
   1167c:	5080670e 	bge	r10,r2,1181c <__subdf3+0x584>
   11680:	0081ffc4 	movi	r2,2047
   11684:	4880af26 	beq	r9,r2,11944 <__subdf3+0x6ac>
   11688:	898d883a 	add	r6,r17,r6
   1168c:	1945883a 	add	r2,r3,r5
   11690:	3447803a 	cmpltu	r3,r6,r17
   11694:	1887883a 	add	r3,r3,r2
   11698:	182297fa 	slli	r17,r3,31
   1169c:	300cd07a 	srli	r6,r6,1
   116a0:	1806d07a 	srli	r3,r3,1
   116a4:	4821883a 	mov	r16,r9
   116a8:	89a2b03a 	or	r17,r17,r6
   116ac:	003f1b06 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   116b0:	0101ffc4 	movi	r4,2047
   116b4:	813f441e 	bne	r16,r4,113c8 <__alt_mem_Onchip_SRAM+0xf80113c8>
   116b8:	003f1806 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   116bc:	843ff844 	addi	r16,r16,-31
   116c0:	01400804 	movi	r5,32
   116c4:	1408d83a 	srl	r4,r2,r16
   116c8:	19405026 	beq	r3,r5,1180c <__subdf3+0x574>
   116cc:	01401004 	movi	r5,64
   116d0:	28c7c83a 	sub	r3,r5,r3
   116d4:	10c4983a 	sll	r2,r2,r3
   116d8:	88a2b03a 	or	r17,r17,r2
   116dc:	8822c03a 	cmpne	r17,r17,zero
   116e0:	2462b03a 	or	r17,r4,r17
   116e4:	0007883a 	mov	r3,zero
   116e8:	0021883a 	mov	r16,zero
   116ec:	003f6d06 	br	114a4 <__alt_mem_Onchip_SRAM+0xf80114a4>
   116f0:	11fff804 	addi	r7,r2,-32
   116f4:	01000804 	movi	r4,32
   116f8:	29ced83a 	srl	r7,r5,r7
   116fc:	11004526 	beq	r2,r4,11814 <__subdf3+0x57c>
   11700:	01001004 	movi	r4,64
   11704:	2089c83a 	sub	r4,r4,r2
   11708:	2904983a 	sll	r2,r5,r4
   1170c:	118cb03a 	or	r6,r2,r6
   11710:	300cc03a 	cmpne	r6,r6,zero
   11714:	398cb03a 	or	r6,r7,r6
   11718:	0005883a 	mov	r2,zero
   1171c:	003f3706 	br	113fc <__alt_mem_Onchip_SRAM+0xf80113fc>
   11720:	80002a26 	beq	r16,zero,117cc <__subdf3+0x534>
   11724:	0101ffc4 	movi	r4,2047
   11728:	49006626 	beq	r9,r4,118c4 <__subdf3+0x62c>
   1172c:	0085c83a 	sub	r2,zero,r2
   11730:	18c02034 	orhi	r3,r3,128
   11734:	01000e04 	movi	r4,56
   11738:	20807e16 	blt	r4,r2,11934 <__subdf3+0x69c>
   1173c:	010007c4 	movi	r4,31
   11740:	2080e716 	blt	r4,r2,11ae0 <__subdf3+0x848>
   11744:	01000804 	movi	r4,32
   11748:	2089c83a 	sub	r4,r4,r2
   1174c:	1914983a 	sll	r10,r3,r4
   11750:	8890d83a 	srl	r8,r17,r2
   11754:	8908983a 	sll	r4,r17,r4
   11758:	1884d83a 	srl	r2,r3,r2
   1175c:	5222b03a 	or	r17,r10,r8
   11760:	2006c03a 	cmpne	r3,r4,zero
   11764:	88e2b03a 	or	r17,r17,r3
   11768:	3463c83a 	sub	r17,r6,r17
   1176c:	2885c83a 	sub	r2,r5,r2
   11770:	344d803a 	cmpltu	r6,r6,r17
   11774:	1187c83a 	sub	r3,r2,r6
   11778:	4821883a 	mov	r16,r9
   1177c:	3825883a 	mov	r18,r7
   11780:	003f2306 	br	11410 <__alt_mem_Onchip_SRAM+0xf8011410>
   11784:	24d0b03a 	or	r8,r4,r19
   11788:	40001b1e 	bne	r8,zero,117f8 <__subdf3+0x560>
   1178c:	0005883a 	mov	r2,zero
   11790:	0009883a 	mov	r4,zero
   11794:	0021883a 	mov	r16,zero
   11798:	003f4906 	br	114c0 <__alt_mem_Onchip_SRAM+0xf80114c0>
   1179c:	010007c4 	movi	r4,31
   117a0:	20803a16 	blt	r4,r2,1188c <__subdf3+0x5f4>
   117a4:	01000804 	movi	r4,32
   117a8:	2089c83a 	sub	r4,r4,r2
   117ac:	2912983a 	sll	r9,r5,r4
   117b0:	3090d83a 	srl	r8,r6,r2
   117b4:	3108983a 	sll	r4,r6,r4
   117b8:	2884d83a 	srl	r2,r5,r2
   117bc:	4a12b03a 	or	r9,r9,r8
   117c0:	2008c03a 	cmpne	r4,r4,zero
   117c4:	4912b03a 	or	r9,r9,r4
   117c8:	003f4e06 	br	11504 <__alt_mem_Onchip_SRAM+0xf8011504>
   117cc:	1c48b03a 	or	r4,r3,r17
   117d0:	20003c26 	beq	r4,zero,118c4 <__subdf3+0x62c>
   117d4:	0084303a 	nor	r2,zero,r2
   117d8:	1000381e 	bne	r2,zero,118bc <__subdf3+0x624>
   117dc:	3463c83a 	sub	r17,r6,r17
   117e0:	28c5c83a 	sub	r2,r5,r3
   117e4:	344d803a 	cmpltu	r6,r6,r17
   117e8:	1187c83a 	sub	r3,r2,r6
   117ec:	4821883a 	mov	r16,r9
   117f0:	3825883a 	mov	r18,r7
   117f4:	003f0606 	br	11410 <__alt_mem_Onchip_SRAM+0xf8011410>
   117f8:	2023883a 	mov	r17,r4
   117fc:	003f0906 	br	11424 <__alt_mem_Onchip_SRAM+0xf8011424>
   11800:	0101ffc4 	movi	r4,2047
   11804:	813f3a1e 	bne	r16,r4,114f0 <__alt_mem_Onchip_SRAM+0xf80114f0>
   11808:	003ec406 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   1180c:	0005883a 	mov	r2,zero
   11810:	003fb106 	br	116d8 <__alt_mem_Onchip_SRAM+0xf80116d8>
   11814:	0005883a 	mov	r2,zero
   11818:	003fbc06 	br	1170c <__alt_mem_Onchip_SRAM+0xf801170c>
   1181c:	1c44b03a 	or	r2,r3,r17
   11820:	80008e1e 	bne	r16,zero,11a5c <__subdf3+0x7c4>
   11824:	1000c826 	beq	r2,zero,11b48 <__subdf3+0x8b0>
   11828:	2984b03a 	or	r2,r5,r6
   1182c:	103ebb26 	beq	r2,zero,1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11830:	8989883a 	add	r4,r17,r6
   11834:	1945883a 	add	r2,r3,r5
   11838:	2447803a 	cmpltu	r3,r4,r17
   1183c:	1887883a 	add	r3,r3,r2
   11840:	1880202c 	andhi	r2,r3,128
   11844:	2023883a 	mov	r17,r4
   11848:	103f1626 	beq	r2,zero,114a4 <__alt_mem_Onchip_SRAM+0xf80114a4>
   1184c:	00bfe034 	movhi	r2,65408
   11850:	10bfffc4 	addi	r2,r2,-1
   11854:	5021883a 	mov	r16,r10
   11858:	1886703a 	and	r3,r3,r2
   1185c:	003eaf06 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11860:	3825883a 	mov	r18,r7
   11864:	003f0f06 	br	114a4 <__alt_mem_Onchip_SRAM+0xf80114a4>
   11868:	1c44b03a 	or	r2,r3,r17
   1186c:	8000251e 	bne	r16,zero,11904 <__subdf3+0x66c>
   11870:	1000661e 	bne	r2,zero,11a0c <__subdf3+0x774>
   11874:	2990b03a 	or	r8,r5,r6
   11878:	40009626 	beq	r8,zero,11ad4 <__subdf3+0x83c>
   1187c:	2807883a 	mov	r3,r5
   11880:	3023883a 	mov	r17,r6
   11884:	3825883a 	mov	r18,r7
   11888:	003ea406 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   1188c:	127ff804 	addi	r9,r2,-32
   11890:	01000804 	movi	r4,32
   11894:	2a52d83a 	srl	r9,r5,r9
   11898:	11008c26 	beq	r2,r4,11acc <__subdf3+0x834>
   1189c:	01001004 	movi	r4,64
   118a0:	2085c83a 	sub	r2,r4,r2
   118a4:	2884983a 	sll	r2,r5,r2
   118a8:	118cb03a 	or	r6,r2,r6
   118ac:	300cc03a 	cmpne	r6,r6,zero
   118b0:	4992b03a 	or	r9,r9,r6
   118b4:	0005883a 	mov	r2,zero
   118b8:	003f1206 	br	11504 <__alt_mem_Onchip_SRAM+0xf8011504>
   118bc:	0101ffc4 	movi	r4,2047
   118c0:	493f9c1e 	bne	r9,r4,11734 <__alt_mem_Onchip_SRAM+0xf8011734>
   118c4:	2807883a 	mov	r3,r5
   118c8:	3023883a 	mov	r17,r6
   118cc:	4821883a 	mov	r16,r9
   118d0:	3825883a 	mov	r18,r7
   118d4:	003e9106 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   118d8:	80001f1e 	bne	r16,zero,11958 <__subdf3+0x6c0>
   118dc:	1c48b03a 	or	r4,r3,r17
   118e0:	20005a26 	beq	r4,zero,11a4c <__subdf3+0x7b4>
   118e4:	0084303a 	nor	r2,zero,r2
   118e8:	1000561e 	bne	r2,zero,11a44 <__subdf3+0x7ac>
   118ec:	89a3883a 	add	r17,r17,r6
   118f0:	1945883a 	add	r2,r3,r5
   118f4:	898d803a 	cmpltu	r6,r17,r6
   118f8:	3087883a 	add	r3,r6,r2
   118fc:	4821883a 	mov	r16,r9
   11900:	003f0506 	br	11518 <__alt_mem_Onchip_SRAM+0xf8011518>
   11904:	10002b1e 	bne	r2,zero,119b4 <__subdf3+0x71c>
   11908:	2984b03a 	or	r2,r5,r6
   1190c:	10008026 	beq	r2,zero,11b10 <__subdf3+0x878>
   11910:	2807883a 	mov	r3,r5
   11914:	3023883a 	mov	r17,r6
   11918:	3825883a 	mov	r18,r7
   1191c:	0401ffc4 	movi	r16,2047
   11920:	003e7e06 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11924:	3809883a 	mov	r4,r7
   11928:	0011883a 	mov	r8,zero
   1192c:	0005883a 	mov	r2,zero
   11930:	003ee306 	br	114c0 <__alt_mem_Onchip_SRAM+0xf80114c0>
   11934:	1c62b03a 	or	r17,r3,r17
   11938:	8822c03a 	cmpne	r17,r17,zero
   1193c:	0005883a 	mov	r2,zero
   11940:	003f8906 	br	11768 <__alt_mem_Onchip_SRAM+0xf8011768>
   11944:	3809883a 	mov	r4,r7
   11948:	4821883a 	mov	r16,r9
   1194c:	0011883a 	mov	r8,zero
   11950:	0005883a 	mov	r2,zero
   11954:	003eda06 	br	114c0 <__alt_mem_Onchip_SRAM+0xf80114c0>
   11958:	0101ffc4 	movi	r4,2047
   1195c:	49003b26 	beq	r9,r4,11a4c <__subdf3+0x7b4>
   11960:	0085c83a 	sub	r2,zero,r2
   11964:	18c02034 	orhi	r3,r3,128
   11968:	01000e04 	movi	r4,56
   1196c:	20806e16 	blt	r4,r2,11b28 <__subdf3+0x890>
   11970:	010007c4 	movi	r4,31
   11974:	20807716 	blt	r4,r2,11b54 <__subdf3+0x8bc>
   11978:	01000804 	movi	r4,32
   1197c:	2089c83a 	sub	r4,r4,r2
   11980:	1914983a 	sll	r10,r3,r4
   11984:	8890d83a 	srl	r8,r17,r2
   11988:	8908983a 	sll	r4,r17,r4
   1198c:	1884d83a 	srl	r2,r3,r2
   11990:	5222b03a 	or	r17,r10,r8
   11994:	2006c03a 	cmpne	r3,r4,zero
   11998:	88e2b03a 	or	r17,r17,r3
   1199c:	89a3883a 	add	r17,r17,r6
   119a0:	1145883a 	add	r2,r2,r5
   119a4:	898d803a 	cmpltu	r6,r17,r6
   119a8:	3087883a 	add	r3,r6,r2
   119ac:	4821883a 	mov	r16,r9
   119b0:	003ed906 	br	11518 <__alt_mem_Onchip_SRAM+0xf8011518>
   119b4:	2984b03a 	or	r2,r5,r6
   119b8:	10004226 	beq	r2,zero,11ac4 <__subdf3+0x82c>
   119bc:	1808d0fa 	srli	r4,r3,3
   119c0:	8822d0fa 	srli	r17,r17,3
   119c4:	1806977a 	slli	r3,r3,29
   119c8:	2080022c 	andhi	r2,r4,8
   119cc:	1c62b03a 	or	r17,r3,r17
   119d0:	10000826 	beq	r2,zero,119f4 <__subdf3+0x75c>
   119d4:	2812d0fa 	srli	r9,r5,3
   119d8:	4880022c 	andhi	r2,r9,8
   119dc:	1000051e 	bne	r2,zero,119f4 <__subdf3+0x75c>
   119e0:	300cd0fa 	srli	r6,r6,3
   119e4:	2804977a 	slli	r2,r5,29
   119e8:	4809883a 	mov	r4,r9
   119ec:	3825883a 	mov	r18,r7
   119f0:	11a2b03a 	or	r17,r2,r6
   119f4:	8806d77a 	srli	r3,r17,29
   119f8:	200890fa 	slli	r4,r4,3
   119fc:	882290fa 	slli	r17,r17,3
   11a00:	0401ffc4 	movi	r16,2047
   11a04:	1906b03a 	or	r3,r3,r4
   11a08:	003e4406 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11a0c:	2984b03a 	or	r2,r5,r6
   11a10:	103e4226 	beq	r2,zero,1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11a14:	8989c83a 	sub	r4,r17,r6
   11a18:	8911803a 	cmpltu	r8,r17,r4
   11a1c:	1945c83a 	sub	r2,r3,r5
   11a20:	1205c83a 	sub	r2,r2,r8
   11a24:	1200202c 	andhi	r8,r2,128
   11a28:	403e9a26 	beq	r8,zero,11494 <__alt_mem_Onchip_SRAM+0xf8011494>
   11a2c:	3463c83a 	sub	r17,r6,r17
   11a30:	28c5c83a 	sub	r2,r5,r3
   11a34:	344d803a 	cmpltu	r6,r6,r17
   11a38:	1187c83a 	sub	r3,r2,r6
   11a3c:	3825883a 	mov	r18,r7
   11a40:	003e3606 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11a44:	0101ffc4 	movi	r4,2047
   11a48:	493fc71e 	bne	r9,r4,11968 <__alt_mem_Onchip_SRAM+0xf8011968>
   11a4c:	2807883a 	mov	r3,r5
   11a50:	3023883a 	mov	r17,r6
   11a54:	4821883a 	mov	r16,r9
   11a58:	003e3006 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11a5c:	10003626 	beq	r2,zero,11b38 <__subdf3+0x8a0>
   11a60:	2984b03a 	or	r2,r5,r6
   11a64:	10001726 	beq	r2,zero,11ac4 <__subdf3+0x82c>
   11a68:	1808d0fa 	srli	r4,r3,3
   11a6c:	8822d0fa 	srli	r17,r17,3
   11a70:	1806977a 	slli	r3,r3,29
   11a74:	2080022c 	andhi	r2,r4,8
   11a78:	1c62b03a 	or	r17,r3,r17
   11a7c:	10000726 	beq	r2,zero,11a9c <__subdf3+0x804>
   11a80:	2812d0fa 	srli	r9,r5,3
   11a84:	4880022c 	andhi	r2,r9,8
   11a88:	1000041e 	bne	r2,zero,11a9c <__subdf3+0x804>
   11a8c:	300cd0fa 	srli	r6,r6,3
   11a90:	2804977a 	slli	r2,r5,29
   11a94:	4809883a 	mov	r4,r9
   11a98:	11a2b03a 	or	r17,r2,r6
   11a9c:	8806d77a 	srli	r3,r17,29
   11aa0:	200890fa 	slli	r4,r4,3
   11aa4:	882290fa 	slli	r17,r17,3
   11aa8:	3825883a 	mov	r18,r7
   11aac:	1906b03a 	or	r3,r3,r4
   11ab0:	0401ffc4 	movi	r16,2047
   11ab4:	003e1906 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11ab8:	000b883a 	mov	r5,zero
   11abc:	0005883a 	mov	r2,zero
   11ac0:	003e2e06 	br	1137c <__alt_mem_Onchip_SRAM+0xf801137c>
   11ac4:	0401ffc4 	movi	r16,2047
   11ac8:	003e1406 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11acc:	0005883a 	mov	r2,zero
   11ad0:	003f7506 	br	118a8 <__alt_mem_Onchip_SRAM+0xf80118a8>
   11ad4:	0005883a 	mov	r2,zero
   11ad8:	0009883a 	mov	r4,zero
   11adc:	003e7806 	br	114c0 <__alt_mem_Onchip_SRAM+0xf80114c0>
   11ae0:	123ff804 	addi	r8,r2,-32
   11ae4:	01000804 	movi	r4,32
   11ae8:	1a10d83a 	srl	r8,r3,r8
   11aec:	11002526 	beq	r2,r4,11b84 <__subdf3+0x8ec>
   11af0:	01001004 	movi	r4,64
   11af4:	2085c83a 	sub	r2,r4,r2
   11af8:	1884983a 	sll	r2,r3,r2
   11afc:	1444b03a 	or	r2,r2,r17
   11b00:	1004c03a 	cmpne	r2,r2,zero
   11b04:	40a2b03a 	or	r17,r8,r2
   11b08:	0005883a 	mov	r2,zero
   11b0c:	003f1606 	br	11768 <__alt_mem_Onchip_SRAM+0xf8011768>
   11b10:	02000434 	movhi	r8,16
   11b14:	0009883a 	mov	r4,zero
   11b18:	423fffc4 	addi	r8,r8,-1
   11b1c:	00bfffc4 	movi	r2,-1
   11b20:	0401ffc4 	movi	r16,2047
   11b24:	003e6606 	br	114c0 <__alt_mem_Onchip_SRAM+0xf80114c0>
   11b28:	1c62b03a 	or	r17,r3,r17
   11b2c:	8822c03a 	cmpne	r17,r17,zero
   11b30:	0005883a 	mov	r2,zero
   11b34:	003f9906 	br	1199c <__alt_mem_Onchip_SRAM+0xf801199c>
   11b38:	2807883a 	mov	r3,r5
   11b3c:	3023883a 	mov	r17,r6
   11b40:	0401ffc4 	movi	r16,2047
   11b44:	003df506 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11b48:	2807883a 	mov	r3,r5
   11b4c:	3023883a 	mov	r17,r6
   11b50:	003df206 	br	1131c <__alt_mem_Onchip_SRAM+0xf801131c>
   11b54:	123ff804 	addi	r8,r2,-32
   11b58:	01000804 	movi	r4,32
   11b5c:	1a10d83a 	srl	r8,r3,r8
   11b60:	11000a26 	beq	r2,r4,11b8c <__subdf3+0x8f4>
   11b64:	01001004 	movi	r4,64
   11b68:	2085c83a 	sub	r2,r4,r2
   11b6c:	1884983a 	sll	r2,r3,r2
   11b70:	1444b03a 	or	r2,r2,r17
   11b74:	1004c03a 	cmpne	r2,r2,zero
   11b78:	40a2b03a 	or	r17,r8,r2
   11b7c:	0005883a 	mov	r2,zero
   11b80:	003f8606 	br	1199c <__alt_mem_Onchip_SRAM+0xf801199c>
   11b84:	0005883a 	mov	r2,zero
   11b88:	003fdc06 	br	11afc <__alt_mem_Onchip_SRAM+0xf8011afc>
   11b8c:	0005883a 	mov	r2,zero
   11b90:	003ff706 	br	11b70 <__alt_mem_Onchip_SRAM+0xf8011b70>

00011b94 <__fixdfsi>:
   11b94:	280cd53a 	srli	r6,r5,20
   11b98:	00c00434 	movhi	r3,16
   11b9c:	18ffffc4 	addi	r3,r3,-1
   11ba0:	3181ffcc 	andi	r6,r6,2047
   11ba4:	01c0ff84 	movi	r7,1022
   11ba8:	28c6703a 	and	r3,r5,r3
   11bac:	280ad7fa 	srli	r5,r5,31
   11bb0:	3980120e 	bge	r7,r6,11bfc <__fixdfsi+0x68>
   11bb4:	00810744 	movi	r2,1053
   11bb8:	11800c16 	blt	r2,r6,11bec <__fixdfsi+0x58>
   11bbc:	00810cc4 	movi	r2,1075
   11bc0:	1185c83a 	sub	r2,r2,r6
   11bc4:	01c007c4 	movi	r7,31
   11bc8:	18c00434 	orhi	r3,r3,16
   11bcc:	38800d16 	blt	r7,r2,11c04 <__fixdfsi+0x70>
   11bd0:	31befb44 	addi	r6,r6,-1043
   11bd4:	2084d83a 	srl	r2,r4,r2
   11bd8:	1986983a 	sll	r3,r3,r6
   11bdc:	1884b03a 	or	r2,r3,r2
   11be0:	28000726 	beq	r5,zero,11c00 <__fixdfsi+0x6c>
   11be4:	0085c83a 	sub	r2,zero,r2
   11be8:	f800283a 	ret
   11bec:	00a00034 	movhi	r2,32768
   11bf0:	10bfffc4 	addi	r2,r2,-1
   11bf4:	2885883a 	add	r2,r5,r2
   11bf8:	f800283a 	ret
   11bfc:	0005883a 	mov	r2,zero
   11c00:	f800283a 	ret
   11c04:	008104c4 	movi	r2,1043
   11c08:	1185c83a 	sub	r2,r2,r6
   11c0c:	1884d83a 	srl	r2,r3,r2
   11c10:	003ff306 	br	11be0 <__alt_mem_Onchip_SRAM+0xf8011be0>

00011c14 <__floatsidf>:
   11c14:	defffd04 	addi	sp,sp,-12
   11c18:	dfc00215 	stw	ra,8(sp)
   11c1c:	dc400115 	stw	r17,4(sp)
   11c20:	dc000015 	stw	r16,0(sp)
   11c24:	20002b26 	beq	r4,zero,11cd4 <__floatsidf+0xc0>
   11c28:	2023883a 	mov	r17,r4
   11c2c:	2020d7fa 	srli	r16,r4,31
   11c30:	20002d16 	blt	r4,zero,11ce8 <__floatsidf+0xd4>
   11c34:	8809883a 	mov	r4,r17
   11c38:	0011d980 	call	11d98 <__clzsi2>
   11c3c:	01410784 	movi	r5,1054
   11c40:	288bc83a 	sub	r5,r5,r2
   11c44:	01010cc4 	movi	r4,1075
   11c48:	2149c83a 	sub	r4,r4,r5
   11c4c:	00c007c4 	movi	r3,31
   11c50:	1900160e 	bge	r3,r4,11cac <__floatsidf+0x98>
   11c54:	00c104c4 	movi	r3,1043
   11c58:	1947c83a 	sub	r3,r3,r5
   11c5c:	88c6983a 	sll	r3,r17,r3
   11c60:	00800434 	movhi	r2,16
   11c64:	10bfffc4 	addi	r2,r2,-1
   11c68:	1886703a 	and	r3,r3,r2
   11c6c:	2941ffcc 	andi	r5,r5,2047
   11c70:	800d883a 	mov	r6,r16
   11c74:	0005883a 	mov	r2,zero
   11c78:	280a953a 	slli	r5,r5,20
   11c7c:	31803fcc 	andi	r6,r6,255
   11c80:	01000434 	movhi	r4,16
   11c84:	300c97fa 	slli	r6,r6,31
   11c88:	213fffc4 	addi	r4,r4,-1
   11c8c:	1906703a 	and	r3,r3,r4
   11c90:	1946b03a 	or	r3,r3,r5
   11c94:	1986b03a 	or	r3,r3,r6
   11c98:	dfc00217 	ldw	ra,8(sp)
   11c9c:	dc400117 	ldw	r17,4(sp)
   11ca0:	dc000017 	ldw	r16,0(sp)
   11ca4:	dec00304 	addi	sp,sp,12
   11ca8:	f800283a 	ret
   11cac:	00c002c4 	movi	r3,11
   11cb0:	1887c83a 	sub	r3,r3,r2
   11cb4:	88c6d83a 	srl	r3,r17,r3
   11cb8:	8904983a 	sll	r2,r17,r4
   11cbc:	01000434 	movhi	r4,16
   11cc0:	213fffc4 	addi	r4,r4,-1
   11cc4:	2941ffcc 	andi	r5,r5,2047
   11cc8:	1906703a 	and	r3,r3,r4
   11ccc:	800d883a 	mov	r6,r16
   11cd0:	003fe906 	br	11c78 <__alt_mem_Onchip_SRAM+0xf8011c78>
   11cd4:	000d883a 	mov	r6,zero
   11cd8:	000b883a 	mov	r5,zero
   11cdc:	0007883a 	mov	r3,zero
   11ce0:	0005883a 	mov	r2,zero
   11ce4:	003fe406 	br	11c78 <__alt_mem_Onchip_SRAM+0xf8011c78>
   11ce8:	0123c83a 	sub	r17,zero,r4
   11cec:	003fd106 	br	11c34 <__alt_mem_Onchip_SRAM+0xf8011c34>

00011cf0 <__floatunsidf>:
   11cf0:	defffe04 	addi	sp,sp,-8
   11cf4:	dc000015 	stw	r16,0(sp)
   11cf8:	dfc00115 	stw	ra,4(sp)
   11cfc:	2021883a 	mov	r16,r4
   11d00:	20002226 	beq	r4,zero,11d8c <__floatunsidf+0x9c>
   11d04:	0011d980 	call	11d98 <__clzsi2>
   11d08:	01010784 	movi	r4,1054
   11d0c:	2089c83a 	sub	r4,r4,r2
   11d10:	01810cc4 	movi	r6,1075
   11d14:	310dc83a 	sub	r6,r6,r4
   11d18:	00c007c4 	movi	r3,31
   11d1c:	1980120e 	bge	r3,r6,11d68 <__floatunsidf+0x78>
   11d20:	00c104c4 	movi	r3,1043
   11d24:	1907c83a 	sub	r3,r3,r4
   11d28:	80ca983a 	sll	r5,r16,r3
   11d2c:	00800434 	movhi	r2,16
   11d30:	10bfffc4 	addi	r2,r2,-1
   11d34:	2101ffcc 	andi	r4,r4,2047
   11d38:	0021883a 	mov	r16,zero
   11d3c:	288a703a 	and	r5,r5,r2
   11d40:	2008953a 	slli	r4,r4,20
   11d44:	00c00434 	movhi	r3,16
   11d48:	18ffffc4 	addi	r3,r3,-1
   11d4c:	28c6703a 	and	r3,r5,r3
   11d50:	8005883a 	mov	r2,r16
   11d54:	1906b03a 	or	r3,r3,r4
   11d58:	dfc00117 	ldw	ra,4(sp)
   11d5c:	dc000017 	ldw	r16,0(sp)
   11d60:	dec00204 	addi	sp,sp,8
   11d64:	f800283a 	ret
   11d68:	00c002c4 	movi	r3,11
   11d6c:	188bc83a 	sub	r5,r3,r2
   11d70:	814ad83a 	srl	r5,r16,r5
   11d74:	00c00434 	movhi	r3,16
   11d78:	18ffffc4 	addi	r3,r3,-1
   11d7c:	81a0983a 	sll	r16,r16,r6
   11d80:	2101ffcc 	andi	r4,r4,2047
   11d84:	28ca703a 	and	r5,r5,r3
   11d88:	003fed06 	br	11d40 <__alt_mem_Onchip_SRAM+0xf8011d40>
   11d8c:	0009883a 	mov	r4,zero
   11d90:	000b883a 	mov	r5,zero
   11d94:	003fea06 	br	11d40 <__alt_mem_Onchip_SRAM+0xf8011d40>

00011d98 <__clzsi2>:
   11d98:	00bfffd4 	movui	r2,65535
   11d9c:	11000536 	bltu	r2,r4,11db4 <__clzsi2+0x1c>
   11da0:	00803fc4 	movi	r2,255
   11da4:	11000f36 	bltu	r2,r4,11de4 <__clzsi2+0x4c>
   11da8:	00800804 	movi	r2,32
   11dac:	0007883a 	mov	r3,zero
   11db0:	00000506 	br	11dc8 <__clzsi2+0x30>
   11db4:	00804034 	movhi	r2,256
   11db8:	10bfffc4 	addi	r2,r2,-1
   11dbc:	11000c2e 	bgeu	r2,r4,11df0 <__clzsi2+0x58>
   11dc0:	00800204 	movi	r2,8
   11dc4:	00c00604 	movi	r3,24
   11dc8:	20c8d83a 	srl	r4,r4,r3
   11dcc:	00c000b4 	movhi	r3,2
   11dd0:	18e11d04 	addi	r3,r3,-31628
   11dd4:	1909883a 	add	r4,r3,r4
   11dd8:	20c00003 	ldbu	r3,0(r4)
   11ddc:	10c5c83a 	sub	r2,r2,r3
   11de0:	f800283a 	ret
   11de4:	00800604 	movi	r2,24
   11de8:	00c00204 	movi	r3,8
   11dec:	003ff606 	br	11dc8 <__alt_mem_Onchip_SRAM+0xf8011dc8>
   11df0:	00800404 	movi	r2,16
   11df4:	1007883a 	mov	r3,r2
   11df8:	003ff306 	br	11dc8 <__alt_mem_Onchip_SRAM+0xf8011dc8>

00011dfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11dfc:	defffe04 	addi	sp,sp,-8
   11e00:	dfc00115 	stw	ra,4(sp)
   11e04:	df000015 	stw	fp,0(sp)
   11e08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11e0c:	d0a01017 	ldw	r2,-32704(gp)
   11e10:	10000326 	beq	r2,zero,11e20 <alt_get_errno+0x24>
   11e14:	d0a01017 	ldw	r2,-32704(gp)
   11e18:	103ee83a 	callr	r2
   11e1c:	00000106 	br	11e24 <alt_get_errno+0x28>
   11e20:	d0a73904 	addi	r2,gp,-25372
}
   11e24:	e037883a 	mov	sp,fp
   11e28:	dfc00117 	ldw	ra,4(sp)
   11e2c:	df000017 	ldw	fp,0(sp)
   11e30:	dec00204 	addi	sp,sp,8
   11e34:	f800283a 	ret

00011e38 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11e38:	defffb04 	addi	sp,sp,-20
   11e3c:	dfc00415 	stw	ra,16(sp)
   11e40:	df000315 	stw	fp,12(sp)
   11e44:	df000304 	addi	fp,sp,12
   11e48:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11e4c:	e0bfff17 	ldw	r2,-4(fp)
   11e50:	10000816 	blt	r2,zero,11e74 <close+0x3c>
   11e54:	01400304 	movi	r5,12
   11e58:	e13fff17 	ldw	r4,-4(fp)
   11e5c:	00015680 	call	1568 <__mulsi3>
   11e60:	1007883a 	mov	r3,r2
   11e64:	008000b4 	movhi	r2,2
   11e68:	10a3c304 	addi	r2,r2,-28916
   11e6c:	1885883a 	add	r2,r3,r2
   11e70:	00000106 	br	11e78 <close+0x40>
   11e74:	0005883a 	mov	r2,zero
   11e78:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11e7c:	e0bffd17 	ldw	r2,-12(fp)
   11e80:	10001926 	beq	r2,zero,11ee8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11e84:	e0bffd17 	ldw	r2,-12(fp)
   11e88:	10800017 	ldw	r2,0(r2)
   11e8c:	10800417 	ldw	r2,16(r2)
   11e90:	10000626 	beq	r2,zero,11eac <close+0x74>
   11e94:	e0bffd17 	ldw	r2,-12(fp)
   11e98:	10800017 	ldw	r2,0(r2)
   11e9c:	10800417 	ldw	r2,16(r2)
   11ea0:	e13ffd17 	ldw	r4,-12(fp)
   11ea4:	103ee83a 	callr	r2
   11ea8:	00000106 	br	11eb0 <close+0x78>
   11eac:	0005883a 	mov	r2,zero
   11eb0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11eb4:	e13fff17 	ldw	r4,-4(fp)
   11eb8:	00127140 	call	12714 <alt_release_fd>
    if (rval < 0)
   11ebc:	e0bffe17 	ldw	r2,-8(fp)
   11ec0:	1000070e 	bge	r2,zero,11ee0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11ec4:	0011dfc0 	call	11dfc <alt_get_errno>
   11ec8:	1007883a 	mov	r3,r2
   11ecc:	e0bffe17 	ldw	r2,-8(fp)
   11ed0:	0085c83a 	sub	r2,zero,r2
   11ed4:	18800015 	stw	r2,0(r3)
      return -1;
   11ed8:	00bfffc4 	movi	r2,-1
   11edc:	00000706 	br	11efc <close+0xc4>
    }
    return 0;
   11ee0:	0005883a 	mov	r2,zero
   11ee4:	00000506 	br	11efc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11ee8:	0011dfc0 	call	11dfc <alt_get_errno>
   11eec:	1007883a 	mov	r3,r2
   11ef0:	00801444 	movi	r2,81
   11ef4:	18800015 	stw	r2,0(r3)
    return -1;
   11ef8:	00bfffc4 	movi	r2,-1
  }
}
   11efc:	e037883a 	mov	sp,fp
   11f00:	dfc00117 	ldw	ra,4(sp)
   11f04:	df000017 	ldw	fp,0(sp)
   11f08:	dec00204 	addi	sp,sp,8
   11f0c:	f800283a 	ret

00011f10 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11f10:	defffc04 	addi	sp,sp,-16
   11f14:	df000315 	stw	fp,12(sp)
   11f18:	df000304 	addi	fp,sp,12
   11f1c:	e13ffd15 	stw	r4,-12(fp)
   11f20:	e17ffe15 	stw	r5,-8(fp)
   11f24:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11f28:	e0bfff17 	ldw	r2,-4(fp)
}
   11f2c:	e037883a 	mov	sp,fp
   11f30:	df000017 	ldw	fp,0(sp)
   11f34:	dec00104 	addi	sp,sp,4
   11f38:	f800283a 	ret

00011f3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11f3c:	defffe04 	addi	sp,sp,-8
   11f40:	dfc00115 	stw	ra,4(sp)
   11f44:	df000015 	stw	fp,0(sp)
   11f48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11f4c:	d0a01017 	ldw	r2,-32704(gp)
   11f50:	10000326 	beq	r2,zero,11f60 <alt_get_errno+0x24>
   11f54:	d0a01017 	ldw	r2,-32704(gp)
   11f58:	103ee83a 	callr	r2
   11f5c:	00000106 	br	11f64 <alt_get_errno+0x28>
   11f60:	d0a73904 	addi	r2,gp,-25372
}
   11f64:	e037883a 	mov	sp,fp
   11f68:	dfc00117 	ldw	ra,4(sp)
   11f6c:	df000017 	ldw	fp,0(sp)
   11f70:	dec00204 	addi	sp,sp,8
   11f74:	f800283a 	ret

00011f78 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   11f78:	defffb04 	addi	sp,sp,-20
   11f7c:	dfc00415 	stw	ra,16(sp)
   11f80:	df000315 	stw	fp,12(sp)
   11f84:	df000304 	addi	fp,sp,12
   11f88:	e13ffe15 	stw	r4,-8(fp)
   11f8c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11f90:	e0bffe17 	ldw	r2,-8(fp)
   11f94:	10000816 	blt	r2,zero,11fb8 <fstat+0x40>
   11f98:	01400304 	movi	r5,12
   11f9c:	e13ffe17 	ldw	r4,-8(fp)
   11fa0:	00015680 	call	1568 <__mulsi3>
   11fa4:	1007883a 	mov	r3,r2
   11fa8:	008000b4 	movhi	r2,2
   11fac:	10a3c304 	addi	r2,r2,-28916
   11fb0:	1885883a 	add	r2,r3,r2
   11fb4:	00000106 	br	11fbc <fstat+0x44>
   11fb8:	0005883a 	mov	r2,zero
   11fbc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   11fc0:	e0bffd17 	ldw	r2,-12(fp)
   11fc4:	10001026 	beq	r2,zero,12008 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   11fc8:	e0bffd17 	ldw	r2,-12(fp)
   11fcc:	10800017 	ldw	r2,0(r2)
   11fd0:	10800817 	ldw	r2,32(r2)
   11fd4:	10000726 	beq	r2,zero,11ff4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   11fd8:	e0bffd17 	ldw	r2,-12(fp)
   11fdc:	10800017 	ldw	r2,0(r2)
   11fe0:	10800817 	ldw	r2,32(r2)
   11fe4:	e17fff17 	ldw	r5,-4(fp)
   11fe8:	e13ffd17 	ldw	r4,-12(fp)
   11fec:	103ee83a 	callr	r2
   11ff0:	00000a06 	br	1201c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   11ff4:	e0bfff17 	ldw	r2,-4(fp)
   11ff8:	00c80004 	movi	r3,8192
   11ffc:	10c00115 	stw	r3,4(r2)
      return 0;
   12000:	0005883a 	mov	r2,zero
   12004:	00000506 	br	1201c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12008:	0011f3c0 	call	11f3c <alt_get_errno>
   1200c:	1007883a 	mov	r3,r2
   12010:	00801444 	movi	r2,81
   12014:	18800015 	stw	r2,0(r3)
    return -1;
   12018:	00bfffc4 	movi	r2,-1
  }
}
   1201c:	e037883a 	mov	sp,fp
   12020:	dfc00117 	ldw	ra,4(sp)
   12024:	df000017 	ldw	fp,0(sp)
   12028:	dec00204 	addi	sp,sp,8
   1202c:	f800283a 	ret

00012030 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   12030:	defff404 	addi	sp,sp,-48
   12034:	dfc00b15 	stw	ra,44(sp)
   12038:	df000a15 	stw	fp,40(sp)
   1203c:	dd000915 	stw	r20,36(sp)
   12040:	dcc00815 	stw	r19,32(sp)
   12044:	dc800715 	stw	r18,28(sp)
   12048:	dc400615 	stw	r17,24(sp)
   1204c:	dc000515 	stw	r16,20(sp)
   12050:	df000a04 	addi	fp,sp,40
   12054:	e13ff915 	stw	r4,-28(fp)
   12058:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   1205c:	e0bffa17 	ldw	r2,-24(fp)
   12060:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12064:	d0a74517 	ldw	r2,-25324(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   12068:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1206c:	d0a74417 	ldw	r2,-25328(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
   12070:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   12074:	e0bff817 	ldw	r2,-32(fp)
   12078:	10005f26 	beq	r2,zero,121f8 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   1207c:	d0a73f17 	ldw	r2,-25348(gp)
   12080:	1029883a 	mov	r20,r2
   12084:	e17ff817 	ldw	r5,-32(fp)
   12088:	e13ff717 	ldw	r4,-36(fp)
   1208c:	00014ac0 	call	14ac <__udivsi3>
   12090:	a085883a 	add	r2,r20,r2
   12094:	1007883a 	mov	r3,r2
   12098:	e0bff917 	ldw	r2,-28(fp)
   1209c:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   120a0:	d0a74017 	ldw	r2,-25344(gp)
   120a4:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   120a8:	e0bff717 	ldw	r2,-36(fp)
   120ac:	1021883a 	mov	r16,r2
   120b0:	0023883a 	mov	r17,zero
   120b4:	e17ff817 	ldw	r5,-32(fp)
   120b8:	010003f4 	movhi	r4,15
   120bc:	21109004 	addi	r4,r4,16960
   120c0:	00014ac0 	call	14ac <__udivsi3>
   120c4:	1025883a 	mov	r18,r2
   120c8:	0027883a 	mov	r19,zero
   120cc:	900d883a 	mov	r6,r18
   120d0:	980f883a 	mov	r7,r19
   120d4:	8009883a 	mov	r4,r16
   120d8:	880b883a 	mov	r5,r17
   120dc:	000e88c0 	call	e88c <__muldi3>
   120e0:	1009883a 	mov	r4,r2
   120e4:	180b883a 	mov	r5,r3
   120e8:	2005883a 	mov	r2,r4
   120ec:	2807883a 	mov	r3,r5
   120f0:	018003f4 	movhi	r6,15
   120f4:	31909004 	addi	r6,r6,16960
   120f8:	000f883a 	mov	r7,zero
   120fc:	1009883a 	mov	r4,r2
   12100:	180b883a 	mov	r5,r3
   12104:	000ef940 	call	ef94 <__umoddi3>
   12108:	1009883a 	mov	r4,r2
   1210c:	180b883a 	mov	r5,r3
   12110:	2005883a 	mov	r2,r4
   12114:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   12118:	a085883a 	add	r2,r20,r2
   1211c:	1007883a 	mov	r3,r2
   12120:	e0bff917 	ldw	r2,-28(fp)
   12124:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   12128:	00001406 	br	1217c <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
   1212c:	e0bff917 	ldw	r2,-28(fp)
   12130:	10800017 	ldw	r2,0(r2)
   12134:	00800516 	blt	zero,r2,1214c <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
   12138:	e0bff917 	ldw	r2,-28(fp)
   1213c:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   12140:	e0bff917 	ldw	r2,-28(fp)
   12144:	10000115 	stw	zero,4(r2)
          break;
   12148:	00000f06 	br	12188 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
   1214c:	e0bff917 	ldw	r2,-28(fp)
   12150:	10800017 	ldw	r2,0(r2)
   12154:	10ffffc4 	addi	r3,r2,-1
   12158:	e0bff917 	ldw	r2,-28(fp)
   1215c:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   12160:	e0bff917 	ldw	r2,-28(fp)
   12164:	10c00117 	ldw	r3,4(r2)
   12168:	008003f4 	movhi	r2,15
   1216c:	10909004 	addi	r2,r2,16960
   12170:	1887883a 	add	r3,r3,r2
   12174:	e0bff917 	ldw	r2,-28(fp)
   12178:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   1217c:	e0bff917 	ldw	r2,-28(fp)
   12180:	10800117 	ldw	r2,4(r2)
   12184:	103fe916 	blt	r2,zero,1212c <__alt_mem_Onchip_SRAM+0xf801212c>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   12188:	00000c06 	br	121bc <gettimeofday+0x18c>
      ptimeval->tv_sec++;
   1218c:	e0bff917 	ldw	r2,-28(fp)
   12190:	10800017 	ldw	r2,0(r2)
   12194:	10c00044 	addi	r3,r2,1
   12198:	e0bff917 	ldw	r2,-28(fp)
   1219c:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   121a0:	e0bff917 	ldw	r2,-28(fp)
   121a4:	10c00117 	ldw	r3,4(r2)
   121a8:	00bffc74 	movhi	r2,65521
   121ac:	10af7004 	addi	r2,r2,-16960
   121b0:	1887883a 	add	r3,r3,r2
   121b4:	e0bff917 	ldw	r2,-28(fp)
   121b8:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   121bc:	e0bff917 	ldw	r2,-28(fp)
   121c0:	10c00117 	ldw	r3,4(r2)
   121c4:	008003f4 	movhi	r2,15
   121c8:	10908fc4 	addi	r2,r2,16959
   121cc:	10ffef16 	blt	r2,r3,1218c <__alt_mem_Onchip_SRAM+0xf801218c>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   121d0:	e0bff617 	ldw	r2,-40(fp)
   121d4:	10000626 	beq	r2,zero,121f0 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   121d8:	d0e73d17 	ldw	r3,-25356(gp)
   121dc:	e0bff617 	ldw	r2,-40(fp)
   121e0:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   121e4:	d0e73e17 	ldw	r3,-25352(gp)
   121e8:	e0bff617 	ldw	r2,-40(fp)
   121ec:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   121f0:	0005883a 	mov	r2,zero
   121f4:	00000106 	br	121fc <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
   121f8:	00bfde84 	movi	r2,-134
}
   121fc:	e6fffb04 	addi	sp,fp,-20
   12200:	dfc00617 	ldw	ra,24(sp)
   12204:	df000517 	ldw	fp,20(sp)
   12208:	dd000417 	ldw	r20,16(sp)
   1220c:	dcc00317 	ldw	r19,12(sp)
   12210:	dc800217 	ldw	r18,8(sp)
   12214:	dc400117 	ldw	r17,4(sp)
   12218:	dc000017 	ldw	r16,0(sp)
   1221c:	dec00704 	addi	sp,sp,28
   12220:	f800283a 	ret

00012224 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12224:	defffe04 	addi	sp,sp,-8
   12228:	dfc00115 	stw	ra,4(sp)
   1222c:	df000015 	stw	fp,0(sp)
   12230:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12234:	d0a01017 	ldw	r2,-32704(gp)
   12238:	10000326 	beq	r2,zero,12248 <alt_get_errno+0x24>
   1223c:	d0a01017 	ldw	r2,-32704(gp)
   12240:	103ee83a 	callr	r2
   12244:	00000106 	br	1224c <alt_get_errno+0x28>
   12248:	d0a73904 	addi	r2,gp,-25372
}
   1224c:	e037883a 	mov	sp,fp
   12250:	dfc00117 	ldw	ra,4(sp)
   12254:	df000017 	ldw	fp,0(sp)
   12258:	dec00204 	addi	sp,sp,8
   1225c:	f800283a 	ret

00012260 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   12260:	deffed04 	addi	sp,sp,-76
   12264:	dfc01215 	stw	ra,72(sp)
   12268:	df001115 	stw	fp,68(sp)
   1226c:	df001104 	addi	fp,sp,68
   12270:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12274:	e0bfff17 	ldw	r2,-4(fp)
   12278:	10000816 	blt	r2,zero,1229c <isatty+0x3c>
   1227c:	01400304 	movi	r5,12
   12280:	e13fff17 	ldw	r4,-4(fp)
   12284:	00015680 	call	1568 <__mulsi3>
   12288:	1007883a 	mov	r3,r2
   1228c:	008000b4 	movhi	r2,2
   12290:	10a3c304 	addi	r2,r2,-28916
   12294:	1885883a 	add	r2,r3,r2
   12298:	00000106 	br	122a0 <isatty+0x40>
   1229c:	0005883a 	mov	r2,zero
   122a0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   122a4:	e0bfef17 	ldw	r2,-68(fp)
   122a8:	10000e26 	beq	r2,zero,122e4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   122ac:	e0bfef17 	ldw	r2,-68(fp)
   122b0:	10800017 	ldw	r2,0(r2)
   122b4:	10800817 	ldw	r2,32(r2)
   122b8:	1000021e 	bne	r2,zero,122c4 <isatty+0x64>
    {
      return 1;
   122bc:	00800044 	movi	r2,1
   122c0:	00000d06 	br	122f8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   122c4:	e0bff004 	addi	r2,fp,-64
   122c8:	100b883a 	mov	r5,r2
   122cc:	e13fff17 	ldw	r4,-4(fp)
   122d0:	0011f780 	call	11f78 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   122d4:	e0bff117 	ldw	r2,-60(fp)
   122d8:	10880020 	cmpeqi	r2,r2,8192
   122dc:	10803fcc 	andi	r2,r2,255
   122e0:	00000506 	br	122f8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   122e4:	00122240 	call	12224 <alt_get_errno>
   122e8:	1007883a 	mov	r3,r2
   122ec:	00801444 	movi	r2,81
   122f0:	18800015 	stw	r2,0(r3)
    return 0;
   122f4:	0005883a 	mov	r2,zero
  }
}
   122f8:	e037883a 	mov	sp,fp
   122fc:	dfc00117 	ldw	ra,4(sp)
   12300:	df000017 	ldw	fp,0(sp)
   12304:	dec00204 	addi	sp,sp,8
   12308:	f800283a 	ret

0001230c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1230c:	defffc04 	addi	sp,sp,-16
   12310:	df000315 	stw	fp,12(sp)
   12314:	df000304 	addi	fp,sp,12
   12318:	e13ffd15 	stw	r4,-12(fp)
   1231c:	e17ffe15 	stw	r5,-8(fp)
   12320:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   12324:	e0fffe17 	ldw	r3,-8(fp)
   12328:	e0bffd17 	ldw	r2,-12(fp)
   1232c:	18800c26 	beq	r3,r2,12360 <alt_load_section+0x54>
  {
    while( to != end )
   12330:	00000806 	br	12354 <alt_load_section+0x48>
    {
      *to++ = *from++;
   12334:	e0bffe17 	ldw	r2,-8(fp)
   12338:	10c00104 	addi	r3,r2,4
   1233c:	e0fffe15 	stw	r3,-8(fp)
   12340:	e0fffd17 	ldw	r3,-12(fp)
   12344:	19000104 	addi	r4,r3,4
   12348:	e13ffd15 	stw	r4,-12(fp)
   1234c:	18c00017 	ldw	r3,0(r3)
   12350:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   12354:	e0fffe17 	ldw	r3,-8(fp)
   12358:	e0bfff17 	ldw	r2,-4(fp)
   1235c:	18bff51e 	bne	r3,r2,12334 <__alt_mem_Onchip_SRAM+0xf8012334>
    {
      *to++ = *from++;
    }
  }
}
   12360:	0001883a 	nop
   12364:	e037883a 	mov	sp,fp
   12368:	df000017 	ldw	fp,0(sp)
   1236c:	dec00104 	addi	sp,sp,4
   12370:	f800283a 	ret

00012374 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12374:	defffe04 	addi	sp,sp,-8
   12378:	dfc00115 	stw	ra,4(sp)
   1237c:	df000015 	stw	fp,0(sp)
   12380:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12384:	018000b4 	movhi	r6,2
   12388:	31a89404 	addi	r6,r6,-23984
   1238c:	014000b4 	movhi	r5,2
   12390:	29618704 	addi	r5,r5,-31204
   12394:	010000b4 	movhi	r4,2
   12398:	21289404 	addi	r4,r4,-23984
   1239c:	001230c0 	call	1230c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   123a0:	01800034 	movhi	r6,0
   123a4:	31808c04 	addi	r6,r6,560
   123a8:	01400034 	movhi	r5,0
   123ac:	29400804 	addi	r5,r5,32
   123b0:	01000034 	movhi	r4,0
   123b4:	21000804 	addi	r4,r4,32
   123b8:	001230c0 	call	1230c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   123bc:	018000b4 	movhi	r6,2
   123c0:	31a18704 	addi	r6,r6,-31204
   123c4:	014000b4 	movhi	r5,2
   123c8:	29607c04 	addi	r5,r5,-32272
   123cc:	010000b4 	movhi	r4,2
   123d0:	21207c04 	addi	r4,r4,-32272
   123d4:	001230c0 	call	1230c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   123d8:	0016f0c0 	call	16f0c <alt_dcache_flush_all>
  alt_icache_flush_all();
   123dc:	001715c0 	call	1715c <alt_icache_flush_all>
}
   123e0:	0001883a 	nop
   123e4:	e037883a 	mov	sp,fp
   123e8:	dfc00117 	ldw	ra,4(sp)
   123ec:	df000017 	ldw	fp,0(sp)
   123f0:	dec00204 	addi	sp,sp,8
   123f4:	f800283a 	ret

000123f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   123f8:	defffe04 	addi	sp,sp,-8
   123fc:	dfc00115 	stw	ra,4(sp)
   12400:	df000015 	stw	fp,0(sp)
   12404:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12408:	d0a01017 	ldw	r2,-32704(gp)
   1240c:	10000326 	beq	r2,zero,1241c <alt_get_errno+0x24>
   12410:	d0a01017 	ldw	r2,-32704(gp)
   12414:	103ee83a 	callr	r2
   12418:	00000106 	br	12420 <alt_get_errno+0x28>
   1241c:	d0a73904 	addi	r2,gp,-25372
}
   12420:	e037883a 	mov	sp,fp
   12424:	dfc00117 	ldw	ra,4(sp)
   12428:	df000017 	ldw	fp,0(sp)
   1242c:	dec00204 	addi	sp,sp,8
   12430:	f800283a 	ret

00012434 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   12434:	defff904 	addi	sp,sp,-28
   12438:	dfc00615 	stw	ra,24(sp)
   1243c:	df000515 	stw	fp,20(sp)
   12440:	df000504 	addi	fp,sp,20
   12444:	e13ffd15 	stw	r4,-12(fp)
   12448:	e17ffe15 	stw	r5,-8(fp)
   1244c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   12450:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12454:	e0bffd17 	ldw	r2,-12(fp)
   12458:	10000816 	blt	r2,zero,1247c <lseek+0x48>
   1245c:	01400304 	movi	r5,12
   12460:	e13ffd17 	ldw	r4,-12(fp)
   12464:	00015680 	call	1568 <__mulsi3>
   12468:	1007883a 	mov	r3,r2
   1246c:	008000b4 	movhi	r2,2
   12470:	10a3c304 	addi	r2,r2,-28916
   12474:	1885883a 	add	r2,r3,r2
   12478:	00000106 	br	12480 <lseek+0x4c>
   1247c:	0005883a 	mov	r2,zero
   12480:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   12484:	e0bffc17 	ldw	r2,-16(fp)
   12488:	10001026 	beq	r2,zero,124cc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1248c:	e0bffc17 	ldw	r2,-16(fp)
   12490:	10800017 	ldw	r2,0(r2)
   12494:	10800717 	ldw	r2,28(r2)
   12498:	10000926 	beq	r2,zero,124c0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1249c:	e0bffc17 	ldw	r2,-16(fp)
   124a0:	10800017 	ldw	r2,0(r2)
   124a4:	10800717 	ldw	r2,28(r2)
   124a8:	e1bfff17 	ldw	r6,-4(fp)
   124ac:	e17ffe17 	ldw	r5,-8(fp)
   124b0:	e13ffc17 	ldw	r4,-16(fp)
   124b4:	103ee83a 	callr	r2
   124b8:	e0bffb15 	stw	r2,-20(fp)
   124bc:	00000506 	br	124d4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   124c0:	00bfde84 	movi	r2,-134
   124c4:	e0bffb15 	stw	r2,-20(fp)
   124c8:	00000206 	br	124d4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   124cc:	00bfebc4 	movi	r2,-81
   124d0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   124d4:	e0bffb17 	ldw	r2,-20(fp)
   124d8:	1000070e 	bge	r2,zero,124f8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   124dc:	00123f80 	call	123f8 <alt_get_errno>
   124e0:	1007883a 	mov	r3,r2
   124e4:	e0bffb17 	ldw	r2,-20(fp)
   124e8:	0085c83a 	sub	r2,zero,r2
   124ec:	18800015 	stw	r2,0(r3)
    rc = -1;
   124f0:	00bfffc4 	movi	r2,-1
   124f4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   124f8:	e0bffb17 	ldw	r2,-20(fp)
}
   124fc:	e037883a 	mov	sp,fp
   12500:	dfc00117 	ldw	ra,4(sp)
   12504:	df000017 	ldw	fp,0(sp)
   12508:	dec00204 	addi	sp,sp,8
   1250c:	f800283a 	ret

00012510 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12510:	defffd04 	addi	sp,sp,-12
   12514:	dfc00215 	stw	ra,8(sp)
   12518:	df000115 	stw	fp,4(sp)
   1251c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12520:	0009883a 	mov	r4,zero
   12524:	0012b8c0 	call	12b8c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12528:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1252c:	0012bc40 	call	12bc4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   12530:	018000b4 	movhi	r6,2
   12534:	31a16004 	addi	r6,r6,-31360
   12538:	014000b4 	movhi	r5,2
   1253c:	29616004 	addi	r5,r5,-31360
   12540:	010000b4 	movhi	r4,2
   12544:	21216004 	addi	r4,r4,-31360
   12548:	00175000 	call	17500 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1254c:	001700c0 	call	1700c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12550:	01000074 	movhi	r4,1
   12554:	211c1b04 	addi	r4,r4,28780
   12558:	0017cf40 	call	17cf4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1255c:	d0a74117 	ldw	r2,-25340(gp)
   12560:	d0e74217 	ldw	r3,-25336(gp)
   12564:	d1274317 	ldw	r4,-25332(gp)
   12568:	200d883a 	mov	r6,r4
   1256c:	180b883a 	mov	r5,r3
   12570:	1009883a 	mov	r4,r2
   12574:	00009bc0 	call	9bc <main>
   12578:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1257c:	01000044 	movi	r4,1
   12580:	0011e380 	call	11e38 <close>
  exit (result);
   12584:	e13fff17 	ldw	r4,-4(fp)
   12588:	0017d080 	call	17d08 <exit>

0001258c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1258c:	defffe04 	addi	sp,sp,-8
   12590:	df000115 	stw	fp,4(sp)
   12594:	df000104 	addi	fp,sp,4
   12598:	e13fff15 	stw	r4,-4(fp)
}
   1259c:	0001883a 	nop
   125a0:	e037883a 	mov	sp,fp
   125a4:	df000017 	ldw	fp,0(sp)
   125a8:	dec00104 	addi	sp,sp,4
   125ac:	f800283a 	ret

000125b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   125b0:	defffe04 	addi	sp,sp,-8
   125b4:	df000115 	stw	fp,4(sp)
   125b8:	df000104 	addi	fp,sp,4
   125bc:	e13fff15 	stw	r4,-4(fp)
}
   125c0:	0001883a 	nop
   125c4:	e037883a 	mov	sp,fp
   125c8:	df000017 	ldw	fp,0(sp)
   125cc:	dec00104 	addi	sp,sp,4
   125d0:	f800283a 	ret

000125d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   125d4:	defffe04 	addi	sp,sp,-8
   125d8:	dfc00115 	stw	ra,4(sp)
   125dc:	df000015 	stw	fp,0(sp)
   125e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   125e4:	d0a01017 	ldw	r2,-32704(gp)
   125e8:	10000326 	beq	r2,zero,125f8 <alt_get_errno+0x24>
   125ec:	d0a01017 	ldw	r2,-32704(gp)
   125f0:	103ee83a 	callr	r2
   125f4:	00000106 	br	125fc <alt_get_errno+0x28>
   125f8:	d0a73904 	addi	r2,gp,-25372
}
   125fc:	e037883a 	mov	sp,fp
   12600:	dfc00117 	ldw	ra,4(sp)
   12604:	df000017 	ldw	fp,0(sp)
   12608:	dec00204 	addi	sp,sp,8
   1260c:	f800283a 	ret

00012610 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   12610:	defff904 	addi	sp,sp,-28
   12614:	dfc00615 	stw	ra,24(sp)
   12618:	df000515 	stw	fp,20(sp)
   1261c:	df000504 	addi	fp,sp,20
   12620:	e13ffd15 	stw	r4,-12(fp)
   12624:	e17ffe15 	stw	r5,-8(fp)
   12628:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1262c:	e0bffd17 	ldw	r2,-12(fp)
   12630:	10000816 	blt	r2,zero,12654 <read+0x44>
   12634:	01400304 	movi	r5,12
   12638:	e13ffd17 	ldw	r4,-12(fp)
   1263c:	00015680 	call	1568 <__mulsi3>
   12640:	1007883a 	mov	r3,r2
   12644:	008000b4 	movhi	r2,2
   12648:	10a3c304 	addi	r2,r2,-28916
   1264c:	1885883a 	add	r2,r3,r2
   12650:	00000106 	br	12658 <read+0x48>
   12654:	0005883a 	mov	r2,zero
   12658:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1265c:	e0bffb17 	ldw	r2,-20(fp)
   12660:	10002226 	beq	r2,zero,126ec <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12664:	e0bffb17 	ldw	r2,-20(fp)
   12668:	10800217 	ldw	r2,8(r2)
   1266c:	108000cc 	andi	r2,r2,3
   12670:	10800060 	cmpeqi	r2,r2,1
   12674:	1000181e 	bne	r2,zero,126d8 <read+0xc8>
        (fd->dev->read))
   12678:	e0bffb17 	ldw	r2,-20(fp)
   1267c:	10800017 	ldw	r2,0(r2)
   12680:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12684:	10001426 	beq	r2,zero,126d8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   12688:	e0bffb17 	ldw	r2,-20(fp)
   1268c:	10800017 	ldw	r2,0(r2)
   12690:	10800517 	ldw	r2,20(r2)
   12694:	e0ffff17 	ldw	r3,-4(fp)
   12698:	180d883a 	mov	r6,r3
   1269c:	e17ffe17 	ldw	r5,-8(fp)
   126a0:	e13ffb17 	ldw	r4,-20(fp)
   126a4:	103ee83a 	callr	r2
   126a8:	e0bffc15 	stw	r2,-16(fp)
   126ac:	e0bffc17 	ldw	r2,-16(fp)
   126b0:	1000070e 	bge	r2,zero,126d0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   126b4:	00125d40 	call	125d4 <alt_get_errno>
   126b8:	1007883a 	mov	r3,r2
   126bc:	e0bffc17 	ldw	r2,-16(fp)
   126c0:	0085c83a 	sub	r2,zero,r2
   126c4:	18800015 	stw	r2,0(r3)
          return -1;
   126c8:	00bfffc4 	movi	r2,-1
   126cc:	00000c06 	br	12700 <read+0xf0>
        }
        return rval;
   126d0:	e0bffc17 	ldw	r2,-16(fp)
   126d4:	00000a06 	br	12700 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   126d8:	00125d40 	call	125d4 <alt_get_errno>
   126dc:	1007883a 	mov	r3,r2
   126e0:	00800344 	movi	r2,13
   126e4:	18800015 	stw	r2,0(r3)
   126e8:	00000406 	br	126fc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   126ec:	00125d40 	call	125d4 <alt_get_errno>
   126f0:	1007883a 	mov	r3,r2
   126f4:	00801444 	movi	r2,81
   126f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   126fc:	00bfffc4 	movi	r2,-1
}
   12700:	e037883a 	mov	sp,fp
   12704:	dfc00117 	ldw	ra,4(sp)
   12708:	df000017 	ldw	fp,0(sp)
   1270c:	dec00204 	addi	sp,sp,8
   12710:	f800283a 	ret

00012714 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12714:	defffc04 	addi	sp,sp,-16
   12718:	dfc00315 	stw	ra,12(sp)
   1271c:	df000215 	stw	fp,8(sp)
   12720:	dc000115 	stw	r16,4(sp)
   12724:	df000204 	addi	fp,sp,8
   12728:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1272c:	e0bffe17 	ldw	r2,-8(fp)
   12730:	108000d0 	cmplti	r2,r2,3
   12734:	1000111e 	bne	r2,zero,1277c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   12738:	040000b4 	movhi	r16,2
   1273c:	8423c304 	addi	r16,r16,-28916
   12740:	e0bffe17 	ldw	r2,-8(fp)
   12744:	01400304 	movi	r5,12
   12748:	1009883a 	mov	r4,r2
   1274c:	00015680 	call	1568 <__mulsi3>
   12750:	8085883a 	add	r2,r16,r2
   12754:	10800204 	addi	r2,r2,8
   12758:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1275c:	040000b4 	movhi	r16,2
   12760:	8423c304 	addi	r16,r16,-28916
   12764:	e0bffe17 	ldw	r2,-8(fp)
   12768:	01400304 	movi	r5,12
   1276c:	1009883a 	mov	r4,r2
   12770:	00015680 	call	1568 <__mulsi3>
   12774:	8085883a 	add	r2,r16,r2
   12778:	10000015 	stw	zero,0(r2)
  }
}
   1277c:	0001883a 	nop
   12780:	e6ffff04 	addi	sp,fp,-4
   12784:	dfc00217 	ldw	ra,8(sp)
   12788:	df000117 	ldw	fp,4(sp)
   1278c:	dc000017 	ldw	r16,0(sp)
   12790:	dec00304 	addi	sp,sp,12
   12794:	f800283a 	ret

00012798 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   12798:	defff904 	addi	sp,sp,-28
   1279c:	df000615 	stw	fp,24(sp)
   127a0:	df000604 	addi	fp,sp,24
   127a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   127a8:	0005303a 	rdctl	r2,status
   127ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   127b0:	e0fffe17 	ldw	r3,-8(fp)
   127b4:	00bfff84 	movi	r2,-2
   127b8:	1884703a 	and	r2,r3,r2
   127bc:	1001703a 	wrctl	status,r2
  
  return context;
   127c0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   127c4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   127c8:	d0a01117 	ldw	r2,-32700(gp)
   127cc:	10c000c4 	addi	r3,r2,3
   127d0:	00bfff04 	movi	r2,-4
   127d4:	1884703a 	and	r2,r3,r2
   127d8:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   127dc:	d0e01117 	ldw	r3,-32700(gp)
   127e0:	e0bfff17 	ldw	r2,-4(fp)
   127e4:	1887883a 	add	r3,r3,r2
   127e8:	00810034 	movhi	r2,1024
   127ec:	10800004 	addi	r2,r2,0
   127f0:	10c0062e 	bgeu	r2,r3,1280c <sbrk+0x74>
   127f4:	e0bffb17 	ldw	r2,-20(fp)
   127f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127fc:	e0bffa17 	ldw	r2,-24(fp)
   12800:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12804:	00bfffc4 	movi	r2,-1
   12808:	00000b06 	br	12838 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1280c:	d0a01117 	ldw	r2,-32700(gp)
   12810:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   12814:	d0e01117 	ldw	r3,-32700(gp)
   12818:	e0bfff17 	ldw	r2,-4(fp)
   1281c:	1885883a 	add	r2,r3,r2
   12820:	d0a01115 	stw	r2,-32700(gp)
   12824:	e0bffb17 	ldw	r2,-20(fp)
   12828:	e0bffc15 	stw	r2,-16(fp)
   1282c:	e0bffc17 	ldw	r2,-16(fp)
   12830:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   12834:	e0bffd17 	ldw	r2,-12(fp)
} 
   12838:	e037883a 	mov	sp,fp
   1283c:	df000017 	ldw	fp,0(sp)
   12840:	dec00104 	addi	sp,sp,4
   12844:	f800283a 	ret

00012848 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   12848:	defffa04 	addi	sp,sp,-24
   1284c:	df000515 	stw	fp,20(sp)
   12850:	df000504 	addi	fp,sp,20
   12854:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12858:	0005303a 	rdctl	r2,status
   1285c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12860:	e0fffc17 	ldw	r3,-16(fp)
   12864:	00bfff84 	movi	r2,-2
   12868:	1884703a 	and	r2,r3,r2
   1286c:	1001703a 	wrctl	status,r2
  
  return context;
   12870:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   12874:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   12878:	e0bfff17 	ldw	r2,-4(fp)
   1287c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12880:	e0bffd17 	ldw	r2,-12(fp)
   12884:	10800017 	ldw	r2,0(r2)
   12888:	e0fffd17 	ldw	r3,-12(fp)
   1288c:	18c00117 	ldw	r3,4(r3)
   12890:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   12894:	e0bffd17 	ldw	r2,-12(fp)
   12898:	10800117 	ldw	r2,4(r2)
   1289c:	e0fffd17 	ldw	r3,-12(fp)
   128a0:	18c00017 	ldw	r3,0(r3)
   128a4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   128a8:	e0bffd17 	ldw	r2,-12(fp)
   128ac:	e0fffd17 	ldw	r3,-12(fp)
   128b0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   128b4:	e0bffd17 	ldw	r2,-12(fp)
   128b8:	e0fffd17 	ldw	r3,-12(fp)
   128bc:	10c00015 	stw	r3,0(r2)
   128c0:	e0bffb17 	ldw	r2,-20(fp)
   128c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   128c8:	e0bffe17 	ldw	r2,-8(fp)
   128cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   128d0:	0001883a 	nop
   128d4:	e037883a 	mov	sp,fp
   128d8:	df000017 	ldw	fp,0(sp)
   128dc:	dec00104 	addi	sp,sp,4
   128e0:	f800283a 	ret

000128e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   128e4:	defffb04 	addi	sp,sp,-20
   128e8:	dfc00415 	stw	ra,16(sp)
   128ec:	df000315 	stw	fp,12(sp)
   128f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   128f4:	d0a01217 	ldw	r2,-32696(gp)
   128f8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   128fc:	d0a74517 	ldw	r2,-25324(gp)
   12900:	10800044 	addi	r2,r2,1
   12904:	d0a74515 	stw	r2,-25324(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12908:	00002e06 	br	129c4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1290c:	e0bffd17 	ldw	r2,-12(fp)
   12910:	10800017 	ldw	r2,0(r2)
   12914:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12918:	e0bffd17 	ldw	r2,-12(fp)
   1291c:	10800403 	ldbu	r2,16(r2)
   12920:	10803fcc 	andi	r2,r2,255
   12924:	10000426 	beq	r2,zero,12938 <alt_tick+0x54>
   12928:	d0a74517 	ldw	r2,-25324(gp)
   1292c:	1000021e 	bne	r2,zero,12938 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   12930:	e0bffd17 	ldw	r2,-12(fp)
   12934:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12938:	e0bffd17 	ldw	r2,-12(fp)
   1293c:	10800217 	ldw	r2,8(r2)
   12940:	d0e74517 	ldw	r3,-25324(gp)
   12944:	18801d36 	bltu	r3,r2,129bc <alt_tick+0xd8>
   12948:	e0bffd17 	ldw	r2,-12(fp)
   1294c:	10800403 	ldbu	r2,16(r2)
   12950:	10803fcc 	andi	r2,r2,255
   12954:	1000191e 	bne	r2,zero,129bc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   12958:	e0bffd17 	ldw	r2,-12(fp)
   1295c:	10800317 	ldw	r2,12(r2)
   12960:	e0fffd17 	ldw	r3,-12(fp)
   12964:	18c00517 	ldw	r3,20(r3)
   12968:	1809883a 	mov	r4,r3
   1296c:	103ee83a 	callr	r2
   12970:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12974:	e0bfff17 	ldw	r2,-4(fp)
   12978:	1000031e 	bne	r2,zero,12988 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1297c:	e13ffd17 	ldw	r4,-12(fp)
   12980:	00128480 	call	12848 <alt_alarm_stop>
   12984:	00000d06 	br	129bc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   12988:	e0bffd17 	ldw	r2,-12(fp)
   1298c:	10c00217 	ldw	r3,8(r2)
   12990:	e0bfff17 	ldw	r2,-4(fp)
   12994:	1887883a 	add	r3,r3,r2
   12998:	e0bffd17 	ldw	r2,-12(fp)
   1299c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   129a0:	e0bffd17 	ldw	r2,-12(fp)
   129a4:	10c00217 	ldw	r3,8(r2)
   129a8:	d0a74517 	ldw	r2,-25324(gp)
   129ac:	1880032e 	bgeu	r3,r2,129bc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   129b0:	e0bffd17 	ldw	r2,-12(fp)
   129b4:	00c00044 	movi	r3,1
   129b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   129bc:	e0bffe17 	ldw	r2,-8(fp)
   129c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   129c4:	e0fffd17 	ldw	r3,-12(fp)
   129c8:	d0a01204 	addi	r2,gp,-32696
   129cc:	18bfcf1e 	bne	r3,r2,1290c <__alt_mem_Onchip_SRAM+0xf801290c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   129d0:	0001883a 	nop
}
   129d4:	0001883a 	nop
   129d8:	e037883a 	mov	sp,fp
   129dc:	dfc00117 	ldw	ra,4(sp)
   129e0:	df000017 	ldw	fp,0(sp)
   129e4:	dec00204 	addi	sp,sp,8
   129e8:	f800283a 	ret

000129ec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   129ec:	defffd04 	addi	sp,sp,-12
   129f0:	dfc00215 	stw	ra,8(sp)
   129f4:	df000115 	stw	fp,4(sp)
   129f8:	df000104 	addi	fp,sp,4
   129fc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   12a00:	e13fff17 	ldw	r4,-4(fp)
   12a04:	0016db40 	call	16db4 <alt_busy_sleep>
}
   12a08:	e037883a 	mov	sp,fp
   12a0c:	dfc00117 	ldw	ra,4(sp)
   12a10:	df000017 	ldw	fp,0(sp)
   12a14:	dec00204 	addi	sp,sp,8
   12a18:	f800283a 	ret

00012a1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12a1c:	defffe04 	addi	sp,sp,-8
   12a20:	dfc00115 	stw	ra,4(sp)
   12a24:	df000015 	stw	fp,0(sp)
   12a28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12a2c:	d0a01017 	ldw	r2,-32704(gp)
   12a30:	10000326 	beq	r2,zero,12a40 <alt_get_errno+0x24>
   12a34:	d0a01017 	ldw	r2,-32704(gp)
   12a38:	103ee83a 	callr	r2
   12a3c:	00000106 	br	12a44 <alt_get_errno+0x28>
   12a40:	d0a73904 	addi	r2,gp,-25372
}
   12a44:	e037883a 	mov	sp,fp
   12a48:	dfc00117 	ldw	ra,4(sp)
   12a4c:	df000017 	ldw	fp,0(sp)
   12a50:	dec00204 	addi	sp,sp,8
   12a54:	f800283a 	ret

00012a58 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   12a58:	defff904 	addi	sp,sp,-28
   12a5c:	dfc00615 	stw	ra,24(sp)
   12a60:	df000515 	stw	fp,20(sp)
   12a64:	df000504 	addi	fp,sp,20
   12a68:	e13ffd15 	stw	r4,-12(fp)
   12a6c:	e17ffe15 	stw	r5,-8(fp)
   12a70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12a74:	e0bffd17 	ldw	r2,-12(fp)
   12a78:	10000816 	blt	r2,zero,12a9c <write+0x44>
   12a7c:	01400304 	movi	r5,12
   12a80:	e13ffd17 	ldw	r4,-12(fp)
   12a84:	00015680 	call	1568 <__mulsi3>
   12a88:	1007883a 	mov	r3,r2
   12a8c:	008000b4 	movhi	r2,2
   12a90:	10a3c304 	addi	r2,r2,-28916
   12a94:	1885883a 	add	r2,r3,r2
   12a98:	00000106 	br	12aa0 <write+0x48>
   12a9c:	0005883a 	mov	r2,zero
   12aa0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12aa4:	e0bffb17 	ldw	r2,-20(fp)
   12aa8:	10002126 	beq	r2,zero,12b30 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   12aac:	e0bffb17 	ldw	r2,-20(fp)
   12ab0:	10800217 	ldw	r2,8(r2)
   12ab4:	108000cc 	andi	r2,r2,3
   12ab8:	10001826 	beq	r2,zero,12b1c <write+0xc4>
   12abc:	e0bffb17 	ldw	r2,-20(fp)
   12ac0:	10800017 	ldw	r2,0(r2)
   12ac4:	10800617 	ldw	r2,24(r2)
   12ac8:	10001426 	beq	r2,zero,12b1c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   12acc:	e0bffb17 	ldw	r2,-20(fp)
   12ad0:	10800017 	ldw	r2,0(r2)
   12ad4:	10800617 	ldw	r2,24(r2)
   12ad8:	e0ffff17 	ldw	r3,-4(fp)
   12adc:	180d883a 	mov	r6,r3
   12ae0:	e17ffe17 	ldw	r5,-8(fp)
   12ae4:	e13ffb17 	ldw	r4,-20(fp)
   12ae8:	103ee83a 	callr	r2
   12aec:	e0bffc15 	stw	r2,-16(fp)
   12af0:	e0bffc17 	ldw	r2,-16(fp)
   12af4:	1000070e 	bge	r2,zero,12b14 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   12af8:	0012a1c0 	call	12a1c <alt_get_errno>
   12afc:	1007883a 	mov	r3,r2
   12b00:	e0bffc17 	ldw	r2,-16(fp)
   12b04:	0085c83a 	sub	r2,zero,r2
   12b08:	18800015 	stw	r2,0(r3)
        return -1;
   12b0c:	00bfffc4 	movi	r2,-1
   12b10:	00000c06 	br	12b44 <write+0xec>
      }
      return rval;
   12b14:	e0bffc17 	ldw	r2,-16(fp)
   12b18:	00000a06 	br	12b44 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   12b1c:	0012a1c0 	call	12a1c <alt_get_errno>
   12b20:	1007883a 	mov	r3,r2
   12b24:	00800344 	movi	r2,13
   12b28:	18800015 	stw	r2,0(r3)
   12b2c:	00000406 	br	12b40 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   12b30:	0012a1c0 	call	12a1c <alt_get_errno>
   12b34:	1007883a 	mov	r3,r2
   12b38:	00801444 	movi	r2,81
   12b3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12b40:	00bfffc4 	movi	r2,-1
}
   12b44:	e037883a 	mov	sp,fp
   12b48:	dfc00117 	ldw	ra,4(sp)
   12b4c:	df000017 	ldw	fp,0(sp)
   12b50:	dec00204 	addi	sp,sp,8
   12b54:	f800283a 	ret

00012b58 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   12b58:	defffd04 	addi	sp,sp,-12
   12b5c:	dfc00215 	stw	ra,8(sp)
   12b60:	df000115 	stw	fp,4(sp)
   12b64:	df000104 	addi	fp,sp,4
   12b68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   12b6c:	d1600d04 	addi	r5,gp,-32716
   12b70:	e13fff17 	ldw	r4,-4(fp)
   12b74:	0016f680 	call	16f68 <alt_dev_llist_insert>
}
   12b78:	e037883a 	mov	sp,fp
   12b7c:	dfc00117 	ldw	ra,4(sp)
   12b80:	df000017 	ldw	fp,0(sp)
   12b84:	dec00204 	addi	sp,sp,8
   12b88:	f800283a 	ret

00012b8c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   12b8c:	defffd04 	addi	sp,sp,-12
   12b90:	dfc00215 	stw	ra,8(sp)
   12b94:	df000115 	stw	fp,4(sp)
   12b98:	df000104 	addi	fp,sp,4
   12b9c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   12ba0:	0017a680 	call	17a68 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   12ba4:	00800044 	movi	r2,1
   12ba8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   12bac:	0001883a 	nop
   12bb0:	e037883a 	mov	sp,fp
   12bb4:	dfc00117 	ldw	ra,4(sp)
   12bb8:	df000017 	ldw	fp,0(sp)
   12bbc:	dec00204 	addi	sp,sp,8
   12bc0:	f800283a 	ret

00012bc4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   12bc4:	defffd04 	addi	sp,sp,-12
   12bc8:	dfc00215 	stw	ra,8(sp)
   12bcc:	df000115 	stw	fp,4(sp)
   12bd0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   12bd4:	01c00204 	movi	r7,8
   12bd8:	000d883a 	mov	r6,zero
   12bdc:	000b883a 	mov	r5,zero
   12be0:	013fc834 	movhi	r4,65312
   12be4:	21080004 	addi	r4,r4,8192
   12be8:	00157280 	call	15728 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   12bec:	010000b4 	movhi	r4,2
   12bf0:	21242304 	addi	r4,r4,-28532
   12bf4:	00130840 	call	13084 <alt_avalon_i2c_init>
    ALTERA_AVALON_I2C_INIT ( I2C_1, i2c_1);
   12bf8:	010000b4 	movhi	r4,2
   12bfc:	21243104 	addi	r4,r4,-28476
   12c00:	00130840 	call	13084 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   12c04:	01800204 	movi	r6,8
   12c08:	000b883a 	mov	r5,zero
   12c0c:	010000b4 	movhi	r4,2
   12c10:	21244904 	addi	r4,r4,-28380
   12c14:	0014bb00 	call	14bb0 <altera_avalon_jtag_uart_init>
   12c18:	010000b4 	movhi	r4,2
   12c1c:	21243f04 	addi	r4,r4,-28420
   12c20:	0012b580 	call	12b58 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   12c24:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   12c28:	0001883a 	nop
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
   12c2c:	01bfffc4 	movi	r6,-1
   12c30:	017fffc4 	movi	r5,-1
   12c34:	010000b4 	movhi	r4,2
   12c38:	21285704 	addi	r4,r4,-24228
   12c3c:	00158f80 	call	158f8 <altera_modular_adc_init>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
   12c40:	008000b4 	movhi	r2,2
   12c44:	10a86604 	addi	r2,r2,-24168
   12c48:	10800a17 	ldw	r2,40(r2)
   12c4c:	10800017 	ldw	r2,0(r2)
   12c50:	1007883a 	mov	r3,r2
   12c54:	008000b4 	movhi	r2,2
   12c58:	10a86604 	addi	r2,r2,-24168
   12c5c:	10c00b15 	stw	r3,44(r2)
   12c60:	008000b4 	movhi	r2,2
   12c64:	10a86604 	addi	r2,r2,-24168
   12c68:	10800a17 	ldw	r2,40(r2)
   12c6c:	10800104 	addi	r2,r2,4
   12c70:	10800017 	ldw	r2,0(r2)
   12c74:	1007883a 	mov	r3,r2
   12c78:	008000b4 	movhi	r2,2
   12c7c:	10a86604 	addi	r2,r2,-24168
   12c80:	10c00c15 	stw	r3,48(r2)
   12c84:	008000b4 	movhi	r2,2
   12c88:	10a86604 	addi	r2,r2,-24168
   12c8c:	10800a17 	ldw	r2,40(r2)
   12c90:	10800204 	addi	r2,r2,8
   12c94:	10800017 	ldw	r2,0(r2)
   12c98:	10ffffcc 	andi	r3,r2,65535
   12c9c:	008000b4 	movhi	r2,2
   12ca0:	10a86604 	addi	r2,r2,-24168
   12ca4:	10c00f15 	stw	r3,60(r2)
   12ca8:	008000b4 	movhi	r2,2
   12cac:	10a86604 	addi	r2,r2,-24168
   12cb0:	10800a17 	ldw	r2,40(r2)
   12cb4:	10800204 	addi	r2,r2,8
   12cb8:	10800017 	ldw	r2,0(r2)
   12cbc:	1006d43a 	srli	r3,r2,16
   12cc0:	008000b4 	movhi	r2,2
   12cc4:	10a86604 	addi	r2,r2,-24168
   12cc8:	10c01015 	stw	r3,64(r2)
   12ccc:	008000b4 	movhi	r2,2
   12cd0:	10a86604 	addi	r2,r2,-24168
   12cd4:	10800a17 	ldw	r2,40(r2)
   12cd8:	10800304 	addi	r2,r2,12
   12cdc:	10800017 	ldw	r2,0(r2)
   12ce0:	1005d07a 	srai	r2,r2,1
   12ce4:	10c0004c 	andi	r3,r2,1
   12ce8:	008000b4 	movhi	r2,2
   12cec:	10a86604 	addi	r2,r2,-24168
   12cf0:	10c00d15 	stw	r3,52(r2)
   12cf4:	008000b4 	movhi	r2,2
   12cf8:	10a86604 	addi	r2,r2,-24168
   12cfc:	10800a17 	ldw	r2,40(r2)
   12d00:	10800304 	addi	r2,r2,12
   12d04:	10800017 	ldw	r2,0(r2)
   12d08:	1005d13a 	srai	r2,r2,4
   12d0c:	10c003cc 	andi	r3,r2,15
   12d10:	008000b4 	movhi	r2,2
   12d14:	10a86604 	addi	r2,r2,-24168
   12d18:	10c00e15 	stw	r3,56(r2)
   12d1c:	008000b4 	movhi	r2,2
   12d20:	10a86604 	addi	r2,r2,-24168
   12d24:	10800a17 	ldw	r2,40(r2)
   12d28:	10800304 	addi	r2,r2,12
   12d2c:	10800017 	ldw	r2,0(r2)
   12d30:	1005d43a 	srai	r2,r2,16
   12d34:	e0bfff05 	stb	r2,-4(fp)
   12d38:	008000b4 	movhi	r2,2
   12d3c:	10a86604 	addi	r2,r2,-24168
   12d40:	10800a17 	ldw	r2,40(r2)
   12d44:	10800304 	addi	r2,r2,12
   12d48:	10800017 	ldw	r2,0(r2)
   12d4c:	1004d63a 	srli	r2,r2,24
   12d50:	e0bfff45 	stb	r2,-3(fp)
   12d54:	008000b4 	movhi	r2,2
   12d58:	10a86604 	addi	r2,r2,-24168
   12d5c:	10800e17 	ldw	r2,56(r2)
   12d60:	10800058 	cmpnei	r2,r2,1
   12d64:	1000041e 	bne	r2,zero,12d78 <alt_sys_init+0x1b4>
   12d68:	008000b4 	movhi	r2,2
   12d6c:	10a86604 	addi	r2,r2,-24168
   12d70:	10001115 	stw	zero,68(r2)
   12d74:	00000e06 	br	12db0 <alt_sys_init+0x1ec>
   12d78:	008000b4 	movhi	r2,2
   12d7c:	10a86604 	addi	r2,r2,-24168
   12d80:	10800e17 	ldw	r2,56(r2)
   12d84:	10800098 	cmpnei	r2,r2,2
   12d88:	1000051e 	bne	r2,zero,12da0 <alt_sys_init+0x1dc>
   12d8c:	008000b4 	movhi	r2,2
   12d90:	10a86604 	addi	r2,r2,-24168
   12d94:	00c00044 	movi	r3,1
   12d98:	10c01115 	stw	r3,68(r2)
   12d9c:	00000406 	br	12db0 <alt_sys_init+0x1ec>
   12da0:	008000b4 	movhi	r2,2
   12da4:	10a86604 	addi	r2,r2,-24168
   12da8:	00c00084 	movi	r3,2
   12dac:	10c01115 	stw	r3,68(r2)
   12db0:	e0bfff03 	ldbu	r2,-4(fp)
   12db4:	00c00804 	movi	r3,32
   12db8:	1885c83a 	sub	r2,r3,r2
   12dbc:	00ffffc4 	movi	r3,-1
   12dc0:	1886d83a 	srl	r3,r3,r2
   12dc4:	008000b4 	movhi	r2,2
   12dc8:	10a86604 	addi	r2,r2,-24168
   12dcc:	10c01215 	stw	r3,72(r2)
   12dd0:	e0ffff03 	ldbu	r3,-4(fp)
   12dd4:	008000b4 	movhi	r2,2
   12dd8:	10a86604 	addi	r2,r2,-24168
   12ddc:	10801117 	ldw	r2,68(r2)
   12de0:	1887883a 	add	r3,r3,r2
   12de4:	008000b4 	movhi	r2,2
   12de8:	10a86604 	addi	r2,r2,-24168
   12dec:	10c01315 	stw	r3,76(r2)
   12df0:	e0bfff43 	ldbu	r2,-3(fp)
   12df4:	00c00804 	movi	r3,32
   12df8:	1885c83a 	sub	r2,r3,r2
   12dfc:	00ffffc4 	movi	r3,-1
   12e00:	1886d83a 	srl	r3,r3,r2
   12e04:	008000b4 	movhi	r2,2
   12e08:	10a86604 	addi	r2,r2,-24168
   12e0c:	10c01415 	stw	r3,80(r2)
   12e10:	010000b4 	movhi	r4,2
   12e14:	21286604 	addi	r4,r4,-24168
   12e18:	0012b580 	call	12b58 <alt_dev_reg>
}
   12e1c:	0001883a 	nop
   12e20:	e037883a 	mov	sp,fp
   12e24:	dfc00117 	ldw	ra,4(sp)
   12e28:	df000017 	ldw	fp,0(sp)
   12e2c:	dec00204 	addi	sp,sp,8
   12e30:	f800283a 	ret

00012e34 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   12e34:	defff904 	addi	sp,sp,-28
   12e38:	dfc00615 	stw	ra,24(sp)
   12e3c:	df000515 	stw	fp,20(sp)
   12e40:	df000504 	addi	fp,sp,20
   12e44:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   12e48:	008000b4 	movhi	r2,2
   12e4c:	10a1a804 	addi	r2,r2,-31072
   12e50:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   12e54:	e0bfff17 	ldw	r2,-4(fp)
   12e58:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   12e5c:	e0bffc17 	ldw	r2,-16(fp)
   12e60:	10800717 	ldw	r2,28(r2)
   12e64:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   12e68:	e0bffd17 	ldw	r2,-12(fp)
   12e6c:	10800217 	ldw	r2,8(r2)
   12e70:	10800098 	cmpnei	r2,r2,2
   12e74:	1000251e 	bne	r2,zero,12f0c <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   12e78:	e0bffd17 	ldw	r2,-12(fp)
   12e7c:	10c00017 	ldw	r3,0(r2)
   12e80:	e0bffd17 	ldw	r2,-12(fp)
   12e84:	10800117 	ldw	r2,4(r2)
   12e88:	e13ffe04 	addi	r4,fp,-8
   12e8c:	200f883a 	mov	r7,r4
   12e90:	100d883a 	mov	r6,r2
   12e94:	180b883a 	mov	r5,r3
   12e98:	e13ffc17 	ldw	r4,-16(fp)
   12e9c:	00135e40 	call	135e4 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   12ea0:	e0bffd17 	ldw	r2,-12(fp)
   12ea4:	10c00117 	ldw	r3,4(r2)
   12ea8:	e0bffe17 	ldw	r2,-8(fp)
   12eac:	1887c83a 	sub	r3,r3,r2
   12eb0:	e0bffd17 	ldw	r2,-12(fp)
   12eb4:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   12eb8:	e0bffd17 	ldw	r2,-12(fp)
   12ebc:	10c00017 	ldw	r3,0(r2)
   12ec0:	e0bffe17 	ldw	r2,-8(fp)
   12ec4:	1887883a 	add	r3,r3,r2
   12ec8:	e0bffd17 	ldw	r2,-12(fp)
   12ecc:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   12ed0:	e0bffd17 	ldw	r2,-12(fp)
   12ed4:	10800117 	ldw	r2,4(r2)
   12ed8:	10000c26 	beq	r2,zero,12f0c <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   12edc:	01400704 	movi	r5,28
   12ee0:	e13ffc17 	ldw	r4,-16(fp)
   12ee4:	001479c0 	call	1479c <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   12ee8:	01400084 	movi	r5,2
   12eec:	e13ffc17 	ldw	r4,-16(fp)
   12ef0:	00148400 	call	14840 <alt_avalon_i2c_int_enable>
   12ef4:	00000e06 	br	12f30 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   12ef8:	e0bffb17 	ldw	r2,-20(fp)
   12efc:	10bfffc4 	addi	r2,r2,-1
   12f00:	e0bffb15 	stw	r2,-20(fp)
   12f04:	e0bffb17 	ldw	r2,-20(fp)
   12f08:	10000426 	beq	r2,zero,12f1c <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   12f0c:	e13ffc17 	ldw	r4,-16(fp)
   12f10:	00135a00 	call	135a0 <alt_avalon_i2c_is_busy>
   12f14:	103ff81e 	bne	r2,zero,12ef8 <__alt_mem_Onchip_SRAM+0xf8012ef8>
   12f18:	00000106 	br	12f20 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   12f1c:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   12f20:	e13ffc17 	ldw	r4,-16(fp)
   12f24:	00132480 	call	13248 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   12f28:	e0bffd17 	ldw	r2,-12(fp)
   12f2c:	10000215 	stw	zero,8(r2)
}
   12f30:	e037883a 	mov	sp,fp
   12f34:	dfc00117 	ldw	ra,4(sp)
   12f38:	df000017 	ldw	fp,0(sp)
   12f3c:	dec00204 	addi	sp,sp,8
   12f40:	f800283a 	ret

00012f44 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   12f44:	defffc04 	addi	sp,sp,-16
   12f48:	dfc00315 	stw	ra,12(sp)
   12f4c:	df000215 	stw	fp,8(sp)
   12f50:	df000204 	addi	fp,sp,8
   12f54:	e13ffe15 	stw	r4,-8(fp)
   12f58:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   12f5c:	e0bfff17 	ldw	r2,-4(fp)
   12f60:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   12f64:	e1ffff17 	ldw	r7,-4(fp)
   12f68:	000d883a 	mov	r6,zero
   12f6c:	01400074 	movhi	r5,1
   12f70:	294b8d04 	addi	r5,r5,11828
   12f74:	e13ffe17 	ldw	r4,-8(fp)
   12f78:	00130300 	call	13030 <alt_avalon_i2c_register_callback>
}
   12f7c:	0001883a 	nop
   12f80:	e037883a 	mov	sp,fp
   12f84:	dfc00117 	ldw	ra,4(sp)
   12f88:	df000017 	ldw	fp,0(sp)
   12f8c:	dec00204 	addi	sp,sp,8
   12f90:	f800283a 	ret

00012f94 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   12f94:	defff904 	addi	sp,sp,-28
   12f98:	dfc00615 	stw	ra,24(sp)
   12f9c:	df000515 	stw	fp,20(sp)
   12fa0:	df000504 	addi	fp,sp,20
   12fa4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   12fa8:	e0bfff17 	ldw	r2,-4(fp)
   12fac:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   12fb0:	014007c4 	movi	r5,31
   12fb4:	e13ffb17 	ldw	r4,-20(fp)
   12fb8:	00147d80 	call	147d8 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   12fbc:	01400704 	movi	r5,28
   12fc0:	e13ffb17 	ldw	r4,-20(fp)
   12fc4:	001479c0 	call	1479c <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   12fc8:	e0bffb17 	ldw	r2,-20(fp)
   12fcc:	10800617 	ldw	r2,24(r2)
   12fd0:	10001126 	beq	r2,zero,13018 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fd4:	0005303a 	rdctl	r2,status
   12fd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fdc:	e0fffd17 	ldw	r3,-12(fp)
   12fe0:	00bfff84 	movi	r2,-2
   12fe4:	1884703a 	and	r2,r3,r2
   12fe8:	1001703a 	wrctl	status,r2
  
  return context;
   12fec:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   12ff0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   12ff4:	e0bffb17 	ldw	r2,-20(fp)
   12ff8:	10800617 	ldw	r2,24(r2)
   12ffc:	e13ffb17 	ldw	r4,-20(fp)
   13000:	103ee83a 	callr	r2
   13004:	e0bffc17 	ldw	r2,-16(fp)
   13008:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1300c:	e0bffe17 	ldw	r2,-8(fp)
   13010:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   13014:	0001883a 	nop
   13018:	0001883a 	nop
}
   1301c:	e037883a 	mov	sp,fp
   13020:	dfc00117 	ldw	ra,4(sp)
   13024:	df000017 	ldw	fp,0(sp)
   13028:	dec00204 	addi	sp,sp,8
   1302c:	f800283a 	ret

00013030 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   13030:	defffb04 	addi	sp,sp,-20
   13034:	df000415 	stw	fp,16(sp)
   13038:	df000404 	addi	fp,sp,16
   1303c:	e13ffc15 	stw	r4,-16(fp)
   13040:	e17ffd15 	stw	r5,-12(fp)
   13044:	e1bffe15 	stw	r6,-8(fp)
   13048:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   1304c:	e0bffc17 	ldw	r2,-16(fp)
   13050:	e0fffd17 	ldw	r3,-12(fp)
   13054:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   13058:	e0bffc17 	ldw	r2,-16(fp)
   1305c:	e0ffff17 	ldw	r3,-4(fp)
   13060:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   13064:	e0bffc17 	ldw	r2,-16(fp)
   13068:	e0fffe17 	ldw	r3,-8(fp)
   1306c:	10c00815 	stw	r3,32(r2)

    return ;
   13070:	0001883a 	nop
}
   13074:	e037883a 	mov	sp,fp
   13078:	df000017 	ldw	fp,0(sp)
   1307c:	dec00104 	addi	sp,sp,4
   13080:	f800283a 	ret

00013084 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   13084:	defff704 	addi	sp,sp,-36
   13088:	dfc00815 	stw	ra,32(sp)
   1308c:	df000715 	stw	fp,28(sp)
   13090:	df000704 	addi	fp,sp,28
   13094:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   13098:	e13fff17 	ldw	r4,-4(fp)
   1309c:	00132480 	call	13248 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   130a0:	014007c4 	movi	r5,31
   130a4:	e13fff17 	ldw	r4,-4(fp)
   130a8:	00147d80 	call	147d8 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   130ac:	01400704 	movi	r5,28
   130b0:	e13fff17 	ldw	r4,-4(fp)
   130b4:	001479c0 	call	1479c <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   130b8:	014000c4 	movi	r5,3
   130bc:	e13fff17 	ldw	r4,-4(fp)
   130c0:	00149e40 	call	149e4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   130c4:	014000c4 	movi	r5,3
   130c8:	e13fff17 	ldw	r4,-4(fp)
   130cc:	00149340 	call	14934 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   130d0:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   130d4:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   130d8:	e0bffb04 	addi	r2,fp,-20
   130dc:	018000b4 	movhi	r6,2
   130e0:	31a1a804 	addi	r6,r6,-31072
   130e4:	100b883a 	mov	r5,r2
   130e8:	e13fff17 	ldw	r4,-4(fp)
   130ec:	00134a40 	call	134a4 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   130f0:	e0bffb04 	addi	r2,fp,-20
   130f4:	100b883a 	mov	r5,r2
   130f8:	e13fff17 	ldw	r4,-4(fp)
   130fc:	00133440 	call	13344 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   13100:	d1601404 	addi	r5,gp,-32688
   13104:	e13fff17 	ldw	r4,-4(fp)
   13108:	0016f680 	call	16f68 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1310c:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   13110:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   13114:	e0bffa17 	ldw	r2,-24(fp)
   13118:	10000c1e 	bne	r2,zero,1314c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   1311c:	e0bfff17 	ldw	r2,-4(fp)
   13120:	10c00417 	ldw	r3,16(r2)
   13124:	e0bfff17 	ldw	r2,-4(fp)
   13128:	10800517 	ldw	r2,20(r2)
   1312c:	d8000015 	stw	zero,0(sp)
   13130:	e1ffff17 	ldw	r7,-4(fp)
   13134:	01800074 	movhi	r6,1
   13138:	318be504 	addi	r6,r6,12180
   1313c:	100b883a 	mov	r5,r2
   13140:	1809883a 	mov	r4,r3
   13144:	001717c0 	call	1717c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   13148:	00000406 	br	1315c <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   1314c:	010000b4 	movhi	r4,2
   13150:	21217f04 	addi	r4,r4,-31236
   13154:	00178000 	call	17800 <alt_printf>
    }

    return;
   13158:	0001883a 	nop

}
   1315c:	e037883a 	mov	sp,fp
   13160:	dfc00117 	ldw	ra,4(sp)
   13164:	df000017 	ldw	fp,0(sp)
   13168:	dec00204 	addi	sp,sp,8
   1316c:	f800283a 	ret

00013170 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   13170:	defffc04 	addi	sp,sp,-16
   13174:	dfc00315 	stw	ra,12(sp)
   13178:	df000215 	stw	fp,8(sp)
   1317c:	df000204 	addi	fp,sp,8
   13180:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   13184:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   13188:	d1601404 	addi	r5,gp,-32688
   1318c:	e13fff17 	ldw	r4,-4(fp)
   13190:	00170cc0 	call	170cc <alt_find_dev>
   13194:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   13198:	e0bffe17 	ldw	r2,-8(fp)
}
   1319c:	e037883a 	mov	sp,fp
   131a0:	dfc00117 	ldw	ra,4(sp)
   131a4:	df000017 	ldw	fp,0(sp)
   131a8:	dec00204 	addi	sp,sp,8
   131ac:	f800283a 	ret

000131b0 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   131b0:	defffc04 	addi	sp,sp,-16
   131b4:	df000315 	stw	fp,12(sp)
   131b8:	df000304 	addi	fp,sp,12
   131bc:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   131c0:	e0bfff17 	ldw	r2,-4(fp)
   131c4:	10800717 	ldw	r2,28(r2)
   131c8:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   131cc:	e0bfff17 	ldw	r2,-4(fp)
   131d0:	10800317 	ldw	r2,12(r2)
   131d4:	10800204 	addi	r2,r2,8
   131d8:	10800037 	ldwio	r2,0(r2)
   131dc:	1080004c 	andi	r2,r2,1
   131e0:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   131e4:	e0bffe17 	ldw	r2,-8(fp)
   131e8:	10000226 	beq	r2,zero,131f4 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   131ec:	00bffe44 	movi	r2,-7
   131f0:	00001106 	br	13238 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   131f4:	e0bfff17 	ldw	r2,-4(fp)
   131f8:	10c00617 	ldw	r3,24(r2)
   131fc:	00800074 	movhi	r2,1
   13200:	108b8d04 	addi	r2,r2,11828
   13204:	1880021e 	bne	r3,r2,13210 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   13208:	e0bffd17 	ldw	r2,-12(fp)
   1320c:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   13210:	e0bfff17 	ldw	r2,-4(fp)
   13214:	10800317 	ldw	r2,12(r2)
   13218:	10800204 	addi	r2,r2,8
   1321c:	e0ffff17 	ldw	r3,-4(fp)
   13220:	18c00317 	ldw	r3,12(r3)
   13224:	18c00204 	addi	r3,r3,8
   13228:	18c00037 	ldwio	r3,0(r3)
   1322c:	18c00054 	ori	r3,r3,1
   13230:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   13234:	0005883a 	mov	r2,zero
}
   13238:	e037883a 	mov	sp,fp
   1323c:	df000017 	ldw	fp,0(sp)
   13240:	dec00104 	addi	sp,sp,4
   13244:	f800283a 	ret

00013248 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   13248:	defffe04 	addi	sp,sp,-8
   1324c:	df000115 	stw	fp,4(sp)
   13250:	df000104 	addi	fp,sp,4
   13254:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   13258:	e0bfff17 	ldw	r2,-4(fp)
   1325c:	10800317 	ldw	r2,12(r2)
   13260:	10800204 	addi	r2,r2,8
   13264:	e0ffff17 	ldw	r3,-4(fp)
   13268:	18c00317 	ldw	r3,12(r3)
   1326c:	18c00204 	addi	r3,r3,8
   13270:	19000037 	ldwio	r4,0(r3)
   13274:	00ffff84 	movi	r3,-2
   13278:	20c6703a 	and	r3,r4,r3
   1327c:	10c00035 	stwio	r3,0(r2)

}
   13280:	0001883a 	nop
   13284:	e037883a 	mov	sp,fp
   13288:	df000017 	ldw	fp,0(sp)
   1328c:	dec00104 	addi	sp,sp,4
   13290:	f800283a 	ret

00013294 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   13294:	defffd04 	addi	sp,sp,-12
   13298:	df000215 	stw	fp,8(sp)
   1329c:	df000204 	addi	fp,sp,8
   132a0:	e13ffe15 	stw	r4,-8(fp)
   132a4:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   132a8:	e0bffe17 	ldw	r2,-8(fp)
   132ac:	10c00d17 	ldw	r3,52(r2)
   132b0:	e0bfff17 	ldw	r2,-4(fp)
   132b4:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   132b8:	e0bffe17 	ldw	r2,-8(fp)
   132bc:	10800317 	ldw	r2,12(r2)
   132c0:	10800204 	addi	r2,r2,8
   132c4:	10800037 	ldwio	r2,0(r2)
   132c8:	1080008c 	andi	r2,r2,2
   132cc:	1005d07a 	srai	r2,r2,1
   132d0:	1007883a 	mov	r3,r2
   132d4:	e0bfff17 	ldw	r2,-4(fp)
   132d8:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   132dc:	e0bffe17 	ldw	r2,-8(fp)
   132e0:	10800317 	ldw	r2,12(r2)
   132e4:	10800904 	addi	r2,r2,36
   132e8:	10800037 	ldwio	r2,0(r2)
   132ec:	1007883a 	mov	r3,r2
   132f0:	e0bfff17 	ldw	r2,-4(fp)
   132f4:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   132f8:	e0bffe17 	ldw	r2,-8(fp)
   132fc:	10800317 	ldw	r2,12(r2)
   13300:	10800804 	addi	r2,r2,32
   13304:	10800037 	ldwio	r2,0(r2)
   13308:	1007883a 	mov	r3,r2
   1330c:	e0bfff17 	ldw	r2,-4(fp)
   13310:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   13314:	e0bffe17 	ldw	r2,-8(fp)
   13318:	10800317 	ldw	r2,12(r2)
   1331c:	10800a04 	addi	r2,r2,40
   13320:	10800037 	ldwio	r2,0(r2)
   13324:	1007883a 	mov	r3,r2
   13328:	e0bfff17 	ldw	r2,-4(fp)
   1332c:	10c0030d 	sth	r3,12(r2)
}
   13330:	0001883a 	nop
   13334:	e037883a 	mov	sp,fp
   13338:	df000017 	ldw	fp,0(sp)
   1333c:	dec00104 	addi	sp,sp,4
   13340:	f800283a 	ret

00013344 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   13344:	defffd04 	addi	sp,sp,-12
   13348:	df000215 	stw	fp,8(sp)
   1334c:	df000204 	addi	fp,sp,8
   13350:	e13ffe15 	stw	r4,-8(fp)
   13354:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   13358:	e0bfff17 	ldw	r2,-4(fp)
   1335c:	10c00017 	ldw	r3,0(r2)
   13360:	e0bffe17 	ldw	r2,-8(fp)
   13364:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   13368:	e0bffe17 	ldw	r2,-8(fp)
   1336c:	10800317 	ldw	r2,12(r2)
   13370:	10c00204 	addi	r3,r2,8
   13374:	e0bffe17 	ldw	r2,-8(fp)
   13378:	10800317 	ldw	r2,12(r2)
   1337c:	10800204 	addi	r2,r2,8
   13380:	10800037 	ldwio	r2,0(r2)
   13384:	1009883a 	mov	r4,r2
   13388:	00bfff44 	movi	r2,-3
   1338c:	2088703a 	and	r4,r4,r2
   13390:	e0bfff17 	ldw	r2,-4(fp)
   13394:	10800117 	ldw	r2,4(r2)
   13398:	1085883a 	add	r2,r2,r2
   1339c:	1080008c 	andi	r2,r2,2
   133a0:	2084b03a 	or	r2,r4,r2
   133a4:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   133a8:	e0bffe17 	ldw	r2,-8(fp)
   133ac:	10800317 	ldw	r2,12(r2)
   133b0:	10800904 	addi	r2,r2,36
   133b4:	e0ffff17 	ldw	r3,-4(fp)
   133b8:	18c0020b 	ldhu	r3,8(r3)
   133bc:	18ffffcc 	andi	r3,r3,65535
   133c0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   133c4:	e0bffe17 	ldw	r2,-8(fp)
   133c8:	10800317 	ldw	r2,12(r2)
   133cc:	10800804 	addi	r2,r2,32
   133d0:	e0ffff17 	ldw	r3,-4(fp)
   133d4:	18c0028b 	ldhu	r3,10(r3)
   133d8:	18ffffcc 	andi	r3,r3,65535
   133dc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   133e0:	e0bffe17 	ldw	r2,-8(fp)
   133e4:	10800317 	ldw	r2,12(r2)
   133e8:	10800a04 	addi	r2,r2,40
   133ec:	e0ffff17 	ldw	r3,-4(fp)
   133f0:	18c0030b 	ldhu	r3,12(r3)
   133f4:	18ffffcc 	andi	r3,r3,65535
   133f8:	10c00035 	stwio	r3,0(r2)
}
   133fc:	0001883a 	nop
   13400:	e037883a 	mov	sp,fp
   13404:	df000017 	ldw	fp,0(sp)
   13408:	dec00104 	addi	sp,sp,4
   1340c:	f800283a 	ret

00013410 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   13410:	defffb04 	addi	sp,sp,-20
   13414:	dfc00415 	stw	ra,16(sp)
   13418:	df000315 	stw	fp,12(sp)
   1341c:	df000304 	addi	fp,sp,12
   13420:	e13ffd15 	stw	r4,-12(fp)
   13424:	e17ffe15 	stw	r5,-8(fp)
   13428:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   1342c:	e0bffe17 	ldw	r2,-8(fp)
   13430:	1080028b 	ldhu	r2,10(r2)
   13434:	10bfffcc 	andi	r2,r2,65535
   13438:	10000426 	beq	r2,zero,1344c <alt_avalon_i2c_master_config_speed_get+0x3c>
   1343c:	e0bffe17 	ldw	r2,-8(fp)
   13440:	1080020b 	ldhu	r2,8(r2)
   13444:	10bfffcc 	andi	r2,r2,65535
   13448:	1000021e 	bne	r2,zero,13454 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   1344c:	00bfff44 	movi	r2,-3
   13450:	00000f06 	br	13490 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   13454:	e0bffd17 	ldw	r2,-12(fp)
   13458:	11000c17 	ldw	r4,48(r2)
   1345c:	e0bffe17 	ldw	r2,-8(fp)
   13460:	1080028b 	ldhu	r2,10(r2)
   13464:	10ffffcc 	andi	r3,r2,65535
   13468:	e0bffe17 	ldw	r2,-8(fp)
   1346c:	1080020b 	ldhu	r2,8(r2)
   13470:	10bfffcc 	andi	r2,r2,65535
   13474:	1885883a 	add	r2,r3,r2
   13478:	100b883a 	mov	r5,r2
   1347c:	00014ac0 	call	14ac <__udivsi3>
   13480:	1007883a 	mov	r3,r2
   13484:	e0bfff17 	ldw	r2,-4(fp)
   13488:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   1348c:	0005883a 	mov	r2,zero
}
   13490:	e037883a 	mov	sp,fp
   13494:	dfc00117 	ldw	ra,4(sp)
   13498:	df000017 	ldw	fp,0(sp)
   1349c:	dec00204 	addi	sp,sp,8
   134a0:	f800283a 	ret

000134a4 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   134a4:	defff904 	addi	sp,sp,-28
   134a8:	dfc00615 	stw	ra,24(sp)
   134ac:	df000515 	stw	fp,20(sp)
   134b0:	df000504 	addi	fp,sp,20
   134b4:	e13ffd15 	stw	r4,-12(fp)
   134b8:	e17ffe15 	stw	r5,-8(fp)
   134bc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   134c0:	e0ffff17 	ldw	r3,-4(fp)
   134c4:	008001b4 	movhi	r2,6
   134c8:	1086a004 	addi	r2,r2,6784
   134cc:	10c00436 	bltu	r2,r3,134e0 <alt_avalon_i2c_master_config_speed_set+0x3c>
   134d0:	e0bfff17 	ldw	r2,-4(fp)
   134d4:	10000226 	beq	r2,zero,134e0 <alt_avalon_i2c_master_config_speed_set+0x3c>
   134d8:	e0bfff17 	ldw	r2,-4(fp)
   134dc:	1000021e 	bne	r2,zero,134e8 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   134e0:	00bfff04 	movi	r2,-4
   134e4:	00002906 	br	1358c <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   134e8:	e0bffd17 	ldw	r2,-12(fp)
   134ec:	10c00c17 	ldw	r3,48(r2)
   134f0:	e0bfff17 	ldw	r2,-4(fp)
   134f4:	1085883a 	add	r2,r2,r2
   134f8:	100b883a 	mov	r5,r2
   134fc:	1809883a 	mov	r4,r3
   13500:	00014ac0 	call	14ac <__udivsi3>
   13504:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   13508:	e0bffb17 	ldw	r2,-20(fp)
   1350c:	10800f04 	addi	r2,r2,60
   13510:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   13514:	e0bffb17 	ldw	r2,-20(fp)
   13518:	10bff104 	addi	r2,r2,-60
   1351c:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   13520:	e0ffff17 	ldw	r3,-4(fp)
   13524:	008000b4 	movhi	r2,2
   13528:	10a1a804 	addi	r2,r2,-31072
   1352c:	10c0042e 	bgeu	r2,r3,13540 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   13530:	e0bffe17 	ldw	r2,-8(fp)
   13534:	00c00044 	movi	r3,1
   13538:	10c00115 	stw	r3,4(r2)
   1353c:	00000206 	br	13548 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   13540:	e0bffe17 	ldw	r2,-8(fp)
   13544:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   13548:	e0bffb17 	ldw	r2,-20(fp)
   1354c:	1007883a 	mov	r3,r2
   13550:	e0bffe17 	ldw	r2,-8(fp)
   13554:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   13558:	e0bffc17 	ldw	r2,-16(fp)
   1355c:	1007883a 	mov	r3,r2
   13560:	e0bffe17 	ldw	r2,-8(fp)
   13564:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   13568:	e0bffb17 	ldw	r2,-20(fp)
   1356c:	1007883a 	mov	r3,r2
   13570:	e0bffb17 	ldw	r2,-20(fp)
   13574:	1004d07a 	srli	r2,r2,1
   13578:	1885c83a 	sub	r2,r3,r2
   1357c:	1007883a 	mov	r3,r2
   13580:	e0bffe17 	ldw	r2,-8(fp)
   13584:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   13588:	0005883a 	mov	r2,zero

}
   1358c:	e037883a 	mov	sp,fp
   13590:	dfc00117 	ldw	ra,4(sp)
   13594:	df000017 	ldw	fp,0(sp)
   13598:	dec00204 	addi	sp,sp,8
   1359c:	f800283a 	ret

000135a0 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   135a0:	defffe04 	addi	sp,sp,-8
   135a4:	df000115 	stw	fp,4(sp)
   135a8:	df000104 	addi	fp,sp,4
   135ac:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   135b0:	e0bfff17 	ldw	r2,-4(fp)
   135b4:	10800317 	ldw	r2,12(r2)
   135b8:	10800504 	addi	r2,r2,20
   135bc:	10800037 	ldwio	r2,0(r2)
   135c0:	1080004c 	andi	r2,r2,1
   135c4:	10000226 	beq	r2,zero,135d0 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   135c8:	00800044 	movi	r2,1
   135cc:	00000106 	br	135d4 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   135d0:	0005883a 	mov	r2,zero
}
   135d4:	e037883a 	mov	sp,fp
   135d8:	df000017 	ldw	fp,0(sp)
   135dc:	dec00104 	addi	sp,sp,4
   135e0:	f800283a 	ret

000135e4 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   135e4:	defffb04 	addi	sp,sp,-20
   135e8:	df000415 	stw	fp,16(sp)
   135ec:	df000404 	addi	fp,sp,16
   135f0:	e13ffc15 	stw	r4,-16(fp)
   135f4:	e17ffd15 	stw	r5,-12(fp)
   135f8:	e1bffe15 	stw	r6,-8(fp)
   135fc:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   13600:	e0bfff17 	ldw	r2,-4(fp)
   13604:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   13608:	00001406 	br	1365c <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   1360c:	e0bfff17 	ldw	r2,-4(fp)
   13610:	10800017 	ldw	r2,0(r2)
   13614:	e0fffd17 	ldw	r3,-12(fp)
   13618:	1885883a 	add	r2,r3,r2
   1361c:	e0fffc17 	ldw	r3,-16(fp)
   13620:	18c00317 	ldw	r3,12(r3)
   13624:	18c00104 	addi	r3,r3,4
   13628:	18c00037 	ldwio	r3,0(r3)
   1362c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   13630:	e0bfff17 	ldw	r2,-4(fp)
   13634:	10800017 	ldw	r2,0(r2)
   13638:	10c00044 	addi	r3,r2,1
   1363c:	e0bfff17 	ldw	r2,-4(fp)
   13640:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   13644:	e0bfff17 	ldw	r2,-4(fp)
   13648:	10c00017 	ldw	r3,0(r2)
   1364c:	e0bffe17 	ldw	r2,-8(fp)
   13650:	1880021e 	bne	r3,r2,1365c <alt_avalon_i2c_rx_read_available+0x78>
   13654:	e0bffe17 	ldw	r2,-8(fp)
   13658:	1000061e 	bne	r2,zero,13674 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   1365c:	e0bffc17 	ldw	r2,-16(fp)
   13660:	10800317 	ldw	r2,12(r2)
   13664:	10800704 	addi	r2,r2,28
   13668:	10800037 	ldwio	r2,0(r2)
   1366c:	103fe71e 	bne	r2,zero,1360c <__alt_mem_Onchip_SRAM+0xf801360c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   13670:	00000106 	br	13678 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   13674:	0001883a 	nop
    }
}
   13678:	0001883a 	nop
   1367c:	e037883a 	mov	sp,fp
   13680:	df000017 	ldw	fp,0(sp)
   13684:	dec00104 	addi	sp,sp,4
   13688:	f800283a 	ret

0001368c <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   1368c:	defffa04 	addi	sp,sp,-24
   13690:	dfc00515 	stw	ra,20(sp)
   13694:	df000415 	stw	fp,16(sp)
   13698:	df000404 	addi	fp,sp,16
   1369c:	e13ffe15 	stw	r4,-8(fp)
   136a0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   136a4:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   136a8:	008000b4 	movhi	r2,2
   136ac:	10a1a804 	addi	r2,r2,-31072
   136b0:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   136b4:	00000d06 	br	136ec <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   136b8:	e0bffd17 	ldw	r2,-12(fp)
   136bc:	108002a8 	cmpgeui	r2,r2,10
   136c0:	1000021e 	bne	r2,zero,136cc <alt_avalon_i2c_rx_read+0x40>
   136c4:	0109c404 	movi	r4,10000
   136c8:	0016db40 	call	16db4 <alt_busy_sleep>
      if (--timeout == 0)
   136cc:	e0bffd17 	ldw	r2,-12(fp)
   136d0:	10bfffc4 	addi	r2,r2,-1
   136d4:	e0bffd15 	stw	r2,-12(fp)
   136d8:	e0bffd17 	ldw	r2,-12(fp)
   136dc:	1000031e 	bne	r2,zero,136ec <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   136e0:	00bfff84 	movi	r2,-2
   136e4:	e0bffc15 	stw	r2,-16(fp)
        break;
   136e8:	00000506 	br	13700 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   136ec:	e0bffe17 	ldw	r2,-8(fp)
   136f0:	10800317 	ldw	r2,12(r2)
   136f4:	10800704 	addi	r2,r2,28
   136f8:	10800037 	ldwio	r2,0(r2)
   136fc:	103fee26 	beq	r2,zero,136b8 <__alt_mem_Onchip_SRAM+0xf80136b8>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   13700:	e0bffe17 	ldw	r2,-8(fp)
   13704:	10800317 	ldw	r2,12(r2)
   13708:	10800104 	addi	r2,r2,4
   1370c:	10800037 	ldwio	r2,0(r2)
   13710:	1007883a 	mov	r3,r2
   13714:	e0bfff17 	ldw	r2,-4(fp)
   13718:	10c00005 	stb	r3,0(r2)
        
    return status;
   1371c:	e0bffc17 	ldw	r2,-16(fp)
}
   13720:	e037883a 	mov	sp,fp
   13724:	dfc00117 	ldw	ra,4(sp)
   13728:	df000017 	ldw	fp,0(sp)
   1372c:	dec00204 	addi	sp,sp,8
   13730:	f800283a 	ret

00013734 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   13734:	defff804 	addi	sp,sp,-32
   13738:	dfc00715 	stw	ra,28(sp)
   1373c:	df000615 	stw	fp,24(sp)
   13740:	df000604 	addi	fp,sp,24
   13744:	e13ffc15 	stw	r4,-16(fp)
   13748:	2809883a 	mov	r4,r5
   1374c:	3007883a 	mov	r3,r6
   13750:	3805883a 	mov	r2,r7
   13754:	e13ffd05 	stb	r4,-12(fp)
   13758:	e0fffe05 	stb	r3,-8(fp)
   1375c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   13760:	0089c404 	movi	r2,10000
   13764:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   13768:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   1376c:	00000c06 	br	137a0 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   13770:	e0bffa17 	ldw	r2,-24(fp)
   13774:	108002a8 	cmpgeui	r2,r2,10
   13778:	1000021e 	bne	r2,zero,13784 <alt_avalon_i2c_cmd_write+0x50>
   1377c:	0109c404 	movi	r4,10000
   13780:	0016db40 	call	16db4 <alt_busy_sleep>
      if (--timeout == 0)
   13784:	e0bffa17 	ldw	r2,-24(fp)
   13788:	10bfffc4 	addi	r2,r2,-1
   1378c:	e0bffa15 	stw	r2,-24(fp)
   13790:	e0bffa17 	ldw	r2,-24(fp)
   13794:	1000021e 	bne	r2,zero,137a0 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   13798:	00bfff84 	movi	r2,-2
   1379c:	00001906 	br	13804 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   137a0:	e0bffc17 	ldw	r2,-16(fp)
   137a4:	10800317 	ldw	r2,12(r2)
   137a8:	10800404 	addi	r2,r2,16
   137ac:	10800037 	ldwio	r2,0(r2)
   137b0:	1080004c 	andi	r2,r2,1
   137b4:	103fee26 	beq	r2,zero,13770 <__alt_mem_Onchip_SRAM+0xf8013770>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   137b8:	e0bffc17 	ldw	r2,-16(fp)
   137bc:	10800317 	ldw	r2,12(r2)
   137c0:	e13ffd03 	ldbu	r4,-12(fp)
   137c4:	e0fffe03 	ldbu	r3,-8(fp)
   137c8:	1806927a 	slli	r3,r3,9
   137cc:	20c8b03a 	or	r4,r4,r3
   137d0:	e0ffff03 	ldbu	r3,-4(fp)
   137d4:	1806923a 	slli	r3,r3,8
   137d8:	20c6b03a 	or	r3,r4,r3
   137dc:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   137e0:	e0bffb04 	addi	r2,fp,-20
   137e4:	100b883a 	mov	r5,r2
   137e8:	e13ffc17 	ldw	r4,-16(fp)
   137ec:	00139740 	call	13974 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   137f0:	e0bffb04 	addi	r2,fp,-20
   137f4:	100b883a 	mov	r5,r2
   137f8:	e13ffc17 	ldw	r4,-16(fp)
   137fc:	00139c00 	call	139c0 <alt_avalon_i2c_check_arblost>
    
    return status;
   13800:	e0bffb17 	ldw	r2,-20(fp)
}
   13804:	e037883a 	mov	sp,fp
   13808:	dfc00117 	ldw	ra,4(sp)
   1380c:	df000017 	ldw	fp,0(sp)
   13810:	dec00204 	addi	sp,sp,8
   13814:	f800283a 	ret

00013818 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   13818:	defffa04 	addi	sp,sp,-24
   1381c:	dfc00515 	stw	ra,20(sp)
   13820:	df000415 	stw	fp,16(sp)
   13824:	df000404 	addi	fp,sp,16
   13828:	e13ffd15 	stw	r4,-12(fp)
   1382c:	e17ffe15 	stw	r5,-8(fp)
   13830:	3005883a 	mov	r2,r6
   13834:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   13838:	e0bffd17 	ldw	r2,-12(fp)
   1383c:	10800d17 	ldw	r2,52(r2)
   13840:	10800058 	cmpnei	r2,r2,1
   13844:	10001c1e 	bne	r2,zero,138b8 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   13848:	e0bffd17 	ldw	r2,-12(fp)
   1384c:	10800917 	ldw	r2,36(r2)
   13850:	109e0014 	ori	r2,r2,30720
   13854:	1004d1fa 	srli	r2,r2,7
   13858:	1007883a 	mov	r3,r2
   1385c:	00bfff84 	movi	r2,-2
   13860:	1884703a 	and	r2,r3,r2
   13864:	1007883a 	mov	r3,r2
   13868:	e0bffe17 	ldw	r2,-8(fp)
   1386c:	1884b03a 	or	r2,r3,r2
   13870:	10803fcc 	andi	r2,r2,255
   13874:	e0ffff03 	ldbu	r3,-4(fp)
   13878:	000f883a 	mov	r7,zero
   1387c:	180d883a 	mov	r6,r3
   13880:	100b883a 	mov	r5,r2
   13884:	e13ffd17 	ldw	r4,-12(fp)
   13888:	00137340 	call	13734 <alt_avalon_i2c_cmd_write>
   1388c:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   13890:	e0bffd17 	ldw	r2,-12(fp)
   13894:	10800917 	ldw	r2,36(r2)
   13898:	10803fcc 	andi	r2,r2,255
   1389c:	000f883a 	mov	r7,zero
   138a0:	000d883a 	mov	r6,zero
   138a4:	100b883a 	mov	r5,r2
   138a8:	e13ffd17 	ldw	r4,-12(fp)
   138ac:	00137340 	call	13734 <alt_avalon_i2c_cmd_write>
   138b0:	e0bffc15 	stw	r2,-16(fp)
   138b4:	00000e06 	br	138f0 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   138b8:	e0bffd17 	ldw	r2,-12(fp)
   138bc:	10800917 	ldw	r2,36(r2)
   138c0:	1085883a 	add	r2,r2,r2
   138c4:	1007883a 	mov	r3,r2
   138c8:	e0bffe17 	ldw	r2,-8(fp)
   138cc:	1884b03a 	or	r2,r3,r2
   138d0:	10803fcc 	andi	r2,r2,255
   138d4:	e0ffff03 	ldbu	r3,-4(fp)
   138d8:	000f883a 	mov	r7,zero
   138dc:	180d883a 	mov	r6,r3
   138e0:	100b883a 	mov	r5,r2
   138e4:	e13ffd17 	ldw	r4,-12(fp)
   138e8:	00137340 	call	13734 <alt_avalon_i2c_cmd_write>
   138ec:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   138f0:	e0bffc17 	ldw	r2,-16(fp)
}
   138f4:	e037883a 	mov	sp,fp
   138f8:	dfc00117 	ldw	ra,4(sp)
   138fc:	df000017 	ldw	fp,0(sp)
   13900:	dec00204 	addi	sp,sp,8
   13904:	f800283a 	ret

00013908 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   13908:	defffd04 	addi	sp,sp,-12
   1390c:	df000215 	stw	fp,8(sp)
   13910:	df000204 	addi	fp,sp,8
   13914:	e13ffe15 	stw	r4,-8(fp)
   13918:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   1391c:	e0bffe17 	ldw	r2,-8(fp)
   13920:	10c00917 	ldw	r3,36(r2)
   13924:	e0bfff17 	ldw	r2,-4(fp)
   13928:	10c00015 	stw	r3,0(r2)
}
   1392c:	0001883a 	nop
   13930:	e037883a 	mov	sp,fp
   13934:	df000017 	ldw	fp,0(sp)
   13938:	dec00104 	addi	sp,sp,4
   1393c:	f800283a 	ret

00013940 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   13940:	defffd04 	addi	sp,sp,-12
   13944:	df000215 	stw	fp,8(sp)
   13948:	df000204 	addi	fp,sp,8
   1394c:	e13ffe15 	stw	r4,-8(fp)
   13950:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   13954:	e0bffe17 	ldw	r2,-8(fp)
   13958:	e0ffff17 	ldw	r3,-4(fp)
   1395c:	10c00915 	stw	r3,36(r2)
}
   13960:	0001883a 	nop
   13964:	e037883a 	mov	sp,fp
   13968:	df000017 	ldw	fp,0(sp)
   1396c:	dec00104 	addi	sp,sp,4
   13970:	f800283a 	ret

00013974 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   13974:	defffd04 	addi	sp,sp,-12
   13978:	df000215 	stw	fp,8(sp)
   1397c:	df000204 	addi	fp,sp,8
   13980:	e13ffe15 	stw	r4,-8(fp)
   13984:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   13988:	e0bffe17 	ldw	r2,-8(fp)
   1398c:	10800317 	ldw	r2,12(r2)
   13990:	10800404 	addi	r2,r2,16
   13994:	10800037 	ldwio	r2,0(r2)
   13998:	1080010c 	andi	r2,r2,4
   1399c:	10000326 	beq	r2,zero,139ac <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   139a0:	e0bfff17 	ldw	r2,-4(fp)
   139a4:	00fffec4 	movi	r3,-5
   139a8:	10c00015 	stw	r3,0(r2)
    }
}
   139ac:	0001883a 	nop
   139b0:	e037883a 	mov	sp,fp
   139b4:	df000017 	ldw	fp,0(sp)
   139b8:	dec00104 	addi	sp,sp,4
   139bc:	f800283a 	ret

000139c0 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   139c0:	defffd04 	addi	sp,sp,-12
   139c4:	df000215 	stw	fp,8(sp)
   139c8:	df000204 	addi	fp,sp,8
   139cc:	e13ffe15 	stw	r4,-8(fp)
   139d0:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   139d4:	e0bffe17 	ldw	r2,-8(fp)
   139d8:	10800317 	ldw	r2,12(r2)
   139dc:	10800404 	addi	r2,r2,16
   139e0:	10800037 	ldwio	r2,0(r2)
   139e4:	1080020c 	andi	r2,r2,8
   139e8:	10000326 	beq	r2,zero,139f8 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   139ec:	e0bfff17 	ldw	r2,-4(fp)
   139f0:	00fffe84 	movi	r3,-6
   139f4:	10c00015 	stw	r3,0(r2)
    }
}
   139f8:	0001883a 	nop
   139fc:	e037883a 	mov	sp,fp
   13a00:	df000017 	ldw	fp,0(sp)
   13a04:	dec00104 	addi	sp,sp,4
   13a08:	f800283a 	ret

00013a0c <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   13a0c:	defff804 	addi	sp,sp,-32
   13a10:	dfc00715 	stw	ra,28(sp)
   13a14:	df000615 	stw	fp,24(sp)
   13a18:	df000604 	addi	fp,sp,24
   13a1c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   13a20:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   13a24:	e0bfff17 	ldw	r2,-4(fp)
   13a28:	10800717 	ldw	r2,28(r2)
   13a2c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   13a30:	e0bffb17 	ldw	r2,-20(fp)
   13a34:	10800117 	ldw	r2,4(r2)
   13a38:	10800044 	addi	r2,r2,1
   13a3c:	0149c404 	movi	r5,10000
   13a40:	1009883a 	mov	r4,r2
   13a44:	00015680 	call	1568 <__mulsi3>
   13a48:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   13a4c:	e0bffd04 	addi	r2,fp,-12
   13a50:	100b883a 	mov	r5,r2
   13a54:	e13fff17 	ldw	r4,-4(fp)
   13a58:	00148a40 	call	148a4 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   13a5c:	e0bffd17 	ldw	r2,-12(fp)
   13a60:	100b883a 	mov	r5,r2
   13a64:	e13fff17 	ldw	r4,-4(fp)
   13a68:	00147d80 	call	147d8 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   13a6c:	e0bffc04 	addi	r2,fp,-16
   13a70:	100b883a 	mov	r5,r2
   13a74:	e13fff17 	ldw	r4,-4(fp)
   13a78:	00139740 	call	13974 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   13a7c:	e0bffc17 	ldw	r2,-16(fp)
   13a80:	10002226 	beq	r2,zero,13b0c <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   13a84:	e0bffb17 	ldw	r2,-20(fp)
   13a88:	10800217 	ldw	r2,8(r2)
   13a8c:	10001d26 	beq	r2,zero,13b04 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   13a90:	00000d06 	br	13ac8 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   13a94:	e0bffa17 	ldw	r2,-24(fp)
   13a98:	108002a8 	cmpgeui	r2,r2,10
   13a9c:	1000021e 	bne	r2,zero,13aa8 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   13aa0:	0109c404 	movi	r4,10000
   13aa4:	0016db40 	call	16db4 <alt_busy_sleep>
              if (--timeout == 0)
   13aa8:	e0bffa17 	ldw	r2,-24(fp)
   13aac:	10bfffc4 	addi	r2,r2,-1
   13ab0:	e0bffa15 	stw	r2,-24(fp)
   13ab4:	e0bffa17 	ldw	r2,-24(fp)
   13ab8:	1000031e 	bne	r2,zero,13ac8 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   13abc:	00bfff84 	movi	r2,-2
   13ac0:	e0bffc15 	stw	r2,-16(fp)
                 break;
   13ac4:	00000306 	br	13ad4 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   13ac8:	e13fff17 	ldw	r4,-4(fp)
   13acc:	00135a00 	call	135a0 <alt_avalon_i2c_is_busy>
   13ad0:	103ff01e 	bne	r2,zero,13a94 <__alt_mem_Onchip_SRAM+0xf8013a94>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   13ad4:	e0bffb17 	ldw	r2,-20(fp)
   13ad8:	10800017 	ldw	r2,0(r2)
   13adc:	e0fffe04 	addi	r3,fp,-8
   13ae0:	180f883a 	mov	r7,r3
   13ae4:	000d883a 	mov	r6,zero
   13ae8:	100b883a 	mov	r5,r2
   13aec:	e13fff17 	ldw	r4,-4(fp)
   13af0:	00135e40 	call	135e4 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   13af4:	e13fff17 	ldw	r4,-4(fp)
   13af8:	00132480 	call	13248 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   13afc:	e0bffb17 	ldw	r2,-20(fp)
   13b00:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   13b04:	e0bffc17 	ldw	r2,-16(fp)
   13b08:	00000a06 	br	13b34 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   13b0c:	e0bffb17 	ldw	r2,-20(fp)
   13b10:	10800217 	ldw	r2,8(r2)
   13b14:	10000626 	beq	r2,zero,13b30 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   13b18:	e0bffd17 	ldw	r2,-12(fp)
   13b1c:	100b883a 	mov	r5,r2
   13b20:	e13fff17 	ldw	r4,-4(fp)
   13b24:	00148400 	call	14840 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   13b28:	00bffe44 	movi	r2,-7
   13b2c:	00000106 	br	13b34 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   13b30:	0005883a 	mov	r2,zero
}
   13b34:	e037883a 	mov	sp,fp
   13b38:	dfc00117 	ldw	ra,4(sp)
   13b3c:	df000017 	ldw	fp,0(sp)
   13b40:	dec00204 	addi	sp,sp,8
   13b44:	f800283a 	ret

00013b48 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   13b48:	defff704 	addi	sp,sp,-36
   13b4c:	dfc00815 	stw	ra,32(sp)
   13b50:	df000715 	stw	fp,28(sp)
   13b54:	df000704 	addi	fp,sp,28
   13b58:	e13ffc15 	stw	r4,-16(fp)
   13b5c:	e17ffd15 	stw	r5,-12(fp)
   13b60:	e1bffe15 	stw	r6,-8(fp)
   13b64:	3805883a 	mov	r2,r7
   13b68:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   13b6c:	0089c404 	movi	r2,10000
   13b70:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   13b74:	00002206 	br	13c00 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   13b78:	e0bffb17 	ldw	r2,-20(fp)
   13b7c:	108002a8 	cmpgeui	r2,r2,10
   13b80:	1000021e 	bne	r2,zero,13b8c <alt_avalon_i2c_master_tx+0x44>
   13b84:	0109c404 	movi	r4,10000
   13b88:	0016db40 	call	16db4 <alt_busy_sleep>
      if (use_interrupts)
   13b8c:	e0bfff03 	ldbu	r2,-4(fp)
   13b90:	10000926 	beq	r2,zero,13bb8 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   13b94:	00800044 	movi	r2,1
   13b98:	d8800015 	stw	r2,0(sp)
   13b9c:	000f883a 	mov	r7,zero
   13ba0:	e1bffe17 	ldw	r6,-8(fp)
   13ba4:	e17ffd17 	ldw	r5,-12(fp)
   13ba8:	e13ffc17 	ldw	r4,-16(fp)
   13bac:	00140f40 	call	140f4 <alt_avalon_i2c_master_transmit_using_interrupts>
   13bb0:	e0bffa15 	stw	r2,-24(fp)
   13bb4:	00000806 	br	13bd8 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   13bb8:	00800044 	movi	r2,1
   13bbc:	d8800015 	stw	r2,0(sp)
   13bc0:	000f883a 	mov	r7,zero
   13bc4:	e1bffe17 	ldw	r6,-8(fp)
   13bc8:	e17ffd17 	ldw	r5,-12(fp)
   13bcc:	e13ffc17 	ldw	r4,-16(fp)
   13bd0:	0013f340 	call	13f34 <alt_avalon_i2c_master_transmit>
   13bd4:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   13bd8:	e0bffa17 	ldw	r2,-24(fp)
   13bdc:	10bffea0 	cmpeqi	r2,r2,-6
   13be0:	1000061e 	bne	r2,zero,13bfc <alt_avalon_i2c_master_tx+0xb4>
   13be4:	e0bffa17 	ldw	r2,-24(fp)
   13be8:	10bffee0 	cmpeqi	r2,r2,-5
   13bec:	1000031e 	bne	r2,zero,13bfc <alt_avalon_i2c_master_tx+0xb4>
   13bf0:	e0bffa17 	ldw	r2,-24(fp)
   13bf4:	10bffe58 	cmpnei	r2,r2,-7
   13bf8:	1000061e 	bne	r2,zero,13c14 <alt_avalon_i2c_master_tx+0xcc>
   13bfc:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   13c00:	e0bffb17 	ldw	r2,-20(fp)
   13c04:	10ffffc4 	addi	r3,r2,-1
   13c08:	e0fffb15 	stw	r3,-20(fp)
   13c0c:	103fda1e 	bne	r2,zero,13b78 <__alt_mem_Onchip_SRAM+0xf8013b78>
   13c10:	00000106 	br	13c18 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   13c14:	0001883a 	nop
    }

    return status;
   13c18:	e0bffa17 	ldw	r2,-24(fp)
}        
   13c1c:	e037883a 	mov	sp,fp
   13c20:	dfc00117 	ldw	ra,4(sp)
   13c24:	df000017 	ldw	fp,0(sp)
   13c28:	dec00204 	addi	sp,sp,8
   13c2c:	f800283a 	ret

00013c30 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   13c30:	defff704 	addi	sp,sp,-36
   13c34:	dfc00815 	stw	ra,32(sp)
   13c38:	df000715 	stw	fp,28(sp)
   13c3c:	df000704 	addi	fp,sp,28
   13c40:	e13ffc15 	stw	r4,-16(fp)
   13c44:	e17ffd15 	stw	r5,-12(fp)
   13c48:	e1bffe15 	stw	r6,-8(fp)
   13c4c:	3805883a 	mov	r2,r7
   13c50:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   13c54:	0089c404 	movi	r2,10000
   13c58:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   13c5c:	e0bfff03 	ldbu	r2,-4(fp)
   13c60:	10003426 	beq	r2,zero,13d34 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   13c64:	00001706 	br	13cc4 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   13c68:	e0bffb17 	ldw	r2,-20(fp)
   13c6c:	108002a8 	cmpgeui	r2,r2,10
   13c70:	1000021e 	bne	r2,zero,13c7c <alt_avalon_i2c_master_rx+0x4c>
   13c74:	0109c404 	movi	r4,10000
   13c78:	0016db40 	call	16db4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   13c7c:	00800044 	movi	r2,1
   13c80:	d8800015 	stw	r2,0(sp)
   13c84:	000f883a 	mov	r7,zero
   13c88:	e1bffe17 	ldw	r6,-8(fp)
   13c8c:	e17ffd17 	ldw	r5,-12(fp)
   13c90:	e13ffc17 	ldw	r4,-16(fp)
   13c94:	00145100 	call	14510 <alt_avalon_i2c_master_receive_using_interrupts>
   13c98:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   13c9c:	e0bffa17 	ldw	r2,-24(fp)
   13ca0:	10bffea0 	cmpeqi	r2,r2,-6
   13ca4:	1000061e 	bne	r2,zero,13cc0 <alt_avalon_i2c_master_rx+0x90>
   13ca8:	e0bffa17 	ldw	r2,-24(fp)
   13cac:	10bffee0 	cmpeqi	r2,r2,-5
   13cb0:	1000031e 	bne	r2,zero,13cc0 <alt_avalon_i2c_master_rx+0x90>
   13cb4:	e0bffa17 	ldw	r2,-24(fp)
   13cb8:	10bffe58 	cmpnei	r2,r2,-7
   13cbc:	1000221e 	bne	r2,zero,13d48 <alt_avalon_i2c_master_rx+0x118>
   13cc0:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   13cc4:	e0bffb17 	ldw	r2,-20(fp)
   13cc8:	10ffffc4 	addi	r3,r2,-1
   13ccc:	e0fffb15 	stw	r3,-20(fp)
   13cd0:	103fe51e 	bne	r2,zero,13c68 <__alt_mem_Onchip_SRAM+0xf8013c68>
   13cd4:	00001f06 	br	13d54 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   13cd8:	e0bffb17 	ldw	r2,-20(fp)
   13cdc:	108002a8 	cmpgeui	r2,r2,10
   13ce0:	1000021e 	bne	r2,zero,13cec <alt_avalon_i2c_master_rx+0xbc>
   13ce4:	0109c404 	movi	r4,10000
   13ce8:	0016db40 	call	16db4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   13cec:	00800044 	movi	r2,1
   13cf0:	d8800015 	stw	r2,0(sp)
   13cf4:	000f883a 	mov	r7,zero
   13cf8:	e1bffe17 	ldw	r6,-8(fp)
   13cfc:	e17ffd17 	ldw	r5,-12(fp)
   13d00:	e13ffc17 	ldw	r4,-16(fp)
   13d04:	00143000 	call	14300 <alt_avalon_i2c_master_receive>
   13d08:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   13d0c:	e0bffa17 	ldw	r2,-24(fp)
   13d10:	10bffea0 	cmpeqi	r2,r2,-6
   13d14:	1000061e 	bne	r2,zero,13d30 <alt_avalon_i2c_master_rx+0x100>
   13d18:	e0bffa17 	ldw	r2,-24(fp)
   13d1c:	10bffee0 	cmpeqi	r2,r2,-5
   13d20:	1000031e 	bne	r2,zero,13d30 <alt_avalon_i2c_master_rx+0x100>
   13d24:	e0bffa17 	ldw	r2,-24(fp)
   13d28:	10bffe58 	cmpnei	r2,r2,-7
   13d2c:	1000081e 	bne	r2,zero,13d50 <alt_avalon_i2c_master_rx+0x120>
   13d30:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   13d34:	e0bffb17 	ldw	r2,-20(fp)
   13d38:	10ffffc4 	addi	r3,r2,-1
   13d3c:	e0fffb15 	stw	r3,-20(fp)
   13d40:	103fe51e 	bne	r2,zero,13cd8 <__alt_mem_Onchip_SRAM+0xf8013cd8>
   13d44:	00000306 	br	13d54 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   13d48:	0001883a 	nop
   13d4c:	00000106 	br	13d54 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   13d50:	0001883a 	nop
      }
    }
    
    return status;
   13d54:	e0bffa17 	ldw	r2,-24(fp)
}        
   13d58:	e037883a 	mov	sp,fp
   13d5c:	dfc00117 	ldw	ra,4(sp)
   13d60:	df000017 	ldw	fp,0(sp)
   13d64:	dec00204 	addi	sp,sp,8
   13d68:	f800283a 	ret

00013d6c <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   13d6c:	defff604 	addi	sp,sp,-40
   13d70:	dfc00915 	stw	ra,36(sp)
   13d74:	df000815 	stw	fp,32(sp)
   13d78:	df000804 	addi	fp,sp,32
   13d7c:	e13ffb15 	stw	r4,-20(fp)
   13d80:	e17ffc15 	stw	r5,-16(fp)
   13d84:	e1bffd15 	stw	r6,-12(fp)
   13d88:	e1fffe15 	stw	r7,-8(fp)
   13d8c:	e0800317 	ldw	r2,12(fp)
   13d90:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   13d94:	0089c404 	movi	r2,10000
   13d98:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   13d9c:	e0bfff03 	ldbu	r2,-4(fp)
   13da0:	10005626 	beq	r2,zero,13efc <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   13da4:	00002806 	br	13e48 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   13da8:	e0bffa17 	ldw	r2,-24(fp)
   13dac:	108002a8 	cmpgeui	r2,r2,10
   13db0:	1000021e 	bne	r2,zero,13dbc <alt_avalon_i2c_master_tx_rx+0x50>
   13db4:	0109c404 	movi	r4,10000
   13db8:	0016db40 	call	16db4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   13dbc:	d8000015 	stw	zero,0(sp)
   13dc0:	000f883a 	mov	r7,zero
   13dc4:	e1bffd17 	ldw	r6,-12(fp)
   13dc8:	e17ffc17 	ldw	r5,-16(fp)
   13dcc:	e13ffb17 	ldw	r4,-20(fp)
   13dd0:	00140f40 	call	140f4 <alt_avalon_i2c_master_transmit_using_interrupts>
   13dd4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   13dd8:	e0bff917 	ldw	r2,-28(fp)
   13ddc:	10bffea0 	cmpeqi	r2,r2,-6
   13de0:	1000191e 	bne	r2,zero,13e48 <alt_avalon_i2c_master_tx_rx+0xdc>
   13de4:	e0bff917 	ldw	r2,-28(fp)
   13de8:	10bffee0 	cmpeqi	r2,r2,-5
   13dec:	1000161e 	bne	r2,zero,13e48 <alt_avalon_i2c_master_tx_rx+0xdc>
   13df0:	e0bff917 	ldw	r2,-28(fp)
   13df4:	10bffe58 	cmpnei	r2,r2,-7
   13df8:	1000011e 	bne	r2,zero,13e00 <alt_avalon_i2c_master_tx_rx+0x94>
   13dfc:	00001206 	br	13e48 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   13e00:	00800044 	movi	r2,1
   13e04:	d8800015 	stw	r2,0(sp)
   13e08:	01c00044 	movi	r7,1
   13e0c:	e1800217 	ldw	r6,8(fp)
   13e10:	e17ffe17 	ldw	r5,-8(fp)
   13e14:	e13ffb17 	ldw	r4,-20(fp)
   13e18:	00145100 	call	14510 <alt_avalon_i2c_master_receive_using_interrupts>
   13e1c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   13e20:	e0bff917 	ldw	r2,-28(fp)
   13e24:	10bffea0 	cmpeqi	r2,r2,-6
   13e28:	1000061e 	bne	r2,zero,13e44 <alt_avalon_i2c_master_tx_rx+0xd8>
   13e2c:	e0bff917 	ldw	r2,-28(fp)
   13e30:	10bffee0 	cmpeqi	r2,r2,-5
   13e34:	1000031e 	bne	r2,zero,13e44 <alt_avalon_i2c_master_tx_rx+0xd8>
   13e38:	e0bff917 	ldw	r2,-28(fp)
   13e3c:	10bffe58 	cmpnei	r2,r2,-7
   13e40:	1000331e 	bne	r2,zero,13f10 <alt_avalon_i2c_master_tx_rx+0x1a4>
   13e44:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   13e48:	e0bffa17 	ldw	r2,-24(fp)
   13e4c:	10ffffc4 	addi	r3,r2,-1
   13e50:	e0fffa15 	stw	r3,-24(fp)
   13e54:	103fd41e 	bne	r2,zero,13da8 <__alt_mem_Onchip_SRAM+0xf8013da8>
   13e58:	00003006 	br	13f1c <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   13e5c:	e0bffa17 	ldw	r2,-24(fp)
   13e60:	108002a8 	cmpgeui	r2,r2,10
   13e64:	1000021e 	bne	r2,zero,13e70 <alt_avalon_i2c_master_tx_rx+0x104>
   13e68:	0109c404 	movi	r4,10000
   13e6c:	0016db40 	call	16db4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   13e70:	d8000015 	stw	zero,0(sp)
   13e74:	000f883a 	mov	r7,zero
   13e78:	e1bffd17 	ldw	r6,-12(fp)
   13e7c:	e17ffc17 	ldw	r5,-16(fp)
   13e80:	e13ffb17 	ldw	r4,-20(fp)
   13e84:	0013f340 	call	13f34 <alt_avalon_i2c_master_transmit>
   13e88:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   13e8c:	e0bff917 	ldw	r2,-28(fp)
   13e90:	10bffea0 	cmpeqi	r2,r2,-6
   13e94:	1000191e 	bne	r2,zero,13efc <alt_avalon_i2c_master_tx_rx+0x190>
   13e98:	e0bff917 	ldw	r2,-28(fp)
   13e9c:	10bffee0 	cmpeqi	r2,r2,-5
   13ea0:	1000161e 	bne	r2,zero,13efc <alt_avalon_i2c_master_tx_rx+0x190>
   13ea4:	e0bff917 	ldw	r2,-28(fp)
   13ea8:	10bffe58 	cmpnei	r2,r2,-7
   13eac:	1000011e 	bne	r2,zero,13eb4 <alt_avalon_i2c_master_tx_rx+0x148>
   13eb0:	00001206 	br	13efc <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   13eb4:	00800044 	movi	r2,1
   13eb8:	d8800015 	stw	r2,0(sp)
   13ebc:	01c00044 	movi	r7,1
   13ec0:	e1800217 	ldw	r6,8(fp)
   13ec4:	e17ffe17 	ldw	r5,-8(fp)
   13ec8:	e13ffb17 	ldw	r4,-20(fp)
   13ecc:	00143000 	call	14300 <alt_avalon_i2c_master_receive>
   13ed0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   13ed4:	e0bff917 	ldw	r2,-28(fp)
   13ed8:	10bffea0 	cmpeqi	r2,r2,-6
   13edc:	1000061e 	bne	r2,zero,13ef8 <alt_avalon_i2c_master_tx_rx+0x18c>
   13ee0:	e0bff917 	ldw	r2,-28(fp)
   13ee4:	10bffee0 	cmpeqi	r2,r2,-5
   13ee8:	1000031e 	bne	r2,zero,13ef8 <alt_avalon_i2c_master_tx_rx+0x18c>
   13eec:	e0bff917 	ldw	r2,-28(fp)
   13ef0:	10bffe58 	cmpnei	r2,r2,-7
   13ef4:	1000081e 	bne	r2,zero,13f18 <alt_avalon_i2c_master_tx_rx+0x1ac>
   13ef8:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   13efc:	e0bffa17 	ldw	r2,-24(fp)
   13f00:	10ffffc4 	addi	r3,r2,-1
   13f04:	e0fffa15 	stw	r3,-24(fp)
   13f08:	103fd41e 	bne	r2,zero,13e5c <__alt_mem_Onchip_SRAM+0xf8013e5c>
   13f0c:	00000306 	br	13f1c <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   13f10:	0001883a 	nop
   13f14:	00000106 	br	13f1c <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   13f18:	0001883a 	nop
      }
    }
    
    return status;
   13f1c:	e0bff917 	ldw	r2,-28(fp)
}                                       
   13f20:	e037883a 	mov	sp,fp
   13f24:	dfc00117 	ldw	ra,4(sp)
   13f28:	df000017 	ldw	fp,0(sp)
   13f2c:	dec00204 	addi	sp,sp,8
   13f30:	f800283a 	ret

00013f34 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   13f34:	defff704 	addi	sp,sp,-36
   13f38:	dfc00815 	stw	ra,32(sp)
   13f3c:	df000715 	stw	fp,28(sp)
   13f40:	df000704 	addi	fp,sp,28
   13f44:	e13ffb15 	stw	r4,-20(fp)
   13f48:	e17ffc15 	stw	r5,-16(fp)
   13f4c:	e1bffd15 	stw	r6,-12(fp)
   13f50:	3807883a 	mov	r3,r7
   13f54:	e0800217 	ldw	r2,8(fp)
   13f58:	e0fffe05 	stb	r3,-8(fp)
   13f5c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   13f60:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   13f64:	0149c404 	movi	r5,10000
   13f68:	e13ffd17 	ldw	r4,-12(fp)
   13f6c:	00015680 	call	1568 <__mulsi3>
   13f70:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   13f74:	e0bffd17 	ldw	r2,-12(fp)
   13f78:	1000021e 	bne	r2,zero,13f84 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   13f7c:	0005883a 	mov	r2,zero
   13f80:	00005706 	br	140e0 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   13f84:	e0bffe03 	ldbu	r2,-8(fp)
   13f88:	10000a1e 	bne	r2,zero,13fb4 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   13f8c:	e13ffb17 	ldw	r4,-20(fp)
   13f90:	00131b00 	call	131b0 <alt_avalon_i2c_enable>
   13f94:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   13f98:	e0bffa17 	ldw	r2,-24(fp)
   13f9c:	10000226 	beq	r2,zero,13fa8 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   13fa0:	e0bffa17 	ldw	r2,-24(fp)
   13fa4:	00004e06 	br	140e0 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   13fa8:	01400704 	movi	r5,28
   13fac:	e13ffb17 	ldw	r4,-20(fp)
   13fb0:	001479c0 	call	1479c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   13fb4:	e0bffe03 	ldbu	r2,-8(fp)
   13fb8:	100d883a 	mov	r6,r2
   13fbc:	000b883a 	mov	r5,zero
   13fc0:	e13ffb17 	ldw	r4,-20(fp)
   13fc4:	00138180 	call	13818 <alt_avalon_i2c_send_address>
   13fc8:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   13fcc:	e0bffa17 	ldw	r2,-24(fp)
   13fd0:	1000271e 	bne	r2,zero,14070 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   13fd4:	00000f06 	br	14014 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   13fd8:	e0bffc17 	ldw	r2,-16(fp)
   13fdc:	10800003 	ldbu	r2,0(r2)
   13fe0:	10803fcc 	andi	r2,r2,255
   13fe4:	000f883a 	mov	r7,zero
   13fe8:	000d883a 	mov	r6,zero
   13fec:	100b883a 	mov	r5,r2
   13ff0:	e13ffb17 	ldw	r4,-20(fp)
   13ff4:	00137340 	call	13734 <alt_avalon_i2c_cmd_write>
   13ff8:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   13ffc:	e0bffc17 	ldw	r2,-16(fp)
   14000:	10800044 	addi	r2,r2,1
   14004:	e0bffc15 	stw	r2,-16(fp)
            --size;
   14008:	e0bffd17 	ldw	r2,-12(fp)
   1400c:	10bfffc4 	addi	r2,r2,-1
   14010:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   14014:	e0bffd17 	ldw	r2,-12(fp)
   14018:	108000b0 	cmpltui	r2,r2,2
   1401c:	1000021e 	bne	r2,zero,14028 <alt_avalon_i2c_master_transmit+0xf4>
   14020:	e0bffa17 	ldw	r2,-24(fp)
   14024:	103fec26 	beq	r2,zero,13fd8 <__alt_mem_Onchip_SRAM+0xf8013fd8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   14028:	e0bffa17 	ldw	r2,-24(fp)
   1402c:	1000101e 	bne	r2,zero,14070 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   14030:	e0bffc17 	ldw	r2,-16(fp)
   14034:	10800003 	ldbu	r2,0(r2)
   14038:	10803fcc 	andi	r2,r2,255
   1403c:	e0ffff03 	ldbu	r3,-4(fp)
   14040:	180f883a 	mov	r7,r3
   14044:	000d883a 	mov	r6,zero
   14048:	100b883a 	mov	r5,r2
   1404c:	e13ffb17 	ldw	r4,-20(fp)
   14050:	00137340 	call	13734 <alt_avalon_i2c_cmd_write>
   14054:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   14058:	e0bffc17 	ldw	r2,-16(fp)
   1405c:	10800044 	addi	r2,r2,1
   14060:	e0bffc15 	stw	r2,-16(fp)
            --size;
   14064:	e0bffd17 	ldw	r2,-12(fp)
   14068:	10bfffc4 	addi	r2,r2,-1
   1406c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   14070:	e0bfff03 	ldbu	r2,-4(fp)
   14074:	1000101e 	bne	r2,zero,140b8 <alt_avalon_i2c_master_transmit+0x184>
   14078:	e0bffa17 	ldw	r2,-24(fp)
   1407c:	10001726 	beq	r2,zero,140dc <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   14080:	00000d06 	br	140b8 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   14084:	e0bff917 	ldw	r2,-28(fp)
   14088:	108002a8 	cmpgeui	r2,r2,10
   1408c:	1000021e 	bne	r2,zero,14098 <alt_avalon_i2c_master_transmit+0x164>
   14090:	0109c404 	movi	r4,10000
   14094:	0016db40 	call	16db4 <alt_busy_sleep>
            if (--timeout == 0)
   14098:	e0bff917 	ldw	r2,-28(fp)
   1409c:	10bfffc4 	addi	r2,r2,-1
   140a0:	e0bff915 	stw	r2,-28(fp)
   140a4:	e0bff917 	ldw	r2,-28(fp)
   140a8:	1000031e 	bne	r2,zero,140b8 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   140ac:	00bfff84 	movi	r2,-2
   140b0:	e0bffa15 	stw	r2,-24(fp)
               break;
   140b4:	00000306 	br	140c4 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   140b8:	e13ffb17 	ldw	r4,-20(fp)
   140bc:	00135a00 	call	135a0 <alt_avalon_i2c_is_busy>
   140c0:	103ff01e 	bne	r2,zero,14084 <__alt_mem_Onchip_SRAM+0xf8014084>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   140c4:	e0bffa04 	addi	r2,fp,-24
   140c8:	100b883a 	mov	r5,r2
   140cc:	e13ffb17 	ldw	r4,-20(fp)
   140d0:	00139740 	call	13974 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   140d4:	e13ffb17 	ldw	r4,-20(fp)
   140d8:	00132480 	call	13248 <alt_avalon_i2c_disable>
    }


    return status;
   140dc:	e0bffa17 	ldw	r2,-24(fp)
}
   140e0:	e037883a 	mov	sp,fp
   140e4:	dfc00117 	ldw	ra,4(sp)
   140e8:	df000017 	ldw	fp,0(sp)
   140ec:	dec00204 	addi	sp,sp,8
   140f0:	f800283a 	ret

000140f4 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   140f4:	defff604 	addi	sp,sp,-40
   140f8:	dfc00915 	stw	ra,36(sp)
   140fc:	df000815 	stw	fp,32(sp)
   14100:	df000804 	addi	fp,sp,32
   14104:	e13ffb15 	stw	r4,-20(fp)
   14108:	e17ffc15 	stw	r5,-16(fp)
   1410c:	e1bffd15 	stw	r6,-12(fp)
   14110:	3807883a 	mov	r3,r7
   14114:	e0800217 	ldw	r2,8(fp)
   14118:	e0fffe05 	stb	r3,-8(fp)
   1411c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   14120:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   14124:	0149c404 	movi	r5,10000
   14128:	e13ffd17 	ldw	r4,-12(fp)
   1412c:	00015680 	call	1568 <__mulsi3>
   14130:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   14134:	e0bffb17 	ldw	r2,-20(fp)
   14138:	10800717 	ldw	r2,28(r2)
   1413c:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   14140:	e0bffd17 	ldw	r2,-12(fp)
   14144:	1000021e 	bne	r2,zero,14150 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   14148:	0005883a 	mov	r2,zero
   1414c:	00006706 	br	142ec <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   14150:	e0bffb17 	ldw	r2,-20(fp)
   14154:	10c00617 	ldw	r3,24(r2)
   14158:	00800074 	movhi	r2,1
   1415c:	108b8d04 	addi	r2,r2,11828
   14160:	18800226 	beq	r3,r2,1416c <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   14164:	00bfff44 	movi	r2,-3
   14168:	00006006 	br	142ec <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   1416c:	e0bffe03 	ldbu	r2,-8(fp)
   14170:	10000a1e 	bne	r2,zero,1419c <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   14174:	e13ffb17 	ldw	r4,-20(fp)
   14178:	00131b00 	call	131b0 <alt_avalon_i2c_enable>
   1417c:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   14180:	e0bff817 	ldw	r2,-32(fp)
   14184:	10000226 	beq	r2,zero,14190 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   14188:	e0bff817 	ldw	r2,-32(fp)
   1418c:	00005706 	br	142ec <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   14190:	01400704 	movi	r5,28
   14194:	e13ffb17 	ldw	r4,-20(fp)
   14198:	001479c0 	call	1479c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   1419c:	e0bffe03 	ldbu	r2,-8(fp)
   141a0:	100d883a 	mov	r6,r2
   141a4:	000b883a 	mov	r5,zero
   141a8:	e13ffb17 	ldw	r4,-20(fp)
   141ac:	00138180 	call	13818 <alt_avalon_i2c_send_address>
   141b0:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   141b4:	e0bff817 	ldw	r2,-32(fp)
   141b8:	1000271e 	bne	r2,zero,14258 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   141bc:	00000f06 	br	141fc <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   141c0:	e0bffc17 	ldw	r2,-16(fp)
   141c4:	10800003 	ldbu	r2,0(r2)
   141c8:	10803fcc 	andi	r2,r2,255
   141cc:	000f883a 	mov	r7,zero
   141d0:	000d883a 	mov	r6,zero
   141d4:	100b883a 	mov	r5,r2
   141d8:	e13ffb17 	ldw	r4,-20(fp)
   141dc:	00137340 	call	13734 <alt_avalon_i2c_cmd_write>
   141e0:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   141e4:	e0bffc17 	ldw	r2,-16(fp)
   141e8:	10800044 	addi	r2,r2,1
   141ec:	e0bffc15 	stw	r2,-16(fp)
            --size;
   141f0:	e0bffd17 	ldw	r2,-12(fp)
   141f4:	10bfffc4 	addi	r2,r2,-1
   141f8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   141fc:	e0bffd17 	ldw	r2,-12(fp)
   14200:	108000b0 	cmpltui	r2,r2,2
   14204:	1000021e 	bne	r2,zero,14210 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   14208:	e0bff817 	ldw	r2,-32(fp)
   1420c:	103fec26 	beq	r2,zero,141c0 <__alt_mem_Onchip_SRAM+0xf80141c0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   14210:	e0bff817 	ldw	r2,-32(fp)
   14214:	1000101e 	bne	r2,zero,14258 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   14218:	e0bffc17 	ldw	r2,-16(fp)
   1421c:	10800003 	ldbu	r2,0(r2)
   14220:	10803fcc 	andi	r2,r2,255
   14224:	e0ffff03 	ldbu	r3,-4(fp)
   14228:	180f883a 	mov	r7,r3
   1422c:	000d883a 	mov	r6,zero
   14230:	100b883a 	mov	r5,r2
   14234:	e13ffb17 	ldw	r4,-20(fp)
   14238:	00137340 	call	13734 <alt_avalon_i2c_cmd_write>
   1423c:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   14240:	e0bffc17 	ldw	r2,-16(fp)
   14244:	10800044 	addi	r2,r2,1
   14248:	e0bffc15 	stw	r2,-16(fp)
            --size;
   1424c:	e0bffd17 	ldw	r2,-12(fp)
   14250:	10bfffc4 	addi	r2,r2,-1
   14254:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   14258:	e0bff817 	ldw	r2,-32(fp)
   1425c:	10001426 	beq	r2,zero,142b0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   14260:	00000d06 	br	14298 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   14264:	e0bff917 	ldw	r2,-28(fp)
   14268:	108002a8 	cmpgeui	r2,r2,10
   1426c:	1000021e 	bne	r2,zero,14278 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   14270:	0109c404 	movi	r4,10000
   14274:	0016db40 	call	16db4 <alt_busy_sleep>
            if (--timeout == 0)
   14278:	e0bff917 	ldw	r2,-28(fp)
   1427c:	10bfffc4 	addi	r2,r2,-1
   14280:	e0bff915 	stw	r2,-28(fp)
   14284:	e0bff917 	ldw	r2,-28(fp)
   14288:	1000031e 	bne	r2,zero,14298 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   1428c:	00bfff84 	movi	r2,-2
   14290:	e0bff815 	stw	r2,-32(fp)
               break;
   14294:	00000306 	br	142a4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   14298:	e13ffb17 	ldw	r4,-20(fp)
   1429c:	00135a00 	call	135a0 <alt_avalon_i2c_is_busy>
   142a0:	103ff01e 	bne	r2,zero,14264 <__alt_mem_Onchip_SRAM+0xf8014264>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   142a4:	e13ffb17 	ldw	r4,-20(fp)
   142a8:	00132480 	call	13248 <alt_avalon_i2c_disable>
   142ac:	00000e06 	br	142e8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   142b0:	e0bfff03 	ldbu	r2,-4(fp)
   142b4:	10000c26 	beq	r2,zero,142e8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   142b8:	01400704 	movi	r5,28
   142bc:	e13ffb17 	ldw	r4,-20(fp)
   142c0:	001479c0 	call	1479c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   142c4:	000b883a 	mov	r5,zero
   142c8:	e13ffb17 	ldw	r4,-20(fp)
   142cc:	00149e40 	call	149e4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   142d0:	e0bffa17 	ldw	r2,-24(fp)
   142d4:	00c00044 	movi	r3,1
   142d8:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   142dc:	01400044 	movi	r5,1
   142e0:	e13ffb17 	ldw	r4,-20(fp)
   142e4:	00148400 	call	14840 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   142e8:	e0bff817 	ldw	r2,-32(fp)
}
   142ec:	e037883a 	mov	sp,fp
   142f0:	dfc00117 	ldw	ra,4(sp)
   142f4:	df000017 	ldw	fp,0(sp)
   142f8:	dec00204 	addi	sp,sp,8
   142fc:	f800283a 	ret

00014300 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   14300:	defff404 	addi	sp,sp,-48
   14304:	dfc00b15 	stw	ra,44(sp)
   14308:	df000a15 	stw	fp,40(sp)
   1430c:	df000a04 	addi	fp,sp,40
   14310:	e13ffb15 	stw	r4,-20(fp)
   14314:	e17ffc15 	stw	r5,-16(fp)
   14318:	e1bffd15 	stw	r6,-12(fp)
   1431c:	3807883a 	mov	r3,r7
   14320:	e0800217 	ldw	r2,8(fp)
   14324:	e0fffe05 	stb	r3,-8(fp)
   14328:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1432c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   14330:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   14334:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   14338:	e0bffd17 	ldw	r2,-12(fp)
   1433c:	1000021e 	bne	r2,zero,14348 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   14340:	0005883a 	mov	r2,zero
   14344:	00006d06 	br	144fc <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   14348:	e0bffe03 	ldbu	r2,-8(fp)
   1434c:	10000a1e 	bne	r2,zero,14378 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   14350:	e13ffb17 	ldw	r4,-20(fp)
   14354:	00131b00 	call	131b0 <alt_avalon_i2c_enable>
   14358:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   1435c:	e0bff917 	ldw	r2,-28(fp)
   14360:	10000226 	beq	r2,zero,1436c <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   14364:	e0bff917 	ldw	r2,-28(fp)
   14368:	00006406 	br	144fc <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1436c:	01400704 	movi	r5,28
   14370:	e13ffb17 	ldw	r4,-20(fp)
   14374:	001479c0 	call	1479c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   14378:	e0bffe03 	ldbu	r2,-8(fp)
   1437c:	100d883a 	mov	r6,r2
   14380:	01400044 	movi	r5,1
   14384:	e13ffb17 	ldw	r4,-20(fp)
   14388:	00138180 	call	13818 <alt_avalon_i2c_send_address>
   1438c:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   14390:	e0bff917 	ldw	r2,-28(fp)
   14394:	1000341e 	bne	r2,zero,14468 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   14398:	00001906 	br	14400 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   1439c:	000f883a 	mov	r7,zero
   143a0:	000d883a 	mov	r6,zero
   143a4:	000b883a 	mov	r5,zero
   143a8:	e13ffb17 	ldw	r4,-20(fp)
   143ac:	00137340 	call	13734 <alt_avalon_i2c_cmd_write>
   143b0:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   143b4:	e0bff817 	ldw	r2,-32(fp)
   143b8:	10800044 	addi	r2,r2,1
   143bc:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   143c0:	e0bff917 	ldw	r2,-28(fp)
   143c4:	10000e1e 	bne	r2,zero,14400 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   143c8:	e0bffa04 	addi	r2,fp,-24
   143cc:	100f883a 	mov	r7,r2
   143d0:	000d883a 	mov	r6,zero
   143d4:	e17ffc17 	ldw	r5,-16(fp)
   143d8:	e13ffb17 	ldw	r4,-20(fp)
   143dc:	00135e40 	call	135e4 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   143e0:	e0bffa17 	ldw	r2,-24(fp)
   143e4:	e0fffc17 	ldw	r3,-16(fp)
   143e8:	1885883a 	add	r2,r3,r2
   143ec:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   143f0:	e0bffa17 	ldw	r2,-24(fp)
   143f4:	e0fff717 	ldw	r3,-36(fp)
   143f8:	1885883a 	add	r2,r3,r2
   143fc:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   14400:	e0bffd17 	ldw	r2,-12(fp)
   14404:	10bfffc4 	addi	r2,r2,-1
   14408:	e0fff817 	ldw	r3,-32(fp)
   1440c:	1880022e 	bgeu	r3,r2,14418 <alt_avalon_i2c_master_receive+0x118>
   14410:	e0bff917 	ldw	r2,-28(fp)
   14414:	103fe126 	beq	r2,zero,1439c <__alt_mem_Onchip_SRAM+0xf801439c>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   14418:	e0bff917 	ldw	r2,-28(fp)
   1441c:	1000121e 	bne	r2,zero,14468 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   14420:	e0bfff03 	ldbu	r2,-4(fp)
   14424:	100f883a 	mov	r7,r2
   14428:	000d883a 	mov	r6,zero
   1442c:	000b883a 	mov	r5,zero
   14430:	e13ffb17 	ldw	r4,-20(fp)
   14434:	00137340 	call	13734 <alt_avalon_i2c_cmd_write>
   14438:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   1443c:	00000a06 	br	14468 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   14440:	e17ffc17 	ldw	r5,-16(fp)
   14444:	e13ffb17 	ldw	r4,-20(fp)
   14448:	001368c0 	call	1368c <alt_avalon_i2c_rx_read>
   1444c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   14450:	e0bffc17 	ldw	r2,-16(fp)
   14454:	10800044 	addi	r2,r2,1
   14458:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   1445c:	e0bff717 	ldw	r2,-36(fp)
   14460:	10800044 	addi	r2,r2,1
   14464:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   14468:	e0fff717 	ldw	r3,-36(fp)
   1446c:	e0bffd17 	ldw	r2,-12(fp)
   14470:	1880022e 	bgeu	r3,r2,1447c <alt_avalon_i2c_master_receive+0x17c>
   14474:	e0bff917 	ldw	r2,-28(fp)
   14478:	103ff126 	beq	r2,zero,14440 <__alt_mem_Onchip_SRAM+0xf8014440>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   1447c:	e0bfff03 	ldbu	r2,-4(fp)
   14480:	1000021e 	bne	r2,zero,1448c <alt_avalon_i2c_master_receive+0x18c>
   14484:	e0bff917 	ldw	r2,-28(fp)
   14488:	10001b26 	beq	r2,zero,144f8 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   1448c:	0149c404 	movi	r5,10000
   14490:	e13ffd17 	ldw	r4,-12(fp)
   14494:	00015680 	call	1568 <__mulsi3>
   14498:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   1449c:	00000d06 	br	144d4 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   144a0:	e0bff617 	ldw	r2,-40(fp)
   144a4:	108002a8 	cmpgeui	r2,r2,10
   144a8:	1000021e 	bne	r2,zero,144b4 <alt_avalon_i2c_master_receive+0x1b4>
   144ac:	0109c404 	movi	r4,10000
   144b0:	0016db40 	call	16db4 <alt_busy_sleep>
            if (--timeout == 0)
   144b4:	e0bff617 	ldw	r2,-40(fp)
   144b8:	10bfffc4 	addi	r2,r2,-1
   144bc:	e0bff615 	stw	r2,-40(fp)
   144c0:	e0bff617 	ldw	r2,-40(fp)
   144c4:	1000031e 	bne	r2,zero,144d4 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   144c8:	00bfff84 	movi	r2,-2
   144cc:	e0bff915 	stw	r2,-28(fp)
               break;
   144d0:	00000306 	br	144e0 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   144d4:	e13ffb17 	ldw	r4,-20(fp)
   144d8:	00135a00 	call	135a0 <alt_avalon_i2c_is_busy>
   144dc:	103ff01e 	bne	r2,zero,144a0 <__alt_mem_Onchip_SRAM+0xf80144a0>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   144e0:	e0bff904 	addi	r2,fp,-28
   144e4:	100b883a 	mov	r5,r2
   144e8:	e13ffb17 	ldw	r4,-20(fp)
   144ec:	00139740 	call	13974 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   144f0:	e13ffb17 	ldw	r4,-20(fp)
   144f4:	00132480 	call	13248 <alt_avalon_i2c_disable>
    }

    return status;
   144f8:	e0bff917 	ldw	r2,-28(fp)
}
   144fc:	e037883a 	mov	sp,fp
   14500:	dfc00117 	ldw	ra,4(sp)
   14504:	df000017 	ldw	fp,0(sp)
   14508:	dec00204 	addi	sp,sp,8
   1450c:	f800283a 	ret

00014510 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   14510:	defff504 	addi	sp,sp,-44
   14514:	dfc00a15 	stw	ra,40(sp)
   14518:	df000915 	stw	fp,36(sp)
   1451c:	df000904 	addi	fp,sp,36
   14520:	e13ffb15 	stw	r4,-20(fp)
   14524:	e17ffc15 	stw	r5,-16(fp)
   14528:	e1bffd15 	stw	r6,-12(fp)
   1452c:	3807883a 	mov	r3,r7
   14530:	e0800217 	ldw	r2,8(fp)
   14534:	e0fffe05 	stb	r3,-8(fp)
   14538:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1453c:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   14540:	e0bffb17 	ldw	r2,-20(fp)
   14544:	10800717 	ldw	r2,28(r2)
   14548:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   1454c:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   14550:	e0bffd17 	ldw	r2,-12(fp)
   14554:	1000021e 	bne	r2,zero,14560 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   14558:	0005883a 	mov	r2,zero
   1455c:	00006306 	br	146ec <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   14560:	e0bffb17 	ldw	r2,-20(fp)
   14564:	10c00617 	ldw	r3,24(r2)
   14568:	00800074 	movhi	r2,1
   1456c:	108b8d04 	addi	r2,r2,11828
   14570:	18800226 	beq	r3,r2,1457c <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   14574:	00bfff44 	movi	r2,-3
   14578:	00005c06 	br	146ec <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   1457c:	e0bffe03 	ldbu	r2,-8(fp)
   14580:	10000a1e 	bne	r2,zero,145ac <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   14584:	e13ffb17 	ldw	r4,-20(fp)
   14588:	00131b00 	call	131b0 <alt_avalon_i2c_enable>
   1458c:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   14590:	e0bff717 	ldw	r2,-36(fp)
   14594:	10000226 	beq	r2,zero,145a0 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   14598:	e0bff717 	ldw	r2,-36(fp)
   1459c:	00005306 	br	146ec <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   145a0:	01400704 	movi	r5,28
   145a4:	e13ffb17 	ldw	r4,-20(fp)
   145a8:	001479c0 	call	1479c <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   145ac:	e0bffe03 	ldbu	r2,-8(fp)
   145b0:	100d883a 	mov	r6,r2
   145b4:	01400044 	movi	r5,1
   145b8:	e13ffb17 	ldw	r4,-20(fp)
   145bc:	00138180 	call	13818 <alt_avalon_i2c_send_address>
   145c0:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   145c4:	e0bff717 	ldw	r2,-36(fp)
   145c8:	1000191e 	bne	r2,zero,14630 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   145cc:	00000906 	br	145f4 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   145d0:	000f883a 	mov	r7,zero
   145d4:	000d883a 	mov	r6,zero
   145d8:	000b883a 	mov	r5,zero
   145dc:	e13ffb17 	ldw	r4,-20(fp)
   145e0:	00137340 	call	13734 <alt_avalon_i2c_cmd_write>
   145e4:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   145e8:	e0bff917 	ldw	r2,-28(fp)
   145ec:	10800044 	addi	r2,r2,1
   145f0:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   145f4:	e0bffd17 	ldw	r2,-12(fp)
   145f8:	10bfffc4 	addi	r2,r2,-1
   145fc:	e0fff917 	ldw	r3,-28(fp)
   14600:	1880022e 	bgeu	r3,r2,1460c <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   14604:	e0bff717 	ldw	r2,-36(fp)
   14608:	103ff126 	beq	r2,zero,145d0 <__alt_mem_Onchip_SRAM+0xf80145d0>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   1460c:	e0bff717 	ldw	r2,-36(fp)
   14610:	1000071e 	bne	r2,zero,14630 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   14614:	e0bfff03 	ldbu	r2,-4(fp)
   14618:	100f883a 	mov	r7,r2
   1461c:	000d883a 	mov	r6,zero
   14620:	000b883a 	mov	r5,zero
   14624:	e13ffb17 	ldw	r4,-20(fp)
   14628:	00137340 	call	13734 <alt_avalon_i2c_cmd_write>
   1462c:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   14630:	e0bff717 	ldw	r2,-36(fp)
   14634:	10001826 	beq	r2,zero,14698 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   14638:	0149c404 	movi	r5,10000
   1463c:	e13ffd17 	ldw	r4,-12(fp)
   14640:	00015680 	call	1568 <__mulsi3>
   14644:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   14648:	00000d06 	br	14680 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   1464c:	e0bff817 	ldw	r2,-32(fp)
   14650:	108002a8 	cmpgeui	r2,r2,10
   14654:	1000021e 	bne	r2,zero,14660 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   14658:	0109c404 	movi	r4,10000
   1465c:	0016db40 	call	16db4 <alt_busy_sleep>
            if (--timeout == 0)
   14660:	e0bff817 	ldw	r2,-32(fp)
   14664:	10bfffc4 	addi	r2,r2,-1
   14668:	e0bff815 	stw	r2,-32(fp)
   1466c:	e0bff817 	ldw	r2,-32(fp)
   14670:	1000031e 	bne	r2,zero,14680 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   14674:	00bfff84 	movi	r2,-2
   14678:	e0bff715 	stw	r2,-36(fp)
               break;
   1467c:	00000306 	br	1468c <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   14680:	e13ffb17 	ldw	r4,-20(fp)
   14684:	00135a00 	call	135a0 <alt_avalon_i2c_is_busy>
   14688:	103ff01e 	bne	r2,zero,1464c <__alt_mem_Onchip_SRAM+0xf801464c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   1468c:	e13ffb17 	ldw	r4,-20(fp)
   14690:	00132480 	call	13248 <alt_avalon_i2c_disable>
   14694:	00001406 	br	146e8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   14698:	e0bfff03 	ldbu	r2,-4(fp)
   1469c:	10001226 	beq	r2,zero,146e8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   146a0:	01400704 	movi	r5,28
   146a4:	e13ffb17 	ldw	r4,-20(fp)
   146a8:	001479c0 	call	1479c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   146ac:	000b883a 	mov	r5,zero
   146b0:	e13ffb17 	ldw	r4,-20(fp)
   146b4:	00149340 	call	14934 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   146b8:	e0bffa17 	ldw	r2,-24(fp)
   146bc:	00c00084 	movi	r3,2
   146c0:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   146c4:	e0bffa17 	ldw	r2,-24(fp)
   146c8:	e0fffc17 	ldw	r3,-16(fp)
   146cc:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   146d0:	e0bffa17 	ldw	r2,-24(fp)
   146d4:	e0fffd17 	ldw	r3,-12(fp)
   146d8:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   146dc:	01400084 	movi	r5,2
   146e0:	e13ffb17 	ldw	r4,-20(fp)
   146e4:	00148400 	call	14840 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   146e8:	e0bff717 	ldw	r2,-36(fp)
}
   146ec:	e037883a 	mov	sp,fp
   146f0:	dfc00117 	ldw	ra,4(sp)
   146f4:	df000017 	ldw	fp,0(sp)
   146f8:	dec00204 	addi	sp,sp,8
   146fc:	f800283a 	ret

00014700 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   14700:	defffd04 	addi	sp,sp,-12
   14704:	df000215 	stw	fp,8(sp)
   14708:	df000204 	addi	fp,sp,8
   1470c:	e13ffe15 	stw	r4,-8(fp)
   14710:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   14714:	e0bffe17 	ldw	r2,-8(fp)
   14718:	10800317 	ldw	r2,12(r2)
   1471c:	10800404 	addi	r2,r2,16
   14720:	10c00037 	ldwio	r3,0(r2)
   14724:	e0bffe17 	ldw	r2,-8(fp)
   14728:	10800317 	ldw	r2,12(r2)
   1472c:	10800304 	addi	r2,r2,12
   14730:	10800037 	ldwio	r2,0(r2)
   14734:	1884703a 	and	r2,r3,r2
   14738:	1007883a 	mov	r3,r2
   1473c:	e0bfff17 	ldw	r2,-4(fp)
   14740:	10c00015 	stw	r3,0(r2)
}
   14744:	0001883a 	nop
   14748:	e037883a 	mov	sp,fp
   1474c:	df000017 	ldw	fp,0(sp)
   14750:	dec00104 	addi	sp,sp,4
   14754:	f800283a 	ret

00014758 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   14758:	defffd04 	addi	sp,sp,-12
   1475c:	df000215 	stw	fp,8(sp)
   14760:	df000204 	addi	fp,sp,8
   14764:	e13ffe15 	stw	r4,-8(fp)
   14768:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   1476c:	e0bffe17 	ldw	r2,-8(fp)
   14770:	10800317 	ldw	r2,12(r2)
   14774:	10800404 	addi	r2,r2,16
   14778:	10800037 	ldwio	r2,0(r2)
   1477c:	1007883a 	mov	r3,r2
   14780:	e0bfff17 	ldw	r2,-4(fp)
   14784:	10c00015 	stw	r3,0(r2)
}
   14788:	0001883a 	nop
   1478c:	e037883a 	mov	sp,fp
   14790:	df000017 	ldw	fp,0(sp)
   14794:	dec00104 	addi	sp,sp,4
   14798:	f800283a 	ret

0001479c <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   1479c:	defffd04 	addi	sp,sp,-12
   147a0:	df000215 	stw	fp,8(sp)
   147a4:	df000204 	addi	fp,sp,8
   147a8:	e13ffe15 	stw	r4,-8(fp)
   147ac:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   147b0:	e0bffe17 	ldw	r2,-8(fp)
   147b4:	10800317 	ldw	r2,12(r2)
   147b8:	10800404 	addi	r2,r2,16
   147bc:	e0ffff17 	ldw	r3,-4(fp)
   147c0:	10c00035 	stwio	r3,0(r2)
}
   147c4:	0001883a 	nop
   147c8:	e037883a 	mov	sp,fp
   147cc:	df000017 	ldw	fp,0(sp)
   147d0:	dec00104 	addi	sp,sp,4
   147d4:	f800283a 	ret

000147d8 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   147d8:	defffb04 	addi	sp,sp,-20
   147dc:	dfc00415 	stw	ra,16(sp)
   147e0:	df000315 	stw	fp,12(sp)
   147e4:	df000304 	addi	fp,sp,12
   147e8:	e13ffe15 	stw	r4,-8(fp)
   147ec:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   147f0:	e17ffd04 	addi	r5,fp,-12
   147f4:	e13ffe17 	ldw	r4,-8(fp)
   147f8:	00148a40 	call	148a4 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   147fc:	e0bfff17 	ldw	r2,-4(fp)
   14800:	0086303a 	nor	r3,zero,r2
   14804:	e0bffd17 	ldw	r2,-12(fp)
   14808:	1884703a 	and	r2,r3,r2
   1480c:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   14810:	e0bffe17 	ldw	r2,-8(fp)
   14814:	10800317 	ldw	r2,12(r2)
   14818:	10800304 	addi	r2,r2,12
   1481c:	e0fffd17 	ldw	r3,-12(fp)
   14820:	18c007cc 	andi	r3,r3,31
   14824:	10c00035 	stwio	r3,0(r2)
}
   14828:	0001883a 	nop
   1482c:	e037883a 	mov	sp,fp
   14830:	dfc00117 	ldw	ra,4(sp)
   14834:	df000017 	ldw	fp,0(sp)
   14838:	dec00204 	addi	sp,sp,8
   1483c:	f800283a 	ret

00014840 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   14840:	defffb04 	addi	sp,sp,-20
   14844:	dfc00415 	stw	ra,16(sp)
   14848:	df000315 	stw	fp,12(sp)
   1484c:	df000304 	addi	fp,sp,12
   14850:	e13ffe15 	stw	r4,-8(fp)
   14854:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   14858:	e17ffd04 	addi	r5,fp,-12
   1485c:	e13ffe17 	ldw	r4,-8(fp)
   14860:	00148a40 	call	148a4 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   14864:	e0fffd17 	ldw	r3,-12(fp)
   14868:	e0bfff17 	ldw	r2,-4(fp)
   1486c:	1884b03a 	or	r2,r3,r2
   14870:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   14874:	e0bffe17 	ldw	r2,-8(fp)
   14878:	10800317 	ldw	r2,12(r2)
   1487c:	10800304 	addi	r2,r2,12
   14880:	e0fffd17 	ldw	r3,-12(fp)
   14884:	18c007cc 	andi	r3,r3,31
   14888:	10c00035 	stwio	r3,0(r2)
}
   1488c:	0001883a 	nop
   14890:	e037883a 	mov	sp,fp
   14894:	dfc00117 	ldw	ra,4(sp)
   14898:	df000017 	ldw	fp,0(sp)
   1489c:	dec00204 	addi	sp,sp,8
   148a0:	f800283a 	ret

000148a4 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   148a4:	defffd04 	addi	sp,sp,-12
   148a8:	df000215 	stw	fp,8(sp)
   148ac:	df000204 	addi	fp,sp,8
   148b0:	e13ffe15 	stw	r4,-8(fp)
   148b4:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   148b8:	e0bffe17 	ldw	r2,-8(fp)
   148bc:	10800317 	ldw	r2,12(r2)
   148c0:	10800304 	addi	r2,r2,12
   148c4:	10800037 	ldwio	r2,0(r2)
   148c8:	10c007cc 	andi	r3,r2,31
   148cc:	e0bfff17 	ldw	r2,-4(fp)
   148d0:	10c00015 	stw	r3,0(r2)
}
   148d4:	0001883a 	nop
   148d8:	e037883a 	mov	sp,fp
   148dc:	df000017 	ldw	fp,0(sp)
   148e0:	dec00104 	addi	sp,sp,4
   148e4:	f800283a 	ret

000148e8 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   148e8:	defffd04 	addi	sp,sp,-12
   148ec:	df000215 	stw	fp,8(sp)
   148f0:	df000204 	addi	fp,sp,8
   148f4:	e13ffe15 	stw	r4,-8(fp)
   148f8:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   148fc:	e0bffe17 	ldw	r2,-8(fp)
   14900:	10800317 	ldw	r2,12(r2)
   14904:	10800204 	addi	r2,r2,8
   14908:	10800037 	ldwio	r2,0(r2)
   1490c:	10800c0c 	andi	r2,r2,48
   14910:	1005d13a 	srai	r2,r2,4
   14914:	1007883a 	mov	r3,r2
   14918:	e0bfff17 	ldw	r2,-4(fp)
   1491c:	10c00015 	stw	r3,0(r2)
}
   14920:	0001883a 	nop
   14924:	e037883a 	mov	sp,fp
   14928:	df000017 	ldw	fp,0(sp)
   1492c:	dec00104 	addi	sp,sp,4
   14930:	f800283a 	ret

00014934 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   14934:	defffd04 	addi	sp,sp,-12
   14938:	df000215 	stw	fp,8(sp)
   1493c:	df000204 	addi	fp,sp,8
   14940:	e13ffe15 	stw	r4,-8(fp)
   14944:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   14948:	e0bffe17 	ldw	r2,-8(fp)
   1494c:	10800317 	ldw	r2,12(r2)
   14950:	10800204 	addi	r2,r2,8
   14954:	e0fffe17 	ldw	r3,-8(fp)
   14958:	18c00317 	ldw	r3,12(r3)
   1495c:	18c00204 	addi	r3,r3,8
   14960:	18c00037 	ldwio	r3,0(r3)
   14964:	1809883a 	mov	r4,r3
   14968:	00fff3c4 	movi	r3,-49
   1496c:	20c8703a 	and	r4,r4,r3
   14970:	e0ffff17 	ldw	r3,-4(fp)
   14974:	1806913a 	slli	r3,r3,4
   14978:	18c00c0c 	andi	r3,r3,48
   1497c:	20c6b03a 	or	r3,r4,r3
   14980:	10c00035 	stwio	r3,0(r2)
}
   14984:	0001883a 	nop
   14988:	e037883a 	mov	sp,fp
   1498c:	df000017 	ldw	fp,0(sp)
   14990:	dec00104 	addi	sp,sp,4
   14994:	f800283a 	ret

00014998 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   14998:	defffd04 	addi	sp,sp,-12
   1499c:	df000215 	stw	fp,8(sp)
   149a0:	df000204 	addi	fp,sp,8
   149a4:	e13ffe15 	stw	r4,-8(fp)
   149a8:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   149ac:	e0bffe17 	ldw	r2,-8(fp)
   149b0:	10800317 	ldw	r2,12(r2)
   149b4:	10800204 	addi	r2,r2,8
   149b8:	10800037 	ldwio	r2,0(r2)
   149bc:	1080030c 	andi	r2,r2,12
   149c0:	1005d0ba 	srai	r2,r2,2
   149c4:	1007883a 	mov	r3,r2
   149c8:	e0bfff17 	ldw	r2,-4(fp)
   149cc:	10c00015 	stw	r3,0(r2)
}
   149d0:	0001883a 	nop
   149d4:	e037883a 	mov	sp,fp
   149d8:	df000017 	ldw	fp,0(sp)
   149dc:	dec00104 	addi	sp,sp,4
   149e0:	f800283a 	ret

000149e4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   149e4:	defffd04 	addi	sp,sp,-12
   149e8:	df000215 	stw	fp,8(sp)
   149ec:	df000204 	addi	fp,sp,8
   149f0:	e13ffe15 	stw	r4,-8(fp)
   149f4:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   149f8:	e0bffe17 	ldw	r2,-8(fp)
   149fc:	10800317 	ldw	r2,12(r2)
   14a00:	10c00204 	addi	r3,r2,8
   14a04:	e0bffe17 	ldw	r2,-8(fp)
   14a08:	10800317 	ldw	r2,12(r2)
   14a0c:	10800204 	addi	r2,r2,8
   14a10:	10800037 	ldwio	r2,0(r2)
   14a14:	1009883a 	mov	r4,r2
   14a18:	00bffcc4 	movi	r2,-13
   14a1c:	2088703a 	and	r4,r4,r2
   14a20:	e0bfff17 	ldw	r2,-4(fp)
   14a24:	1085883a 	add	r2,r2,r2
   14a28:	1085883a 	add	r2,r2,r2
   14a2c:	1080030c 	andi	r2,r2,12
   14a30:	2084b03a 	or	r2,r4,r2
   14a34:	18800035 	stwio	r2,0(r3)
}
   14a38:	0001883a 	nop
   14a3c:	e037883a 	mov	sp,fp
   14a40:	df000017 	ldw	fp,0(sp)
   14a44:	dec00104 	addi	sp,sp,4
   14a48:	f800283a 	ret

00014a4c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14a4c:	defffa04 	addi	sp,sp,-24
   14a50:	dfc00515 	stw	ra,20(sp)
   14a54:	df000415 	stw	fp,16(sp)
   14a58:	df000404 	addi	fp,sp,16
   14a5c:	e13ffd15 	stw	r4,-12(fp)
   14a60:	e17ffe15 	stw	r5,-8(fp)
   14a64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14a68:	e0bffd17 	ldw	r2,-12(fp)
   14a6c:	10800017 	ldw	r2,0(r2)
   14a70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14a74:	e0bffc17 	ldw	r2,-16(fp)
   14a78:	10c00a04 	addi	r3,r2,40
   14a7c:	e0bffd17 	ldw	r2,-12(fp)
   14a80:	10800217 	ldw	r2,8(r2)
   14a84:	100f883a 	mov	r7,r2
   14a88:	e1bfff17 	ldw	r6,-4(fp)
   14a8c:	e17ffe17 	ldw	r5,-8(fp)
   14a90:	1809883a 	mov	r4,r3
   14a94:	00150740 	call	15074 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14a98:	e037883a 	mov	sp,fp
   14a9c:	dfc00117 	ldw	ra,4(sp)
   14aa0:	df000017 	ldw	fp,0(sp)
   14aa4:	dec00204 	addi	sp,sp,8
   14aa8:	f800283a 	ret

00014aac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14aac:	defffa04 	addi	sp,sp,-24
   14ab0:	dfc00515 	stw	ra,20(sp)
   14ab4:	df000415 	stw	fp,16(sp)
   14ab8:	df000404 	addi	fp,sp,16
   14abc:	e13ffd15 	stw	r4,-12(fp)
   14ac0:	e17ffe15 	stw	r5,-8(fp)
   14ac4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14ac8:	e0bffd17 	ldw	r2,-12(fp)
   14acc:	10800017 	ldw	r2,0(r2)
   14ad0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14ad4:	e0bffc17 	ldw	r2,-16(fp)
   14ad8:	10c00a04 	addi	r3,r2,40
   14adc:	e0bffd17 	ldw	r2,-12(fp)
   14ae0:	10800217 	ldw	r2,8(r2)
   14ae4:	100f883a 	mov	r7,r2
   14ae8:	e1bfff17 	ldw	r6,-4(fp)
   14aec:	e17ffe17 	ldw	r5,-8(fp)
   14af0:	1809883a 	mov	r4,r3
   14af4:	00152900 	call	15290 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   14af8:	e037883a 	mov	sp,fp
   14afc:	dfc00117 	ldw	ra,4(sp)
   14b00:	df000017 	ldw	fp,0(sp)
   14b04:	dec00204 	addi	sp,sp,8
   14b08:	f800283a 	ret

00014b0c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   14b0c:	defffc04 	addi	sp,sp,-16
   14b10:	dfc00315 	stw	ra,12(sp)
   14b14:	df000215 	stw	fp,8(sp)
   14b18:	df000204 	addi	fp,sp,8
   14b1c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14b20:	e0bfff17 	ldw	r2,-4(fp)
   14b24:	10800017 	ldw	r2,0(r2)
   14b28:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   14b2c:	e0bffe17 	ldw	r2,-8(fp)
   14b30:	10c00a04 	addi	r3,r2,40
   14b34:	e0bfff17 	ldw	r2,-4(fp)
   14b38:	10800217 	ldw	r2,8(r2)
   14b3c:	100b883a 	mov	r5,r2
   14b40:	1809883a 	mov	r4,r3
   14b44:	0014f1c0 	call	14f1c <altera_avalon_jtag_uart_close>
}
   14b48:	e037883a 	mov	sp,fp
   14b4c:	dfc00117 	ldw	ra,4(sp)
   14b50:	df000017 	ldw	fp,0(sp)
   14b54:	dec00204 	addi	sp,sp,8
   14b58:	f800283a 	ret

00014b5c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   14b5c:	defffa04 	addi	sp,sp,-24
   14b60:	dfc00515 	stw	ra,20(sp)
   14b64:	df000415 	stw	fp,16(sp)
   14b68:	df000404 	addi	fp,sp,16
   14b6c:	e13ffd15 	stw	r4,-12(fp)
   14b70:	e17ffe15 	stw	r5,-8(fp)
   14b74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14b78:	e0bffd17 	ldw	r2,-12(fp)
   14b7c:	10800017 	ldw	r2,0(r2)
   14b80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   14b84:	e0bffc17 	ldw	r2,-16(fp)
   14b88:	10800a04 	addi	r2,r2,40
   14b8c:	e1bfff17 	ldw	r6,-4(fp)
   14b90:	e17ffe17 	ldw	r5,-8(fp)
   14b94:	1009883a 	mov	r4,r2
   14b98:	0014f840 	call	14f84 <altera_avalon_jtag_uart_ioctl>
}
   14b9c:	e037883a 	mov	sp,fp
   14ba0:	dfc00117 	ldw	ra,4(sp)
   14ba4:	df000017 	ldw	fp,0(sp)
   14ba8:	dec00204 	addi	sp,sp,8
   14bac:	f800283a 	ret

00014bb0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14bb0:	defffa04 	addi	sp,sp,-24
   14bb4:	dfc00515 	stw	ra,20(sp)
   14bb8:	df000415 	stw	fp,16(sp)
   14bbc:	df000404 	addi	fp,sp,16
   14bc0:	e13ffd15 	stw	r4,-12(fp)
   14bc4:	e17ffe15 	stw	r5,-8(fp)
   14bc8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14bcc:	e0bffd17 	ldw	r2,-12(fp)
   14bd0:	00c00044 	movi	r3,1
   14bd4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   14bd8:	e0bffd17 	ldw	r2,-12(fp)
   14bdc:	10800017 	ldw	r2,0(r2)
   14be0:	10800104 	addi	r2,r2,4
   14be4:	1007883a 	mov	r3,r2
   14be8:	e0bffd17 	ldw	r2,-12(fp)
   14bec:	10800817 	ldw	r2,32(r2)
   14bf0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   14bf4:	e0bffe17 	ldw	r2,-8(fp)
   14bf8:	e0ffff17 	ldw	r3,-4(fp)
   14bfc:	d8000015 	stw	zero,0(sp)
   14c00:	e1fffd17 	ldw	r7,-12(fp)
   14c04:	01800074 	movhi	r6,1
   14c08:	31931c04 	addi	r6,r6,19568
   14c0c:	180b883a 	mov	r5,r3
   14c10:	1009883a 	mov	r4,r2
   14c14:	001717c0 	call	1717c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14c18:	e0bffd17 	ldw	r2,-12(fp)
   14c1c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14c20:	e0bffd17 	ldw	r2,-12(fp)
   14c24:	10800204 	addi	r2,r2,8
   14c28:	d0e74417 	ldw	r3,-25328(gp)
   14c2c:	e1fffd17 	ldw	r7,-12(fp)
   14c30:	01800074 	movhi	r6,1
   14c34:	31939f04 	addi	r6,r6,20092
   14c38:	180b883a 	mov	r5,r3
   14c3c:	1009883a 	mov	r4,r2
   14c40:	0016c880 	call	16c88 <alt_alarm_start>
   14c44:	1000040e 	bge	r2,zero,14c58 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14c48:	e0fffd17 	ldw	r3,-12(fp)
   14c4c:	00a00034 	movhi	r2,32768
   14c50:	10bfffc4 	addi	r2,r2,-1
   14c54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   14c58:	0001883a 	nop
   14c5c:	e037883a 	mov	sp,fp
   14c60:	dfc00117 	ldw	ra,4(sp)
   14c64:	df000017 	ldw	fp,0(sp)
   14c68:	dec00204 	addi	sp,sp,8
   14c6c:	f800283a 	ret

00014c70 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14c70:	defff804 	addi	sp,sp,-32
   14c74:	df000715 	stw	fp,28(sp)
   14c78:	df000704 	addi	fp,sp,28
   14c7c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14c80:	e0bfff17 	ldw	r2,-4(fp)
   14c84:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   14c88:	e0bffb17 	ldw	r2,-20(fp)
   14c8c:	10800017 	ldw	r2,0(r2)
   14c90:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14c94:	e0bffc17 	ldw	r2,-16(fp)
   14c98:	10800104 	addi	r2,r2,4
   14c9c:	10800037 	ldwio	r2,0(r2)
   14ca0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   14ca4:	e0bffd17 	ldw	r2,-12(fp)
   14ca8:	1080c00c 	andi	r2,r2,768
   14cac:	10006d26 	beq	r2,zero,14e64 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14cb0:	e0bffd17 	ldw	r2,-12(fp)
   14cb4:	1080400c 	andi	r2,r2,256
   14cb8:	10003526 	beq	r2,zero,14d90 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   14cbc:	00800074 	movhi	r2,1
   14cc0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14cc4:	e0bffb17 	ldw	r2,-20(fp)
   14cc8:	10800a17 	ldw	r2,40(r2)
   14ccc:	10800044 	addi	r2,r2,1
   14cd0:	1081ffcc 	andi	r2,r2,2047
   14cd4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   14cd8:	e0bffb17 	ldw	r2,-20(fp)
   14cdc:	10c00b17 	ldw	r3,44(r2)
   14ce0:	e0bffe17 	ldw	r2,-8(fp)
   14ce4:	18801526 	beq	r3,r2,14d3c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14ce8:	e0bffc17 	ldw	r2,-16(fp)
   14cec:	10800037 	ldwio	r2,0(r2)
   14cf0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14cf4:	e0bff917 	ldw	r2,-28(fp)
   14cf8:	10a0000c 	andi	r2,r2,32768
   14cfc:	10001126 	beq	r2,zero,14d44 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14d00:	e0bffb17 	ldw	r2,-20(fp)
   14d04:	10800a17 	ldw	r2,40(r2)
   14d08:	e0fff917 	ldw	r3,-28(fp)
   14d0c:	1809883a 	mov	r4,r3
   14d10:	e0fffb17 	ldw	r3,-20(fp)
   14d14:	1885883a 	add	r2,r3,r2
   14d18:	10800e04 	addi	r2,r2,56
   14d1c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14d20:	e0bffb17 	ldw	r2,-20(fp)
   14d24:	10800a17 	ldw	r2,40(r2)
   14d28:	10800044 	addi	r2,r2,1
   14d2c:	10c1ffcc 	andi	r3,r2,2047
   14d30:	e0bffb17 	ldw	r2,-20(fp)
   14d34:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   14d38:	003fe206 	br	14cc4 <__alt_mem_Onchip_SRAM+0xf8014cc4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   14d3c:	0001883a 	nop
   14d40:	00000106 	br	14d48 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   14d44:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14d48:	e0bff917 	ldw	r2,-28(fp)
   14d4c:	10bfffec 	andhi	r2,r2,65535
   14d50:	10000f26 	beq	r2,zero,14d90 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14d54:	e0bffb17 	ldw	r2,-20(fp)
   14d58:	10c00817 	ldw	r3,32(r2)
   14d5c:	00bfff84 	movi	r2,-2
   14d60:	1886703a 	and	r3,r3,r2
   14d64:	e0bffb17 	ldw	r2,-20(fp)
   14d68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14d6c:	e0bffc17 	ldw	r2,-16(fp)
   14d70:	10800104 	addi	r2,r2,4
   14d74:	1007883a 	mov	r3,r2
   14d78:	e0bffb17 	ldw	r2,-20(fp)
   14d7c:	10800817 	ldw	r2,32(r2)
   14d80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14d84:	e0bffc17 	ldw	r2,-16(fp)
   14d88:	10800104 	addi	r2,r2,4
   14d8c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   14d90:	e0bffd17 	ldw	r2,-12(fp)
   14d94:	1080800c 	andi	r2,r2,512
   14d98:	103fbe26 	beq	r2,zero,14c94 <__alt_mem_Onchip_SRAM+0xf8014c94>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14d9c:	e0bffd17 	ldw	r2,-12(fp)
   14da0:	1004d43a 	srli	r2,r2,16
   14da4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14da8:	00001406 	br	14dfc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14dac:	e0bffc17 	ldw	r2,-16(fp)
   14db0:	e0fffb17 	ldw	r3,-20(fp)
   14db4:	18c00d17 	ldw	r3,52(r3)
   14db8:	e13ffb17 	ldw	r4,-20(fp)
   14dbc:	20c7883a 	add	r3,r4,r3
   14dc0:	18c20e04 	addi	r3,r3,2104
   14dc4:	18c00003 	ldbu	r3,0(r3)
   14dc8:	18c03fcc 	andi	r3,r3,255
   14dcc:	18c0201c 	xori	r3,r3,128
   14dd0:	18ffe004 	addi	r3,r3,-128
   14dd4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14dd8:	e0bffb17 	ldw	r2,-20(fp)
   14ddc:	10800d17 	ldw	r2,52(r2)
   14de0:	10800044 	addi	r2,r2,1
   14de4:	10c1ffcc 	andi	r3,r2,2047
   14de8:	e0bffb17 	ldw	r2,-20(fp)
   14dec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14df0:	e0bffa17 	ldw	r2,-24(fp)
   14df4:	10bfffc4 	addi	r2,r2,-1
   14df8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14dfc:	e0bffa17 	ldw	r2,-24(fp)
   14e00:	10000526 	beq	r2,zero,14e18 <altera_avalon_jtag_uart_irq+0x1a8>
   14e04:	e0bffb17 	ldw	r2,-20(fp)
   14e08:	10c00d17 	ldw	r3,52(r2)
   14e0c:	e0bffb17 	ldw	r2,-20(fp)
   14e10:	10800c17 	ldw	r2,48(r2)
   14e14:	18bfe51e 	bne	r3,r2,14dac <__alt_mem_Onchip_SRAM+0xf8014dac>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14e18:	e0bffa17 	ldw	r2,-24(fp)
   14e1c:	103f9d26 	beq	r2,zero,14c94 <__alt_mem_Onchip_SRAM+0xf8014c94>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14e20:	e0bffb17 	ldw	r2,-20(fp)
   14e24:	10c00817 	ldw	r3,32(r2)
   14e28:	00bfff44 	movi	r2,-3
   14e2c:	1886703a 	and	r3,r3,r2
   14e30:	e0bffb17 	ldw	r2,-20(fp)
   14e34:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14e38:	e0bffb17 	ldw	r2,-20(fp)
   14e3c:	10800017 	ldw	r2,0(r2)
   14e40:	10800104 	addi	r2,r2,4
   14e44:	1007883a 	mov	r3,r2
   14e48:	e0bffb17 	ldw	r2,-20(fp)
   14e4c:	10800817 	ldw	r2,32(r2)
   14e50:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14e54:	e0bffc17 	ldw	r2,-16(fp)
   14e58:	10800104 	addi	r2,r2,4
   14e5c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14e60:	003f8c06 	br	14c94 <__alt_mem_Onchip_SRAM+0xf8014c94>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   14e64:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14e68:	0001883a 	nop
   14e6c:	e037883a 	mov	sp,fp
   14e70:	df000017 	ldw	fp,0(sp)
   14e74:	dec00104 	addi	sp,sp,4
   14e78:	f800283a 	ret

00014e7c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14e7c:	defff804 	addi	sp,sp,-32
   14e80:	df000715 	stw	fp,28(sp)
   14e84:	df000704 	addi	fp,sp,28
   14e88:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14e8c:	e0bffb17 	ldw	r2,-20(fp)
   14e90:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14e94:	e0bff917 	ldw	r2,-28(fp)
   14e98:	10800017 	ldw	r2,0(r2)
   14e9c:	10800104 	addi	r2,r2,4
   14ea0:	10800037 	ldwio	r2,0(r2)
   14ea4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   14ea8:	e0bffa17 	ldw	r2,-24(fp)
   14eac:	1081000c 	andi	r2,r2,1024
   14eb0:	10000b26 	beq	r2,zero,14ee0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14eb4:	e0bff917 	ldw	r2,-28(fp)
   14eb8:	10800017 	ldw	r2,0(r2)
   14ebc:	10800104 	addi	r2,r2,4
   14ec0:	1007883a 	mov	r3,r2
   14ec4:	e0bff917 	ldw	r2,-28(fp)
   14ec8:	10800817 	ldw	r2,32(r2)
   14ecc:	10810014 	ori	r2,r2,1024
   14ed0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   14ed4:	e0bff917 	ldw	r2,-28(fp)
   14ed8:	10000915 	stw	zero,36(r2)
   14edc:	00000a06 	br	14f08 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14ee0:	e0bff917 	ldw	r2,-28(fp)
   14ee4:	10c00917 	ldw	r3,36(r2)
   14ee8:	00a00034 	movhi	r2,32768
   14eec:	10bfff04 	addi	r2,r2,-4
   14ef0:	10c00536 	bltu	r2,r3,14f08 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   14ef4:	e0bff917 	ldw	r2,-28(fp)
   14ef8:	10800917 	ldw	r2,36(r2)
   14efc:	10c00044 	addi	r3,r2,1
   14f00:	e0bff917 	ldw	r2,-28(fp)
   14f04:	10c00915 	stw	r3,36(r2)
   14f08:	d0a74417 	ldw	r2,-25328(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   14f0c:	e037883a 	mov	sp,fp
   14f10:	df000017 	ldw	fp,0(sp)
   14f14:	dec00104 	addi	sp,sp,4
   14f18:	f800283a 	ret

00014f1c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14f1c:	defffd04 	addi	sp,sp,-12
   14f20:	df000215 	stw	fp,8(sp)
   14f24:	df000204 	addi	fp,sp,8
   14f28:	e13ffe15 	stw	r4,-8(fp)
   14f2c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14f30:	00000506 	br	14f48 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14f34:	e0bfff17 	ldw	r2,-4(fp)
   14f38:	1090000c 	andi	r2,r2,16384
   14f3c:	10000226 	beq	r2,zero,14f48 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14f40:	00bffd44 	movi	r2,-11
   14f44:	00000b06 	br	14f74 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14f48:	e0bffe17 	ldw	r2,-8(fp)
   14f4c:	10c00d17 	ldw	r3,52(r2)
   14f50:	e0bffe17 	ldw	r2,-8(fp)
   14f54:	10800c17 	ldw	r2,48(r2)
   14f58:	18800526 	beq	r3,r2,14f70 <altera_avalon_jtag_uart_close+0x54>
   14f5c:	e0bffe17 	ldw	r2,-8(fp)
   14f60:	10c00917 	ldw	r3,36(r2)
   14f64:	e0bffe17 	ldw	r2,-8(fp)
   14f68:	10800117 	ldw	r2,4(r2)
   14f6c:	18bff136 	bltu	r3,r2,14f34 <__alt_mem_Onchip_SRAM+0xf8014f34>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14f70:	0005883a 	mov	r2,zero
}
   14f74:	e037883a 	mov	sp,fp
   14f78:	df000017 	ldw	fp,0(sp)
   14f7c:	dec00104 	addi	sp,sp,4
   14f80:	f800283a 	ret

00014f84 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14f84:	defffa04 	addi	sp,sp,-24
   14f88:	df000515 	stw	fp,20(sp)
   14f8c:	df000504 	addi	fp,sp,20
   14f90:	e13ffd15 	stw	r4,-12(fp)
   14f94:	e17ffe15 	stw	r5,-8(fp)
   14f98:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14f9c:	00bff9c4 	movi	r2,-25
   14fa0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   14fa4:	e0bffe17 	ldw	r2,-8(fp)
   14fa8:	10da8060 	cmpeqi	r3,r2,27137
   14fac:	1800031e 	bne	r3,zero,14fbc <altera_avalon_jtag_uart_ioctl+0x38>
   14fb0:	109a80a0 	cmpeqi	r2,r2,27138
   14fb4:	1000181e 	bne	r2,zero,15018 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   14fb8:	00002906 	br	15060 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14fbc:	e0bffd17 	ldw	r2,-12(fp)
   14fc0:	10c00117 	ldw	r3,4(r2)
   14fc4:	00a00034 	movhi	r2,32768
   14fc8:	10bfffc4 	addi	r2,r2,-1
   14fcc:	18802126 	beq	r3,r2,15054 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   14fd0:	e0bfff17 	ldw	r2,-4(fp)
   14fd4:	10800017 	ldw	r2,0(r2)
   14fd8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14fdc:	e0bffc17 	ldw	r2,-16(fp)
   14fe0:	10800090 	cmplti	r2,r2,2
   14fe4:	1000061e 	bne	r2,zero,15000 <altera_avalon_jtag_uart_ioctl+0x7c>
   14fe8:	e0fffc17 	ldw	r3,-16(fp)
   14fec:	00a00034 	movhi	r2,32768
   14ff0:	10bfffc4 	addi	r2,r2,-1
   14ff4:	18800226 	beq	r3,r2,15000 <altera_avalon_jtag_uart_ioctl+0x7c>
   14ff8:	e0bffc17 	ldw	r2,-16(fp)
   14ffc:	00000206 	br	15008 <altera_avalon_jtag_uart_ioctl+0x84>
   15000:	00a00034 	movhi	r2,32768
   15004:	10bfff84 	addi	r2,r2,-2
   15008:	e0fffd17 	ldw	r3,-12(fp)
   1500c:	18800115 	stw	r2,4(r3)
      rc = 0;
   15010:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15014:	00000f06 	br	15054 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   15018:	e0bffd17 	ldw	r2,-12(fp)
   1501c:	10c00117 	ldw	r3,4(r2)
   15020:	00a00034 	movhi	r2,32768
   15024:	10bfffc4 	addi	r2,r2,-1
   15028:	18800c26 	beq	r3,r2,1505c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1502c:	e0bffd17 	ldw	r2,-12(fp)
   15030:	10c00917 	ldw	r3,36(r2)
   15034:	e0bffd17 	ldw	r2,-12(fp)
   15038:	10800117 	ldw	r2,4(r2)
   1503c:	1885803a 	cmpltu	r2,r3,r2
   15040:	10c03fcc 	andi	r3,r2,255
   15044:	e0bfff17 	ldw	r2,-4(fp)
   15048:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1504c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15050:	00000206 	br	1505c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   15054:	0001883a 	nop
   15058:	00000106 	br	15060 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1505c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   15060:	e0bffb17 	ldw	r2,-20(fp)
}
   15064:	e037883a 	mov	sp,fp
   15068:	df000017 	ldw	fp,0(sp)
   1506c:	dec00104 	addi	sp,sp,4
   15070:	f800283a 	ret

00015074 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   15074:	defff304 	addi	sp,sp,-52
   15078:	dfc00c15 	stw	ra,48(sp)
   1507c:	df000b15 	stw	fp,44(sp)
   15080:	df000b04 	addi	fp,sp,44
   15084:	e13ffc15 	stw	r4,-16(fp)
   15088:	e17ffd15 	stw	r5,-12(fp)
   1508c:	e1bffe15 	stw	r6,-8(fp)
   15090:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   15094:	e0bffd17 	ldw	r2,-12(fp)
   15098:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1509c:	00004706 	br	151bc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   150a0:	e0bffc17 	ldw	r2,-16(fp)
   150a4:	10800a17 	ldw	r2,40(r2)
   150a8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   150ac:	e0bffc17 	ldw	r2,-16(fp)
   150b0:	10800b17 	ldw	r2,44(r2)
   150b4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   150b8:	e0fff717 	ldw	r3,-36(fp)
   150bc:	e0bff817 	ldw	r2,-32(fp)
   150c0:	18800536 	bltu	r3,r2,150d8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   150c4:	e0fff717 	ldw	r3,-36(fp)
   150c8:	e0bff817 	ldw	r2,-32(fp)
   150cc:	1885c83a 	sub	r2,r3,r2
   150d0:	e0bff615 	stw	r2,-40(fp)
   150d4:	00000406 	br	150e8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   150d8:	00c20004 	movi	r3,2048
   150dc:	e0bff817 	ldw	r2,-32(fp)
   150e0:	1885c83a 	sub	r2,r3,r2
   150e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   150e8:	e0bff617 	ldw	r2,-40(fp)
   150ec:	10001e26 	beq	r2,zero,15168 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   150f0:	e0fffe17 	ldw	r3,-8(fp)
   150f4:	e0bff617 	ldw	r2,-40(fp)
   150f8:	1880022e 	bgeu	r3,r2,15104 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   150fc:	e0bffe17 	ldw	r2,-8(fp)
   15100:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15104:	e0bffc17 	ldw	r2,-16(fp)
   15108:	10c00e04 	addi	r3,r2,56
   1510c:	e0bff817 	ldw	r2,-32(fp)
   15110:	1885883a 	add	r2,r3,r2
   15114:	e1bff617 	ldw	r6,-40(fp)
   15118:	100b883a 	mov	r5,r2
   1511c:	e13ff517 	ldw	r4,-44(fp)
   15120:	000919c0 	call	919c <memcpy>
      ptr   += n;
   15124:	e0fff517 	ldw	r3,-44(fp)
   15128:	e0bff617 	ldw	r2,-40(fp)
   1512c:	1885883a 	add	r2,r3,r2
   15130:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   15134:	e0fffe17 	ldw	r3,-8(fp)
   15138:	e0bff617 	ldw	r2,-40(fp)
   1513c:	1885c83a 	sub	r2,r3,r2
   15140:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15144:	e0fff817 	ldw	r3,-32(fp)
   15148:	e0bff617 	ldw	r2,-40(fp)
   1514c:	1885883a 	add	r2,r3,r2
   15150:	10c1ffcc 	andi	r3,r2,2047
   15154:	e0bffc17 	ldw	r2,-16(fp)
   15158:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1515c:	e0bffe17 	ldw	r2,-8(fp)
   15160:	00bfcf16 	blt	zero,r2,150a0 <__alt_mem_Onchip_SRAM+0xf80150a0>
   15164:	00000106 	br	1516c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   15168:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1516c:	e0fff517 	ldw	r3,-44(fp)
   15170:	e0bffd17 	ldw	r2,-12(fp)
   15174:	1880141e 	bne	r3,r2,151c8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   15178:	e0bfff17 	ldw	r2,-4(fp)
   1517c:	1090000c 	andi	r2,r2,16384
   15180:	1000131e 	bne	r2,zero,151d0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   15184:	0001883a 	nop
   15188:	e0bffc17 	ldw	r2,-16(fp)
   1518c:	10c00a17 	ldw	r3,40(r2)
   15190:	e0bff717 	ldw	r2,-36(fp)
   15194:	1880051e 	bne	r3,r2,151ac <altera_avalon_jtag_uart_read+0x138>
   15198:	e0bffc17 	ldw	r2,-16(fp)
   1519c:	10c00917 	ldw	r3,36(r2)
   151a0:	e0bffc17 	ldw	r2,-16(fp)
   151a4:	10800117 	ldw	r2,4(r2)
   151a8:	18bff736 	bltu	r3,r2,15188 <__alt_mem_Onchip_SRAM+0xf8015188>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   151ac:	e0bffc17 	ldw	r2,-16(fp)
   151b0:	10c00a17 	ldw	r3,40(r2)
   151b4:	e0bff717 	ldw	r2,-36(fp)
   151b8:	18800726 	beq	r3,r2,151d8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   151bc:	e0bffe17 	ldw	r2,-8(fp)
   151c0:	00bfb716 	blt	zero,r2,150a0 <__alt_mem_Onchip_SRAM+0xf80150a0>
   151c4:	00000506 	br	151dc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   151c8:	0001883a 	nop
   151cc:	00000306 	br	151dc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   151d0:	0001883a 	nop
   151d4:	00000106 	br	151dc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   151d8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   151dc:	e0fff517 	ldw	r3,-44(fp)
   151e0:	e0bffd17 	ldw	r2,-12(fp)
   151e4:	18801826 	beq	r3,r2,15248 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151e8:	0005303a 	rdctl	r2,status
   151ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151f0:	e0fffb17 	ldw	r3,-20(fp)
   151f4:	00bfff84 	movi	r2,-2
   151f8:	1884703a 	and	r2,r3,r2
   151fc:	1001703a 	wrctl	status,r2
  
  return context;
   15200:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15204:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15208:	e0bffc17 	ldw	r2,-16(fp)
   1520c:	10800817 	ldw	r2,32(r2)
   15210:	10c00054 	ori	r3,r2,1
   15214:	e0bffc17 	ldw	r2,-16(fp)
   15218:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1521c:	e0bffc17 	ldw	r2,-16(fp)
   15220:	10800017 	ldw	r2,0(r2)
   15224:	10800104 	addi	r2,r2,4
   15228:	1007883a 	mov	r3,r2
   1522c:	e0bffc17 	ldw	r2,-16(fp)
   15230:	10800817 	ldw	r2,32(r2)
   15234:	18800035 	stwio	r2,0(r3)
   15238:	e0bffa17 	ldw	r2,-24(fp)
   1523c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15240:	e0bff917 	ldw	r2,-28(fp)
   15244:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15248:	e0fff517 	ldw	r3,-44(fp)
   1524c:	e0bffd17 	ldw	r2,-12(fp)
   15250:	18800426 	beq	r3,r2,15264 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   15254:	e0fff517 	ldw	r3,-44(fp)
   15258:	e0bffd17 	ldw	r2,-12(fp)
   1525c:	1885c83a 	sub	r2,r3,r2
   15260:	00000606 	br	1527c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   15264:	e0bfff17 	ldw	r2,-4(fp)
   15268:	1090000c 	andi	r2,r2,16384
   1526c:	10000226 	beq	r2,zero,15278 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   15270:	00bffd44 	movi	r2,-11
   15274:	00000106 	br	1527c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   15278:	00bffec4 	movi	r2,-5
}
   1527c:	e037883a 	mov	sp,fp
   15280:	dfc00117 	ldw	ra,4(sp)
   15284:	df000017 	ldw	fp,0(sp)
   15288:	dec00204 	addi	sp,sp,8
   1528c:	f800283a 	ret

00015290 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   15290:	defff304 	addi	sp,sp,-52
   15294:	dfc00c15 	stw	ra,48(sp)
   15298:	df000b15 	stw	fp,44(sp)
   1529c:	df000b04 	addi	fp,sp,44
   152a0:	e13ffc15 	stw	r4,-16(fp)
   152a4:	e17ffd15 	stw	r5,-12(fp)
   152a8:	e1bffe15 	stw	r6,-8(fp)
   152ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   152b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   152b4:	e0bffd17 	ldw	r2,-12(fp)
   152b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   152bc:	00003706 	br	1539c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   152c0:	e0bffc17 	ldw	r2,-16(fp)
   152c4:	10800c17 	ldw	r2,48(r2)
   152c8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   152cc:	e0bffc17 	ldw	r2,-16(fp)
   152d0:	10800d17 	ldw	r2,52(r2)
   152d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   152d8:	e0fff917 	ldw	r3,-28(fp)
   152dc:	e0bff517 	ldw	r2,-44(fp)
   152e0:	1880062e 	bgeu	r3,r2,152fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   152e4:	e0fff517 	ldw	r3,-44(fp)
   152e8:	e0bff917 	ldw	r2,-28(fp)
   152ec:	1885c83a 	sub	r2,r3,r2
   152f0:	10bfffc4 	addi	r2,r2,-1
   152f4:	e0bff615 	stw	r2,-40(fp)
   152f8:	00000b06 	br	15328 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   152fc:	e0bff517 	ldw	r2,-44(fp)
   15300:	10000526 	beq	r2,zero,15318 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   15304:	00c20004 	movi	r3,2048
   15308:	e0bff917 	ldw	r2,-28(fp)
   1530c:	1885c83a 	sub	r2,r3,r2
   15310:	e0bff615 	stw	r2,-40(fp)
   15314:	00000406 	br	15328 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   15318:	00c1ffc4 	movi	r3,2047
   1531c:	e0bff917 	ldw	r2,-28(fp)
   15320:	1885c83a 	sub	r2,r3,r2
   15324:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   15328:	e0bff617 	ldw	r2,-40(fp)
   1532c:	10001e26 	beq	r2,zero,153a8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   15330:	e0fffe17 	ldw	r3,-8(fp)
   15334:	e0bff617 	ldw	r2,-40(fp)
   15338:	1880022e 	bgeu	r3,r2,15344 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1533c:	e0bffe17 	ldw	r2,-8(fp)
   15340:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   15344:	e0bffc17 	ldw	r2,-16(fp)
   15348:	10c20e04 	addi	r3,r2,2104
   1534c:	e0bff917 	ldw	r2,-28(fp)
   15350:	1885883a 	add	r2,r3,r2
   15354:	e1bff617 	ldw	r6,-40(fp)
   15358:	e17ffd17 	ldw	r5,-12(fp)
   1535c:	1009883a 	mov	r4,r2
   15360:	000919c0 	call	919c <memcpy>
      ptr   += n;
   15364:	e0fffd17 	ldw	r3,-12(fp)
   15368:	e0bff617 	ldw	r2,-40(fp)
   1536c:	1885883a 	add	r2,r3,r2
   15370:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   15374:	e0fffe17 	ldw	r3,-8(fp)
   15378:	e0bff617 	ldw	r2,-40(fp)
   1537c:	1885c83a 	sub	r2,r3,r2
   15380:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15384:	e0fff917 	ldw	r3,-28(fp)
   15388:	e0bff617 	ldw	r2,-40(fp)
   1538c:	1885883a 	add	r2,r3,r2
   15390:	10c1ffcc 	andi	r3,r2,2047
   15394:	e0bffc17 	ldw	r2,-16(fp)
   15398:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1539c:	e0bffe17 	ldw	r2,-8(fp)
   153a0:	00bfc716 	blt	zero,r2,152c0 <__alt_mem_Onchip_SRAM+0xf80152c0>
   153a4:	00000106 	br	153ac <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   153a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153ac:	0005303a 	rdctl	r2,status
   153b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153b4:	e0fffb17 	ldw	r3,-20(fp)
   153b8:	00bfff84 	movi	r2,-2
   153bc:	1884703a 	and	r2,r3,r2
   153c0:	1001703a 	wrctl	status,r2
  
  return context;
   153c4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   153c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   153cc:	e0bffc17 	ldw	r2,-16(fp)
   153d0:	10800817 	ldw	r2,32(r2)
   153d4:	10c00094 	ori	r3,r2,2
   153d8:	e0bffc17 	ldw	r2,-16(fp)
   153dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   153e0:	e0bffc17 	ldw	r2,-16(fp)
   153e4:	10800017 	ldw	r2,0(r2)
   153e8:	10800104 	addi	r2,r2,4
   153ec:	1007883a 	mov	r3,r2
   153f0:	e0bffc17 	ldw	r2,-16(fp)
   153f4:	10800817 	ldw	r2,32(r2)
   153f8:	18800035 	stwio	r2,0(r3)
   153fc:	e0bffa17 	ldw	r2,-24(fp)
   15400:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15404:	e0bff817 	ldw	r2,-32(fp)
   15408:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1540c:	e0bffe17 	ldw	r2,-8(fp)
   15410:	0080100e 	bge	zero,r2,15454 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   15414:	e0bfff17 	ldw	r2,-4(fp)
   15418:	1090000c 	andi	r2,r2,16384
   1541c:	1000101e 	bne	r2,zero,15460 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   15420:	0001883a 	nop
   15424:	e0bffc17 	ldw	r2,-16(fp)
   15428:	10c00d17 	ldw	r3,52(r2)
   1542c:	e0bff517 	ldw	r2,-44(fp)
   15430:	1880051e 	bne	r3,r2,15448 <altera_avalon_jtag_uart_write+0x1b8>
   15434:	e0bffc17 	ldw	r2,-16(fp)
   15438:	10c00917 	ldw	r3,36(r2)
   1543c:	e0bffc17 	ldw	r2,-16(fp)
   15440:	10800117 	ldw	r2,4(r2)
   15444:	18bff736 	bltu	r3,r2,15424 <__alt_mem_Onchip_SRAM+0xf8015424>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   15448:	e0bffc17 	ldw	r2,-16(fp)
   1544c:	10800917 	ldw	r2,36(r2)
   15450:	1000051e 	bne	r2,zero,15468 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   15454:	e0bffe17 	ldw	r2,-8(fp)
   15458:	00bfd016 	blt	zero,r2,1539c <__alt_mem_Onchip_SRAM+0xf801539c>
   1545c:	00000306 	br	1546c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   15460:	0001883a 	nop
   15464:	00000106 	br	1546c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   15468:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1546c:	e0fffd17 	ldw	r3,-12(fp)
   15470:	e0bff717 	ldw	r2,-36(fp)
   15474:	18800426 	beq	r3,r2,15488 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   15478:	e0fffd17 	ldw	r3,-12(fp)
   1547c:	e0bff717 	ldw	r2,-36(fp)
   15480:	1885c83a 	sub	r2,r3,r2
   15484:	00000606 	br	154a0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   15488:	e0bfff17 	ldw	r2,-4(fp)
   1548c:	1090000c 	andi	r2,r2,16384
   15490:	10000226 	beq	r2,zero,1549c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   15494:	00bffd44 	movi	r2,-11
   15498:	00000106 	br	154a0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1549c:	00bffec4 	movi	r2,-5
}
   154a0:	e037883a 	mov	sp,fp
   154a4:	dfc00117 	ldw	ra,4(sp)
   154a8:	df000017 	ldw	fp,0(sp)
   154ac:	dec00204 	addi	sp,sp,8
   154b0:	f800283a 	ret

000154b4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   154b4:	defff404 	addi	sp,sp,-48
   154b8:	df000b15 	stw	fp,44(sp)
   154bc:	df000b04 	addi	fp,sp,44
   154c0:	e13ffc15 	stw	r4,-16(fp)
   154c4:	e17ffd15 	stw	r5,-12(fp)
   154c8:	e1bffe15 	stw	r6,-8(fp)
   154cc:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   154d0:	e0ffff17 	ldw	r3,-4(fp)
   154d4:	e0bffe17 	ldw	r2,-8(fp)
   154d8:	1885883a 	add	r2,r3,r2
   154dc:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   154e0:	e0c00217 	ldw	r3,8(fp)
   154e4:	e0800117 	ldw	r2,4(fp)
   154e8:	1885883a 	add	r2,r3,r2
   154ec:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   154f0:	e0800117 	ldw	r2,4(fp)
   154f4:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   154f8:	e0bffe17 	ldw	r2,-8(fp)
   154fc:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   15500:	00800044 	movi	r2,1
   15504:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   15508:	e0bffc17 	ldw	r2,-16(fp)
   1550c:	10800504 	addi	r2,r2,20
   15510:	1009883a 	mov	r4,r2
   15514:	00c00044 	movi	r3,1
   15518:	e0bffd17 	ldw	r2,-12(fp)
   1551c:	1884983a 	sll	r2,r3,r2
   15520:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   15524:	e0800317 	ldw	r2,12(fp)
   15528:	1080008c 	andi	r2,r2,2
   1552c:	1000051e 	bne	r2,zero,15544 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   15530:	e0bffc17 	ldw	r2,-16(fp)
   15534:	10800304 	addi	r2,r2,12
   15538:	1007883a 	mov	r3,r2
   1553c:	00810004 	movi	r2,1024
   15540:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   15544:	e0bffc17 	ldw	r2,-16(fp)
   15548:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   1554c:	e0bffc17 	ldw	r2,-16(fp)
   15550:	10800204 	addi	r2,r2,8
   15554:	10800037 	ldwio	r2,0(r2)
   15558:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   1555c:	e0bffa17 	ldw	r2,-24(fp)
   15560:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   15564:	10000226 	beq	r2,zero,15570 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   15568:	e0bff717 	ldw	r2,-36(fp)
   1556c:	1000031e 	bne	r2,zero,1557c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   15570:	e0bffa17 	ldw	r2,-24(fp)
   15574:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   15578:	103ff426 	beq	r2,zero,1554c <__alt_mem_Onchip_SRAM+0xf801554c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   1557c:	e0bffa17 	ldw	r2,-24(fp)
   15580:	1080100c 	andi	r2,r2,64
   15584:	10001e26 	beq	r2,zero,15600 <alt_avalon_spi_command+0x14c>
   15588:	e0bff717 	ldw	r2,-36(fp)
   1558c:	00801c0e 	bge	zero,r2,15600 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   15590:	e0bff717 	ldw	r2,-36(fp)
   15594:	10bfffc4 	addi	r2,r2,-1
   15598:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   1559c:	e0ffff17 	ldw	r3,-4(fp)
   155a0:	e0bff817 	ldw	r2,-32(fp)
   155a4:	18800a2e 	bgeu	r3,r2,155d0 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   155a8:	e0bffc17 	ldw	r2,-16(fp)
   155ac:	10800104 	addi	r2,r2,4
   155b0:	1009883a 	mov	r4,r2
   155b4:	e0bfff17 	ldw	r2,-4(fp)
   155b8:	10c00044 	addi	r3,r2,1
   155bc:	e0ffff15 	stw	r3,-4(fp)
   155c0:	10800003 	ldbu	r2,0(r2)
   155c4:	10803fcc 	andi	r2,r2,255
   155c8:	20800035 	stwio	r2,0(r4)
   155cc:	00000c06 	br	15600 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   155d0:	e0bff517 	ldw	r2,-44(fp)
   155d4:	10000826 	beq	r2,zero,155f8 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   155d8:	e0bff517 	ldw	r2,-44(fp)
   155dc:	10bfffc4 	addi	r2,r2,-1
   155e0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   155e4:	e0bffc17 	ldw	r2,-16(fp)
   155e8:	10800104 	addi	r2,r2,4
   155ec:	0007883a 	mov	r3,zero
   155f0:	10c00035 	stwio	r3,0(r2)
   155f4:	00000206 	br	15600 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   155f8:	00bf0004 	movi	r2,-1024
   155fc:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   15600:	e0bffa17 	ldw	r2,-24(fp)
   15604:	1080200c 	andi	r2,r2,128
   15608:	103fd026 	beq	r2,zero,1554c <__alt_mem_Onchip_SRAM+0xf801554c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   1560c:	e0bffc17 	ldw	r2,-16(fp)
   15610:	10800037 	ldwio	r2,0(r2)
   15614:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   15618:	e0bff617 	ldw	r2,-40(fp)
   1561c:	10000426 	beq	r2,zero,15630 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   15620:	e0bff617 	ldw	r2,-40(fp)
   15624:	10bfffc4 	addi	r2,r2,-1
   15628:	e0bff615 	stw	r2,-40(fp)
   1562c:	00000506 	br	15644 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   15630:	e0800217 	ldw	r2,8(fp)
   15634:	10c00044 	addi	r3,r2,1
   15638:	e0c00215 	stw	r3,8(fp)
   1563c:	e0fffb17 	ldw	r3,-20(fp)
   15640:	10c00005 	stb	r3,0(r2)
      credits++;
   15644:	e0bff717 	ldw	r2,-36(fp)
   15648:	10800044 	addi	r2,r2,1
   1564c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   15650:	e0bff617 	ldw	r2,-40(fp)
   15654:	103fbd1e 	bne	r2,zero,1554c <__alt_mem_Onchip_SRAM+0xf801554c>
   15658:	e0c00217 	ldw	r3,8(fp)
   1565c:	e0bff917 	ldw	r2,-28(fp)
   15660:	18bfba1e 	bne	r3,r2,1554c <__alt_mem_Onchip_SRAM+0xf801554c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   15664:	e0bffc17 	ldw	r2,-16(fp)
   15668:	10800204 	addi	r2,r2,8
   1566c:	10800037 	ldwio	r2,0(r2)
   15670:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   15674:	e0bffa17 	ldw	r2,-24(fp)
   15678:	1080080c 	andi	r2,r2,32
   1567c:	103ff926 	beq	r2,zero,15664 <__alt_mem_Onchip_SRAM+0xf8015664>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   15680:	e0800317 	ldw	r2,12(fp)
   15684:	1080004c 	andi	r2,r2,1
   15688:	1000041e 	bne	r2,zero,1569c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   1568c:	e0bffc17 	ldw	r2,-16(fp)
   15690:	10800304 	addi	r2,r2,12
   15694:	0007883a 	mov	r3,zero
   15698:	10c00035 	stwio	r3,0(r2)

  return read_length;
   1569c:	e0800117 	ldw	r2,4(fp)
}
   156a0:	e037883a 	mov	sp,fp
   156a4:	df000017 	ldw	fp,0(sp)
   156a8:	dec00104 	addi	sp,sp,4
   156ac:	f800283a 	ret

000156b0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   156b0:	defffa04 	addi	sp,sp,-24
   156b4:	dfc00515 	stw	ra,20(sp)
   156b8:	df000415 	stw	fp,16(sp)
   156bc:	df000404 	addi	fp,sp,16
   156c0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   156c4:	0007883a 	mov	r3,zero
   156c8:	e0bfff17 	ldw	r2,-4(fp)
   156cc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   156d0:	e0bfff17 	ldw	r2,-4(fp)
   156d4:	10800104 	addi	r2,r2,4
   156d8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156dc:	0005303a 	rdctl	r2,status
   156e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156e4:	e0fffd17 	ldw	r3,-12(fp)
   156e8:	00bfff84 	movi	r2,-2
   156ec:	1884703a 	and	r2,r3,r2
   156f0:	1001703a 	wrctl	status,r2
  
  return context;
   156f4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   156f8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   156fc:	00128e40 	call	128e4 <alt_tick>
   15700:	e0bffc17 	ldw	r2,-16(fp)
   15704:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15708:	e0bffe17 	ldw	r2,-8(fp)
   1570c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   15710:	0001883a 	nop
   15714:	e037883a 	mov	sp,fp
   15718:	dfc00117 	ldw	ra,4(sp)
   1571c:	df000017 	ldw	fp,0(sp)
   15720:	dec00204 	addi	sp,sp,8
   15724:	f800283a 	ret

00015728 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   15728:	defff804 	addi	sp,sp,-32
   1572c:	dfc00715 	stw	ra,28(sp)
   15730:	df000615 	stw	fp,24(sp)
   15734:	df000604 	addi	fp,sp,24
   15738:	e13ffc15 	stw	r4,-16(fp)
   1573c:	e17ffd15 	stw	r5,-12(fp)
   15740:	e1bffe15 	stw	r6,-8(fp)
   15744:	e1ffff15 	stw	r7,-4(fp)
   15748:	e0bfff17 	ldw	r2,-4(fp)
   1574c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   15750:	d0a74417 	ldw	r2,-25328(gp)
   15754:	1000021e 	bne	r2,zero,15760 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   15758:	e0bffb17 	ldw	r2,-20(fp)
   1575c:	d0a74415 	stw	r2,-25328(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   15760:	e0bffc17 	ldw	r2,-16(fp)
   15764:	10800104 	addi	r2,r2,4
   15768:	00c001c4 	movi	r3,7
   1576c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   15770:	d8000015 	stw	zero,0(sp)
   15774:	e1fffc17 	ldw	r7,-16(fp)
   15778:	01800074 	movhi	r6,1
   1577c:	3195ac04 	addi	r6,r6,22192
   15780:	e17ffe17 	ldw	r5,-8(fp)
   15784:	e13ffd17 	ldw	r4,-12(fp)
   15788:	001717c0 	call	1717c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1578c:	0001883a 	nop
   15790:	e037883a 	mov	sp,fp
   15794:	dfc00117 	ldw	ra,4(sp)
   15798:	df000017 	ldw	fp,0(sp)
   1579c:	dec00204 	addi	sp,sp,8
   157a0:	f800283a 	ret

000157a4 <alt_adc_irq>:
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
   157a4:	defff904 	addi	sp,sp,-28
   157a8:	dfc00615 	stw	ra,24(sp)
   157ac:	df000515 	stw	fp,20(sp)
   157b0:	df000504 	addi	fp,sp,20
   157b4:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
   157b8:	e0bfff17 	ldw	r2,-4(fp)
   157bc:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr = 0;
   157c0:	e03ffc15 	stw	zero,-16(fp)

	if(NULL != dev)
   157c4:	e0bffb17 	ldw	r2,-20(fp)
   157c8:	10001a26 	beq	r2,zero,15834 <alt_adc_irq+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157cc:	0005303a 	rdctl	r2,status
   157d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157d4:	e0fffe17 	ldw	r3,-8(fp)
   157d8:	00bfff84 	movi	r2,-2
   157dc:	1884703a 	and	r2,r3,r2
   157e0:	1001703a 	wrctl	status,r2
  
  return context;
   157e4:	e0bffe17 	ldw	r2,-8(fp)
	{
	    cpu_sr = alt_irq_disable_all();
   157e8:	e0bffc15 	stw	r2,-16(fp)
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
   157ec:	e0bffb17 	ldw	r2,-20(fp)
   157f0:	10800a17 	ldw	r2,40(r2)
   157f4:	10000626 	beq	r2,zero,15810 <alt_adc_irq+0x6c>
		{
			dev->callback (dev->callback_context);
   157f8:	e0bffb17 	ldw	r2,-20(fp)
   157fc:	10800a17 	ldw	r2,40(r2)
   15800:	e0fffb17 	ldw	r3,-20(fp)
   15804:	18c00b17 	ldw	r3,44(r3)
   15808:	1809883a 	mov	r4,r3
   1580c:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
   15810:	e0bffb17 	ldw	r2,-20(fp)
   15814:	10800c17 	ldw	r2,48(r2)
   15818:	1009883a 	mov	r4,r2
   1581c:	0015c500 	call	15c50 <adc_clear_interrupt_status>
   15820:	e0bffc17 	ldw	r2,-16(fp)
   15824:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15828:	e0bffd17 	ldw	r2,-12(fp)
   1582c:	1001703a 	wrctl	status,r2
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
   15830:	0001883a 	nop
   15834:	0001883a 	nop
}
   15838:	e037883a 	mov	sp,fp
   1583c:	dfc00117 	ldw	ra,4(sp)
   15840:	df000017 	ldw	fp,0(sp)
   15844:	dec00204 	addi	sp,sp,8
   15848:	f800283a 	ret

0001584c <alt_adc_word_read>:
 * Returns:
 * 0 -> success
 * -EINVAL -> Invalid arguments
**/
int alt_adc_word_read (alt_u32 sample_store_base, alt_u32* dest_ptr, alt_u32 len)
{
   1584c:	defff804 	addi	sp,sp,-32
   15850:	df000715 	stw	fp,28(sp)
   15854:	df000704 	addi	fp,sp,28
   15858:	e13ffd15 	stw	r4,-12(fp)
   1585c:	e17ffe15 	stw	r5,-8(fp)
   15860:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 word = 0;
   15864:	e03ff915 	stw	zero,-28(fp)
    alt_u32 word_length = len;
   15868:	e0bfff17 	ldw	r2,-4(fp)
   1586c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32* dest_buf = dest_ptr;
   15870:	e0bffe17 	ldw	r2,-8(fp)
   15874:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 base = sample_store_base;
   15878:	e0bffd17 	ldw	r2,-12(fp)
   1587c:	e0bffc15 	stw	r2,-16(fp)
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
   15880:	e0bffa17 	ldw	r2,-24(fp)
   15884:	1000021e 	bne	r2,zero,15890 <alt_adc_word_read+0x44>
    {
    	return -EINVAL;
   15888:	00bffa84 	movi	r2,-22
   1588c:	00001606 	br	158e8 <alt_adc_word_read+0x9c>
    }

    for(word = 0; word < word_length; word++)
   15890:	e03ff915 	stw	zero,-28(fp)
   15894:	00001006 	br	158d8 <alt_adc_word_read+0x8c>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
   15898:	e0bff917 	ldw	r2,-28(fp)
   1589c:	1085883a 	add	r2,r2,r2
   158a0:	1085883a 	add	r2,r2,r2
   158a4:	1007883a 	mov	r3,r2
   158a8:	e0bffc17 	ldw	r2,-16(fp)
   158ac:	1885883a 	add	r2,r3,r2
   158b0:	10800037 	ldwio	r2,0(r2)
   158b4:	1007883a 	mov	r3,r2
   158b8:	e0bffa17 	ldw	r2,-24(fp)
   158bc:	10c00015 	stw	r3,0(r2)

       dest_buf++;
   158c0:	e0bffa17 	ldw	r2,-24(fp)
   158c4:	10800104 	addi	r2,r2,4
   158c8:	e0bffa15 	stw	r2,-24(fp)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
   158cc:	e0bff917 	ldw	r2,-28(fp)
   158d0:	10800044 	addi	r2,r2,1
   158d4:	e0bff915 	stw	r2,-28(fp)
   158d8:	e0fff917 	ldw	r3,-28(fp)
   158dc:	e0bffb17 	ldw	r2,-20(fp)
   158e0:	18bfed36 	bltu	r3,r2,15898 <__alt_mem_Onchip_SRAM+0xf8015898>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
   158e4:	0005883a 	mov	r2,zero

}
   158e8:	e037883a 	mov	sp,fp
   158ec:	df000017 	ldw	fp,0(sp)
   158f0:	dec00104 	addi	sp,sp,4
   158f4:	f800283a 	ret

000158f8 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
   158f8:	defffa04 	addi	sp,sp,-24
   158fc:	dfc00515 	stw	ra,20(sp)
   15900:	df000415 	stw	fp,16(sp)
   15904:	df000404 	addi	fp,sp,16
   15908:	e13ffd15 	stw	r4,-12(fp)
   1590c:	e17ffe15 	stw	r5,-8(fp)
   15910:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
   15914:	d1601604 	addi	r5,gp,-32680
   15918:	e13ffd17 	ldw	r4,-12(fp)
   1591c:	0016f680 	call	16f68 <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
   15920:	e0bffe17 	ldw	r2,-8(fp)
   15924:	10000b16 	blt	r2,zero,15954 <altera_modular_adc_init+0x5c>
   15928:	e0bfff17 	ldw	r2,-4(fp)
   1592c:	10000916 	blt	r2,zero,15954 <altera_modular_adc_init+0x5c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
   15930:	e0bffe17 	ldw	r2,-8(fp)
   15934:	e0ffff17 	ldw	r3,-4(fp)
   15938:	d8000015 	stw	zero,0(sp)
   1593c:	e1fffd17 	ldw	r7,-12(fp)
   15940:	01800074 	movhi	r6,1
   15944:	3195e904 	addi	r6,r6,22436
   15948:	180b883a 	mov	r5,r3
   1594c:	1009883a 	mov	r4,r2
   15950:	001717c0 	call	1717c <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
   15954:	0001883a 	nop
   15958:	e037883a 	mov	sp,fp
   1595c:	dfc00117 	ldw	ra,4(sp)
   15960:	df000017 	ldw	fp,0(sp)
   15964:	dec00204 	addi	sp,sp,8
   15968:	f800283a 	ret

0001596c <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
   1596c:	defffa04 	addi	sp,sp,-24
   15970:	dfc00515 	stw	ra,20(sp)
   15974:	df000415 	stw	fp,16(sp)
   15978:	df000404 	addi	fp,sp,16
   1597c:	e13ffc15 	stw	r4,-16(fp)
   15980:	e17ffd15 	stw	r5,-12(fp)
   15984:	e1bffe15 	stw	r6,-8(fp)
   15988:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   1598c:	e0bffc17 	ldw	r2,-16(fp)
   15990:	e0fffd17 	ldw	r3,-12(fp)
   15994:	10c00a15 	stw	r3,40(r2)
    dev->callback_context = context;
   15998:	e0bffc17 	ldw	r2,-16(fp)
   1599c:	e0fffe17 	ldw	r3,-8(fp)
   159a0:	10c00b15 	stw	r3,44(r2)
    dev->sample_store_base = sample_store_base;
   159a4:	e0bffc17 	ldw	r2,-16(fp)
   159a8:	e0ffff17 	ldw	r3,-4(fp)
   159ac:	10c00c15 	stw	r3,48(r2)
	
	if(NULL != callback)
   159b0:	e0bffd17 	ldw	r2,-12(fp)
   159b4:	10000726 	beq	r2,zero,159d4 <alt_adc_register_callback+0x68>
	{
                adc_clear_interrupt_status(sample_store_base);
   159b8:	e0bfff17 	ldw	r2,-4(fp)
   159bc:	1009883a 	mov	r4,r2
   159c0:	0015c500 	call	15c50 <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
   159c4:	e0bfff17 	ldw	r2,-4(fp)
   159c8:	1009883a 	mov	r4,r2
   159cc:	0015bc40 	call	15bc4 <adc_interrupt_enable>
                adc_clear_interrupt_status(sample_store_base);
	}
	
    
	
    return ;
   159d0:	00000706 	br	159f0 <alt_adc_register_callback+0x84>
                adc_clear_interrupt_status(sample_store_base);
		adc_interrupt_enable(sample_store_base);
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
   159d4:	e0bfff17 	ldw	r2,-4(fp)
   159d8:	1009883a 	mov	r4,r2
   159dc:	0015c080 	call	15c08 <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
   159e0:	e0bfff17 	ldw	r2,-4(fp)
   159e4:	1009883a 	mov	r4,r2
   159e8:	0015c500 	call	15c50 <adc_clear_interrupt_status>
	}
	
    
	
    return ;
   159ec:	0001883a 	nop
}
   159f0:	e037883a 	mov	sp,fp
   159f4:	dfc00117 	ldw	ra,4(sp)
   159f8:	df000017 	ldw	fp,0(sp)
   159fc:	dec00204 	addi	sp,sp,8
   15a00:	f800283a 	ret

00015a04 <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
   15a04:	defffc04 	addi	sp,sp,-16
   15a08:	dfc00315 	stw	ra,12(sp)
   15a0c:	df000215 	stw	fp,8(sp)
   15a10:	df000204 	addi	fp,sp,8
   15a14:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = NULL;
   15a18:	e03ffe15 	stw	zero,-8(fp)

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
   15a1c:	d1601604 	addi	r5,gp,-32680
   15a20:	e13fff17 	ldw	r4,-4(fp)
   15a24:	00170cc0 	call	170cc <alt_find_dev>
   15a28:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   15a2c:	e0bffe17 	ldw	r2,-8(fp)
}
   15a30:	e037883a 	mov	sp,fp
   15a34:	dfc00117 	ldw	ra,4(sp)
   15a38:	df000017 	ldw	fp,0(sp)
   15a3c:	dec00204 	addi	sp,sp,8
   15a40:	f800283a 	ret

00015a44 <adc_stop>:

void adc_stop(int sequencer_base)
{
   15a44:	defffe04 	addi	sp,sp,-8
   15a48:	df000115 	stw	fp,4(sp)
   15a4c:	df000104 	addi	fp,sp,4
   15a50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
   15a54:	e0bfff17 	ldw	r2,-4(fp)
   15a58:	e0ffff17 	ldw	r3,-4(fp)
   15a5c:	19000037 	ldwio	r4,0(r3)
   15a60:	00ffff84 	movi	r3,-2
   15a64:	20c6703a 	and	r3,r4,r3
   15a68:	10c00035 	stwio	r3,0(r2)
   15a6c:	0001883a 	nop
   15a70:	e0bfff17 	ldw	r2,-4(fp)
   15a74:	10800037 	ldwio	r2,0(r2)
   15a78:	1080004c 	andi	r2,r2,1
   15a7c:	103ffc1e 	bne	r2,zero,15a70 <__alt_mem_Onchip_SRAM+0xf8015a70>
}
   15a80:	0001883a 	nop
   15a84:	e037883a 	mov	sp,fp
   15a88:	df000017 	ldw	fp,0(sp)
   15a8c:	dec00104 	addi	sp,sp,4
   15a90:	f800283a 	ret

00015a94 <adc_start>:

void adc_start(int sequencer_base)
{
   15a94:	defffe04 	addi	sp,sp,-8
   15a98:	df000115 	stw	fp,4(sp)
   15a9c:	df000104 	addi	fp,sp,4
   15aa0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
   15aa4:	e0bfff17 	ldw	r2,-4(fp)
   15aa8:	e0ffff17 	ldw	r3,-4(fp)
   15aac:	18c00037 	ldwio	r3,0(r3)
   15ab0:	18c00054 	ori	r3,r3,1
   15ab4:	10c00035 	stwio	r3,0(r2)
}
   15ab8:	0001883a 	nop
   15abc:	e037883a 	mov	sp,fp
   15ac0:	df000017 	ldw	fp,0(sp)
   15ac4:	dec00104 	addi	sp,sp,4
   15ac8:	f800283a 	ret

00015acc <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
   15acc:	defffe04 	addi	sp,sp,-8
   15ad0:	df000115 	stw	fp,4(sp)
   15ad4:	df000104 	addi	fp,sp,4
   15ad8:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
   15adc:	e0bfff17 	ldw	r2,-4(fp)
   15ae0:	e0ffff17 	ldw	r3,-4(fp)
   15ae4:	19000037 	ldwio	r4,0(r3)
   15ae8:	00fffc44 	movi	r3,-15
   15aec:	20c6703a 	and	r3,r4,r3
   15af0:	18c00094 	ori	r3,r3,2
   15af4:	10c00035 	stwio	r3,0(r2)
}
   15af8:	0001883a 	nop
   15afc:	e037883a 	mov	sp,fp
   15b00:	df000017 	ldw	fp,0(sp)
   15b04:	dec00104 	addi	sp,sp,4
   15b08:	f800283a 	ret

00015b0c <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
   15b0c:	defffe04 	addi	sp,sp,-8
   15b10:	df000115 	stw	fp,4(sp)
   15b14:	df000104 	addi	fp,sp,4
   15b18:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
   15b1c:	e0bfff17 	ldw	r2,-4(fp)
   15b20:	e0ffff17 	ldw	r3,-4(fp)
   15b24:	19000037 	ldwio	r4,0(r3)
   15b28:	00fffc44 	movi	r3,-15
   15b2c:	20c6703a 	and	r3,r4,r3
   15b30:	10c00035 	stwio	r3,0(r2)
}
   15b34:	0001883a 	nop
   15b38:	e037883a 	mov	sp,fp
   15b3c:	df000017 	ldw	fp,0(sp)
   15b40:	dec00104 	addi	sp,sp,4
   15b44:	f800283a 	ret

00015b48 <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
   15b48:	defffc04 	addi	sp,sp,-16
   15b4c:	dfc00315 	stw	ra,12(sp)
   15b50:	df000215 	stw	fp,8(sp)
   15b54:	df000204 	addi	fp,sp,8
   15b58:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
   15b5c:	e0bfff17 	ldw	r2,-4(fp)
   15b60:	10800037 	ldwio	r2,0(r2)
   15b64:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
   15b68:	e13fff17 	ldw	r4,-4(fp)
   15b6c:	0015a440 	call	15a44 <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
   15b70:	e0bfff17 	ldw	r2,-4(fp)
   15b74:	e0ffff17 	ldw	r3,-4(fp)
   15b78:	18c00037 	ldwio	r3,0(r3)
   15b7c:	18c00394 	ori	r3,r3,14
   15b80:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
   15b84:	e13fff17 	ldw	r4,-4(fp)
   15b88:	0015a940 	call	15a94 <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
   15b8c:	0001883a 	nop
   15b90:	e0bfff17 	ldw	r2,-4(fp)
   15b94:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
   15b98:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
   15b9c:	103ffc1e 	bne	r2,zero,15b90 <__alt_mem_Onchip_SRAM+0xf8015b90>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
   15ba0:	e0bfff17 	ldw	r2,-4(fp)
   15ba4:	e0fffe17 	ldw	r3,-8(fp)
   15ba8:	10c00035 	stwio	r3,0(r2)
}
   15bac:	0001883a 	nop
   15bb0:	e037883a 	mov	sp,fp
   15bb4:	dfc00117 	ldw	ra,4(sp)
   15bb8:	df000017 	ldw	fp,0(sp)
   15bbc:	dec00204 	addi	sp,sp,8
   15bc0:	f800283a 	ret

00015bc4 <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
   15bc4:	defffe04 	addi	sp,sp,-8
   15bc8:	df000115 	stw	fp,4(sp)
   15bcc:	df000104 	addi	fp,sp,4
   15bd0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
   15bd4:	e0bfff17 	ldw	r2,-4(fp)
   15bd8:	10804004 	addi	r2,r2,256
   15bdc:	1007883a 	mov	r3,r2
   15be0:	e0bfff17 	ldw	r2,-4(fp)
   15be4:	10804004 	addi	r2,r2,256
   15be8:	10800037 	ldwio	r2,0(r2)
   15bec:	10800054 	ori	r2,r2,1
   15bf0:	18800035 	stwio	r2,0(r3)
}
   15bf4:	0001883a 	nop
   15bf8:	e037883a 	mov	sp,fp
   15bfc:	df000017 	ldw	fp,0(sp)
   15c00:	dec00104 	addi	sp,sp,4
   15c04:	f800283a 	ret

00015c08 <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
   15c08:	defffe04 	addi	sp,sp,-8
   15c0c:	df000115 	stw	fp,4(sp)
   15c10:	df000104 	addi	fp,sp,4
   15c14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
   15c18:	e0bfff17 	ldw	r2,-4(fp)
   15c1c:	10804004 	addi	r2,r2,256
   15c20:	1009883a 	mov	r4,r2
   15c24:	e0bfff17 	ldw	r2,-4(fp)
   15c28:	10804004 	addi	r2,r2,256
   15c2c:	10c00037 	ldwio	r3,0(r2)
   15c30:	00bfff84 	movi	r2,-2
   15c34:	1884703a 	and	r2,r3,r2
   15c38:	20800035 	stwio	r2,0(r4)
}
   15c3c:	0001883a 	nop
   15c40:	e037883a 	mov	sp,fp
   15c44:	df000017 	ldw	fp,0(sp)
   15c48:	dec00104 	addi	sp,sp,4
   15c4c:	f800283a 	ret

00015c50 <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
   15c50:	defffe04 	addi	sp,sp,-8
   15c54:	df000115 	stw	fp,4(sp)
   15c58:	df000104 	addi	fp,sp,4
   15c5c:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
   15c60:	e0bfff17 	ldw	r2,-4(fp)
   15c64:	10804104 	addi	r2,r2,260
   15c68:	1007883a 	mov	r3,r2
   15c6c:	e0bfff17 	ldw	r2,-4(fp)
   15c70:	10804104 	addi	r2,r2,260
   15c74:	10800037 	ldwio	r2,0(r2)
   15c78:	10800054 	ori	r2,r2,1
   15c7c:	18800035 	stwio	r2,0(r3)
}
   15c80:	0001883a 	nop
   15c84:	e037883a 	mov	sp,fp
   15c88:	df000017 	ldw	fp,0(sp)
   15c8c:	dec00104 	addi	sp,sp,4
   15c90:	f800283a 	ret

00015c94 <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
   15c94:	defffe04 	addi	sp,sp,-8
   15c98:	df000115 	stw	fp,4(sp)
   15c9c:	df000104 	addi	fp,sp,4
   15ca0:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
   15ca4:	e0bfff17 	ldw	r2,-4(fp)
   15ca8:	10804104 	addi	r2,r2,260
   15cac:	10800037 	ldwio	r2,0(r2)
   15cb0:	1080004c 	andi	r2,r2,1
   15cb4:	10000226 	beq	r2,zero,15cc0 <adc_interrupt_asserted+0x2c>
   15cb8:	00bfffc4 	movi	r2,-1
   15cbc:	00000106 	br	15cc4 <adc_interrupt_asserted+0x30>
   15cc0:	0005883a 	mov	r2,zero
}
   15cc4:	e037883a 	mov	sp,fp
   15cc8:	df000017 	ldw	fp,0(sp)
   15ccc:	dec00104 	addi	sp,sp,4
   15cd0:	f800283a 	ret

00015cd4 <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
   15cd4:	defffe04 	addi	sp,sp,-8
   15cd8:	df000115 	stw	fp,4(sp)
   15cdc:	df000104 	addi	fp,sp,4
   15ce0:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
   15ce4:	0001883a 	nop
   15ce8:	e0bfff17 	ldw	r2,-4(fp)
   15cec:	10804104 	addi	r2,r2,260
   15cf0:	10800037 	ldwio	r2,0(r2)
   15cf4:	1080004c 	andi	r2,r2,1
   15cf8:	103ffb26 	beq	r2,zero,15ce8 <__alt_mem_Onchip_SRAM+0xf8015ce8>
}
   15cfc:	0001883a 	nop
   15d00:	e037883a 	mov	sp,fp
   15d04:	df000017 	ldw	fp,0(sp)
   15d08:	dec00104 	addi	sp,sp,4
   15d0c:	f800283a 	ret

00015d10 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
   15d10:	defffc04 	addi	sp,sp,-16
   15d14:	dfc00315 	stw	ra,12(sp)
   15d18:	df000215 	stw	fp,8(sp)
   15d1c:	df000204 	addi	fp,sp,8
   15d20:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
   15d24:	d1600d04 	addi	r5,gp,-32716
   15d28:	e13fff17 	ldw	r4,-4(fp)
   15d2c:	00170cc0 	call	170cc <alt_find_dev>
   15d30:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   15d34:	e0bffe17 	ldw	r2,-8(fp)
}
   15d38:	e037883a 	mov	sp,fp
   15d3c:	dfc00117 	ldw	ra,4(sp)
   15d40:	df000017 	ldw	fp,0(sp)
   15d44:	dec00204 	addi	sp,sp,8
   15d48:	f800283a 	ret

00015d4c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
   15d4c:	defff904 	addi	sp,sp,-28
   15d50:	dfc00615 	stw	ra,24(sp)
   15d54:	df000515 	stw	fp,20(sp)
   15d58:	df000504 	addi	fp,sp,20
   15d5c:	e13ffc15 	stw	r4,-16(fp)
   15d60:	e17ffd15 	stw	r5,-12(fp)
   15d64:	e1bffe15 	stw	r6,-8(fp)
   15d68:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
   15d6c:	e0bffc17 	ldw	r2,-16(fp)
   15d70:	10800f17 	ldw	r2,60(r2)
   15d74:	e0fffe17 	ldw	r3,-8(fp)
   15d78:	1880042e 	bgeu	r3,r2,15d8c <alt_up_pixel_buffer_dma_draw+0x40>
   15d7c:	e0bffc17 	ldw	r2,-16(fp)
   15d80:	10801017 	ldw	r2,64(r2)
   15d84:	e0ffff17 	ldw	r3,-4(fp)
   15d88:	18800236 	bltu	r3,r2,15d94 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
   15d8c:	00bfffc4 	movi	r2,-1
   15d90:	00005306 	br	15ee0 <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
   15d94:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   15d98:	e0bffc17 	ldw	r2,-16(fp)
   15d9c:	10800d17 	ldw	r2,52(r2)
   15da0:	1000151e 	bne	r2,zero,15df8 <alt_up_pixel_buffer_dma_draw+0xac>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   15da4:	e0bffc17 	ldw	r2,-16(fp)
   15da8:	10c01217 	ldw	r3,72(r2)
   15dac:	e0bffe17 	ldw	r2,-8(fp)
   15db0:	1886703a 	and	r3,r3,r2
   15db4:	e0bffc17 	ldw	r2,-16(fp)
   15db8:	10801117 	ldw	r2,68(r2)
   15dbc:	1884983a 	sll	r2,r3,r2
   15dc0:	e0fffb17 	ldw	r3,-20(fp)
   15dc4:	1885883a 	add	r2,r3,r2
   15dc8:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
   15dcc:	e0bffc17 	ldw	r2,-16(fp)
   15dd0:	10c01417 	ldw	r3,80(r2)
   15dd4:	e0bfff17 	ldw	r2,-4(fp)
   15dd8:	1886703a 	and	r3,r3,r2
   15ddc:	e0bffc17 	ldw	r2,-16(fp)
   15de0:	10801317 	ldw	r2,76(r2)
   15de4:	1884983a 	sll	r2,r3,r2
   15de8:	e0fffb17 	ldw	r3,-20(fp)
   15dec:	1885883a 	add	r2,r3,r2
   15df0:	e0bffb15 	stw	r2,-20(fp)
   15df4:	00001a06 	br	15e60 <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   15df8:	e0bffc17 	ldw	r2,-16(fp)
   15dfc:	10c01217 	ldw	r3,72(r2)
   15e00:	e0bffe17 	ldw	r2,-8(fp)
   15e04:	1886703a 	and	r3,r3,r2
   15e08:	e0bffc17 	ldw	r2,-16(fp)
   15e0c:	10801117 	ldw	r2,68(r2)
   15e10:	1884983a 	sll	r2,r3,r2
   15e14:	e0fffb17 	ldw	r3,-20(fp)
   15e18:	1885883a 	add	r2,r3,r2
   15e1c:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
   15e20:	e0bffc17 	ldw	r2,-16(fp)
   15e24:	10c01417 	ldw	r3,80(r2)
   15e28:	e0bfff17 	ldw	r2,-4(fp)
   15e2c:	1886703a 	and	r3,r3,r2
   15e30:	e0bffc17 	ldw	r2,-16(fp)
   15e34:	10800f17 	ldw	r2,60(r2)
   15e38:	100b883a 	mov	r5,r2
   15e3c:	1809883a 	mov	r4,r3
   15e40:	00015680 	call	1568 <__mulsi3>
   15e44:	1007883a 	mov	r3,r2
   15e48:	e0bffc17 	ldw	r2,-16(fp)
   15e4c:	10801117 	ldw	r2,68(r2)
   15e50:	1884983a 	sll	r2,r3,r2
   15e54:	e0fffb17 	ldw	r3,-20(fp)
   15e58:	1885883a 	add	r2,r3,r2
   15e5c:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   15e60:	e0bffc17 	ldw	r2,-16(fp)
   15e64:	10800e17 	ldw	r2,56(r2)
   15e68:	10800058 	cmpnei	r2,r2,1
   15e6c:	1000081e 	bne	r2,zero,15e90 <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   15e70:	e0bffc17 	ldw	r2,-16(fp)
   15e74:	10c00c17 	ldw	r3,48(r2)
   15e78:	e0bffb17 	ldw	r2,-20(fp)
   15e7c:	1885883a 	add	r2,r3,r2
   15e80:	1007883a 	mov	r3,r2
   15e84:	e0bffd17 	ldw	r2,-12(fp)
   15e88:	18800025 	stbio	r2,0(r3)
   15e8c:	00001306 	br	15edc <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   15e90:	e0bffc17 	ldw	r2,-16(fp)
   15e94:	10800e17 	ldw	r2,56(r2)
   15e98:	10800098 	cmpnei	r2,r2,2
   15e9c:	1000081e 	bne	r2,zero,15ec0 <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   15ea0:	e0bffc17 	ldw	r2,-16(fp)
   15ea4:	10c00c17 	ldw	r3,48(r2)
   15ea8:	e0bffb17 	ldw	r2,-20(fp)
   15eac:	1885883a 	add	r2,r3,r2
   15eb0:	1007883a 	mov	r3,r2
   15eb4:	e0bffd17 	ldw	r2,-12(fp)
   15eb8:	1880002d 	sthio	r2,0(r3)
   15ebc:	00000706 	br	15edc <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   15ec0:	e0bffc17 	ldw	r2,-16(fp)
   15ec4:	10c00c17 	ldw	r3,48(r2)
   15ec8:	e0bffb17 	ldw	r2,-20(fp)
   15ecc:	1885883a 	add	r2,r3,r2
   15ed0:	1007883a 	mov	r3,r2
   15ed4:	e0bffd17 	ldw	r2,-12(fp)
   15ed8:	18800035 	stwio	r2,0(r3)
	}

	return 0;
   15edc:	0005883a 	mov	r2,zero
}
   15ee0:	e037883a 	mov	sp,fp
   15ee4:	dfc00117 	ldw	ra,4(sp)
   15ee8:	df000017 	ldw	fp,0(sp)
   15eec:	dec00204 	addi	sp,sp,8
   15ef0:	f800283a 	ret

00015ef4 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
   15ef4:	defffd04 	addi	sp,sp,-12
   15ef8:	df000215 	stw	fp,8(sp)
   15efc:	df000204 	addi	fp,sp,8
   15f00:	e13ffe15 	stw	r4,-8(fp)
   15f04:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
   15f08:	e0bffe17 	ldw	r2,-8(fp)
   15f0c:	10800a17 	ldw	r2,40(r2)
   15f10:	10800104 	addi	r2,r2,4
   15f14:	1007883a 	mov	r3,r2
   15f18:	e0bfff17 	ldw	r2,-4(fp)
   15f1c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
   15f20:	e0bffe17 	ldw	r2,-8(fp)
   15f24:	10800a17 	ldw	r2,40(r2)
   15f28:	10800104 	addi	r2,r2,4
   15f2c:	10800037 	ldwio	r2,0(r2)
   15f30:	1007883a 	mov	r3,r2
   15f34:	e0bffe17 	ldw	r2,-8(fp)
   15f38:	10c00c15 	stw	r3,48(r2)
	return 0;
   15f3c:	0005883a 	mov	r2,zero
}
   15f40:	e037883a 	mov	sp,fp
   15f44:	df000017 	ldw	fp,0(sp)
   15f48:	dec00104 	addi	sp,sp,4
   15f4c:	f800283a 	ret

00015f50 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
   15f50:	defffd04 	addi	sp,sp,-12
   15f54:	df000215 	stw	fp,8(sp)
   15f58:	dc000115 	stw	r16,4(sp)
   15f5c:	df000204 	addi	fp,sp,8
   15f60:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
   15f64:	e0bffe17 	ldw	r2,-8(fp)
   15f68:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
   15f6c:	e0bffe17 	ldw	r2,-8(fp)
   15f70:	10800a17 	ldw	r2,40(r2)
   15f74:	1007883a 	mov	r3,r2
   15f78:	00800044 	movi	r2,1
   15f7c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
   15f80:	e0bffe17 	ldw	r2,-8(fp)
   15f84:	10c00b17 	ldw	r3,44(r2)
   15f88:	e0bffe17 	ldw	r2,-8(fp)
   15f8c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
   15f90:	e0bffe17 	ldw	r2,-8(fp)
   15f94:	14000b15 	stw	r16,44(r2)
	return 0;
   15f98:	0005883a 	mov	r2,zero
}
   15f9c:	e6ffff04 	addi	sp,fp,-4
   15fa0:	df000117 	ldw	fp,4(sp)
   15fa4:	dc000017 	ldw	r16,0(sp)
   15fa8:	dec00204 	addi	sp,sp,8
   15fac:	f800283a 	ret

00015fb0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
   15fb0:	defffe04 	addi	sp,sp,-8
   15fb4:	df000115 	stw	fp,4(sp)
   15fb8:	df000104 	addi	fp,sp,4
   15fbc:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
   15fc0:	e0bfff17 	ldw	r2,-4(fp)
   15fc4:	10800a17 	ldw	r2,40(r2)
   15fc8:	10800304 	addi	r2,r2,12
   15fcc:	10800037 	ldwio	r2,0(r2)
   15fd0:	1080004c 	andi	r2,r2,1
}
   15fd4:	e037883a 	mov	sp,fp
   15fd8:	df000017 	ldw	fp,0(sp)
   15fdc:	dec00104 	addi	sp,sp,4
   15fe0:	f800283a 	ret

00015fe4 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
   15fe4:	defff604 	addi	sp,sp,-40
   15fe8:	dfc00915 	stw	ra,36(sp)
   15fec:	df000815 	stw	fp,32(sp)
   15ff0:	dd400715 	stw	r21,28(sp)
   15ff4:	dd000615 	stw	r20,24(sp)
   15ff8:	dcc00515 	stw	r19,20(sp)
   15ffc:	dc800415 	stw	r18,16(sp)
   16000:	dc400315 	stw	r17,12(sp)
   16004:	dc000215 	stw	r16,8(sp)
   16008:	df000804 	addi	fp,sp,32
   1600c:	e13ff815 	stw	r4,-32(fp)
   16010:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   16014:	e0bff917 	ldw	r2,-28(fp)
   16018:	10800058 	cmpnei	r2,r2,1
   1601c:	1000031e 	bne	r2,zero,1602c <alt_up_pixel_buffer_dma_clear_screen+0x48>
		addr = pixel_buffer->back_buffer_start_address;
   16020:	e0bff817 	ldw	r2,-32(fp)
   16024:	14400c17 	ldw	r17,48(r2)
   16028:	00000206 	br	16034 <alt_up_pixel_buffer_dma_clear_screen+0x50>
	else
		addr = pixel_buffer->buffer_start_address;
   1602c:	e0bff817 	ldw	r2,-32(fp)
   16030:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
   16034:	e0bff817 	ldw	r2,-32(fp)
   16038:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1603c:	e0bff817 	ldw	r2,-32(fp)
   16040:	10800e17 	ldw	r2,56(r2)
   16044:	10800098 	cmpnei	r2,r2,2
   16048:	1000031e 	bne	r2,zero,16058 <alt_up_pixel_buffer_dma_clear_screen+0x74>
		limit_x = limit_x << 1;
   1604c:	8405883a 	add	r2,r16,r16
   16050:	1021883a 	mov	r16,r2
   16054:	00000306 	br	16064 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
   16058:	8405883a 	add	r2,r16,r16
   1605c:	1085883a 	add	r2,r2,r2
   16060:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
   16064:	e0bff817 	ldw	r2,-32(fp)
   16068:	14c01017 	ldw	r19,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1606c:	e0bff817 	ldw	r2,-32(fp)
   16070:	10800d17 	ldw	r2,52(r2)
   16074:	1000111e 	bne	r2,zero,160bc <alt_up_pixel_buffer_dma_clear_screen+0xd8>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   16078:	e0bff817 	ldw	r2,-32(fp)
   1607c:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
   16080:	0029883a 	mov	r20,zero
   16084:	00000b06 	br	160b4 <alt_up_pixel_buffer_dma_clear_screen+0xd0>
		{
			for (x = 0; x < limit_x; x = x + 4)
   16088:	0025883a 	mov	r18,zero
   1608c:	00000406 	br	160a0 <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
   16090:	9445883a 	add	r2,r18,r17
   16094:	0007883a 	mov	r3,zero
   16098:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   1609c:	94800104 	addi	r18,r18,4
   160a0:	943ffb36 	bltu	r18,r16,16090 <__alt_mem_Onchip_SRAM+0xf8016090>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
   160a4:	00800044 	movi	r2,1
   160a8:	1544983a 	sll	r2,r2,r21
   160ac:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
   160b0:	a5000044 	addi	r20,r20,1
   160b4:	a4fff436 	bltu	r20,r19,16088 <__alt_mem_Onchip_SRAM+0xf8016088>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   160b8:	00000d06 	br	160f0 <alt_up_pixel_buffer_dma_clear_screen+0x10c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
   160bc:	800b883a 	mov	r5,r16
   160c0:	9809883a 	mov	r4,r19
   160c4:	00015680 	call	1568 <__mulsi3>
   160c8:	1027883a 	mov	r19,r2

		for (x = 0; x < limit_y; x = x + 4)
   160cc:	0021883a 	mov	r16,zero
   160d0:	00000506 	br	160e8 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			IOWR_32DIRECT(addr, x, 0);
   160d4:	8005883a 	mov	r2,r16
   160d8:	1445883a 	add	r2,r2,r17
   160dc:	0007883a 	mov	r3,zero
   160e0:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
   160e4:	84000104 	addi	r16,r16,4
   160e8:	8005883a 	mov	r2,r16
   160ec:	14fff936 	bltu	r2,r19,160d4 <__alt_mem_Onchip_SRAM+0xf80160d4>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   160f0:	0001883a 	nop
   160f4:	e6fffa04 	addi	sp,fp,-24
   160f8:	dfc00717 	ldw	ra,28(sp)
   160fc:	df000617 	ldw	fp,24(sp)
   16100:	dd400517 	ldw	r21,20(sp)
   16104:	dd000417 	ldw	r20,16(sp)
   16108:	dcc00317 	ldw	r19,12(sp)
   1610c:	dc800217 	ldw	r18,8(sp)
   16110:	dc400117 	ldw	r17,4(sp)
   16114:	dc000017 	ldw	r16,0(sp)
   16118:	dec00804 	addi	sp,sp,32
   1611c:	f800283a 	ret

00016120 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
   16120:	defff204 	addi	sp,sp,-56
   16124:	dfc00d15 	stw	ra,52(sp)
   16128:	df000c15 	stw	fp,48(sp)
   1612c:	ddc00b15 	stw	r23,44(sp)
   16130:	dd800a15 	stw	r22,40(sp)
   16134:	dd400915 	stw	r21,36(sp)
   16138:	dd000815 	stw	r20,32(sp)
   1613c:	dcc00715 	stw	r19,28(sp)
   16140:	dc800615 	stw	r18,24(sp)
   16144:	dc400515 	stw	r17,20(sp)
   16148:	dc000415 	stw	r16,16(sp)
   1614c:	df000c04 	addi	fp,sp,48
   16150:	e13ff415 	stw	r4,-48(fp)
   16154:	e17ff515 	stw	r5,-44(fp)
   16158:	e1bff615 	stw	r6,-40(fp)
   1615c:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   16160:	e0bff417 	ldw	r2,-48(fp)
   16164:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   16168:	e0bff417 	ldw	r2,-48(fp)
   1616c:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
   16170:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
   16174:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
   16178:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
   1617c:	e4c00217 	ldw	r19,8(fp)
	register unsigned int local_color = color;
   16180:	e5c00317 	ldw	r23,12(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   16184:	a580032e 	bgeu	r20,r22,16194 <alt_up_pixel_buffer_dma_draw_box+0x74>
	{
		temp = l_x;
   16188:	b02b883a 	mov	r21,r22
		l_x = r_x;
   1618c:	a02d883a 	mov	r22,r20
		r_x = temp;
   16190:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
   16194:	9c40032e 	bgeu	r19,r17,161a4 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = t_y;
   16198:	882b883a 	mov	r21,r17
		t_y = b_y;
   1619c:	9823883a 	mov	r17,r19
		b_y = temp;
   161a0:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
   161a4:	b4808f2e 	bgeu	r22,r18,163e4 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
   161a8:	8c008e2e 	bgeu	r17,r16,163e4 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   161ac:	a4800136 	bltu	r20,r18,161b4 <alt_up_pixel_buffer_dma_draw_box+0x94>
	{
		r_x = limit_x - 1;
   161b0:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   161b4:	9c000136 	bltu	r19,r16,161bc <alt_up_pixel_buffer_dma_draw_box+0x9c>
	{
		b_y = limit_y - 1;
   161b8:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   161bc:	e0800417 	ldw	r2,16(fp)
   161c0:	10800058 	cmpnei	r2,r2,1
   161c4:	1000031e 	bne	r2,zero,161d4 <alt_up_pixel_buffer_dma_draw_box+0xb4>
		addr = pixel_buffer->back_buffer_start_address;
   161c8:	e0bff417 	ldw	r2,-48(fp)
   161cc:	14000c17 	ldw	r16,48(r2)
   161d0:	00000206 	br	161dc <alt_up_pixel_buffer_dma_draw_box+0xbc>
	else
		addr = pixel_buffer->buffer_start_address;
   161d4:	e0bff417 	ldw	r2,-48(fp)
   161d8:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   161dc:	e0bff417 	ldw	r2,-48(fp)
   161e0:	10800d17 	ldw	r2,52(r2)
   161e4:	10003c1e 	bne	r2,zero,162d8 <alt_up_pixel_buffer_dma_draw_box+0x1b8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   161e8:	e0bff417 	ldw	r2,-48(fp)
   161ec:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
   161f0:	8d44983a 	sll	r2,r17,r21
   161f4:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   161f8:	e0bff417 	ldw	r2,-48(fp)
   161fc:	10800e17 	ldw	r2,56(r2)
   16200:	10800058 	cmpnei	r2,r2,1
   16204:	10000f1e 	bne	r2,zero,16244 <alt_up_pixel_buffer_dma_draw_box+0x124>
			for (y = t_y; y <= b_y; y++)
   16208:	8825883a 	mov	r18,r17
   1620c:	00000b06 	br	1623c <alt_up_pixel_buffer_dma_draw_box+0x11c>
			{
				for (x = l_x; x <= r_x; x++)
   16210:	b023883a 	mov	r17,r22
   16214:	00000406 	br	16228 <alt_up_pixel_buffer_dma_draw_box+0x108>
				{
					IOWR_8DIRECT(addr, x, local_color);
   16218:	8c05883a 	add	r2,r17,r16
   1621c:	b807883a 	mov	r3,r23
   16220:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   16224:	8c400044 	addi	r17,r17,1
   16228:	a47ffb2e 	bgeu	r20,r17,16218 <__alt_mem_Onchip_SRAM+0xf8016218>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
   1622c:	00800044 	movi	r2,1
   16230:	1544983a 	sll	r2,r2,r21
   16234:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   16238:	94800044 	addi	r18,r18,1
   1623c:	9cbff42e 	bgeu	r19,r18,16210 <__alt_mem_Onchip_SRAM+0xf8016210>
   16240:	00006906 	br	163e8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   16244:	e0bff417 	ldw	r2,-48(fp)
   16248:	10800e17 	ldw	r2,56(r2)
   1624c:	10800098 	cmpnei	r2,r2,2
   16250:	1000101e 	bne	r2,zero,16294 <alt_up_pixel_buffer_dma_draw_box+0x174>
			for (y = t_y; y <= b_y; y++)
   16254:	8825883a 	mov	r18,r17
   16258:	00000c06 	br	1628c <alt_up_pixel_buffer_dma_draw_box+0x16c>
			{
				for (x = l_x; x <= r_x; x++)
   1625c:	b023883a 	mov	r17,r22
   16260:	00000506 	br	16278 <alt_up_pixel_buffer_dma_draw_box+0x158>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   16264:	8c45883a 	add	r2,r17,r17
   16268:	1405883a 	add	r2,r2,r16
   1626c:	b807883a 	mov	r3,r23
   16270:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   16274:	8c400044 	addi	r17,r17,1
   16278:	a47ffa2e 	bgeu	r20,r17,16264 <__alt_mem_Onchip_SRAM+0xf8016264>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
   1627c:	00800044 	movi	r2,1
   16280:	1544983a 	sll	r2,r2,r21
   16284:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   16288:	94800044 	addi	r18,r18,1
   1628c:	9cbff32e 	bgeu	r19,r18,1625c <__alt_mem_Onchip_SRAM+0xf801625c>
   16290:	00005506 	br	163e8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   16294:	8825883a 	mov	r18,r17
   16298:	00000d06 	br	162d0 <alt_up_pixel_buffer_dma_draw_box+0x1b0>
			{
				for (x = l_x; x <= r_x; x++)
   1629c:	b023883a 	mov	r17,r22
   162a0:	00000606 	br	162bc <alt_up_pixel_buffer_dma_draw_box+0x19c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   162a4:	8c45883a 	add	r2,r17,r17
   162a8:	1085883a 	add	r2,r2,r2
   162ac:	1405883a 	add	r2,r2,r16
   162b0:	b807883a 	mov	r3,r23
   162b4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   162b8:	8c400044 	addi	r17,r17,1
   162bc:	a47ff92e 	bgeu	r20,r17,162a4 <__alt_mem_Onchip_SRAM+0xf80162a4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
   162c0:	00800044 	movi	r2,1
   162c4:	1544983a 	sll	r2,r2,r21
   162c8:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   162cc:	94800044 	addi	r18,r18,1
   162d0:	9cbff22e 	bgeu	r19,r18,1629c <__alt_mem_Onchip_SRAM+0xf801629c>
   162d4:	00004406 	br	163e8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   162d8:	e0bff417 	ldw	r2,-48(fp)
   162dc:	10800e17 	ldw	r2,56(r2)
   162e0:	10800058 	cmpnei	r2,r2,1
   162e4:	1000111e 	bne	r2,zero,1632c <alt_up_pixel_buffer_dma_draw_box+0x20c>
			addr = addr + t_y * limit_x;
   162e8:	900b883a 	mov	r5,r18
   162ec:	8809883a 	mov	r4,r17
   162f0:	00015680 	call	1568 <__mulsi3>
   162f4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   162f8:	882b883a 	mov	r21,r17
   162fc:	00000906 	br	16324 <alt_up_pixel_buffer_dma_draw_box+0x204>
			{
				for (x = l_x; x <= r_x; x++)
   16300:	b023883a 	mov	r17,r22
   16304:	00000406 	br	16318 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
				{
					IOWR_8DIRECT(addr, x, local_color);
   16308:	8c05883a 	add	r2,r17,r16
   1630c:	b807883a 	mov	r3,r23
   16310:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   16314:	8c400044 	addi	r17,r17,1
   16318:	a47ffb2e 	bgeu	r20,r17,16308 <__alt_mem_Onchip_SRAM+0xf8016308>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
   1631c:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   16320:	ad400044 	addi	r21,r21,1
   16324:	9d7ff62e 	bgeu	r19,r21,16300 <__alt_mem_Onchip_SRAM+0xf8016300>
   16328:	00002f06 	br	163e8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1632c:	e0bff417 	ldw	r2,-48(fp)
   16330:	10800e17 	ldw	r2,56(r2)
   16334:	10800098 	cmpnei	r2,r2,2
   16338:	1000141e 	bne	r2,zero,1638c <alt_up_pixel_buffer_dma_draw_box+0x26c>
			limit_x = limit_x << 1;
   1633c:	9485883a 	add	r2,r18,r18
   16340:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
   16344:	900b883a 	mov	r5,r18
   16348:	8809883a 	mov	r4,r17
   1634c:	00015680 	call	1568 <__mulsi3>
   16350:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   16354:	882b883a 	mov	r21,r17
   16358:	00000a06 	br	16384 <alt_up_pixel_buffer_dma_draw_box+0x264>
			{
				for (x = l_x; x <= r_x; x++)
   1635c:	b023883a 	mov	r17,r22
   16360:	00000506 	br	16378 <alt_up_pixel_buffer_dma_draw_box+0x258>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   16364:	8c45883a 	add	r2,r17,r17
   16368:	1405883a 	add	r2,r2,r16
   1636c:	b807883a 	mov	r3,r23
   16370:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   16374:	8c400044 	addi	r17,r17,1
   16378:	a47ffa2e 	bgeu	r20,r17,16364 <__alt_mem_Onchip_SRAM+0xf8016364>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   1637c:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   16380:	ad400044 	addi	r21,r21,1
   16384:	9d7ff52e 	bgeu	r19,r21,1635c <__alt_mem_Onchip_SRAM+0xf801635c>
   16388:	00001706 	br	163e8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1638c:	9485883a 	add	r2,r18,r18
   16390:	1085883a 	add	r2,r2,r2
   16394:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
   16398:	900b883a 	mov	r5,r18
   1639c:	8809883a 	mov	r4,r17
   163a0:	00015680 	call	1568 <__mulsi3>
   163a4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   163a8:	882b883a 	mov	r21,r17
   163ac:	00000b06 	br	163dc <alt_up_pixel_buffer_dma_draw_box+0x2bc>
			{
				for (x = l_x; x <= r_x; x++)
   163b0:	b023883a 	mov	r17,r22
   163b4:	00000606 	br	163d0 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   163b8:	8c45883a 	add	r2,r17,r17
   163bc:	1085883a 	add	r2,r2,r2
   163c0:	1405883a 	add	r2,r2,r16
   163c4:	b807883a 	mov	r3,r23
   163c8:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   163cc:	8c400044 	addi	r17,r17,1
   163d0:	a47ff92e 	bgeu	r20,r17,163b8 <__alt_mem_Onchip_SRAM+0xf80163b8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   163d4:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   163d8:	ad400044 	addi	r21,r21,1
   163dc:	9d7ff42e 	bgeu	r19,r21,163b0 <__alt_mem_Onchip_SRAM+0xf80163b0>
   163e0:	00000106 	br	163e8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   163e4:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
   163e8:	e6fff804 	addi	sp,fp,-32
   163ec:	dfc00917 	ldw	ra,36(sp)
   163f0:	df000817 	ldw	fp,32(sp)
   163f4:	ddc00717 	ldw	r23,28(sp)
   163f8:	dd800617 	ldw	r22,24(sp)
   163fc:	dd400517 	ldw	r21,20(sp)
   16400:	dd000417 	ldw	r20,16(sp)
   16404:	dcc00317 	ldw	r19,12(sp)
   16408:	dc800217 	ldw	r18,8(sp)
   1640c:	dc400117 	ldw	r17,4(sp)
   16410:	dc000017 	ldw	r16,0(sp)
   16414:	dec00a04 	addi	sp,sp,40
   16418:	f800283a 	ret

0001641c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
   1641c:	defff304 	addi	sp,sp,-52
   16420:	dfc00c15 	stw	ra,48(sp)
   16424:	df000b15 	stw	fp,44(sp)
   16428:	dd800a15 	stw	r22,40(sp)
   1642c:	dd400915 	stw	r21,36(sp)
   16430:	dd000815 	stw	r20,32(sp)
   16434:	dcc00715 	stw	r19,28(sp)
   16438:	dc800615 	stw	r18,24(sp)
   1643c:	dc400515 	stw	r17,20(sp)
   16440:	dc000415 	stw	r16,16(sp)
   16444:	df000b04 	addi	fp,sp,44
   16448:	e13ff515 	stw	r4,-44(fp)
   1644c:	e17ff615 	stw	r5,-40(fp)
   16450:	e1bff715 	stw	r6,-36(fp)
   16454:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   16458:	e0bff517 	ldw	r2,-44(fp)
   1645c:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   16460:	e0bff517 	ldw	r2,-44(fp)
   16464:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
   16468:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
   1646c:	e4bff717 	ldw	r18,-36(fp)
	register unsigned int line_y = y;
   16470:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
   16474:	e5400217 	ldw	r21,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   16478:	9440032e 	bgeu	r18,r17,16488 <alt_up_pixel_buffer_dma_draw_hline+0x6c>
	{
		temp = l_x;
   1647c:	882d883a 	mov	r22,r17
		l_x = r_x;
   16480:	9023883a 	mov	r17,r18
		r_x = temp;
   16484:	b025883a 	mov	r18,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   16488:	8cc0632e 	bgeu	r17,r19,16618 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
   1648c:	a400622e 	bgeu	r20,r16,16618 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   16490:	94c00136 	bltu	r18,r19,16498 <alt_up_pixel_buffer_dma_draw_hline+0x7c>
	{
		r_x = limit_x - 1;
   16494:	9cbfffc4 	addi	r18,r19,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   16498:	e0800317 	ldw	r2,12(fp)
   1649c:	10800058 	cmpnei	r2,r2,1
   164a0:	1000031e 	bne	r2,zero,164b0 <alt_up_pixel_buffer_dma_draw_hline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
   164a4:	e0bff517 	ldw	r2,-44(fp)
   164a8:	14000c17 	ldw	r16,48(r2)
   164ac:	00000206 	br	164b8 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
   164b0:	e0bff517 	ldw	r2,-44(fp)
   164b4:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   164b8:	e0bff517 	ldw	r2,-44(fp)
   164bc:	10800d17 	ldw	r2,52(r2)
   164c0:	1000231e 	bne	r2,zero,16550 <alt_up_pixel_buffer_dma_draw_hline+0x134>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   164c4:	e0bff517 	ldw	r2,-44(fp)
   164c8:	14c01317 	ldw	r19,76(r2)
		addr = addr + (line_y << offset_y);
   164cc:	a4c4983a 	sll	r2,r20,r19
   164d0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   164d4:	e0bff517 	ldw	r2,-44(fp)
   164d8:	10800e17 	ldw	r2,56(r2)
   164dc:	10800058 	cmpnei	r2,r2,1
   164e0:	1000071e 	bne	r2,zero,16500 <alt_up_pixel_buffer_dma_draw_hline+0xe4>
			for (x = l_x; x <= r_x; x++)
   164e4:	00000406 	br	164f8 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
   164e8:	8c05883a 	add	r2,r17,r16
   164ec:	a807883a 	mov	r3,r21
   164f0:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   164f4:	8c400044 	addi	r17,r17,1
   164f8:	947ffb2e 	bgeu	r18,r17,164e8 <__alt_mem_Onchip_SRAM+0xf80164e8>
   164fc:	00004706 	br	1661c <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   16500:	e0bff517 	ldw	r2,-44(fp)
   16504:	10800e17 	ldw	r2,56(r2)
   16508:	10800098 	cmpnei	r2,r2,2
   1650c:	10000e1e 	bne	r2,zero,16548 <alt_up_pixel_buffer_dma_draw_hline+0x12c>
			for (x = l_x; x <= r_x; x++)
   16510:	00000506 	br	16528 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   16514:	8c45883a 	add	r2,r17,r17
   16518:	1405883a 	add	r2,r2,r16
   1651c:	a807883a 	mov	r3,r21
   16520:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   16524:	8c400044 	addi	r17,r17,1
   16528:	947ffa2e 	bgeu	r18,r17,16514 <__alt_mem_Onchip_SRAM+0xf8016514>
   1652c:	00003b06 	br	1661c <alt_up_pixel_buffer_dma_draw_hline+0x200>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   16530:	8c45883a 	add	r2,r17,r17
   16534:	1085883a 	add	r2,r2,r2
   16538:	1405883a 	add	r2,r2,r16
   1653c:	a807883a 	mov	r3,r21
   16540:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   16544:	8c400044 	addi	r17,r17,1
   16548:	947ff92e 	bgeu	r18,r17,16530 <__alt_mem_Onchip_SRAM+0xf8016530>
   1654c:	00003306 	br	1661c <alt_up_pixel_buffer_dma_draw_hline+0x200>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   16550:	e0bff517 	ldw	r2,-44(fp)
   16554:	10800e17 	ldw	r2,56(r2)
   16558:	10800058 	cmpnei	r2,r2,1
   1655c:	10000b1e 	bne	r2,zero,1658c <alt_up_pixel_buffer_dma_draw_hline+0x170>
			addr = addr + line_y * limit_x;
   16560:	980b883a 	mov	r5,r19
   16564:	a009883a 	mov	r4,r20
   16568:	00015680 	call	1568 <__mulsi3>
   1656c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   16570:	00000406 	br	16584 <alt_up_pixel_buffer_dma_draw_hline+0x168>
			{
				IOWR_8DIRECT(addr, x, local_color);
   16574:	8c05883a 	add	r2,r17,r16
   16578:	a807883a 	mov	r3,r21
   1657c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   16580:	8c400044 	addi	r17,r17,1
   16584:	947ffb2e 	bgeu	r18,r17,16574 <__alt_mem_Onchip_SRAM+0xf8016574>
   16588:	00002406 	br	1661c <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1658c:	e0bff517 	ldw	r2,-44(fp)
   16590:	10800e17 	ldw	r2,56(r2)
   16594:	10800098 	cmpnei	r2,r2,2
   16598:	10000e1e 	bne	r2,zero,165d4 <alt_up_pixel_buffer_dma_draw_hline+0x1b8>
			limit_x = limit_x << 1;
   1659c:	9cc5883a 	add	r2,r19,r19
   165a0:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
   165a4:	980b883a 	mov	r5,r19
   165a8:	a009883a 	mov	r4,r20
   165ac:	00015680 	call	1568 <__mulsi3>
   165b0:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   165b4:	00000506 	br	165cc <alt_up_pixel_buffer_dma_draw_hline+0x1b0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   165b8:	8c45883a 	add	r2,r17,r17
   165bc:	1405883a 	add	r2,r2,r16
   165c0:	a807883a 	mov	r3,r21
   165c4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   165c8:	8c400044 	addi	r17,r17,1
   165cc:	947ffa2e 	bgeu	r18,r17,165b8 <__alt_mem_Onchip_SRAM+0xf80165b8>
   165d0:	00001206 	br	1661c <alt_up_pixel_buffer_dma_draw_hline+0x200>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
   165d4:	9cc5883a 	add	r2,r19,r19
   165d8:	1085883a 	add	r2,r2,r2
   165dc:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
   165e0:	980b883a 	mov	r5,r19
   165e4:	a009883a 	mov	r4,r20
   165e8:	00015680 	call	1568 <__mulsi3>
   165ec:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   165f0:	00000606 	br	1660c <alt_up_pixel_buffer_dma_draw_hline+0x1f0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   165f4:	8c45883a 	add	r2,r17,r17
   165f8:	1085883a 	add	r2,r2,r2
   165fc:	1405883a 	add	r2,r2,r16
   16600:	a807883a 	mov	r3,r21
   16604:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   16608:	8c400044 	addi	r17,r17,1
   1660c:	947ff92e 	bgeu	r18,r17,165f4 <__alt_mem_Onchip_SRAM+0xf80165f4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
   16610:	84e1883a 	add	r16,r16,r19
   16614:	00000106 	br	1661c <alt_up_pixel_buffer_dma_draw_hline+0x200>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   16618:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
   1661c:	e6fff904 	addi	sp,fp,-28
   16620:	dfc00817 	ldw	ra,32(sp)
   16624:	df000717 	ldw	fp,28(sp)
   16628:	dd800617 	ldw	r22,24(sp)
   1662c:	dd400517 	ldw	r21,20(sp)
   16630:	dd000417 	ldw	r20,16(sp)
   16634:	dcc00317 	ldw	r19,12(sp)
   16638:	dc800217 	ldw	r18,8(sp)
   1663c:	dc400117 	ldw	r17,4(sp)
   16640:	dc000017 	ldw	r16,0(sp)
   16644:	dec00904 	addi	sp,sp,36
   16648:	f800283a 	ret

0001664c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
   1664c:	defff304 	addi	sp,sp,-52
   16650:	dfc00c15 	stw	ra,48(sp)
   16654:	df000b15 	stw	fp,44(sp)
   16658:	dd800a15 	stw	r22,40(sp)
   1665c:	dd400915 	stw	r21,36(sp)
   16660:	dd000815 	stw	r20,32(sp)
   16664:	dcc00715 	stw	r19,28(sp)
   16668:	dc800615 	stw	r18,24(sp)
   1666c:	dc400515 	stw	r17,20(sp)
   16670:	dc000415 	stw	r16,16(sp)
   16674:	df000b04 	addi	fp,sp,44
   16678:	e13ff515 	stw	r4,-44(fp)
   1667c:	e17ff615 	stw	r5,-40(fp)
   16680:	e1bff715 	stw	r6,-36(fp)
   16684:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   16688:	e0bff517 	ldw	r2,-44(fp)
   1668c:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   16690:	e0bff517 	ldw	r2,-44(fp)
   16694:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
   16698:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int t_y = y0;
   1669c:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
   166a0:	e4bff817 	ldw	r18,-32(fp)
	register unsigned int local_color = color;
   166a4:	e5800217 	ldw	r22,8(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
   166a8:	9500032e 	bgeu	r18,r20,166b8 <alt_up_pixel_buffer_dma_draw_vline+0x6c>
	{
		temp = t_y;
   166ac:	a02b883a 	mov	r21,r20
		t_y = b_y;
   166b0:	9029883a 	mov	r20,r18
		b_y = temp;
   166b4:	a825883a 	mov	r18,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   166b8:	8cc0722e 	bgeu	r17,r19,16884 <alt_up_pixel_buffer_dma_draw_vline+0x238>
   166bc:	a400712e 	bgeu	r20,r16,16884 <alt_up_pixel_buffer_dma_draw_vline+0x238>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   166c0:	94000136 	bltu	r18,r16,166c8 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
	{
		b_y = limit_y - 1;
   166c4:	84bfffc4 	addi	r18,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   166c8:	e0800317 	ldw	r2,12(fp)
   166cc:	10800058 	cmpnei	r2,r2,1
   166d0:	1000031e 	bne	r2,zero,166e0 <alt_up_pixel_buffer_dma_draw_vline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
   166d4:	e0bff517 	ldw	r2,-44(fp)
   166d8:	14000c17 	ldw	r16,48(r2)
   166dc:	00000206 	br	166e8 <alt_up_pixel_buffer_dma_draw_vline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
   166e0:	e0bff517 	ldw	r2,-44(fp)
   166e4:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   166e8:	e0bff517 	ldw	r2,-44(fp)
   166ec:	10800d17 	ldw	r2,52(r2)
   166f0:	1000301e 	bne	r2,zero,167b4 <alt_up_pixel_buffer_dma_draw_vline+0x168>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   166f4:	e0bff517 	ldw	r2,-44(fp)
   166f8:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
   166fc:	a544983a 	sll	r2,r20,r21
   16700:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   16704:	e0bff517 	ldw	r2,-44(fp)
   16708:	10800e17 	ldw	r2,56(r2)
   1670c:	10800058 	cmpnei	r2,r2,1
   16710:	10000b1e 	bne	r2,zero,16740 <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			for (y = t_y; y <= b_y; y++)
   16714:	a027883a 	mov	r19,r20
   16718:	00000706 	br	16738 <alt_up_pixel_buffer_dma_draw_vline+0xec>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   1671c:	8c05883a 	add	r2,r17,r16
   16720:	b007883a 	mov	r3,r22
   16724:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
   16728:	00800044 	movi	r2,1
   1672c:	1544983a 	sll	r2,r2,r21
   16730:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   16734:	9cc00044 	addi	r19,r19,1
   16738:	94fff82e 	bgeu	r18,r19,1671c <__alt_mem_Onchip_SRAM+0xf801671c>
   1673c:	00005206 	br	16888 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   16740:	e0bff517 	ldw	r2,-44(fp)
   16744:	10800e17 	ldw	r2,56(r2)
   16748:	10800098 	cmpnei	r2,r2,2
   1674c:	10000c1e 	bne	r2,zero,16780 <alt_up_pixel_buffer_dma_draw_vline+0x134>
			for (y = t_y; y <= b_y; y++)
   16750:	a027883a 	mov	r19,r20
   16754:	00000806 	br	16778 <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   16758:	8c45883a 	add	r2,r17,r17
   1675c:	1405883a 	add	r2,r2,r16
   16760:	b007883a 	mov	r3,r22
   16764:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
   16768:	00800044 	movi	r2,1
   1676c:	1544983a 	sll	r2,r2,r21
   16770:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   16774:	9cc00044 	addi	r19,r19,1
   16778:	94fff72e 	bgeu	r18,r19,16758 <__alt_mem_Onchip_SRAM+0xf8016758>
   1677c:	00004206 	br	16888 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   16780:	a027883a 	mov	r19,r20
   16784:	00000906 	br	167ac <alt_up_pixel_buffer_dma_draw_vline+0x160>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   16788:	8c45883a 	add	r2,r17,r17
   1678c:	1085883a 	add	r2,r2,r2
   16790:	1405883a 	add	r2,r2,r16
   16794:	b007883a 	mov	r3,r22
   16798:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
   1679c:	00800044 	movi	r2,1
   167a0:	1544983a 	sll	r2,r2,r21
   167a4:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   167a8:	9cc00044 	addi	r19,r19,1
   167ac:	94fff62e 	bgeu	r18,r19,16788 <__alt_mem_Onchip_SRAM+0xf8016788>
   167b0:	00003506 	br	16888 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   167b4:	e0bff517 	ldw	r2,-44(fp)
   167b8:	10800e17 	ldw	r2,56(r2)
   167bc:	10800058 	cmpnei	r2,r2,1
   167c0:	10000c1e 	bne	r2,zero,167f4 <alt_up_pixel_buffer_dma_draw_vline+0x1a8>
			addr = addr + t_y * limit_x;
   167c4:	980b883a 	mov	r5,r19
   167c8:	a009883a 	mov	r4,r20
   167cc:	00015680 	call	1568 <__mulsi3>
   167d0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   167d4:	00000506 	br	167ec <alt_up_pixel_buffer_dma_draw_vline+0x1a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   167d8:	8c05883a 	add	r2,r17,r16
   167dc:	b007883a 	mov	r3,r22
   167e0:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
   167e4:	84e1883a 	add	r16,r16,r19
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   167e8:	a5000044 	addi	r20,r20,1
   167ec:	953ffa2e 	bgeu	r18,r20,167d8 <__alt_mem_Onchip_SRAM+0xf80167d8>
   167f0:	00002506 	br	16888 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   167f4:	e0bff517 	ldw	r2,-44(fp)
   167f8:	10800e17 	ldw	r2,56(r2)
   167fc:	10800098 	cmpnei	r2,r2,2
   16800:	10000f1e 	bne	r2,zero,16840 <alt_up_pixel_buffer_dma_draw_vline+0x1f4>
			limit_x = limit_x << 1;
   16804:	9cc5883a 	add	r2,r19,r19
   16808:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
   1680c:	980b883a 	mov	r5,r19
   16810:	a009883a 	mov	r4,r20
   16814:	00015680 	call	1568 <__mulsi3>
   16818:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1681c:	00000606 	br	16838 <alt_up_pixel_buffer_dma_draw_vline+0x1ec>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   16820:	8c45883a 	add	r2,r17,r17
   16824:	1405883a 	add	r2,r2,r16
   16828:	b007883a 	mov	r3,r22
   1682c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
   16830:	84e1883a 	add	r16,r16,r19
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   16834:	a5000044 	addi	r20,r20,1
   16838:	953ff92e 	bgeu	r18,r20,16820 <__alt_mem_Onchip_SRAM+0xf8016820>
   1683c:	00001206 	br	16888 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   16840:	9cc5883a 	add	r2,r19,r19
   16844:	1085883a 	add	r2,r2,r2
   16848:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
   1684c:	980b883a 	mov	r5,r19
   16850:	a009883a 	mov	r4,r20
   16854:	00015680 	call	1568 <__mulsi3>
   16858:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1685c:	00000706 	br	1687c <alt_up_pixel_buffer_dma_draw_vline+0x230>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   16860:	8c45883a 	add	r2,r17,r17
   16864:	1085883a 	add	r2,r2,r2
   16868:	1405883a 	add	r2,r2,r16
   1686c:	b007883a 	mov	r3,r22
   16870:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
   16874:	84e1883a 	add	r16,r16,r19
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   16878:	a5000044 	addi	r20,r20,1
   1687c:	953ff82e 	bgeu	r18,r20,16860 <__alt_mem_Onchip_SRAM+0xf8016860>
   16880:	00000106 	br	16888 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   16884:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
   16888:	e6fff904 	addi	sp,fp,-28
   1688c:	dfc00817 	ldw	ra,32(sp)
   16890:	df000717 	ldw	fp,28(sp)
   16894:	dd800617 	ldw	r22,24(sp)
   16898:	dd400517 	ldw	r21,20(sp)
   1689c:	dd000417 	ldw	r20,16(sp)
   168a0:	dcc00317 	ldw	r19,12(sp)
   168a4:	dc800217 	ldw	r18,8(sp)
   168a8:	dc400117 	ldw	r17,4(sp)
   168ac:	dc000017 	ldw	r16,0(sp)
   168b0:	dec00904 	addi	sp,sp,36
   168b4:	f800283a 	ret

000168b8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   168b8:	defff804 	addi	sp,sp,-32
   168bc:	dfc00715 	stw	ra,28(sp)
   168c0:	df000615 	stw	fp,24(sp)
   168c4:	df000604 	addi	fp,sp,24
   168c8:	e13ffc15 	stw	r4,-16(fp)
   168cc:	e17ffd15 	stw	r5,-12(fp)
   168d0:	e1bffe15 	stw	r6,-8(fp)
   168d4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   168d8:	e0800417 	ldw	r2,16(fp)
   168dc:	d8800115 	stw	r2,4(sp)
   168e0:	e0800317 	ldw	r2,12(fp)
   168e4:	d8800015 	stw	r2,0(sp)
   168e8:	e1fffe17 	ldw	r7,-8(fp)
   168ec:	e1bfff17 	ldw	r6,-4(fp)
   168f0:	e17ffd17 	ldw	r5,-12(fp)
   168f4:	e13ffc17 	ldw	r4,-16(fp)
   168f8:	001641c0 	call	1641c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   168fc:	e0800417 	ldw	r2,16(fp)
   16900:	d8800115 	stw	r2,4(sp)
   16904:	e0800317 	ldw	r2,12(fp)
   16908:	d8800015 	stw	r2,0(sp)
   1690c:	e1c00217 	ldw	r7,8(fp)
   16910:	e1bfff17 	ldw	r6,-4(fp)
   16914:	e17ffd17 	ldw	r5,-12(fp)
   16918:	e13ffc17 	ldw	r4,-16(fp)
   1691c:	001641c0 	call	1641c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   16920:	e0800417 	ldw	r2,16(fp)
   16924:	d8800115 	stw	r2,4(sp)
   16928:	e0800317 	ldw	r2,12(fp)
   1692c:	d8800015 	stw	r2,0(sp)
   16930:	e1c00217 	ldw	r7,8(fp)
   16934:	e1bffe17 	ldw	r6,-8(fp)
   16938:	e17ffd17 	ldw	r5,-12(fp)
   1693c:	e13ffc17 	ldw	r4,-16(fp)
   16940:	001664c0 	call	1664c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   16944:	e0800417 	ldw	r2,16(fp)
   16948:	d8800115 	stw	r2,4(sp)
   1694c:	e0800317 	ldw	r2,12(fp)
   16950:	d8800015 	stw	r2,0(sp)
   16954:	e1c00217 	ldw	r7,8(fp)
   16958:	e1bffe17 	ldw	r6,-8(fp)
   1695c:	e17fff17 	ldw	r5,-4(fp)
   16960:	e13ffc17 	ldw	r4,-16(fp)
   16964:	001664c0 	call	1664c <alt_up_pixel_buffer_dma_draw_vline>
}
   16968:	0001883a 	nop
   1696c:	e037883a 	mov	sp,fp
   16970:	dfc00117 	ldw	ra,4(sp)
   16974:	df000017 	ldw	fp,0(sp)
   16978:	dec00204 	addi	sp,sp,8
   1697c:	f800283a 	ret

00016980 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   16980:	defffb04 	addi	sp,sp,-20
   16984:	dfc00415 	stw	ra,16(sp)
   16988:	df000315 	stw	fp,12(sp)
   1698c:	dc800215 	stw	r18,8(sp)
   16990:	dc400115 	stw	r17,4(sp)
   16994:	dc000015 	stw	r16,0(sp)
   16998:	df000304 	addi	fp,sp,12
   1699c:	2021883a 	mov	r16,r4
   169a0:	2807883a 	mov	r3,r5
   169a4:	3023883a 	mov	r17,r6
   169a8:	3809883a 	mov	r4,r7
   169ac:	e4800217 	ldw	r18,8(fp)
   169b0:	e0800317 	ldw	r2,12(fp)
	if (mode == 0)
   169b4:	1000071e 	bne	r2,zero,169d4 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   169b8:	200b883a 	mov	r5,r4
   169bc:	1809883a 	mov	r4,r3
   169c0:	00015680 	call	1568 <__mulsi3>
   169c4:	1445883a 	add	r2,r2,r17
   169c8:	1405883a 	add	r2,r2,r16
   169cc:	14800025 	stbio	r18,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
   169d0:	00001206 	br	16a1c <helper_plot_pixel+0x9c>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
   169d4:	10800058 	cmpnei	r2,r2,1
   169d8:	1000081e 	bne	r2,zero,169fc <helper_plot_pixel+0x7c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   169dc:	200b883a 	mov	r5,r4
   169e0:	1809883a 	mov	r4,r3
   169e4:	00015680 	call	1568 <__mulsi3>
   169e8:	1445883a 	add	r2,r2,r17
   169ec:	1085883a 	add	r2,r2,r2
   169f0:	1405883a 	add	r2,r2,r16
   169f4:	1480002d 	sthio	r18,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
   169f8:	00000806 	br	16a1c <helper_plot_pixel+0x9c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   169fc:	200b883a 	mov	r5,r4
   16a00:	1809883a 	mov	r4,r3
   16a04:	00015680 	call	1568 <__mulsi3>
   16a08:	1445883a 	add	r2,r2,r17
   16a0c:	1085883a 	add	r2,r2,r2
   16a10:	1085883a 	add	r2,r2,r2
   16a14:	1405883a 	add	r2,r2,r16
   16a18:	14800035 	stwio	r18,0(r2)
}
   16a1c:	0001883a 	nop
   16a20:	e6fffd04 	addi	sp,fp,-12
   16a24:	dfc00417 	ldw	ra,16(sp)
   16a28:	df000317 	ldw	fp,12(sp)
   16a2c:	dc800217 	ldw	r18,8(sp)
   16a30:	dc400117 	ldw	r17,4(sp)
   16a34:	dc000017 	ldw	r16,0(sp)
   16a38:	dec00504 	addi	sp,sp,20
   16a3c:	f800283a 	ret

00016a40 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   16a40:	deffeb04 	addi	sp,sp,-84
   16a44:	dfc01415 	stw	ra,80(sp)
   16a48:	df001315 	stw	fp,76(sp)
   16a4c:	ddc01215 	stw	r23,72(sp)
   16a50:	dd801115 	stw	r22,68(sp)
   16a54:	dd401015 	stw	r21,64(sp)
   16a58:	dd000f15 	stw	r20,60(sp)
   16a5c:	dcc00e15 	stw	r19,56(sp)
   16a60:	dc800d15 	stw	r18,52(sp)
   16a64:	dc400c15 	stw	r17,48(sp)
   16a68:	dc000b15 	stw	r16,44(sp)
   16a6c:	df001304 	addi	fp,sp,76
   16a70:	e13fef15 	stw	r4,-68(fp)
   16a74:	e17ff015 	stw	r5,-64(fp)
   16a78:	e1bff115 	stw	r6,-60(fp)
   16a7c:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
   16a80:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
   16a84:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
   16a88:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
   16a8c:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   16a90:	a4c5c83a 	sub	r2,r20,r19
   16a94:	1000010e 	bge	r2,zero,16a9c <alt_up_pixel_buffer_dma_draw_line+0x5c>
   16a98:	0085c83a 	sub	r2,zero,r2
   16a9c:	1007883a 	mov	r3,r2
   16aa0:	9445c83a 	sub	r2,r18,r17
   16aa4:	1000010e 	bge	r2,zero,16aac <alt_up_pixel_buffer_dma_draw_line+0x6c>
   16aa8:	0085c83a 	sub	r2,zero,r2
   16aac:	10c4803a 	cmplt	r2,r2,r3
   16ab0:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
   16ab4:	e0bfef17 	ldw	r2,-68(fp)
   16ab8:	10800e17 	ldw	r2,56(r2)
   16abc:	10800060 	cmpeqi	r2,r2,1
   16ac0:	1000081e 	bne	r2,zero,16ae4 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   16ac4:	e0bfef17 	ldw	r2,-68(fp)
   16ac8:	10800e17 	ldw	r2,56(r2)
   16acc:	10800098 	cmpnei	r2,r2,2
   16ad0:	1000021e 	bne	r2,zero,16adc <alt_up_pixel_buffer_dma_draw_line+0x9c>
   16ad4:	00800044 	movi	r2,1
   16ad8:	00000306 	br	16ae8 <alt_up_pixel_buffer_dma_draw_line+0xa8>
   16adc:	00800084 	movi	r2,2
   16ae0:	00000106 	br	16ae8 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
   16ae4:	0005883a 	mov	r2,zero
   16ae8:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
   16aec:	e0800317 	ldw	r2,12(fp)
   16af0:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   16af4:	e0bfef17 	ldw	r2,-68(fp)
   16af8:	10800d17 	ldw	r2,52(r2)
   16afc:	1000071e 	bne	r2,zero,16b1c <alt_up_pixel_buffer_dma_draw_line+0xdc>
   16b00:	e0bfef17 	ldw	r2,-68(fp)
   16b04:	10801317 	ldw	r2,76(r2)
   16b08:	e0fff417 	ldw	r3,-48(fp)
   16b0c:	10c5c83a 	sub	r2,r2,r3
   16b10:	00c00044 	movi	r3,1
   16b14:	1884983a 	sll	r2,r3,r2
   16b18:	00000206 	br	16b24 <alt_up_pixel_buffer_dma_draw_line+0xe4>
   16b1c:	e0bfef17 	ldw	r2,-68(fp)
   16b20:	10800f17 	ldw	r2,60(r2)
   16b24:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
   16b28:	e0800417 	ldw	r2,16(fp)
   16b2c:	10800058 	cmpnei	r2,r2,1
   16b30:	1000031e 	bne	r2,zero,16b40 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
   16b34:	e0bfef17 	ldw	r2,-68(fp)
   16b38:	15c00c17 	ldw	r23,48(r2)
   16b3c:	00000206 	br	16b48 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   16b40:	e0bfef17 	ldw	r2,-68(fp)
   16b44:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
   16b48:	e0bff307 	ldb	r2,-52(fp)
   16b4c:	0080060e 	bge	zero,r2,16b68 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
   16b50:	8821883a 	mov	r16,r17
		x_0 = y_0;
   16b54:	9823883a 	mov	r17,r19
		y_0 = error;
   16b58:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
   16b5c:	9021883a 	mov	r16,r18
		x_1 = y_1;
   16b60:	a025883a 	mov	r18,r20
		y_1 = error;
   16b64:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
   16b68:	9440060e 	bge	r18,r17,16b84 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
   16b6c:	8821883a 	mov	r16,r17
		x_0 = x_1;
   16b70:	9023883a 	mov	r17,r18
		x_1 = error;
   16b74:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
   16b78:	9821883a 	mov	r16,r19
		y_0 = y_1;
   16b7c:	a027883a 	mov	r19,r20
		y_1 = error;
   16b80:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   16b84:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
   16b88:	a4c5c83a 	sub	r2,r20,r19
   16b8c:	1000010e 	bge	r2,zero,16b94 <alt_up_pixel_buffer_dma_draw_line+0x154>
   16b90:	0085c83a 	sub	r2,zero,r2
   16b94:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
   16b98:	a804d7fa 	srli	r2,r21,31
   16b9c:	1545883a 	add	r2,r2,r21
   16ba0:	1005d07a 	srai	r2,r2,1
   16ba4:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
   16ba8:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
   16bac:	9d00020e 	bge	r19,r20,16bb8 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
   16bb0:	04c00044 	movi	r19,1
   16bb4:	00000106 	br	16bbc <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
   16bb8:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   16bbc:	e0bff307 	ldb	r2,-52(fp)
   16bc0:	10800058 	cmpnei	r2,r2,1
   16bc4:	1000211e 	bne	r2,zero,16c4c <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
   16bc8:	00000f06 	br	16c08 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   16bcc:	e0bff417 	ldw	r2,-48(fp)
   16bd0:	d8800115 	stw	r2,4(sp)
   16bd4:	e0bff517 	ldw	r2,-44(fp)
   16bd8:	d8800015 	stw	r2,0(sp)
   16bdc:	880f883a 	mov	r7,r17
   16be0:	b00d883a 	mov	r6,r22
   16be4:	e17ff617 	ldw	r5,-40(fp)
   16be8:	b809883a 	mov	r4,r23
   16bec:	00169800 	call	16980 <helper_plot_pixel>
			error = error + deltay;
   16bf0:	e0bff717 	ldw	r2,-36(fp)
   16bf4:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
   16bf8:	0400020e 	bge	zero,r16,16c04 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
   16bfc:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
   16c00:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   16c04:	8c400044 	addi	r17,r17,1
   16c08:	947ff00e 	bge	r18,r17,16bcc <__alt_mem_Onchip_SRAM+0xf8016bcc>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   16c0c:	00001006 	br	16c50 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   16c10:	e0bff417 	ldw	r2,-48(fp)
   16c14:	d8800115 	stw	r2,4(sp)
   16c18:	e0bff517 	ldw	r2,-44(fp)
   16c1c:	d8800015 	stw	r2,0(sp)
   16c20:	b00f883a 	mov	r7,r22
   16c24:	880d883a 	mov	r6,r17
   16c28:	e17ff617 	ldw	r5,-40(fp)
   16c2c:	b809883a 	mov	r4,r23
   16c30:	00169800 	call	16980 <helper_plot_pixel>
			error = error + deltay;
   16c34:	e0bff717 	ldw	r2,-36(fp)
   16c38:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
   16c3c:	0400020e 	bge	zero,r16,16c48 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
   16c40:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
   16c44:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   16c48:	8c400044 	addi	r17,r17,1
   16c4c:	947ff00e 	bge	r18,r17,16c10 <__alt_mem_Onchip_SRAM+0xf8016c10>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   16c50:	0001883a 	nop
   16c54:	e6fff804 	addi	sp,fp,-32
   16c58:	dfc00917 	ldw	ra,36(sp)
   16c5c:	df000817 	ldw	fp,32(sp)
   16c60:	ddc00717 	ldw	r23,28(sp)
   16c64:	dd800617 	ldw	r22,24(sp)
   16c68:	dd400517 	ldw	r21,20(sp)
   16c6c:	dd000417 	ldw	r20,16(sp)
   16c70:	dcc00317 	ldw	r19,12(sp)
   16c74:	dc800217 	ldw	r18,8(sp)
   16c78:	dc400117 	ldw	r17,4(sp)
   16c7c:	dc000017 	ldw	r16,0(sp)
   16c80:	dec00a04 	addi	sp,sp,40
   16c84:	f800283a 	ret

00016c88 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   16c88:	defff504 	addi	sp,sp,-44
   16c8c:	df000a15 	stw	fp,40(sp)
   16c90:	df000a04 	addi	fp,sp,40
   16c94:	e13ffc15 	stw	r4,-16(fp)
   16c98:	e17ffd15 	stw	r5,-12(fp)
   16c9c:	e1bffe15 	stw	r6,-8(fp)
   16ca0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   16ca4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   16ca8:	d0a74417 	ldw	r2,-25328(gp)
  
  if (alt_ticks_per_second ())
   16cac:	10003c26 	beq	r2,zero,16da0 <alt_alarm_start+0x118>
  {
    if (alarm)
   16cb0:	e0bffc17 	ldw	r2,-16(fp)
   16cb4:	10003826 	beq	r2,zero,16d98 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   16cb8:	e0bffc17 	ldw	r2,-16(fp)
   16cbc:	e0fffe17 	ldw	r3,-8(fp)
   16cc0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   16cc4:	e0bffc17 	ldw	r2,-16(fp)
   16cc8:	e0ffff17 	ldw	r3,-4(fp)
   16ccc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16cd0:	0005303a 	rdctl	r2,status
   16cd4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16cd8:	e0fff917 	ldw	r3,-28(fp)
   16cdc:	00bfff84 	movi	r2,-2
   16ce0:	1884703a 	and	r2,r3,r2
   16ce4:	1001703a 	wrctl	status,r2
  
  return context;
   16ce8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   16cec:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   16cf0:	d0a74517 	ldw	r2,-25324(gp)
      
      current_nticks = alt_nticks();
   16cf4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   16cf8:	e0fffd17 	ldw	r3,-12(fp)
   16cfc:	e0bff617 	ldw	r2,-40(fp)
   16d00:	1885883a 	add	r2,r3,r2
   16d04:	10c00044 	addi	r3,r2,1
   16d08:	e0bffc17 	ldw	r2,-16(fp)
   16d0c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   16d10:	e0bffc17 	ldw	r2,-16(fp)
   16d14:	10c00217 	ldw	r3,8(r2)
   16d18:	e0bff617 	ldw	r2,-40(fp)
   16d1c:	1880042e 	bgeu	r3,r2,16d30 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   16d20:	e0bffc17 	ldw	r2,-16(fp)
   16d24:	00c00044 	movi	r3,1
   16d28:	10c00405 	stb	r3,16(r2)
   16d2c:	00000206 	br	16d38 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   16d30:	e0bffc17 	ldw	r2,-16(fp)
   16d34:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   16d38:	e0bffc17 	ldw	r2,-16(fp)
   16d3c:	d0e01204 	addi	r3,gp,-32696
   16d40:	e0fffa15 	stw	r3,-24(fp)
   16d44:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16d48:	e0bffb17 	ldw	r2,-20(fp)
   16d4c:	e0fffa17 	ldw	r3,-24(fp)
   16d50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16d54:	e0bffa17 	ldw	r2,-24(fp)
   16d58:	10c00017 	ldw	r3,0(r2)
   16d5c:	e0bffb17 	ldw	r2,-20(fp)
   16d60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16d64:	e0bffa17 	ldw	r2,-24(fp)
   16d68:	10800017 	ldw	r2,0(r2)
   16d6c:	e0fffb17 	ldw	r3,-20(fp)
   16d70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16d74:	e0bffa17 	ldw	r2,-24(fp)
   16d78:	e0fffb17 	ldw	r3,-20(fp)
   16d7c:	10c00015 	stw	r3,0(r2)
   16d80:	e0bff817 	ldw	r2,-32(fp)
   16d84:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16d88:	e0bff717 	ldw	r2,-36(fp)
   16d8c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   16d90:	0005883a 	mov	r2,zero
   16d94:	00000306 	br	16da4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   16d98:	00bffa84 	movi	r2,-22
   16d9c:	00000106 	br	16da4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   16da0:	00bfde84 	movi	r2,-134
  }
}
   16da4:	e037883a 	mov	sp,fp
   16da8:	df000017 	ldw	fp,0(sp)
   16dac:	dec00104 	addi	sp,sp,4
   16db0:	f800283a 	ret

00016db4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   16db4:	defffa04 	addi	sp,sp,-24
   16db8:	dfc00515 	stw	ra,20(sp)
   16dbc:	df000415 	stw	fp,16(sp)
   16dc0:	df000404 	addi	fp,sp,16
   16dc4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   16dc8:	00800244 	movi	r2,9
   16dcc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   16dd0:	014003f4 	movhi	r5,15
   16dd4:	29509004 	addi	r5,r5,16960
   16dd8:	e13ffd17 	ldw	r4,-12(fp)
   16ddc:	00015680 	call	1568 <__mulsi3>
   16de0:	100b883a 	mov	r5,r2
   16de4:	01017db4 	movhi	r4,1526
   16de8:	21384004 	addi	r4,r4,-7936
   16dec:	00014ac0 	call	14ac <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   16df0:	100b883a 	mov	r5,r2
   16df4:	01200034 	movhi	r4,32768
   16df8:	213fffc4 	addi	r4,r4,-1
   16dfc:	00014ac0 	call	14ac <__udivsi3>
   16e00:	100b883a 	mov	r5,r2
   16e04:	e13fff17 	ldw	r4,-4(fp)
   16e08:	00014ac0 	call	14ac <__udivsi3>
   16e0c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   16e10:	e0bffe17 	ldw	r2,-8(fp)
   16e14:	10002a26 	beq	r2,zero,16ec0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   16e18:	e03ffc15 	stw	zero,-16(fp)
   16e1c:	00001706 	br	16e7c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   16e20:	00a00034 	movhi	r2,32768
   16e24:	10bfffc4 	addi	r2,r2,-1
   16e28:	10bfffc4 	addi	r2,r2,-1
   16e2c:	103ffe1e 	bne	r2,zero,16e28 <__alt_mem_Onchip_SRAM+0xf8016e28>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   16e30:	014003f4 	movhi	r5,15
   16e34:	29509004 	addi	r5,r5,16960
   16e38:	e13ffd17 	ldw	r4,-12(fp)
   16e3c:	00015680 	call	1568 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   16e40:	100b883a 	mov	r5,r2
   16e44:	01017db4 	movhi	r4,1526
   16e48:	21384004 	addi	r4,r4,-7936
   16e4c:	00014ac0 	call	14ac <__udivsi3>
   16e50:	100b883a 	mov	r5,r2
   16e54:	01200034 	movhi	r4,32768
   16e58:	213fffc4 	addi	r4,r4,-1
   16e5c:	00014ac0 	call	14ac <__udivsi3>
   16e60:	1007883a 	mov	r3,r2
   16e64:	e0bfff17 	ldw	r2,-4(fp)
   16e68:	10c5c83a 	sub	r2,r2,r3
   16e6c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   16e70:	e0bffc17 	ldw	r2,-16(fp)
   16e74:	10800044 	addi	r2,r2,1
   16e78:	e0bffc15 	stw	r2,-16(fp)
   16e7c:	e0fffc17 	ldw	r3,-16(fp)
   16e80:	e0bffe17 	ldw	r2,-8(fp)
   16e84:	18bfe616 	blt	r3,r2,16e20 <__alt_mem_Onchip_SRAM+0xf8016e20>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   16e88:	014003f4 	movhi	r5,15
   16e8c:	29509004 	addi	r5,r5,16960
   16e90:	e13ffd17 	ldw	r4,-12(fp)
   16e94:	00015680 	call	1568 <__mulsi3>
   16e98:	100b883a 	mov	r5,r2
   16e9c:	01017db4 	movhi	r4,1526
   16ea0:	21384004 	addi	r4,r4,-7936
   16ea4:	00014ac0 	call	14ac <__udivsi3>
   16ea8:	e17fff17 	ldw	r5,-4(fp)
   16eac:	1009883a 	mov	r4,r2
   16eb0:	00015680 	call	1568 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   16eb4:	10bfffc4 	addi	r2,r2,-1
   16eb8:	103ffe1e 	bne	r2,zero,16eb4 <__alt_mem_Onchip_SRAM+0xf8016eb4>
   16ebc:	00000d06 	br	16ef4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   16ec0:	014003f4 	movhi	r5,15
   16ec4:	29509004 	addi	r5,r5,16960
   16ec8:	e13ffd17 	ldw	r4,-12(fp)
   16ecc:	00015680 	call	1568 <__mulsi3>
   16ed0:	100b883a 	mov	r5,r2
   16ed4:	01017db4 	movhi	r4,1526
   16ed8:	21384004 	addi	r4,r4,-7936
   16edc:	00014ac0 	call	14ac <__udivsi3>
   16ee0:	e17fff17 	ldw	r5,-4(fp)
   16ee4:	1009883a 	mov	r4,r2
   16ee8:	00015680 	call	1568 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   16eec:	10bfffc4 	addi	r2,r2,-1
   16ef0:	00bffe16 	blt	zero,r2,16eec <__alt_mem_Onchip_SRAM+0xf8016eec>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   16ef4:	0005883a 	mov	r2,zero
}
   16ef8:	e037883a 	mov	sp,fp
   16efc:	dfc00117 	ldw	ra,4(sp)
   16f00:	df000017 	ldw	fp,0(sp)
   16f04:	dec00204 	addi	sp,sp,8
   16f08:	f800283a 	ret

00016f0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   16f0c:	deffff04 	addi	sp,sp,-4
   16f10:	df000015 	stw	fp,0(sp)
   16f14:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   16f18:	0001883a 	nop
   16f1c:	e037883a 	mov	sp,fp
   16f20:	df000017 	ldw	fp,0(sp)
   16f24:	dec00104 	addi	sp,sp,4
   16f28:	f800283a 	ret

00016f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16f2c:	defffe04 	addi	sp,sp,-8
   16f30:	dfc00115 	stw	ra,4(sp)
   16f34:	df000015 	stw	fp,0(sp)
   16f38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16f3c:	d0a01017 	ldw	r2,-32704(gp)
   16f40:	10000326 	beq	r2,zero,16f50 <alt_get_errno+0x24>
   16f44:	d0a01017 	ldw	r2,-32704(gp)
   16f48:	103ee83a 	callr	r2
   16f4c:	00000106 	br	16f54 <alt_get_errno+0x28>
   16f50:	d0a73904 	addi	r2,gp,-25372
}
   16f54:	e037883a 	mov	sp,fp
   16f58:	dfc00117 	ldw	ra,4(sp)
   16f5c:	df000017 	ldw	fp,0(sp)
   16f60:	dec00204 	addi	sp,sp,8
   16f64:	f800283a 	ret

00016f68 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   16f68:	defffa04 	addi	sp,sp,-24
   16f6c:	dfc00515 	stw	ra,20(sp)
   16f70:	df000415 	stw	fp,16(sp)
   16f74:	df000404 	addi	fp,sp,16
   16f78:	e13ffe15 	stw	r4,-8(fp)
   16f7c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16f80:	e0bffe17 	ldw	r2,-8(fp)
   16f84:	10000326 	beq	r2,zero,16f94 <alt_dev_llist_insert+0x2c>
   16f88:	e0bffe17 	ldw	r2,-8(fp)
   16f8c:	10800217 	ldw	r2,8(r2)
   16f90:	1000061e 	bne	r2,zero,16fac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   16f94:	0016f2c0 	call	16f2c <alt_get_errno>
   16f98:	1007883a 	mov	r3,r2
   16f9c:	00800584 	movi	r2,22
   16fa0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   16fa4:	00bffa84 	movi	r2,-22
   16fa8:	00001306 	br	16ff8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   16fac:	e0bffe17 	ldw	r2,-8(fp)
   16fb0:	e0ffff17 	ldw	r3,-4(fp)
   16fb4:	e0fffc15 	stw	r3,-16(fp)
   16fb8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16fbc:	e0bffd17 	ldw	r2,-12(fp)
   16fc0:	e0fffc17 	ldw	r3,-16(fp)
   16fc4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16fc8:	e0bffc17 	ldw	r2,-16(fp)
   16fcc:	10c00017 	ldw	r3,0(r2)
   16fd0:	e0bffd17 	ldw	r2,-12(fp)
   16fd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16fd8:	e0bffc17 	ldw	r2,-16(fp)
   16fdc:	10800017 	ldw	r2,0(r2)
   16fe0:	e0fffd17 	ldw	r3,-12(fp)
   16fe4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16fe8:	e0bffc17 	ldw	r2,-16(fp)
   16fec:	e0fffd17 	ldw	r3,-12(fp)
   16ff0:	10c00015 	stw	r3,0(r2)

  return 0;  
   16ff4:	0005883a 	mov	r2,zero
}
   16ff8:	e037883a 	mov	sp,fp
   16ffc:	dfc00117 	ldw	ra,4(sp)
   17000:	df000017 	ldw	fp,0(sp)
   17004:	dec00204 	addi	sp,sp,8
   17008:	f800283a 	ret

0001700c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1700c:	defffd04 	addi	sp,sp,-12
   17010:	dfc00215 	stw	ra,8(sp)
   17014:	df000115 	stw	fp,4(sp)
   17018:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1701c:	008000b4 	movhi	r2,2
   17020:	10a07b04 	addi	r2,r2,-32276
   17024:	e0bfff15 	stw	r2,-4(fp)
   17028:	00000606 	br	17044 <_do_ctors+0x38>
        (*ctor) (); 
   1702c:	e0bfff17 	ldw	r2,-4(fp)
   17030:	10800017 	ldw	r2,0(r2)
   17034:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   17038:	e0bfff17 	ldw	r2,-4(fp)
   1703c:	10bfff04 	addi	r2,r2,-4
   17040:	e0bfff15 	stw	r2,-4(fp)
   17044:	e0ffff17 	ldw	r3,-4(fp)
   17048:	008000b4 	movhi	r2,2
   1704c:	10a07c04 	addi	r2,r2,-32272
   17050:	18bff62e 	bgeu	r3,r2,1702c <__alt_mem_Onchip_SRAM+0xf801702c>
        (*ctor) (); 
}
   17054:	0001883a 	nop
   17058:	e037883a 	mov	sp,fp
   1705c:	dfc00117 	ldw	ra,4(sp)
   17060:	df000017 	ldw	fp,0(sp)
   17064:	dec00204 	addi	sp,sp,8
   17068:	f800283a 	ret

0001706c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1706c:	defffd04 	addi	sp,sp,-12
   17070:	dfc00215 	stw	ra,8(sp)
   17074:	df000115 	stw	fp,4(sp)
   17078:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1707c:	008000b4 	movhi	r2,2
   17080:	10a07b04 	addi	r2,r2,-32276
   17084:	e0bfff15 	stw	r2,-4(fp)
   17088:	00000606 	br	170a4 <_do_dtors+0x38>
        (*dtor) (); 
   1708c:	e0bfff17 	ldw	r2,-4(fp)
   17090:	10800017 	ldw	r2,0(r2)
   17094:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   17098:	e0bfff17 	ldw	r2,-4(fp)
   1709c:	10bfff04 	addi	r2,r2,-4
   170a0:	e0bfff15 	stw	r2,-4(fp)
   170a4:	e0ffff17 	ldw	r3,-4(fp)
   170a8:	008000b4 	movhi	r2,2
   170ac:	10a07c04 	addi	r2,r2,-32272
   170b0:	18bff62e 	bgeu	r3,r2,1708c <__alt_mem_Onchip_SRAM+0xf801708c>
        (*dtor) (); 
}
   170b4:	0001883a 	nop
   170b8:	e037883a 	mov	sp,fp
   170bc:	dfc00117 	ldw	ra,4(sp)
   170c0:	df000017 	ldw	fp,0(sp)
   170c4:	dec00204 	addi	sp,sp,8
   170c8:	f800283a 	ret

000170cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   170cc:	defffa04 	addi	sp,sp,-24
   170d0:	dfc00515 	stw	ra,20(sp)
   170d4:	df000415 	stw	fp,16(sp)
   170d8:	df000404 	addi	fp,sp,16
   170dc:	e13ffe15 	stw	r4,-8(fp)
   170e0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   170e4:	e0bfff17 	ldw	r2,-4(fp)
   170e8:	10800017 	ldw	r2,0(r2)
   170ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   170f0:	e13ffe17 	ldw	r4,-8(fp)
   170f4:	00020540 	call	2054 <strlen>
   170f8:	10800044 	addi	r2,r2,1
   170fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17100:	00000d06 	br	17138 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   17104:	e0bffc17 	ldw	r2,-16(fp)
   17108:	10800217 	ldw	r2,8(r2)
   1710c:	e0fffd17 	ldw	r3,-12(fp)
   17110:	180d883a 	mov	r6,r3
   17114:	e17ffe17 	ldw	r5,-8(fp)
   17118:	1009883a 	mov	r4,r2
   1711c:	0017d400 	call	17d40 <memcmp>
   17120:	1000021e 	bne	r2,zero,1712c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   17124:	e0bffc17 	ldw	r2,-16(fp)
   17128:	00000706 	br	17148 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1712c:	e0bffc17 	ldw	r2,-16(fp)
   17130:	10800017 	ldw	r2,0(r2)
   17134:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17138:	e0fffc17 	ldw	r3,-16(fp)
   1713c:	e0bfff17 	ldw	r2,-4(fp)
   17140:	18bff01e 	bne	r3,r2,17104 <__alt_mem_Onchip_SRAM+0xf8017104>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   17144:	0005883a 	mov	r2,zero
}
   17148:	e037883a 	mov	sp,fp
   1714c:	dfc00117 	ldw	ra,4(sp)
   17150:	df000017 	ldw	fp,0(sp)
   17154:	dec00204 	addi	sp,sp,8
   17158:	f800283a 	ret

0001715c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1715c:	deffff04 	addi	sp,sp,-4
   17160:	df000015 	stw	fp,0(sp)
   17164:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   17168:	0001883a 	nop
   1716c:	e037883a 	mov	sp,fp
   17170:	df000017 	ldw	fp,0(sp)
   17174:	dec00104 	addi	sp,sp,4
   17178:	f800283a 	ret

0001717c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1717c:	defff904 	addi	sp,sp,-28
   17180:	dfc00615 	stw	ra,24(sp)
   17184:	df000515 	stw	fp,20(sp)
   17188:	df000504 	addi	fp,sp,20
   1718c:	e13ffc15 	stw	r4,-16(fp)
   17190:	e17ffd15 	stw	r5,-12(fp)
   17194:	e1bffe15 	stw	r6,-8(fp)
   17198:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1719c:	e0800217 	ldw	r2,8(fp)
   171a0:	d8800015 	stw	r2,0(sp)
   171a4:	e1ffff17 	ldw	r7,-4(fp)
   171a8:	e1bffe17 	ldw	r6,-8(fp)
   171ac:	e17ffd17 	ldw	r5,-12(fp)
   171b0:	e13ffc17 	ldw	r4,-16(fp)
   171b4:	001732c0 	call	1732c <alt_iic_isr_register>
}  
   171b8:	e037883a 	mov	sp,fp
   171bc:	dfc00117 	ldw	ra,4(sp)
   171c0:	df000017 	ldw	fp,0(sp)
   171c4:	dec00204 	addi	sp,sp,8
   171c8:	f800283a 	ret

000171cc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   171cc:	defff904 	addi	sp,sp,-28
   171d0:	df000615 	stw	fp,24(sp)
   171d4:	df000604 	addi	fp,sp,24
   171d8:	e13ffe15 	stw	r4,-8(fp)
   171dc:	e17fff15 	stw	r5,-4(fp)
   171e0:	e0bfff17 	ldw	r2,-4(fp)
   171e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171e8:	0005303a 	rdctl	r2,status
   171ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171f0:	e0fffb17 	ldw	r3,-20(fp)
   171f4:	00bfff84 	movi	r2,-2
   171f8:	1884703a 	and	r2,r3,r2
   171fc:	1001703a 	wrctl	status,r2
  
  return context;
   17200:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   17204:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   17208:	00c00044 	movi	r3,1
   1720c:	e0bffa17 	ldw	r2,-24(fp)
   17210:	1884983a 	sll	r2,r3,r2
   17214:	1007883a 	mov	r3,r2
   17218:	d0a74617 	ldw	r2,-25320(gp)
   1721c:	1884b03a 	or	r2,r3,r2
   17220:	d0a74615 	stw	r2,-25320(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   17224:	d0a74617 	ldw	r2,-25320(gp)
   17228:	100170fa 	wrctl	ienable,r2
   1722c:	e0bffc17 	ldw	r2,-16(fp)
   17230:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17234:	e0bffd17 	ldw	r2,-12(fp)
   17238:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1723c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   17240:	0001883a 	nop
}
   17244:	e037883a 	mov	sp,fp
   17248:	df000017 	ldw	fp,0(sp)
   1724c:	dec00104 	addi	sp,sp,4
   17250:	f800283a 	ret

00017254 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   17254:	defff904 	addi	sp,sp,-28
   17258:	df000615 	stw	fp,24(sp)
   1725c:	df000604 	addi	fp,sp,24
   17260:	e13ffe15 	stw	r4,-8(fp)
   17264:	e17fff15 	stw	r5,-4(fp)
   17268:	e0bfff17 	ldw	r2,-4(fp)
   1726c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17270:	0005303a 	rdctl	r2,status
   17274:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17278:	e0fffb17 	ldw	r3,-20(fp)
   1727c:	00bfff84 	movi	r2,-2
   17280:	1884703a 	and	r2,r3,r2
   17284:	1001703a 	wrctl	status,r2
  
  return context;
   17288:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1728c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   17290:	00c00044 	movi	r3,1
   17294:	e0bffa17 	ldw	r2,-24(fp)
   17298:	1884983a 	sll	r2,r3,r2
   1729c:	0084303a 	nor	r2,zero,r2
   172a0:	1007883a 	mov	r3,r2
   172a4:	d0a74617 	ldw	r2,-25320(gp)
   172a8:	1884703a 	and	r2,r3,r2
   172ac:	d0a74615 	stw	r2,-25320(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   172b0:	d0a74617 	ldw	r2,-25320(gp)
   172b4:	100170fa 	wrctl	ienable,r2
   172b8:	e0bffc17 	ldw	r2,-16(fp)
   172bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   172c0:	e0bffd17 	ldw	r2,-12(fp)
   172c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   172c8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   172cc:	0001883a 	nop
}
   172d0:	e037883a 	mov	sp,fp
   172d4:	df000017 	ldw	fp,0(sp)
   172d8:	dec00104 	addi	sp,sp,4
   172dc:	f800283a 	ret

000172e0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   172e0:	defffc04 	addi	sp,sp,-16
   172e4:	df000315 	stw	fp,12(sp)
   172e8:	df000304 	addi	fp,sp,12
   172ec:	e13ffe15 	stw	r4,-8(fp)
   172f0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   172f4:	000530fa 	rdctl	r2,ienable
   172f8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   172fc:	00c00044 	movi	r3,1
   17300:	e0bfff17 	ldw	r2,-4(fp)
   17304:	1884983a 	sll	r2,r3,r2
   17308:	1007883a 	mov	r3,r2
   1730c:	e0bffd17 	ldw	r2,-12(fp)
   17310:	1884703a 	and	r2,r3,r2
   17314:	1004c03a 	cmpne	r2,r2,zero
   17318:	10803fcc 	andi	r2,r2,255
}
   1731c:	e037883a 	mov	sp,fp
   17320:	df000017 	ldw	fp,0(sp)
   17324:	dec00104 	addi	sp,sp,4
   17328:	f800283a 	ret

0001732c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1732c:	defff504 	addi	sp,sp,-44
   17330:	dfc00a15 	stw	ra,40(sp)
   17334:	df000915 	stw	fp,36(sp)
   17338:	df000904 	addi	fp,sp,36
   1733c:	e13ffc15 	stw	r4,-16(fp)
   17340:	e17ffd15 	stw	r5,-12(fp)
   17344:	e1bffe15 	stw	r6,-8(fp)
   17348:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1734c:	00bffa84 	movi	r2,-22
   17350:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   17354:	e0bffd17 	ldw	r2,-12(fp)
   17358:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1735c:	e0bff817 	ldw	r2,-32(fp)
   17360:	10800808 	cmpgei	r2,r2,32
   17364:	1000271e 	bne	r2,zero,17404 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17368:	0005303a 	rdctl	r2,status
   1736c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17370:	e0fffb17 	ldw	r3,-20(fp)
   17374:	00bfff84 	movi	r2,-2
   17378:	1884703a 	and	r2,r3,r2
   1737c:	1001703a 	wrctl	status,r2
  
  return context;
   17380:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   17384:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   17388:	008000b4 	movhi	r2,2
   1738c:	10b01d04 	addi	r2,r2,-16268
   17390:	e0fff817 	ldw	r3,-32(fp)
   17394:	180690fa 	slli	r3,r3,3
   17398:	10c5883a 	add	r2,r2,r3
   1739c:	e0fffe17 	ldw	r3,-8(fp)
   173a0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   173a4:	008000b4 	movhi	r2,2
   173a8:	10b01d04 	addi	r2,r2,-16268
   173ac:	e0fff817 	ldw	r3,-32(fp)
   173b0:	180690fa 	slli	r3,r3,3
   173b4:	10c5883a 	add	r2,r2,r3
   173b8:	10800104 	addi	r2,r2,4
   173bc:	e0ffff17 	ldw	r3,-4(fp)
   173c0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   173c4:	e0bffe17 	ldw	r2,-8(fp)
   173c8:	10000526 	beq	r2,zero,173e0 <alt_iic_isr_register+0xb4>
   173cc:	e0bff817 	ldw	r2,-32(fp)
   173d0:	100b883a 	mov	r5,r2
   173d4:	e13ffc17 	ldw	r4,-16(fp)
   173d8:	00171cc0 	call	171cc <alt_ic_irq_enable>
   173dc:	00000406 	br	173f0 <alt_iic_isr_register+0xc4>
   173e0:	e0bff817 	ldw	r2,-32(fp)
   173e4:	100b883a 	mov	r5,r2
   173e8:	e13ffc17 	ldw	r4,-16(fp)
   173ec:	00172540 	call	17254 <alt_ic_irq_disable>
   173f0:	e0bff715 	stw	r2,-36(fp)
   173f4:	e0bffa17 	ldw	r2,-24(fp)
   173f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   173fc:	e0bff917 	ldw	r2,-28(fp)
   17400:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   17404:	e0bff717 	ldw	r2,-36(fp)
}
   17408:	e037883a 	mov	sp,fp
   1740c:	dfc00117 	ldw	ra,4(sp)
   17410:	df000017 	ldw	fp,0(sp)
   17414:	dec00204 	addi	sp,sp,8
   17418:	f800283a 	ret

0001741c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1741c:	defff804 	addi	sp,sp,-32
   17420:	dfc00715 	stw	ra,28(sp)
   17424:	df000615 	stw	fp,24(sp)
   17428:	dc000515 	stw	r16,20(sp)
   1742c:	df000604 	addi	fp,sp,24
   17430:	e13ffb15 	stw	r4,-20(fp)
   17434:	e17ffc15 	stw	r5,-16(fp)
   17438:	e1bffd15 	stw	r6,-12(fp)
   1743c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   17440:	e1bffe17 	ldw	r6,-8(fp)
   17444:	e17ffd17 	ldw	r5,-12(fp)
   17448:	e13ffc17 	ldw	r4,-16(fp)
   1744c:	00176a40 	call	176a4 <open>
   17450:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   17454:	e0bffa17 	ldw	r2,-24(fp)
   17458:	10002216 	blt	r2,zero,174e4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1745c:	040000b4 	movhi	r16,2
   17460:	8423c304 	addi	r16,r16,-28916
   17464:	e0bffa17 	ldw	r2,-24(fp)
   17468:	01400304 	movi	r5,12
   1746c:	1009883a 	mov	r4,r2
   17470:	00015680 	call	1568 <__mulsi3>
   17474:	8085883a 	add	r2,r16,r2
   17478:	10c00017 	ldw	r3,0(r2)
   1747c:	e0bffb17 	ldw	r2,-20(fp)
   17480:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   17484:	040000b4 	movhi	r16,2
   17488:	8423c304 	addi	r16,r16,-28916
   1748c:	e0bffa17 	ldw	r2,-24(fp)
   17490:	01400304 	movi	r5,12
   17494:	1009883a 	mov	r4,r2
   17498:	00015680 	call	1568 <__mulsi3>
   1749c:	8085883a 	add	r2,r16,r2
   174a0:	10800104 	addi	r2,r2,4
   174a4:	10c00017 	ldw	r3,0(r2)
   174a8:	e0bffb17 	ldw	r2,-20(fp)
   174ac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   174b0:	040000b4 	movhi	r16,2
   174b4:	8423c304 	addi	r16,r16,-28916
   174b8:	e0bffa17 	ldw	r2,-24(fp)
   174bc:	01400304 	movi	r5,12
   174c0:	1009883a 	mov	r4,r2
   174c4:	00015680 	call	1568 <__mulsi3>
   174c8:	8085883a 	add	r2,r16,r2
   174cc:	10800204 	addi	r2,r2,8
   174d0:	10c00017 	ldw	r3,0(r2)
   174d4:	e0bffb17 	ldw	r2,-20(fp)
   174d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   174dc:	e13ffa17 	ldw	r4,-24(fp)
   174e0:	00127140 	call	12714 <alt_release_fd>
  }
} 
   174e4:	0001883a 	nop
   174e8:	e6ffff04 	addi	sp,fp,-4
   174ec:	dfc00217 	ldw	ra,8(sp)
   174f0:	df000117 	ldw	fp,4(sp)
   174f4:	dc000017 	ldw	r16,0(sp)
   174f8:	dec00304 	addi	sp,sp,12
   174fc:	f800283a 	ret

00017500 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   17500:	defffb04 	addi	sp,sp,-20
   17504:	dfc00415 	stw	ra,16(sp)
   17508:	df000315 	stw	fp,12(sp)
   1750c:	df000304 	addi	fp,sp,12
   17510:	e13ffd15 	stw	r4,-12(fp)
   17514:	e17ffe15 	stw	r5,-8(fp)
   17518:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1751c:	01c07fc4 	movi	r7,511
   17520:	01800044 	movi	r6,1
   17524:	e17ffd17 	ldw	r5,-12(fp)
   17528:	010000b4 	movhi	r4,2
   1752c:	2123c604 	addi	r4,r4,-28904
   17530:	001741c0 	call	1741c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   17534:	01c07fc4 	movi	r7,511
   17538:	000d883a 	mov	r6,zero
   1753c:	e17ffe17 	ldw	r5,-8(fp)
   17540:	010000b4 	movhi	r4,2
   17544:	2123c304 	addi	r4,r4,-28916
   17548:	001741c0 	call	1741c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1754c:	01c07fc4 	movi	r7,511
   17550:	01800044 	movi	r6,1
   17554:	e17fff17 	ldw	r5,-4(fp)
   17558:	010000b4 	movhi	r4,2
   1755c:	2123c904 	addi	r4,r4,-28892
   17560:	001741c0 	call	1741c <alt_open_fd>
}  
   17564:	0001883a 	nop
   17568:	e037883a 	mov	sp,fp
   1756c:	dfc00117 	ldw	ra,4(sp)
   17570:	df000017 	ldw	fp,0(sp)
   17574:	dec00204 	addi	sp,sp,8
   17578:	f800283a 	ret

0001757c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1757c:	defffe04 	addi	sp,sp,-8
   17580:	dfc00115 	stw	ra,4(sp)
   17584:	df000015 	stw	fp,0(sp)
   17588:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1758c:	d0a01017 	ldw	r2,-32704(gp)
   17590:	10000326 	beq	r2,zero,175a0 <alt_get_errno+0x24>
   17594:	d0a01017 	ldw	r2,-32704(gp)
   17598:	103ee83a 	callr	r2
   1759c:	00000106 	br	175a4 <alt_get_errno+0x28>
   175a0:	d0a73904 	addi	r2,gp,-25372
}
   175a4:	e037883a 	mov	sp,fp
   175a8:	dfc00117 	ldw	ra,4(sp)
   175ac:	df000017 	ldw	fp,0(sp)
   175b0:	dec00204 	addi	sp,sp,8
   175b4:	f800283a 	ret

000175b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   175b8:	defffb04 	addi	sp,sp,-20
   175bc:	dfc00415 	stw	ra,16(sp)
   175c0:	df000315 	stw	fp,12(sp)
   175c4:	dc000215 	stw	r16,8(sp)
   175c8:	df000304 	addi	fp,sp,12
   175cc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   175d0:	e0bffe17 	ldw	r2,-8(fp)
   175d4:	10800217 	ldw	r2,8(r2)
   175d8:	10d00034 	orhi	r3,r2,16384
   175dc:	e0bffe17 	ldw	r2,-8(fp)
   175e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   175e4:	e03ffd15 	stw	zero,-12(fp)
   175e8:	00002306 	br	17678 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   175ec:	040000b4 	movhi	r16,2
   175f0:	8423c304 	addi	r16,r16,-28916
   175f4:	e0bffd17 	ldw	r2,-12(fp)
   175f8:	01400304 	movi	r5,12
   175fc:	1009883a 	mov	r4,r2
   17600:	00015680 	call	1568 <__mulsi3>
   17604:	8085883a 	add	r2,r16,r2
   17608:	10c00017 	ldw	r3,0(r2)
   1760c:	e0bffe17 	ldw	r2,-8(fp)
   17610:	10800017 	ldw	r2,0(r2)
   17614:	1880151e 	bne	r3,r2,1766c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17618:	040000b4 	movhi	r16,2
   1761c:	8423c304 	addi	r16,r16,-28916
   17620:	e0bffd17 	ldw	r2,-12(fp)
   17624:	01400304 	movi	r5,12
   17628:	1009883a 	mov	r4,r2
   1762c:	00015680 	call	1568 <__mulsi3>
   17630:	8085883a 	add	r2,r16,r2
   17634:	10800204 	addi	r2,r2,8
   17638:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1763c:	10000b0e 	bge	r2,zero,1766c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   17640:	01400304 	movi	r5,12
   17644:	e13ffd17 	ldw	r4,-12(fp)
   17648:	00015680 	call	1568 <__mulsi3>
   1764c:	1007883a 	mov	r3,r2
   17650:	008000b4 	movhi	r2,2
   17654:	10a3c304 	addi	r2,r2,-28916
   17658:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1765c:	e0bffe17 	ldw	r2,-8(fp)
   17660:	18800226 	beq	r3,r2,1766c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   17664:	00bffcc4 	movi	r2,-13
   17668:	00000806 	br	1768c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1766c:	e0bffd17 	ldw	r2,-12(fp)
   17670:	10800044 	addi	r2,r2,1
   17674:	e0bffd15 	stw	r2,-12(fp)
   17678:	d0a00f17 	ldw	r2,-32708(gp)
   1767c:	1007883a 	mov	r3,r2
   17680:	e0bffd17 	ldw	r2,-12(fp)
   17684:	18bfd92e 	bgeu	r3,r2,175ec <__alt_mem_Onchip_SRAM+0xf80175ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   17688:	0005883a 	mov	r2,zero
}
   1768c:	e6ffff04 	addi	sp,fp,-4
   17690:	dfc00217 	ldw	ra,8(sp)
   17694:	df000117 	ldw	fp,4(sp)
   17698:	dc000017 	ldw	r16,0(sp)
   1769c:	dec00304 	addi	sp,sp,12
   176a0:	f800283a 	ret

000176a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   176a4:	defff604 	addi	sp,sp,-40
   176a8:	dfc00915 	stw	ra,36(sp)
   176ac:	df000815 	stw	fp,32(sp)
   176b0:	df000804 	addi	fp,sp,32
   176b4:	e13ffd15 	stw	r4,-12(fp)
   176b8:	e17ffe15 	stw	r5,-8(fp)
   176bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   176c0:	00bfffc4 	movi	r2,-1
   176c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   176c8:	00bffb44 	movi	r2,-19
   176cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   176d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   176d4:	d1600d04 	addi	r5,gp,-32716
   176d8:	e13ffd17 	ldw	r4,-12(fp)
   176dc:	00170cc0 	call	170cc <alt_find_dev>
   176e0:	e0bff815 	stw	r2,-32(fp)
   176e4:	e0bff817 	ldw	r2,-32(fp)
   176e8:	1000051e 	bne	r2,zero,17700 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   176ec:	e13ffd17 	ldw	r4,-12(fp)
   176f0:	0017a8c0 	call	17a8c <alt_find_file>
   176f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   176f8:	00800044 	movi	r2,1
   176fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   17700:	e0bff817 	ldw	r2,-32(fp)
   17704:	10002b26 	beq	r2,zero,177b4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   17708:	e13ff817 	ldw	r4,-32(fp)
   1770c:	0017b940 	call	17b94 <alt_get_fd>
   17710:	e0bff915 	stw	r2,-28(fp)
   17714:	e0bff917 	ldw	r2,-28(fp)
   17718:	1000030e 	bge	r2,zero,17728 <open+0x84>
    {
      status = index;
   1771c:	e0bff917 	ldw	r2,-28(fp)
   17720:	e0bffa15 	stw	r2,-24(fp)
   17724:	00002506 	br	177bc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   17728:	01400304 	movi	r5,12
   1772c:	e13ff917 	ldw	r4,-28(fp)
   17730:	00015680 	call	1568 <__mulsi3>
   17734:	1007883a 	mov	r3,r2
   17738:	008000b4 	movhi	r2,2
   1773c:	10a3c304 	addi	r2,r2,-28916
   17740:	1885883a 	add	r2,r3,r2
   17744:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   17748:	e0fffe17 	ldw	r3,-8(fp)
   1774c:	00900034 	movhi	r2,16384
   17750:	10bfffc4 	addi	r2,r2,-1
   17754:	1886703a 	and	r3,r3,r2
   17758:	e0bffc17 	ldw	r2,-16(fp)
   1775c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   17760:	e0bffb17 	ldw	r2,-20(fp)
   17764:	1000051e 	bne	r2,zero,1777c <open+0xd8>
   17768:	e13ffc17 	ldw	r4,-16(fp)
   1776c:	00175b80 	call	175b8 <alt_file_locked>
   17770:	e0bffa15 	stw	r2,-24(fp)
   17774:	e0bffa17 	ldw	r2,-24(fp)
   17778:	10001016 	blt	r2,zero,177bc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1777c:	e0bff817 	ldw	r2,-32(fp)
   17780:	10800317 	ldw	r2,12(r2)
   17784:	10000826 	beq	r2,zero,177a8 <open+0x104>
   17788:	e0bff817 	ldw	r2,-32(fp)
   1778c:	10800317 	ldw	r2,12(r2)
   17790:	e1ffff17 	ldw	r7,-4(fp)
   17794:	e1bffe17 	ldw	r6,-8(fp)
   17798:	e17ffd17 	ldw	r5,-12(fp)
   1779c:	e13ffc17 	ldw	r4,-16(fp)
   177a0:	103ee83a 	callr	r2
   177a4:	00000106 	br	177ac <open+0x108>
   177a8:	0005883a 	mov	r2,zero
   177ac:	e0bffa15 	stw	r2,-24(fp)
   177b0:	00000206 	br	177bc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   177b4:	00bffb44 	movi	r2,-19
   177b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   177bc:	e0bffa17 	ldw	r2,-24(fp)
   177c0:	1000090e 	bge	r2,zero,177e8 <open+0x144>
  {
    alt_release_fd (index);  
   177c4:	e13ff917 	ldw	r4,-28(fp)
   177c8:	00127140 	call	12714 <alt_release_fd>
    ALT_ERRNO = -status;
   177cc:	001757c0 	call	1757c <alt_get_errno>
   177d0:	1007883a 	mov	r3,r2
   177d4:	e0bffa17 	ldw	r2,-24(fp)
   177d8:	0085c83a 	sub	r2,zero,r2
   177dc:	18800015 	stw	r2,0(r3)
    return -1;
   177e0:	00bfffc4 	movi	r2,-1
   177e4:	00000106 	br	177ec <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   177e8:	e0bff917 	ldw	r2,-28(fp)
}
   177ec:	e037883a 	mov	sp,fp
   177f0:	dfc00117 	ldw	ra,4(sp)
   177f4:	df000017 	ldw	fp,0(sp)
   177f8:	dec00204 	addi	sp,sp,8
   177fc:	f800283a 	ret

00017800 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   17800:	defff204 	addi	sp,sp,-56
   17804:	dfc00a15 	stw	ra,40(sp)
   17808:	df000915 	stw	fp,36(sp)
   1780c:	df000904 	addi	fp,sp,36
   17810:	e13fff15 	stw	r4,-4(fp)
   17814:	e1400215 	stw	r5,8(fp)
   17818:	e1800315 	stw	r6,12(fp)
   1781c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   17820:	e0800204 	addi	r2,fp,8
   17824:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   17828:	e0bfff17 	ldw	r2,-4(fp)
   1782c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   17830:	00006f06 	br	179f0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   17834:	e0bff807 	ldb	r2,-32(fp)
   17838:	10800960 	cmpeqi	r2,r2,37
   1783c:	1000041e 	bne	r2,zero,17850 <alt_printf+0x50>
        {
            alt_putchar(c);
   17840:	e0bff807 	ldb	r2,-32(fp)
   17844:	1009883a 	mov	r4,r2
   17848:	0017a2c0 	call	17a2c <alt_putchar>
   1784c:	00006806 	br	179f0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   17850:	e0bff717 	ldw	r2,-36(fp)
   17854:	10c00044 	addi	r3,r2,1
   17858:	e0fff715 	stw	r3,-36(fp)
   1785c:	10800003 	ldbu	r2,0(r2)
   17860:	e0bff805 	stb	r2,-32(fp)
   17864:	e0bff807 	ldb	r2,-32(fp)
   17868:	10006926 	beq	r2,zero,17a10 <alt_printf+0x210>
            {
                if (c == '%')
   1786c:	e0bff807 	ldb	r2,-32(fp)
   17870:	10800958 	cmpnei	r2,r2,37
   17874:	1000041e 	bne	r2,zero,17888 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   17878:	e0bff807 	ldb	r2,-32(fp)
   1787c:	1009883a 	mov	r4,r2
   17880:	0017a2c0 	call	17a2c <alt_putchar>
   17884:	00005a06 	br	179f0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   17888:	e0bff807 	ldb	r2,-32(fp)
   1788c:	108018d8 	cmpnei	r2,r2,99
   17890:	1000081e 	bne	r2,zero,178b4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   17894:	e0bffe17 	ldw	r2,-8(fp)
   17898:	10c00104 	addi	r3,r2,4
   1789c:	e0fffe15 	stw	r3,-8(fp)
   178a0:	10800017 	ldw	r2,0(r2)
   178a4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   178a8:	e13ffd17 	ldw	r4,-12(fp)
   178ac:	0017a2c0 	call	17a2c <alt_putchar>
   178b0:	00004f06 	br	179f0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   178b4:	e0bff807 	ldb	r2,-32(fp)
   178b8:	10801e18 	cmpnei	r2,r2,120
   178bc:	1000341e 	bne	r2,zero,17990 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   178c0:	e0bffe17 	ldw	r2,-8(fp)
   178c4:	10c00104 	addi	r3,r2,4
   178c8:	e0fffe15 	stw	r3,-8(fp)
   178cc:	10800017 	ldw	r2,0(r2)
   178d0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   178d4:	e0bffb17 	ldw	r2,-20(fp)
   178d8:	1000031e 	bne	r2,zero,178e8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   178dc:	01000c04 	movi	r4,48
   178e0:	0017a2c0 	call	17a2c <alt_putchar>
                        continue;
   178e4:	00004206 	br	179f0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   178e8:	00800704 	movi	r2,28
   178ec:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   178f0:	00000306 	br	17900 <alt_printf+0x100>
                        digit_shift -= 4;
   178f4:	e0bff917 	ldw	r2,-28(fp)
   178f8:	10bfff04 	addi	r2,r2,-4
   178fc:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   17900:	00c003c4 	movi	r3,15
   17904:	e0bff917 	ldw	r2,-28(fp)
   17908:	1884983a 	sll	r2,r3,r2
   1790c:	1007883a 	mov	r3,r2
   17910:	e0bffb17 	ldw	r2,-20(fp)
   17914:	1884703a 	and	r2,r3,r2
   17918:	103ff626 	beq	r2,zero,178f4 <__alt_mem_Onchip_SRAM+0xf80178f4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   1791c:	00001906 	br	17984 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   17920:	00c003c4 	movi	r3,15
   17924:	e0bff917 	ldw	r2,-28(fp)
   17928:	1884983a 	sll	r2,r3,r2
   1792c:	1007883a 	mov	r3,r2
   17930:	e0bffb17 	ldw	r2,-20(fp)
   17934:	1886703a 	and	r3,r3,r2
   17938:	e0bff917 	ldw	r2,-28(fp)
   1793c:	1884d83a 	srl	r2,r3,r2
   17940:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   17944:	e0bffc17 	ldw	r2,-16(fp)
   17948:	108002a8 	cmpgeui	r2,r2,10
   1794c:	1000041e 	bne	r2,zero,17960 <alt_printf+0x160>
                            c = '0' + digit;
   17950:	e0bffc17 	ldw	r2,-16(fp)
   17954:	10800c04 	addi	r2,r2,48
   17958:	e0bff805 	stb	r2,-32(fp)
   1795c:	00000306 	br	1796c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   17960:	e0bffc17 	ldw	r2,-16(fp)
   17964:	108015c4 	addi	r2,r2,87
   17968:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   1796c:	e0bff807 	ldb	r2,-32(fp)
   17970:	1009883a 	mov	r4,r2
   17974:	0017a2c0 	call	17a2c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   17978:	e0bff917 	ldw	r2,-28(fp)
   1797c:	10bfff04 	addi	r2,r2,-4
   17980:	e0bff915 	stw	r2,-28(fp)
   17984:	e0bff917 	ldw	r2,-28(fp)
   17988:	103fe50e 	bge	r2,zero,17920 <__alt_mem_Onchip_SRAM+0xf8017920>
   1798c:	00001806 	br	179f0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   17990:	e0bff807 	ldb	r2,-32(fp)
   17994:	10801cd8 	cmpnei	r2,r2,115
   17998:	1000151e 	bne	r2,zero,179f0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   1799c:	e0bffe17 	ldw	r2,-8(fp)
   179a0:	10c00104 	addi	r3,r2,4
   179a4:	e0fffe15 	stw	r3,-8(fp)
   179a8:	10800017 	ldw	r2,0(r2)
   179ac:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   179b0:	00000906 	br	179d8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   179b4:	e0bffa17 	ldw	r2,-24(fp)
   179b8:	10c00044 	addi	r3,r2,1
   179bc:	e0fffa15 	stw	r3,-24(fp)
   179c0:	10800003 	ldbu	r2,0(r2)
   179c4:	10803fcc 	andi	r2,r2,255
   179c8:	1080201c 	xori	r2,r2,128
   179cc:	10bfe004 	addi	r2,r2,-128
   179d0:	1009883a 	mov	r4,r2
   179d4:	0017a2c0 	call	17a2c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   179d8:	e0bffa17 	ldw	r2,-24(fp)
   179dc:	10800003 	ldbu	r2,0(r2)
   179e0:	10803fcc 	andi	r2,r2,255
   179e4:	1080201c 	xori	r2,r2,128
   179e8:	10bfe004 	addi	r2,r2,-128
   179ec:	103ff11e 	bne	r2,zero,179b4 <__alt_mem_Onchip_SRAM+0xf80179b4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   179f0:	e0bff717 	ldw	r2,-36(fp)
   179f4:	10c00044 	addi	r3,r2,1
   179f8:	e0fff715 	stw	r3,-36(fp)
   179fc:	10800003 	ldbu	r2,0(r2)
   17a00:	e0bff805 	stb	r2,-32(fp)
   17a04:	e0bff807 	ldb	r2,-32(fp)
   17a08:	103f8a1e 	bne	r2,zero,17834 <__alt_mem_Onchip_SRAM+0xf8017834>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   17a0c:	00000106 	br	17a14 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   17a10:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   17a14:	0001883a 	nop
   17a18:	e037883a 	mov	sp,fp
   17a1c:	dfc00117 	ldw	ra,4(sp)
   17a20:	df000017 	ldw	fp,0(sp)
   17a24:	dec00504 	addi	sp,sp,20
   17a28:	f800283a 	ret

00017a2c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   17a2c:	defffd04 	addi	sp,sp,-12
   17a30:	dfc00215 	stw	ra,8(sp)
   17a34:	df000115 	stw	fp,4(sp)
   17a38:	df000104 	addi	fp,sp,4
   17a3c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   17a40:	d0a00817 	ldw	r2,-32736(gp)
   17a44:	10800217 	ldw	r2,8(r2)
   17a48:	100b883a 	mov	r5,r2
   17a4c:	e13fff17 	ldw	r4,-4(fp)
   17a50:	0017e5c0 	call	17e5c <putc>
#endif
#endif
}
   17a54:	e037883a 	mov	sp,fp
   17a58:	dfc00117 	ldw	ra,4(sp)
   17a5c:	df000017 	ldw	fp,0(sp)
   17a60:	dec00204 	addi	sp,sp,8
   17a64:	f800283a 	ret

00017a68 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   17a68:	deffff04 	addi	sp,sp,-4
   17a6c:	df000015 	stw	fp,0(sp)
   17a70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   17a74:	000170fa 	wrctl	ienable,zero
}
   17a78:	0001883a 	nop
   17a7c:	e037883a 	mov	sp,fp
   17a80:	df000017 	ldw	fp,0(sp)
   17a84:	dec00104 	addi	sp,sp,4
   17a88:	f800283a 	ret

00017a8c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   17a8c:	defffb04 	addi	sp,sp,-20
   17a90:	dfc00415 	stw	ra,16(sp)
   17a94:	df000315 	stw	fp,12(sp)
   17a98:	df000304 	addi	fp,sp,12
   17a9c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   17aa0:	d0a00b17 	ldw	r2,-32724(gp)
   17aa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17aa8:	00003106 	br	17b70 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   17aac:	e0bffd17 	ldw	r2,-12(fp)
   17ab0:	10800217 	ldw	r2,8(r2)
   17ab4:	1009883a 	mov	r4,r2
   17ab8:	00020540 	call	2054 <strlen>
   17abc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   17ac0:	e0bffd17 	ldw	r2,-12(fp)
   17ac4:	10c00217 	ldw	r3,8(r2)
   17ac8:	e0bffe17 	ldw	r2,-8(fp)
   17acc:	10bfffc4 	addi	r2,r2,-1
   17ad0:	1885883a 	add	r2,r3,r2
   17ad4:	10800003 	ldbu	r2,0(r2)
   17ad8:	10803fcc 	andi	r2,r2,255
   17adc:	1080201c 	xori	r2,r2,128
   17ae0:	10bfe004 	addi	r2,r2,-128
   17ae4:	10800bd8 	cmpnei	r2,r2,47
   17ae8:	1000031e 	bne	r2,zero,17af8 <alt_find_file+0x6c>
    {
      len -= 1;
   17aec:	e0bffe17 	ldw	r2,-8(fp)
   17af0:	10bfffc4 	addi	r2,r2,-1
   17af4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17af8:	e0bffe17 	ldw	r2,-8(fp)
   17afc:	e0ffff17 	ldw	r3,-4(fp)
   17b00:	1885883a 	add	r2,r3,r2
   17b04:	10800003 	ldbu	r2,0(r2)
   17b08:	10803fcc 	andi	r2,r2,255
   17b0c:	1080201c 	xori	r2,r2,128
   17b10:	10bfe004 	addi	r2,r2,-128
   17b14:	10800be0 	cmpeqi	r2,r2,47
   17b18:	1000081e 	bne	r2,zero,17b3c <alt_find_file+0xb0>
   17b1c:	e0bffe17 	ldw	r2,-8(fp)
   17b20:	e0ffff17 	ldw	r3,-4(fp)
   17b24:	1885883a 	add	r2,r3,r2
   17b28:	10800003 	ldbu	r2,0(r2)
   17b2c:	10803fcc 	andi	r2,r2,255
   17b30:	1080201c 	xori	r2,r2,128
   17b34:	10bfe004 	addi	r2,r2,-128
   17b38:	10000a1e 	bne	r2,zero,17b64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   17b3c:	e0bffd17 	ldw	r2,-12(fp)
   17b40:	10800217 	ldw	r2,8(r2)
   17b44:	e0fffe17 	ldw	r3,-8(fp)
   17b48:	180d883a 	mov	r6,r3
   17b4c:	e17fff17 	ldw	r5,-4(fp)
   17b50:	1009883a 	mov	r4,r2
   17b54:	0017d400 	call	17d40 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17b58:	1000021e 	bne	r2,zero,17b64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   17b5c:	e0bffd17 	ldw	r2,-12(fp)
   17b60:	00000706 	br	17b80 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   17b64:	e0bffd17 	ldw	r2,-12(fp)
   17b68:	10800017 	ldw	r2,0(r2)
   17b6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17b70:	e0fffd17 	ldw	r3,-12(fp)
   17b74:	d0a00b04 	addi	r2,gp,-32724
   17b78:	18bfcc1e 	bne	r3,r2,17aac <__alt_mem_Onchip_SRAM+0xf8017aac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   17b7c:	0005883a 	mov	r2,zero
}
   17b80:	e037883a 	mov	sp,fp
   17b84:	dfc00117 	ldw	ra,4(sp)
   17b88:	df000017 	ldw	fp,0(sp)
   17b8c:	dec00204 	addi	sp,sp,8
   17b90:	f800283a 	ret

00017b94 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   17b94:	defffa04 	addi	sp,sp,-24
   17b98:	dfc00515 	stw	ra,20(sp)
   17b9c:	df000415 	stw	fp,16(sp)
   17ba0:	dc000315 	stw	r16,12(sp)
   17ba4:	df000404 	addi	fp,sp,16
   17ba8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   17bac:	00bffa04 	movi	r2,-24
   17bb0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17bb4:	e03ffc15 	stw	zero,-16(fp)
   17bb8:	00001d06 	br	17c30 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   17bbc:	040000b4 	movhi	r16,2
   17bc0:	8423c304 	addi	r16,r16,-28916
   17bc4:	e0bffc17 	ldw	r2,-16(fp)
   17bc8:	01400304 	movi	r5,12
   17bcc:	1009883a 	mov	r4,r2
   17bd0:	00015680 	call	1568 <__mulsi3>
   17bd4:	8085883a 	add	r2,r16,r2
   17bd8:	10800017 	ldw	r2,0(r2)
   17bdc:	1000111e 	bne	r2,zero,17c24 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   17be0:	040000b4 	movhi	r16,2
   17be4:	8423c304 	addi	r16,r16,-28916
   17be8:	e0bffc17 	ldw	r2,-16(fp)
   17bec:	01400304 	movi	r5,12
   17bf0:	1009883a 	mov	r4,r2
   17bf4:	00015680 	call	1568 <__mulsi3>
   17bf8:	8085883a 	add	r2,r16,r2
   17bfc:	e0fffe17 	ldw	r3,-8(fp)
   17c00:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   17c04:	d0e00f17 	ldw	r3,-32708(gp)
   17c08:	e0bffc17 	ldw	r2,-16(fp)
   17c0c:	1880020e 	bge	r3,r2,17c18 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   17c10:	e0bffc17 	ldw	r2,-16(fp)
   17c14:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
   17c18:	e0bffc17 	ldw	r2,-16(fp)
   17c1c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   17c20:	00000606 	br	17c3c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17c24:	e0bffc17 	ldw	r2,-16(fp)
   17c28:	10800044 	addi	r2,r2,1
   17c2c:	e0bffc15 	stw	r2,-16(fp)
   17c30:	e0bffc17 	ldw	r2,-16(fp)
   17c34:	10800810 	cmplti	r2,r2,32
   17c38:	103fe01e 	bne	r2,zero,17bbc <__alt_mem_Onchip_SRAM+0xf8017bbc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   17c3c:	e0bffd17 	ldw	r2,-12(fp)
}
   17c40:	e6ffff04 	addi	sp,fp,-4
   17c44:	dfc00217 	ldw	ra,8(sp)
   17c48:	df000117 	ldw	fp,4(sp)
   17c4c:	dc000017 	ldw	r16,0(sp)
   17c50:	dec00304 	addi	sp,sp,12
   17c54:	f800283a 	ret

00017c58 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   17c58:	defffe04 	addi	sp,sp,-8
   17c5c:	df000115 	stw	fp,4(sp)
   17c60:	df000104 	addi	fp,sp,4
   17c64:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   17c68:	e0bfff17 	ldw	r2,-4(fp)
   17c6c:	10bffe84 	addi	r2,r2,-6
   17c70:	10c00428 	cmpgeui	r3,r2,16
   17c74:	18001a1e 	bne	r3,zero,17ce0 <alt_exception_cause_generated_bad_addr+0x88>
   17c78:	100690ba 	slli	r3,r2,2
   17c7c:	00800074 	movhi	r2,1
   17c80:	109f2404 	addi	r2,r2,31888
   17c84:	1885883a 	add	r2,r3,r2
   17c88:	10800017 	ldw	r2,0(r2)
   17c8c:	1000683a 	jmp	r2
   17c90:	00017cd0 	cmplti	zero,zero,1523
   17c94:	00017cd0 	cmplti	zero,zero,1523
   17c98:	00017ce0 	cmpeqi	zero,zero,1523
   17c9c:	00017ce0 	cmpeqi	zero,zero,1523
   17ca0:	00017ce0 	cmpeqi	zero,zero,1523
   17ca4:	00017cd0 	cmplti	zero,zero,1523
   17ca8:	00017cd8 	cmpnei	zero,zero,1523
   17cac:	00017ce0 	cmpeqi	zero,zero,1523
   17cb0:	00017cd0 	cmplti	zero,zero,1523
   17cb4:	00017cd0 	cmplti	zero,zero,1523
   17cb8:	00017ce0 	cmpeqi	zero,zero,1523
   17cbc:	00017cd0 	cmplti	zero,zero,1523
   17cc0:	00017cd8 	cmpnei	zero,zero,1523
   17cc4:	00017ce0 	cmpeqi	zero,zero,1523
   17cc8:	00017ce0 	cmpeqi	zero,zero,1523
   17ccc:	00017cd0 	cmplti	zero,zero,1523
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   17cd0:	00800044 	movi	r2,1
   17cd4:	00000306 	br	17ce4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   17cd8:	0005883a 	mov	r2,zero
   17cdc:	00000106 	br	17ce4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   17ce0:	0005883a 	mov	r2,zero
  }
}
   17ce4:	e037883a 	mov	sp,fp
   17ce8:	df000017 	ldw	fp,0(sp)
   17cec:	dec00104 	addi	sp,sp,4
   17cf0:	f800283a 	ret

00017cf4 <atexit>:
   17cf4:	200b883a 	mov	r5,r4
   17cf8:	000f883a 	mov	r7,zero
   17cfc:	000d883a 	mov	r6,zero
   17d00:	0009883a 	mov	r4,zero
   17d04:	0017f241 	jmpi	17f24 <__register_exitproc>

00017d08 <exit>:
   17d08:	defffe04 	addi	sp,sp,-8
   17d0c:	000b883a 	mov	r5,zero
   17d10:	dc000015 	stw	r16,0(sp)
   17d14:	dfc00115 	stw	ra,4(sp)
   17d18:	2021883a 	mov	r16,r4
   17d1c:	001803c0 	call	1803c <__call_exitprocs>
   17d20:	008000b4 	movhi	r2,2
   17d24:	10a88204 	addi	r2,r2,-24056
   17d28:	11000017 	ldw	r4,0(r2)
   17d2c:	20800f17 	ldw	r2,60(r4)
   17d30:	10000126 	beq	r2,zero,17d38 <exit+0x30>
   17d34:	103ee83a 	callr	r2
   17d38:	8009883a 	mov	r4,r16
   17d3c:	00181bc0 	call	181bc <_exit>

00017d40 <memcmp>:
   17d40:	01c000c4 	movi	r7,3
   17d44:	3980192e 	bgeu	r7,r6,17dac <memcmp+0x6c>
   17d48:	2144b03a 	or	r2,r4,r5
   17d4c:	11c4703a 	and	r2,r2,r7
   17d50:	10000f26 	beq	r2,zero,17d90 <memcmp+0x50>
   17d54:	20800003 	ldbu	r2,0(r4)
   17d58:	28c00003 	ldbu	r3,0(r5)
   17d5c:	10c0151e 	bne	r2,r3,17db4 <memcmp+0x74>
   17d60:	31bfff84 	addi	r6,r6,-2
   17d64:	01ffffc4 	movi	r7,-1
   17d68:	00000406 	br	17d7c <memcmp+0x3c>
   17d6c:	20800003 	ldbu	r2,0(r4)
   17d70:	28c00003 	ldbu	r3,0(r5)
   17d74:	31bfffc4 	addi	r6,r6,-1
   17d78:	10c00e1e 	bne	r2,r3,17db4 <memcmp+0x74>
   17d7c:	21000044 	addi	r4,r4,1
   17d80:	29400044 	addi	r5,r5,1
   17d84:	31fff91e 	bne	r6,r7,17d6c <__alt_mem_Onchip_SRAM+0xf8017d6c>
   17d88:	0005883a 	mov	r2,zero
   17d8c:	f800283a 	ret
   17d90:	20c00017 	ldw	r3,0(r4)
   17d94:	28800017 	ldw	r2,0(r5)
   17d98:	18bfee1e 	bne	r3,r2,17d54 <__alt_mem_Onchip_SRAM+0xf8017d54>
   17d9c:	31bfff04 	addi	r6,r6,-4
   17da0:	21000104 	addi	r4,r4,4
   17da4:	29400104 	addi	r5,r5,4
   17da8:	39bff936 	bltu	r7,r6,17d90 <__alt_mem_Onchip_SRAM+0xf8017d90>
   17dac:	303fe91e 	bne	r6,zero,17d54 <__alt_mem_Onchip_SRAM+0xf8017d54>
   17db0:	003ff506 	br	17d88 <__alt_mem_Onchip_SRAM+0xf8017d88>
   17db4:	10c5c83a 	sub	r2,r2,r3
   17db8:	f800283a 	ret

00017dbc <_putc_r>:
   17dbc:	defffc04 	addi	sp,sp,-16
   17dc0:	dc000215 	stw	r16,8(sp)
   17dc4:	dfc00315 	stw	ra,12(sp)
   17dc8:	2021883a 	mov	r16,r4
   17dcc:	20000226 	beq	r4,zero,17dd8 <_putc_r+0x1c>
   17dd0:	20800e17 	ldw	r2,56(r4)
   17dd4:	10001b26 	beq	r2,zero,17e44 <_putc_r+0x88>
   17dd8:	30800217 	ldw	r2,8(r6)
   17ddc:	10bfffc4 	addi	r2,r2,-1
   17de0:	30800215 	stw	r2,8(r6)
   17de4:	10000a16 	blt	r2,zero,17e10 <_putc_r+0x54>
   17de8:	30800017 	ldw	r2,0(r6)
   17dec:	11400005 	stb	r5,0(r2)
   17df0:	30800017 	ldw	r2,0(r6)
   17df4:	10c00044 	addi	r3,r2,1
   17df8:	30c00015 	stw	r3,0(r6)
   17dfc:	10800003 	ldbu	r2,0(r2)
   17e00:	dfc00317 	ldw	ra,12(sp)
   17e04:	dc000217 	ldw	r16,8(sp)
   17e08:	dec00404 	addi	sp,sp,16
   17e0c:	f800283a 	ret
   17e10:	30c00617 	ldw	r3,24(r6)
   17e14:	10c00616 	blt	r2,r3,17e30 <_putc_r+0x74>
   17e18:	30800017 	ldw	r2,0(r6)
   17e1c:	00c00284 	movi	r3,10
   17e20:	11400005 	stb	r5,0(r2)
   17e24:	30800017 	ldw	r2,0(r6)
   17e28:	11400003 	ldbu	r5,0(r2)
   17e2c:	28fff11e 	bne	r5,r3,17df4 <__alt_mem_Onchip_SRAM+0xf8017df4>
   17e30:	8009883a 	mov	r4,r16
   17e34:	dfc00317 	ldw	ra,12(sp)
   17e38:	dc000217 	ldw	r16,8(sp)
   17e3c:	dec00404 	addi	sp,sp,16
   17e40:	000e54c1 	jmpi	e54c <__swbuf_r>
   17e44:	d9400015 	stw	r5,0(sp)
   17e48:	d9800115 	stw	r6,4(sp)
   17e4c:	00087b80 	call	87b8 <__sinit>
   17e50:	d9800117 	ldw	r6,4(sp)
   17e54:	d9400017 	ldw	r5,0(sp)
   17e58:	003fdf06 	br	17dd8 <__alt_mem_Onchip_SRAM+0xf8017dd8>

00017e5c <putc>:
   17e5c:	008000b4 	movhi	r2,2
   17e60:	defffc04 	addi	sp,sp,-16
   17e64:	10a88304 	addi	r2,r2,-24052
   17e68:	dc000115 	stw	r16,4(sp)
   17e6c:	14000017 	ldw	r16,0(r2)
   17e70:	dc400215 	stw	r17,8(sp)
   17e74:	dfc00315 	stw	ra,12(sp)
   17e78:	2023883a 	mov	r17,r4
   17e7c:	80000226 	beq	r16,zero,17e88 <putc+0x2c>
   17e80:	80800e17 	ldw	r2,56(r16)
   17e84:	10001a26 	beq	r2,zero,17ef0 <putc+0x94>
   17e88:	28800217 	ldw	r2,8(r5)
   17e8c:	10bfffc4 	addi	r2,r2,-1
   17e90:	28800215 	stw	r2,8(r5)
   17e94:	10000b16 	blt	r2,zero,17ec4 <putc+0x68>
   17e98:	28800017 	ldw	r2,0(r5)
   17e9c:	14400005 	stb	r17,0(r2)
   17ea0:	28800017 	ldw	r2,0(r5)
   17ea4:	10c00044 	addi	r3,r2,1
   17ea8:	28c00015 	stw	r3,0(r5)
   17eac:	10800003 	ldbu	r2,0(r2)
   17eb0:	dfc00317 	ldw	ra,12(sp)
   17eb4:	dc400217 	ldw	r17,8(sp)
   17eb8:	dc000117 	ldw	r16,4(sp)
   17ebc:	dec00404 	addi	sp,sp,16
   17ec0:	f800283a 	ret
   17ec4:	28c00617 	ldw	r3,24(r5)
   17ec8:	10c00e16 	blt	r2,r3,17f04 <putc+0xa8>
   17ecc:	28800017 	ldw	r2,0(r5)
   17ed0:	01000284 	movi	r4,10
   17ed4:	14400005 	stb	r17,0(r2)
   17ed8:	28800017 	ldw	r2,0(r5)
   17edc:	10c00003 	ldbu	r3,0(r2)
   17ee0:	193ff01e 	bne	r3,r4,17ea4 <__alt_mem_Onchip_SRAM+0xf8017ea4>
   17ee4:	280d883a 	mov	r6,r5
   17ee8:	180b883a 	mov	r5,r3
   17eec:	00000706 	br	17f0c <putc+0xb0>
   17ef0:	8009883a 	mov	r4,r16
   17ef4:	d9400015 	stw	r5,0(sp)
   17ef8:	00087b80 	call	87b8 <__sinit>
   17efc:	d9400017 	ldw	r5,0(sp)
   17f00:	003fe106 	br	17e88 <__alt_mem_Onchip_SRAM+0xf8017e88>
   17f04:	280d883a 	mov	r6,r5
   17f08:	880b883a 	mov	r5,r17
   17f0c:	8009883a 	mov	r4,r16
   17f10:	dfc00317 	ldw	ra,12(sp)
   17f14:	dc400217 	ldw	r17,8(sp)
   17f18:	dc000117 	ldw	r16,4(sp)
   17f1c:	dec00404 	addi	sp,sp,16
   17f20:	000e54c1 	jmpi	e54c <__swbuf_r>

00017f24 <__register_exitproc>:
   17f24:	defffa04 	addi	sp,sp,-24
   17f28:	dc000315 	stw	r16,12(sp)
   17f2c:	040000b4 	movhi	r16,2
   17f30:	84288204 	addi	r16,r16,-24056
   17f34:	80c00017 	ldw	r3,0(r16)
   17f38:	dc400415 	stw	r17,16(sp)
   17f3c:	dfc00515 	stw	ra,20(sp)
   17f40:	18805217 	ldw	r2,328(r3)
   17f44:	2023883a 	mov	r17,r4
   17f48:	10003726 	beq	r2,zero,18028 <__register_exitproc+0x104>
   17f4c:	10c00117 	ldw	r3,4(r2)
   17f50:	010007c4 	movi	r4,31
   17f54:	20c00e16 	blt	r4,r3,17f90 <__register_exitproc+0x6c>
   17f58:	1a000044 	addi	r8,r3,1
   17f5c:	8800221e 	bne	r17,zero,17fe8 <__register_exitproc+0xc4>
   17f60:	18c00084 	addi	r3,r3,2
   17f64:	18c7883a 	add	r3,r3,r3
   17f68:	18c7883a 	add	r3,r3,r3
   17f6c:	12000115 	stw	r8,4(r2)
   17f70:	10c7883a 	add	r3,r2,r3
   17f74:	19400015 	stw	r5,0(r3)
   17f78:	0005883a 	mov	r2,zero
   17f7c:	dfc00517 	ldw	ra,20(sp)
   17f80:	dc400417 	ldw	r17,16(sp)
   17f84:	dc000317 	ldw	r16,12(sp)
   17f88:	dec00604 	addi	sp,sp,24
   17f8c:	f800283a 	ret
   17f90:	00800034 	movhi	r2,0
   17f94:	10856404 	addi	r2,r2,5520
   17f98:	10002626 	beq	r2,zero,18034 <__register_exitproc+0x110>
   17f9c:	01006404 	movi	r4,400
   17fa0:	d9400015 	stw	r5,0(sp)
   17fa4:	d9800115 	stw	r6,4(sp)
   17fa8:	d9c00215 	stw	r7,8(sp)
   17fac:	00015900 	call	1590 <malloc>
   17fb0:	d9400017 	ldw	r5,0(sp)
   17fb4:	d9800117 	ldw	r6,4(sp)
   17fb8:	d9c00217 	ldw	r7,8(sp)
   17fbc:	10001d26 	beq	r2,zero,18034 <__register_exitproc+0x110>
   17fc0:	81000017 	ldw	r4,0(r16)
   17fc4:	10000115 	stw	zero,4(r2)
   17fc8:	02000044 	movi	r8,1
   17fcc:	22405217 	ldw	r9,328(r4)
   17fd0:	0007883a 	mov	r3,zero
   17fd4:	12400015 	stw	r9,0(r2)
   17fd8:	20805215 	stw	r2,328(r4)
   17fdc:	10006215 	stw	zero,392(r2)
   17fe0:	10006315 	stw	zero,396(r2)
   17fe4:	883fde26 	beq	r17,zero,17f60 <__alt_mem_Onchip_SRAM+0xf8017f60>
   17fe8:	18c9883a 	add	r4,r3,r3
   17fec:	2109883a 	add	r4,r4,r4
   17ff0:	1109883a 	add	r4,r2,r4
   17ff4:	21802215 	stw	r6,136(r4)
   17ff8:	01800044 	movi	r6,1
   17ffc:	12406217 	ldw	r9,392(r2)
   18000:	30cc983a 	sll	r6,r6,r3
   18004:	4992b03a 	or	r9,r9,r6
   18008:	12406215 	stw	r9,392(r2)
   1800c:	21c04215 	stw	r7,264(r4)
   18010:	01000084 	movi	r4,2
   18014:	893fd21e 	bne	r17,r4,17f60 <__alt_mem_Onchip_SRAM+0xf8017f60>
   18018:	11006317 	ldw	r4,396(r2)
   1801c:	218cb03a 	or	r6,r4,r6
   18020:	11806315 	stw	r6,396(r2)
   18024:	003fce06 	br	17f60 <__alt_mem_Onchip_SRAM+0xf8017f60>
   18028:	18805304 	addi	r2,r3,332
   1802c:	18805215 	stw	r2,328(r3)
   18030:	003fc606 	br	17f4c <__alt_mem_Onchip_SRAM+0xf8017f4c>
   18034:	00bfffc4 	movi	r2,-1
   18038:	003fd006 	br	17f7c <__alt_mem_Onchip_SRAM+0xf8017f7c>

0001803c <__call_exitprocs>:
   1803c:	defff504 	addi	sp,sp,-44
   18040:	df000915 	stw	fp,36(sp)
   18044:	dd400615 	stw	r21,24(sp)
   18048:	dc800315 	stw	r18,12(sp)
   1804c:	dfc00a15 	stw	ra,40(sp)
   18050:	ddc00815 	stw	r23,32(sp)
   18054:	dd800715 	stw	r22,28(sp)
   18058:	dd000515 	stw	r20,20(sp)
   1805c:	dcc00415 	stw	r19,16(sp)
   18060:	dc400215 	stw	r17,8(sp)
   18064:	dc000115 	stw	r16,4(sp)
   18068:	d9000015 	stw	r4,0(sp)
   1806c:	2839883a 	mov	fp,r5
   18070:	04800044 	movi	r18,1
   18074:	057fffc4 	movi	r21,-1
   18078:	008000b4 	movhi	r2,2
   1807c:	10a88204 	addi	r2,r2,-24056
   18080:	12000017 	ldw	r8,0(r2)
   18084:	45005217 	ldw	r20,328(r8)
   18088:	44c05204 	addi	r19,r8,328
   1808c:	a0001c26 	beq	r20,zero,18100 <__call_exitprocs+0xc4>
   18090:	a0800117 	ldw	r2,4(r20)
   18094:	15ffffc4 	addi	r23,r2,-1
   18098:	b8000d16 	blt	r23,zero,180d0 <__call_exitprocs+0x94>
   1809c:	14000044 	addi	r16,r2,1
   180a0:	8421883a 	add	r16,r16,r16
   180a4:	8421883a 	add	r16,r16,r16
   180a8:	84402004 	addi	r17,r16,128
   180ac:	a463883a 	add	r17,r20,r17
   180b0:	a421883a 	add	r16,r20,r16
   180b4:	e0001e26 	beq	fp,zero,18130 <__call_exitprocs+0xf4>
   180b8:	80804017 	ldw	r2,256(r16)
   180bc:	e0801c26 	beq	fp,r2,18130 <__call_exitprocs+0xf4>
   180c0:	bdffffc4 	addi	r23,r23,-1
   180c4:	843fff04 	addi	r16,r16,-4
   180c8:	8c7fff04 	addi	r17,r17,-4
   180cc:	bd7ff91e 	bne	r23,r21,180b4 <__alt_mem_Onchip_SRAM+0xf80180b4>
   180d0:	00800034 	movhi	r2,0
   180d4:	10856904 	addi	r2,r2,5540
   180d8:	10000926 	beq	r2,zero,18100 <__call_exitprocs+0xc4>
   180dc:	a0800117 	ldw	r2,4(r20)
   180e0:	1000301e 	bne	r2,zero,181a4 <__call_exitprocs+0x168>
   180e4:	a0800017 	ldw	r2,0(r20)
   180e8:	10003226 	beq	r2,zero,181b4 <__call_exitprocs+0x178>
   180ec:	a009883a 	mov	r4,r20
   180f0:	98800015 	stw	r2,0(r19)
   180f4:	00015a40 	call	15a4 <free>
   180f8:	9d000017 	ldw	r20,0(r19)
   180fc:	a03fe41e 	bne	r20,zero,18090 <__alt_mem_Onchip_SRAM+0xf8018090>
   18100:	dfc00a17 	ldw	ra,40(sp)
   18104:	df000917 	ldw	fp,36(sp)
   18108:	ddc00817 	ldw	r23,32(sp)
   1810c:	dd800717 	ldw	r22,28(sp)
   18110:	dd400617 	ldw	r21,24(sp)
   18114:	dd000517 	ldw	r20,20(sp)
   18118:	dcc00417 	ldw	r19,16(sp)
   1811c:	dc800317 	ldw	r18,12(sp)
   18120:	dc400217 	ldw	r17,8(sp)
   18124:	dc000117 	ldw	r16,4(sp)
   18128:	dec00b04 	addi	sp,sp,44
   1812c:	f800283a 	ret
   18130:	a0800117 	ldw	r2,4(r20)
   18134:	80c00017 	ldw	r3,0(r16)
   18138:	10bfffc4 	addi	r2,r2,-1
   1813c:	15c01426 	beq	r2,r23,18190 <__call_exitprocs+0x154>
   18140:	80000015 	stw	zero,0(r16)
   18144:	183fde26 	beq	r3,zero,180c0 <__alt_mem_Onchip_SRAM+0xf80180c0>
   18148:	95c8983a 	sll	r4,r18,r23
   1814c:	a0806217 	ldw	r2,392(r20)
   18150:	a5800117 	ldw	r22,4(r20)
   18154:	2084703a 	and	r2,r4,r2
   18158:	10000b26 	beq	r2,zero,18188 <__call_exitprocs+0x14c>
   1815c:	a0806317 	ldw	r2,396(r20)
   18160:	2088703a 	and	r4,r4,r2
   18164:	20000c1e 	bne	r4,zero,18198 <__call_exitprocs+0x15c>
   18168:	89400017 	ldw	r5,0(r17)
   1816c:	d9000017 	ldw	r4,0(sp)
   18170:	183ee83a 	callr	r3
   18174:	a0800117 	ldw	r2,4(r20)
   18178:	15bfbf1e 	bne	r2,r22,18078 <__alt_mem_Onchip_SRAM+0xf8018078>
   1817c:	98800017 	ldw	r2,0(r19)
   18180:	153fcf26 	beq	r2,r20,180c0 <__alt_mem_Onchip_SRAM+0xf80180c0>
   18184:	003fbc06 	br	18078 <__alt_mem_Onchip_SRAM+0xf8018078>
   18188:	183ee83a 	callr	r3
   1818c:	003ff906 	br	18174 <__alt_mem_Onchip_SRAM+0xf8018174>
   18190:	a5c00115 	stw	r23,4(r20)
   18194:	003feb06 	br	18144 <__alt_mem_Onchip_SRAM+0xf8018144>
   18198:	89000017 	ldw	r4,0(r17)
   1819c:	183ee83a 	callr	r3
   181a0:	003ff406 	br	18174 <__alt_mem_Onchip_SRAM+0xf8018174>
   181a4:	a0800017 	ldw	r2,0(r20)
   181a8:	a027883a 	mov	r19,r20
   181ac:	1029883a 	mov	r20,r2
   181b0:	003fb606 	br	1808c <__alt_mem_Onchip_SRAM+0xf801808c>
   181b4:	0005883a 	mov	r2,zero
   181b8:	003ffb06 	br	181a8 <__alt_mem_Onchip_SRAM+0xf80181a8>

000181bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   181bc:	defffd04 	addi	sp,sp,-12
   181c0:	df000215 	stw	fp,8(sp)
   181c4:	df000204 	addi	fp,sp,8
   181c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   181cc:	0001883a 	nop
   181d0:	e0bfff17 	ldw	r2,-4(fp)
   181d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   181d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   181dc:	10000226 	beq	r2,zero,181e8 <_exit+0x2c>
    ALT_SIM_FAIL();
   181e0:	002af070 	cmpltui	zero,zero,43969
   181e4:	00000106 	br	181ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   181e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   181ec:	003fff06 	br	181ec <__alt_mem_Onchip_SRAM+0xf80181ec>
